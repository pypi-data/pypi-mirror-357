[project]
name = "vfx-mcp"
version = "0.1.0"
description = "Video editing MCP server using FastMCP and ffmpeg-python"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Conner Ohnesorge", email = "conneroisu@outlook.com"}
]
maintainers = [
    {name = "Conner Ohnesorge", email = "conneroisu@outlook.com"}
]
keywords = ["mcp", "video-editing", "ffmpeg", "ai", "automation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Multimedia :: Video",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Framework :: FastAPI",
]
requires-python = ">=3.13"
dependencies = [
    "fastmcp>=2.9.0",
    "ffmpeg-python>=0.2.0",
]

[project.urls]
Homepage = "https://github.com/conneroisu/vfx-mcp"
Repository = "https://github.com/conneroisu/vfx-mcp"
Documentation = "https://github.com/conneroisu/vfx-mcp#readme"
Issues = "https://github.com/conneroisu/vfx-mcp/issues"

[project.scripts]
vfx-mcp = "vfx_mcp.core.server:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "numpy>=1.24.0",  # For test fixture generation
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/vfx_mcp"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.ruff]
target-version = "py313"
line-length = 88
lint.select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "UP", # pyupgrade
    "C4", # flake8-comprehensions
]
lint.ignore = []

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["F841"]  # Allow unused variables in tests

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.coverage.run]
source = ["src", "main.py"]
omit = ["*/tests/*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
]

[dependency-groups]
dev = [
    "build>=1.2.2.post1",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.0",
]
