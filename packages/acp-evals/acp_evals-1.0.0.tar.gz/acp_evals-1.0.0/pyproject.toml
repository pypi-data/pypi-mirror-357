[project]
name = "acp-evals"
version = "1.0.0"
description = "Production-grade evaluation framework for Agent Communication Protocol (ACP) agents"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "Apache-2.0"}
authors = [
    {name = "Jarrod Barnes", email = "jbarnes850@gmail.com"}
]
keywords = ["acp", "agents", "evaluation", "testing", "ai", "llm", "performance", "quality", "reliability"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Testing",
    "Topic :: System :: Benchmark",
]

dependencies = [
    "acp-sdk>=0.1.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0", 
    "rich>=13.0.0",
    "tiktoken>=0.5.0",
    "pydantic>=2.0.0",
    "httpx>=0.24.0",
    "asyncio>=3.4.3",
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "opentelemetry-exporter-otlp-proto-http>=1.20.0",
    "click>=8.0.0",
    "python-dotenv>=1.0.0",  # For loading .env files
]

[project.optional-dependencies]
# LLM providers (install only what you need)
openai = ["openai>=1.0.0"]
anthropic = ["anthropic>=0.21.0"]
all-providers = ["openai>=1.0.0", "anthropic>=0.21.0"]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "pyright>=1.1.0",
    "pytest-cov>=4.1.0",
]

[project.urls]
Homepage = "https://github.com/jbarnes850/acp-evals"
Documentation = "https://github.com/jbarnes850/acp-evals/tree/main/docs"
Repository = "https://github.com/jbarnes850/acp-evals"
Issues = "https://github.com/jbarnes850/acp-evals/issues"

[project.scripts]
acp-evals = "acp_evals.cli.main:cli"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/acp_evals"]

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W", "UP"]
ignore = [
    "E501",  # Line too long
    "F401",  # Unused imports (common in __init__.py for public API)
    "E402",  # Module level import not at top (sometimes needed for conditional imports)
    "N803",  # Argument name should be lowercase (mathematical variables often use caps)
    "N806",  # Variable in function should be lowercase (mathematical variables)
    "E741",  # Ambiguous variable name (single letters common in math/algorithms)
]

[tool.pyright]
include = ["src"]
pythonVersion = "3.11"
typeCheckingMode = "basic"
reportMissingImports = false
reportMissingTypeStubs = false
reportUnknownVariableType = false
reportUnknownMemberType = false
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownParameterType = false

