import React, { Component } from 'react';
import managers from './Managers';

/**
 * ButtPlugSettingsComponent - âœ… REFACTORISÃ‰: RÃ©actif aux Ã©vÃ©nements
 * Plus de props redondantes, accÃ¨s direct aux managers + Ã©vÃ©nements
 */
class ButtPlugSettingsComponent extends Component {
  constructor(props) {
    super(props);
    
    this.state = {
      isAutoConnecting: false,
      renderTrigger: 0  // âœ… NOUVEAU: Trigger pour re-render
    };
    
    this.managersListener = null;
  }

  componentDidMount() {
    // âœ… NOUVEAU: Ã‰couter les Ã©vÃ©nements pour re-render
    this.managersListener = managers.addListener(this.handleManagerEvent);
  }

  componentWillUnmount() {
    if (this.managersListener) {
      this.managersListener();
    }
  }

  // ============================================================================
  // âœ… NOUVEAU: GESTION D'Ã‰VÃ‰NEMENTS
  // ============================================================================

  handleManagerEvent = (event, data) => {
    // âœ… NOUVEAU: Re-render sur Ã©vÃ©nements qui impactent ce composant
    const eventsToReact = [
      'buttplug:connection',     // Ã‰tat de connexion changÃ©
      'buttplug:device',         // Device sÃ©lectionnÃ© changÃ©
      'funscript:load',          // Funscript chargÃ© (impact les boutons)
      'funscript:channels',      // Canaux changÃ©s (impact les boutons)
      'managers:autoConnect'     // AutoConnect terminÃ©
    ];
    
    if (eventsToReact.some(e => event.startsWith(e.split(':')[0]))) {
      // âœ… Trigger re-render via setState
      this.setState(prevState => ({ 
        renderTrigger: prevState.renderTrigger + 1 
      }));
      
      // âœ… NOUVEAU: GÃ©rer la fin d'autoConnect
      if (event === 'managers:autoConnect') {
        this.setState({ isAutoConnecting: false });
      }
    }
  }

  // ============================================================================
  // âœ… NOUVEAU: GETTERS - AccÃ¨s direct aux managers (remplace les props)
  // ============================================================================

  getButtPlugStatus = () => {
    // âœ… AccÃ¨s direct via la propriÃ©tÃ© computed du manager
    return this.buttplug?.getStatus() || { isConnected: false };
  }

  getFunscriptChannels = () => {
    const funscript = managers.getFunscript();
    return funscript?.getChannels() || [];
  }

  getDevices = () => {
    return this.buttplug?.getDevices() || [];
  }

  getSelectedDevice = () => {
    return this.buttplug?.getSelected() || null;
  }

  // âœ… NOUVEAU: PropriÃ©tÃ© computed pour buttplug (avec cache)
  get buttplug() {
    return managers.buttplug;
  }

  // ============================================================================
  // âœ… MODIFIÃ‰: ACTIONS - Appels directs au lieu de callbacks props
  // ============================================================================



  handleAutoConnect = async () => {
    if (this.state.isAutoConnecting) return;

    this.setState({ isAutoConnecting: true });
    
    try {
      // âœ… MODIFIÃ‰: Appel direct Ã  managers au lieu de prop callback
      await managers.autoConnect(3000);
      // âœ… L'Ã©vÃ©nement 'managers:autoConnect' gÃ©rera le setState isAutoConnecting
      
    } catch (error) {
      console.error('AutoConnect failed:', error);
      this.setState({ isAutoConnecting: false });
    }
  }

  handleDisconnect = async () => {
    try {
      // âœ… MODIFIÃ‰: AccÃ¨s direct via propriÃ©tÃ© computed
      if (this.buttplug) {
        await this.buttplug.disconnect();
        // âœ… L'Ã©vÃ©nement 'buttplug:connection' sera dÃ©clenchÃ© automatiquement
      }
    } catch (error) {
      console.error('Disconnect failed:', error);
    }
  }

  handleDeviceChange = async (deviceIndex) => {
    try {
      // âœ… MODIFIÃ‰: AccÃ¨s direct via propriÃ©tÃ© computed  
      if (this.buttplug) {
        const numericIndex = deviceIndex === '' ? null : parseInt(deviceIndex);
        const success = this.buttplug.selectDevice(numericIndex);
        
        if (success && numericIndex !== null) {
          // Auto-map aprÃ¨s sÃ©lection
          managers.autoMapChannels();
          // âœ… Les Ã©vÃ©nements 'buttplug:device' et 'managers:autoMap' seront dÃ©clenchÃ©s
        }
      }
    } catch (error) {
      console.error('Device selection failed:', error);
    }
  }

  // ============================================================================
  // âœ… MODIFIÃ‰: RENDER - Utilise les getters au lieu des props
  // ============================================================================

  render() {
    const { 
      onToggleSettings, 
      isSettingsExpanded 
    } = this.props;
    
    // âœ… MODIFIÃ‰: DonnÃ©es rÃ©cupÃ©rÃ©es via getters au lieu de props
    const { isAutoConnecting } = this.state;
    const buttplugStatus = this.getButtPlugStatus();
    const funscriptChannels = this.getFunscriptChannels();
    const devices = this.getDevices();
    const selectedDevice = this.getSelectedDevice();
    
    const isConnected = buttplugStatus?.isConnected || false;
    
    return (
      <div className="fp-section-compact fp-layout-horizontal">
        
        {/* Status + Device info */}
        <div className="fp-layout-row fp-flex">
          <span className="fp-status-dot">
            {isConnected ? 'ðŸŸ¢' : 'ðŸ”´'}
          </span>
          <span className="fp-label fp-device-name">
            {selectedDevice?.name || 'No device'}
          </span>
          {funscriptChannels.length === 0 && (
            <span className="fp-unit" style={{ opacity: 0.5 }}>
              No haptic
            </span>
          )}
        </div>
        
        {/* Actions */}
        <div className="fp-layout-row fp-no-shrink">
          
          {/* Connect/Disconnect */}
          {!isConnected ? (
            <button 
              className="fp-btn fp-btn-primary"
              onClick={this.handleAutoConnect}
              disabled={isAutoConnecting || funscriptChannels.length === 0}
              title={funscriptChannels.length === 0 ? "Load funscript first" : "Connect to Intiface Central"}
            >
              {isAutoConnecting ? (
                <>ðŸ”„ Connecting...</>
              ) : (
                <>ðŸ”Œ Connect</>
              )}
            </button>
          ) : (
            <button 
              className="fp-btn fp-btn-primary"
              onClick={this.handleDisconnect}
            >
              ðŸ”Œ Disconnect
            </button>
          )}
          
          {/* Device selector */}
          <select
            className="fp-input fp-select fp-min-width"
            value={selectedDevice?.index ?? ''}
            onChange={(e) => this.handleDeviceChange(e.target.value)}
            disabled={funscriptChannels.length === 0}
            title={funscriptChannels.length === 0 ? "Load funscript first" : "Select device"}
          >
            <option value="">Virtual</option>
            {devices.map(device => (
              <option key={device.index} value={device.index}>
                {device.name}
              </option>
            ))}
          </select>
          
          {/* Settings toggle */}
          {onToggleSettings && funscriptChannels.length > 0 && (
            <button 
              className="fp-btn fp-btn-ghost fp-chevron"
              onClick={onToggleSettings}
            >
              {isSettingsExpanded ? 'â–²' : 'â–¼'}
            </button>
          )}
          
        </div>
      </div>
    );
  }
}

export default ButtPlugSettingsComponent;