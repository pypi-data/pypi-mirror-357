[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "safla"
version = "0.1.3"
description = "Self-Aware Feedback Loop Algorithm - A sophisticated AI/ML system implementing autonomous learning and adaptation"
readme = "README.md"
license = "MIT"
authors = [
    {name = "SAFLA Development Team", email = "dev@safla.ai"}
]
maintainers = [
    {name = "SAFLA Development Team", email = "dev@safla.ai"}
]
keywords = [
    "ai", "machine-learning", "autonomous-systems", "meta-cognitive", 
    "memory-architecture", "safety-validation", "mcp", "self-aware"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing"
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "scikit-learn>=1.0.0",
    "asyncio-mqtt>=0.11.0",
    "aiohttp>=3.8.0",
    "pydantic>=1.8.0",
    "rich>=12.0.0",
    "tqdm>=4.64.0",
    "click>=8.0.0",
    "python-dotenv>=0.19.0",
    "psutil>=5.8.0",
    "networkx>=2.6.0",
    "faiss-cpu>=1.7.0",
    "transformers>=4.20.0",
    "torch>=1.12.0",
    "sentence-transformers>=2.2.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0"
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0"
]
gpu = [
    "faiss-gpu>=1.7.0",
    "torch>=1.12.0"
]
all = [
    "safla[dev,docs,gpu]"
]

[project.urls]
Homepage = "https://github.com/ruvnet/SAFLA"
Documentation = "https://safla.readthedocs.io"
Repository = "https://github.com/ruvnet/SAFLA"
"Bug Tracker" = "https://github.com/ruvnet/SAFLA/issues"
Changelog = "https://github.com/ruvnet/SAFLA/blob/main/CHANGELOG.md"

[project.scripts]
safla = "safla.cli:main"
safla-install = "safla.installer:main"

[project.entry-points."safla.plugins"]
memory = "safla.core.hybrid_memory:HybridMemoryArchitecture"
metacognitive = "safla.core.meta_cognitive_engine:MetaCognitiveEngine"
safety = "safla.core.safety_validation:SafetyValidationFramework"
mcp = "safla.core.mcp_orchestration:MCPOrchestrator"

[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
include = ["safla*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
safla = ["py.typed", "*.json", "*.yaml", "*.yml"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["safla"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

[tool.coverage.run]
source = ["safla"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]