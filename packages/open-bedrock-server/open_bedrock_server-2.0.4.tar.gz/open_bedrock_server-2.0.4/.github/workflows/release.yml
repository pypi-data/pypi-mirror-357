name: Release

on:
  release:
    types: [published]

permissions:
  contents: read
  id-token: write
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  pypi-publish:
    runs-on: ubuntu-latest
    
    environment:
      name: 'pypi'
      url: https://pypi.org/project/open-bedrock-server

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for setuptools-scm

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Extract version from tag
        id: version
        run: |
          # Get the release tag and remove 'v' prefix if present
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"
          
          # Debug git information
          echo "Git ref: $GITHUB_REF"
          echo "Git tags:"
          git tag --list
          echo "Current commit:"
          git log --oneline -1
          echo "setuptools-scm version detection:"
          python -m pip install setuptools-scm
          python -c "import setuptools_scm; print('Detected version:', setuptools_scm.get_version())"

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine setuptools-scm

      - name: Debug git and version info
        run: |
          echo "Git tags:"
          git tag --list
          echo "Current commit:"
          git log --oneline -1
          echo "Git describe:"
          git describe --tags --always || echo "No git describe available"
          echo "setuptools-scm version detection (before override):"
          python -c "import setuptools_scm; print('Auto-detected:', setuptools_scm.get_version())" || echo "setuptools-scm failed"

      - name: Create version file and build
        env:
          SETUPTOOLS_SCM_PRETEND_VERSION: ${{ steps.version.outputs.version }}
        run: |
          # Create explicit version file
          mkdir -p src/open_bedrock_server
          echo "# This file is automatically generated by the build process" > src/open_bedrock_server/_version.py
          echo "__version__ = \"${{ steps.version.outputs.version }}\"" >> src/open_bedrock_server/_version.py
          echo "version = __version__" >> src/open_bedrock_server/_version.py
          
          echo "Version file created:"
          cat src/open_bedrock_server/_version.py
          
          echo "Environment variable: $SETUPTOOLS_SCM_PRETEND_VERSION"
          echo "Verifying setuptools-scm with pretend version:"
          python -c "import setuptools_scm; print('Final version:', setuptools_scm.get_version())"
          
          # Ensure the version file is correctly written before building
          echo "Current _version.py content:"
          cat src/open_bedrock_server/_version.py
          
          # Try setting the environment variable for the entire shell session and building
          export SETUPTOOLS_SCM_PRETEND_VERSION="${{ steps.version.outputs.version }}"
          echo "After export, environment variable: $SETUPTOOLS_SCM_PRETEND_VERSION"
          
          # Build with debugging enabled
          SETUPTOOLS_SCM_DEBUG=1 python -m build --no-isolation
          
          echo "Built packages:"
          ls -la dist/
          echo "Package names show version:"
          find dist/ -name "*.whl" -o -name "*.tar.gz"

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          verbose: true
          attestations: false  # Disable attestations to avoid sigstore issues

  docker-publish:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          # Get the release tag and remove 'v' prefix if present
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version.outputs.version }} 