#!/usr/bin/env python3
"""
Additional tests for new manifest file parsers
"""

import unittest
import tempfile
import json
from pathlib import Path
from secscan import DependencyParser, Language, Dependency


class TestNewParsers(unittest.TestCase):
    """Test new manifest file parsers"""
    
    def test_parse_package_lock_json_v2(self):
        """Test parsing package-lock.json v2 format"""
        with tempfile.TemporaryDirectory() as tmpdir:
            lock_path = Path(tmpdir) / "package-lock.json"
            lock_data = {
                "name": "test-project",
                "version": "1.0.0",
                "lockfileVersion": 2,
                "packages": {
                    "": {
                        "name": "test-project",
                        "version": "1.0.0"
                    },
                    "node_modules/express": {
                        "version": "4.18.2",
                        "resolved": "https://registry.npmjs.org/express/-/express-4.18.2.tgz"
                    },
                    "node_modules/body-parser": {
                        "version": "1.20.1"
                    }
                }
            }
            lock_path.write_text(json.dumps(lock_data))
            
            deps = DependencyParser.parse_javascript(lock_path)
            self.assertEqual(len(deps), 2)
            
            dep_dict = {d.name: d.version for d in deps}
            self.assertEqual(dep_dict["express"], "4.18.2")
            self.assertEqual(dep_dict["body-parser"], "1.20.1")
    
    def test_parse_package_lock_json_v1(self):
        """Test parsing package-lock.json v1 format"""
        with tempfile.TemporaryDirectory() as tmpdir:
            lock_path = Path(tmpdir) / "package-lock.json"
            lock_data = {
                "name": "test-project",
                "version": "1.0.0",
                "lockfileVersion": 1,
                "dependencies": {
                    "axios": {
                        "version": "0.21.4",
                        "resolved": "https://registry.npmjs.org/axios/-/axios-0.21.4.tgz"
                    },
                    "lodash": {
                        "version": "4.17.21"
                    }
                }
            }
            lock_path.write_text(json.dumps(lock_data))
            
            deps = DependencyParser.parse_javascript(lock_path)
            self.assertEqual(len(deps), 2)
            
            dep_dict = {d.name: d.version for d in deps}
            self.assertEqual(dep_dict["axios"], "0.21.4")
            self.assertEqual(dep_dict["lodash"], "4.17.21")
    
    def test_parse_yarn_lock(self):
        """Test parsing yarn.lock"""
        with tempfile.TemporaryDirectory() as tmpdir:
            yarn_path = Path(tmpdir) / "yarn.lock"
            yarn_content = '''# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# yarn lockfile v1


"accepts@~1.3.8":
  version "1.3.8"
  resolved "https://registry.yarnpkg.com/accepts/-/accepts-1.3.8.tgz#0bf0be125b67014adcb0b0921e62db7bffe16b2e"
  dependencies:
    mime-types "~2.1.34"
    negotiator "0.6.3"

axios@^0.21.0, axios@^0.21.1:
  version "0.21.4"
  resolved "https://registry.yarnpkg.com/axios/-/axios-0.21.4.tgz#c67b90dc0568e5c1cf2b0b858c43ba28e2eda575"
  dependencies:
    follow-redirects "^1.14.0"

lodash@^4.17.19, lodash@^4.17.21:
  version "4.17.21"
  resolved "https://registry.yarnpkg.com/lodash/-/lodash-4.17.21.tgz#679591c564c3bffaae8454cf0b3df370c3d6911c"
'''
            yarn_path.write_text(yarn_content)
            
            deps = DependencyParser.parse_javascript(yarn_path)
            
            # Should have unique packages
            dep_names = [d.name for d in deps]
            self.assertIn("accepts", dep_names)
            self.assertIn("axios", dep_names)
            self.assertIn("lodash", dep_names)
            
            # Check versions
            dep_dict = {d.name: d.version for d in deps}
            self.assertEqual(dep_dict["accepts"], "1.3.8")
            self.assertEqual(dep_dict["axios"], "0.21.4")
            self.assertEqual(dep_dict["lodash"], "4.17.21")
    
    def test_parse_requirements_txt_pip_freeze(self):
        """Test parsing requirements.txt with pip freeze format"""
        with tempfile.TemporaryDirectory() as tmpdir:
            req_path = Path(tmpdir) / "requirements.txt"
            req_content = """# Generated by pip freeze
requests==2.28.1
Flask==2.2.2
numpy==1.23.5
pandas==1.5.2
Django==4.1.4
# Development dependencies
pytest==7.2.0
black==22.12.0
flake8==6.0.0
"""
            req_path.write_text(req_content)
            
            deps = DependencyParser.parse_python(req_path)
            self.assertEqual(len(deps), 8)
            
            # All should have exact versions
            for dep in deps:
                self.assertNotEqual(dep.version, "unknown")
            
            dep_dict = {d.name: d.version for d in deps}
            self.assertEqual(dep_dict["requests"], "2.28.1")
            self.assertEqual(dep_dict["Flask"], "2.2.2")
            self.assertEqual(dep_dict["pytest"], "7.2.0")
    
    def test_parse_pipfile_lock(self):
        """Test parsing Pipfile.lock"""
        with tempfile.TemporaryDirectory() as tmpdir:
            lock_path = Path(tmpdir) / "Pipfile.lock"
            lock_data = {
                "_meta": {
                    "hash": {
                        "sha256": "test"
                    },
                    "pipfile-spec": 6,
                    "requires": {
                        "python_version": "3.9"
                    }
                },
                "default": {
                    "requests": {
                        "hashes": ["sha256:test"],
                        "index": "pypi",
                        "version": "==2.28.1"
                    },
                    "flask": {
                        "hashes": ["sha256:test"],
                        "version": "==2.2.2"
                    }
                },
                "develop": {
                    "pytest": {
                        "hashes": ["sha256:test"],
                        "index": "pypi",
                        "version": "==7.2.0"
                    },
                    "mypy": {
                        "git": "https://github.com/python/mypy.git",
                        "ref": "abcd1234567890"
                    }
                }
            }
            lock_path.write_text(json.dumps(lock_data))
            
            deps = DependencyParser.parse_python(lock_path)
            self.assertEqual(len(deps), 4)
            
            dep_dict = {d.name: d.version for d in deps}
            self.assertEqual(dep_dict["requests"], "2.28.1")
            self.assertEqual(dep_dict["flask"], "2.2.2")
            self.assertEqual(dep_dict["pytest"], "7.2.0")
            self.assertEqual(dep_dict["mypy"], "abcd123")  # First 7 chars of git ref
    
    def test_parse_go_sum(self):
        """Test parsing go.sum"""
        with tempfile.TemporaryDirectory() as tmpdir:
            sum_path = Path(tmpdir) / "go.sum"
            sum_content = """github.com/gin-gonic/gin v1.8.1 h1:4+fr/el88TOO3ewCmQr8cx/CtZ/umlIRIs5M4NTNjf8=
github.com/gin-gonic/gin v1.8.1/go.mod h1:ji8BvRH1azfM+SYow9zQ6SZMvR8qOMZHmsCuWR9tTTk=
github.com/go-playground/validator/v10 v10.10.0 h1:I7mrTYv78z8k8VXa/qJlOlEXn/nBh+BF8dHX5nt/dr0=
github.com/go-playground/validator/v10 v10.10.0/go.mod h1:74x4gJWsvQexRdW8Pn3dXSGrTK4nAUsbPlLADvpJkos=
github.com/stretchr/testify v1.8.0 h1:pSgiaMZlXftHpm5L7V1+rVB+AZJydKsMxsQBIJw4PKk=
github.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=
golang.org/x/crypto v0.0.0-20210711020723-a769d52b0f97 h1:/UOmuWzQfxxo9UtlXMwuQU8CMgg1eZXqTRwkSQJWKOI=
golang.org/x/crypto v0.0.0-20210711020723-a769d52b0f97/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=
"""
            sum_path.write_text(sum_content)
            
            deps = DependencyParser.parse_go(sum_path)
            
            # Should skip /go.mod entries and only include actual modules
            dep_names = [d.name for d in deps]
            self.assertIn("github.com/gin-gonic/gin", dep_names)
            self.assertIn("github.com/go-playground/validator/v10", dep_names)
            self.assertIn("github.com/stretchr/testify", dep_names)
            self.assertIn("golang.org/x/crypto", dep_names)
            
            # Check versions
            dep_dict = {d.name: d.version for d in deps}
            self.assertEqual(dep_dict["github.com/gin-gonic/gin"], "1.8.1")
            self.assertEqual(dep_dict["github.com/stretchr/testify"], "1.8.0")
    
    def test_go_mod_indirect_deps(self):
        """Test that go.mod parser skips indirect dependencies"""
        with tempfile.TemporaryDirectory() as tmpdir:
            mod_path = Path(tmpdir) / "go.mod"
            mod_content = """module example.com/myapp

go 1.19

require (
    github.com/gin-gonic/gin v1.8.1
    github.com/stretchr/testify v1.8.0
)

require (
    github.com/go-playground/validator/v10 v10.10.0 // indirect
    github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421 // indirect
)
"""
            mod_path.write_text(mod_content)
            
            deps = DependencyParser.parse_go(mod_path)
            
            # Should only include direct dependencies
            self.assertEqual(len(deps), 2)
            dep_names = [d.name for d in deps]
            self.assertIn("github.com/gin-gonic/gin", dep_names)
            self.assertIn("github.com/stretchr/testify", dep_names)
            
            # Should not include indirect dependencies
            self.assertNotIn("github.com/go-playground/validator/v10", dep_names)
            self.assertNotIn("github.com/modern-go/concurrent", dep_names)


if __name__ == "__main__":
    unittest.main()