# .github/workflows/publish-to-pypi.yml
#
# This workflow is triggered when a new GitHub Release is created.
# It uses 'uv' to build the Python project and publish it to PyPI.
# The workflow is optimized to cache the uv installation and project dependencies to speed up execution.

name: Publish Python Package to PyPI

# Trigger the workflow on the creation of a new release
on:
  release:
    types: [published]

# Define the permissions required for the workflow to run
permissions:
  contents: read
  id-token: write # Required for trusted publishing to PyPI

jobs:
  release:
    name: Build and Release
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    environment:
      name: pypi # Define the deployment environment
      url: https://pypi.org/p/gswarm # Replace with your package name on PyPI
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
      - name: Checkout repository
        # Checks out your repository under $GITHUB_WORKSPACE, so your job can access it
        uses: actions/checkout@v4

      - name: Set up Python
        # Sets up a Python version and adds it to the PATH
        uses: actions/setup-python@v5
        with:
          python-version: "3.11" # Specify the Python version you want to use

      - name: Cache uv installation
        # Cache the uv binary to speed up subsequent workflow runs
        id: cache-uv
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/uv
          # 'runner.os' ensures the cache is only reused on the same operating system
          key: ${{ runner.os }}-uv

      - name: Install uv
        # If uv is not found in the cache, install it
        if: steps.cache-uv.outputs.cache-hit != 'true'
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        # 'shell: bash' ensures the script runs in a bash environment
        shell: bash

      - name: Cache Python virtual environment
        # Cache the virtual environment created by uv
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: .venv
          # The cache will be invalidated when 'pyproject.toml' or 'requirements.txt' files change
          # The 'hashFiles' function computes a hash of the specified files
          key: ${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml', 'requirements.txt') }}

      - name: Install project dependencies
        # Use uv to sync project dependencies. This step will be very fast if the cache is hit.
        run: uv sync

      - name: Build package
        # Build the source distribution (sdist) and wheel files
        run: uv build

      - name: Publish package to PyPI
        # Use the official PyPA action to publish the package to PyPI
        # This action uses trusted publishing, which is more secure than using API tokens
        uses: pypa/gh-action-pypi-publish@release/v1
