# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from cambai.models.dub_alt_format_response_body import DubAltFormatResponseBody
from cambai.models.task_id import TaskID
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

REQUESTDUBBEDOUTPUTINALTFORMAT200RESPONSE_ONE_OF_SCHEMAS = ["DubAltFormatResponseBody", "TaskID"]

class RequestDubbedOutputInAltFormat200Response(BaseModel):
    """
    RequestDubbedOutputInAltFormat200Response
    """
    # data type: DubAltFormatResponseBody
    oneof_schema_1_validator: Optional[DubAltFormatResponseBody] = Field(default=None, description="A JSON that contains the presigned url of the output file.")
    # data type: TaskID
    oneof_schema_2_validator: Optional[TaskID] = Field(default=None, description="A JSON that contains the unique identifier for the task. This is used to query the status of the exporting dubbed output to alt format task that is running. It is returned when a create request is made for fetching the dubbed output in an alt file format, in case it does not exist.")
    actual_instance: Optional[Union[DubAltFormatResponseBody, TaskID]] = None
    one_of_schemas: Set[str] = { "DubAltFormatResponseBody", "TaskID" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = RequestDubbedOutputInAltFormat200Response.model_construct()
        error_messages = []
        match = 0
        # validate data type: DubAltFormatResponseBody
        if not isinstance(v, DubAltFormatResponseBody):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DubAltFormatResponseBody`")
        else:
            match += 1
        # validate data type: TaskID
        if not isinstance(v, TaskID):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TaskID`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in RequestDubbedOutputInAltFormat200Response with oneOf schemas: DubAltFormatResponseBody, TaskID. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in RequestDubbedOutputInAltFormat200Response with oneOf schemas: DubAltFormatResponseBody, TaskID. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into DubAltFormatResponseBody
        try:
            instance.actual_instance = DubAltFormatResponseBody.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TaskID
        try:
            instance.actual_instance = TaskID.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into RequestDubbedOutputInAltFormat200Response with oneOf schemas: DubAltFormatResponseBody, TaskID. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into RequestDubbedOutputInAltFormat200Response with oneOf schemas: DubAltFormatResponseBody, TaskID. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], DubAltFormatResponseBody, TaskID]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


