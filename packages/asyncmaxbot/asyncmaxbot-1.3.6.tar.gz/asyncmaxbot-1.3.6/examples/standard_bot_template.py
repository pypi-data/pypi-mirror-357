"""
–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω –±–æ—Ç–∞ MaxBot
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤
"""

import asyncio
import os
from maxbot import Bot
from maxbot.dispatcher import Dispatcher
from maxbot.filters import command, text
from maxbot.middleware import MiddlewareManager, LoggingMiddleware, ErrorHandlingMiddleware
from maxbot.max_types import Context

TOKEN = "YOUR_TOKEN_HERE"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

class StandardBot:
    """
    –ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞.

    –≠—Ç–æ—Ç –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help, –∞ —Ç–∞–∫–∂–µ
    –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –û–Ω –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
    - –ö–ª–∞—Å—Å –¥–ª—è –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏–∏ –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞.
    - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bot –∏ Dispatcher.
    - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (—Ö–µ–Ω–¥–ª–µ—Ä–æ–≤) –¥–ª—è –∫–æ–º–∞–Ω–¥ –∏ —Ç–µ–∫—Å—Ç–∞.
    - –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ polling.
    """
    
    def __init__(self, token: str):
        self.bot = Bot(token)
        self.dp = Dispatcher(self.bot)
        self.setup_middleware()
        self.setup_handlers()
    
    def setup_middleware(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ middleware"""
        manager = MiddlewareManager()
        manager.add_middleware(LoggingMiddleware())
        manager.add_middleware(ErrorHandlingMiddleware())
        self.dp.middleware_manager = manager
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        @self.dp.message_handler(command("start"))
        async def start_handler(ctx: Context):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
            await ctx.reply("–ü—Ä–∏–≤–µ—Ç! –Ø —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–æ—Ç.")
        
        @self.dp.message_handler(command("help"))
        async def help_handler(ctx: Context):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
            await ctx.reply("–≠—Ç–æ —Å–ø—Ä–∞–≤–∫–∞. –Ø –æ—Ç–≤–µ—á–∞—é –Ω–∞ /start –∏ /help, –∞ —Ç–∞–∫–∂–µ –ø–æ–≤—Ç–æ—Ä—è—é —Ç–µ–∫—Å—Ç.")
        
        @self.dp.message_handler()
        async def echo_handler(ctx: Context):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
            await ctx.reply(f"–ü–æ–ª—É—á–∏–ª —Ç–µ–∫—Å—Ç: {ctx.text}")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –±–æ—Ç–∞...")
        
        async with self.bot:
            me = await self.bot.get_me()
            print(f"ü§ñ –ë–æ—Ç: {me['name']} (ID: {me['user_id']})")
            
            await self.bot.polling(
                dispatcher=self.dp,
                timeout=1,
                long_polling_timeout=30
            )

async def main():
    bot = StandardBot(TOKEN)
    try:
        await bot.run()
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main()) 