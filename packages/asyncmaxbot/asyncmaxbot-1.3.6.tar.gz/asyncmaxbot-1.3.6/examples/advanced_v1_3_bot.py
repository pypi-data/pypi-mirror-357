"""
–ü—Ä–∏–º–µ—Ä –±–æ—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ v1.3
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤, –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã, –≤–∞–ª–∏–¥–∞—Ü–∏—è
"""

import asyncio
import os
from maxbot import Bot
from maxbot.dispatcher import Dispatcher
from maxbot.filters import (
    command, text, regex, attachment_type, has_attachment,
    and_filter, or_filter, not_filter, time_filter, user_filter, custom_filter
)

async def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞
    if not os.path.exists("token.txt"):
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª token.txt —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞")
        return
    
    with open("token.txt", "r", encoding="utf-8") as f:
        token = f.read().strip()
    
    bot = Bot(token)
    dispatcher = Dispatcher(bot)
    
    # --- –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ ---
    
    @dispatcher.message_handler(command("start"))
    async def start_command(ctx):
        await ctx.reply(
            "üöÄ –ë–æ—Ç v1.3 –∑–∞–ø—É—â–µ–Ω!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/upload - –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª\n"
            "/download - —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª\n"
            "/validate - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª\n"
            "/filters - —Ç–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
            "/help - —Å–ø—Ä–∞–≤–∫–∞"
        )
    
    @dispatcher.message_handler(command("help"))
    async def help_command(ctx):
        await ctx.reply(
            "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º v1.3:\n\n"
            "üîß **–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤:**\n"
            "- /upload image <–ø—É—Ç—å> - –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
            "- /upload video <–ø—É—Ç—å> - –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ\n"
            "- /upload audio <–ø—É—Ç—å> - –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ\n"
            "- /upload file <–ø—É—Ç—å> - –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç\n\n"
            "üì• **–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤:**\n"
            "- /download <file_id> - —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª\n"
            "- /download <file_id> <–ø—É—Ç—å> - —Å–∫–∞—á–∞—Ç—å –≤ –ø–∞–ø–∫—É\n\n"
            "‚úÖ **–í–∞–ª–∏–¥–∞—Ü–∏—è:**\n"
            "- /validate size <–ø—É—Ç—å> - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–º–µ—Ä\n"
            "- /validate format <—Ç–∏–ø> <–ø—É—Ç—å> - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç\n\n"
            "üéØ **–§–∏–ª—å—Ç—Ä—ã:**\n"
            "- /filters - —Ç–µ—Å—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"
        )
    
    # --- –ü—Ä–∏–º–µ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ ---
    
    @dispatcher.message_handler(command("upload"))
    async def upload_handler(ctx):
        args = ctx.text.split()[1:] if len(ctx.text.split()) > 1 else []
        
        if len(args) < 2:
            await ctx.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /upload <—Ç–∏–ø> <–ø—É—Ç—å>\n–¢–∏–ø—ã: image, video, audio, file")
            return
        
        file_type, file_path = args[0], args[1]
        
        if not os.path.exists(file_path):
            await ctx.reply(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return
        
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if not await bot.validate_file_size(file_path, max_size_mb=50):
                await ctx.reply("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 50MB)")
                return
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç
            if not await bot.validate_file_format(file_path, file_type):
                supported = await bot.get_supported_formats(file_type)
                await ctx.reply(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ: {', '.join(supported)}")
                return
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            await ctx.reply(f"üì§ –ó–∞–≥—Ä—É–∂–∞—é {file_type}...")
            
            if file_type == "image":
                result = await bot.upload_image(file_path)
            elif file_type == "video":
                result = await bot.upload_video(file_path)
            elif file_type == "audio":
                result = await bot.upload_audio(file_path)
            elif file_type == "file":
                result = await bot.upload_file(file_path)
            else:
                await ctx.reply("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            await bot.send_attachment(
                {
                    "type": file_type,
                    "payload": result,
                    "filename": os.path.basename(file_path)
                },
                chat_id=ctx.chat_id,
                caption=f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {os.path.basename(file_path)}"
            )
            
        except Exception as e:
            await ctx.reply(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
    
    # --- –ü—Ä–∏–º–µ—Ä—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ ---
    
    @dispatcher.message_handler(command("download"))
    async def download_handler(ctx):
        args = ctx.text.split()[1:] if len(ctx.text.split()) > 1 else []
        
        if len(args) < 1:
            await ctx.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /download <file_id> [–ø—É—Ç—å_—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è]")
            return
        
        file_id = args[0]
        save_path = args[1] if len(args) > 1 else None
        
        try:
            await ctx.reply(f"üì• –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª {file_id}...")
            
            if save_path:
                result = await bot.download_file(file_id, save_path)
                await ctx.reply(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {result}")
            else:
                result = await bot.download_file(file_id)
                await ctx.reply(f"‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(result)} –±–∞–π—Ç")
                
        except Exception as e:
            await ctx.reply(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {str(e)}")
    
    # --- –ü—Ä–∏–º–µ—Ä—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ---
    
    @dispatcher.message_handler(command("validate"))
    async def validate_handler(ctx):
        args = ctx.text.split()[1:] if len(ctx.text.split()) > 2 else []
        
        if len(args) < 2:
            await ctx.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /validate <size|format> [—Ç–∏–ø] <–ø—É—Ç—å>")
            return
        
        validation_type = args[0]
        
        if validation_type == "size":
            if len(args) < 2:
                await ctx.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /validate size <–ø—É—Ç—å>")
                return
            
            file_path = args[1]
            
            if not os.path.exists(file_path):
                await ctx.reply(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return
            
            try:
                is_valid = await bot.validate_file_size(file_path, max_size_mb=50)
                file_size = os.path.getsize(file_path) / (1024 * 1024)  # MB
                
                if is_valid:
                    await ctx.reply(f"‚úÖ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ OK: {file_size:.2f} MB")
                else:
                    await ctx.reply(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size:.2f} MB (–º–∞–∫—Å–∏–º—É–º 50MB)")
                    
            except Exception as e:
                await ctx.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")
        
        elif validation_type == "format":
            if len(args) < 3:
                await ctx.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /validate format <—Ç–∏–ø> <–ø—É—Ç—å>")
                return
            
            file_type, file_path = args[1], args[2]
            
            if not os.path.exists(file_path):
                await ctx.reply(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return
            
            try:
                is_valid = await bot.validate_file_format(file_path, file_type)
                supported = await bot.get_supported_formats(file_type)
                
                if is_valid:
                    await ctx.reply(f"‚úÖ –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {os.path.splitext(file_path)[1]}")
                else:
                    await ctx.reply(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ: {', '.join(supported)}")
                    
            except Exception as e:
                await ctx.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")
    
    # --- –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ ---
    
    @dispatcher.message_handler(command("filters"))
    async def filters_test(ctx):
        await ctx.reply(
            "üéØ –¢–µ—Å—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤:\n\n"
            "–û—Ç–ø—Ä–∞–≤—å:\n"
            "1. '–ø—Ä–∏–≤–µ—Ç' - —Å—Ä–∞–±–æ—Ç–∞–µ—Ç text —Ñ–∏–ª—å—Ç—Ä\n"
            "2. –§–æ—Ç–æ - —Å—Ä–∞–±–æ—Ç–∞–µ—Ç attachment —Ñ–∏–ª—å—Ç—Ä\n"
            "3. '–ø—Ä–∏–≤–µ—Ç' + —Ñ–æ—Ç–æ - —Å—Ä–∞–±–æ—Ç–∞–µ—Ç AND —Ñ–∏–ª—å—Ç—Ä\n"
            "4. '–ø–æ–∫–∞' –ò–õ–ò '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è' - —Å—Ä–∞–±–æ—Ç–∞–µ—Ç OR —Ñ–∏–ª—å—Ç—Ä\n"
            "5. –õ—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ù–ï —Å –∫–æ–º–∞–Ω–¥–æ–π - —Å—Ä–∞–±–æ—Ç–∞–µ—Ç NOT —Ñ–∏–ª—å—Ç—Ä"
        )
    
    # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    @dispatcher.message_handler(
        and_filter(
            text("–ø—Ä–∏–≤–µ—Ç"),
            has_attachment()
        )
    )
    async def hello_with_attachment(ctx):
        await ctx.reply("üëã –ü—Ä–∏–≤–µ—Ç! –ò —É —Ç–µ–±—è –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ!")
    
    @dispatcher.message_handler(
        or_filter(
            text("–ø–æ–∫–∞"),
            text("–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è")
        )
    )
    async def goodbye_handler(ctx):
        await ctx.reply("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    
    @dispatcher.message_handler(
        not_filter(command("start"))
    )
    async def not_start_command(ctx):
        if ctx.text and not ctx.text.startswith('/'):
            await ctx.reply("‚ÑπÔ∏è –≠—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ /start")
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    @dispatcher.message_handler(
        and_filter(
            text("–Ω–æ—á—å"),
            time_filter(22, 6)  # –° 22:00 –¥–æ 06:00
        )
    )
    async def night_handler(ctx):
        await ctx.reply("üåô –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏!")
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID)
    @dispatcher.message_handler(
        and_filter(
            text("admin"),
            user_filter([123456789])  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
        )
    )
    async def admin_handler(ctx):
        await ctx.reply("üîê –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    
    # –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
    def is_long_message(ctx):
        return len(ctx.text or "") > 100
    
    @dispatcher.message_handler(
        custom_filter(is_long_message)
    )
    async def long_message_handler(ctx):
        await ctx.reply("üìù –î–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—å!")
    
    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π ---
    
    @dispatcher.message_handler(has_attachment())
    async def attachment_handler(ctx):
        for attachment in ctx.attachments:
            attachment_type = attachment.type
            
            if attachment_type == "image":
                await ctx.reply(f"üñºÔ∏è –ü–æ–ª—É—á–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {attachment.filename or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}")
                
                # –ú–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                # file_data = await bot.download_file(attachment.payload.photo_id)
                
            elif attachment_type == "file":
                filename = attachment.filename or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                size = attachment.size or 0
                await ctx.reply(f"üìÑ –§–∞–π–ª: {filename} ({size} –±–∞–π—Ç)")
                
            elif attachment_type == "video":
                duration = attachment.duration or 0
                await ctx.reply(f"üé• –í–∏–¥–µ–æ: {duration} —Å–µ–∫—É–Ω–¥")
                
            elif attachment_type == "audio":
                performer = attachment.performer or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                title = attachment.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                await ctx.reply(f"üéµ –ê—É–¥–∏–æ: {performer} - {title}")
    
    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ---
    
    @dispatcher.message_handler()
    async def default_handler(ctx):
        if ctx.text:
            await ctx.reply(f"üí¨ –í—ã —Å–∫–∞–∑–∞–ª–∏: {ctx.text}")
        else:
            await ctx.reply("üìù –ü–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ v1.3...")
    async with bot:
        await bot.polling(dispatcher=dispatcher)

if __name__ == "__main__":
    asyncio.run(main()) 