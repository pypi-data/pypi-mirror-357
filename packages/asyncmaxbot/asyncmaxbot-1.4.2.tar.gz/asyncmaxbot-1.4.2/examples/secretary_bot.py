"""
–ë–æ—Ç-—Å–µ–∫—Ä–µ—Ç–∞—Ä—å - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import asyncio
import os
from datetime import datetime
from maxbot import Bot
from maxbot.dispatcher import Dispatcher
from maxbot.filters import command, text, has_attachment, F
from maxbot.middleware import MiddlewareManager, LoggingMiddleware, ErrorHandlingMiddleware
from maxbot.max_types import Context, InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = "YOUR_TOKEN_HERE"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

class SecretaryBot:
    """–ë–æ—Ç-—Å–µ–∫—Ä–µ—Ç–∞—Ä—å —Å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    
    def __init__(self):
        self.bot = Bot(TOKEN)
        self.dp = Dispatcher(self.bot)
        self.setup_middleware()
        self.setup_handlers()
        self.applications = []
        self.reminders = {}
    
    def setup_middleware(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ middleware"""
        manager = MiddlewareManager()
        manager.add_middleware(LoggingMiddleware())
        manager.add_middleware(ErrorHandlingMiddleware())
        self.dp.middleware_manager = manager
    
    def get_main_keyboard(self):
        """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞", payload="new_application"),
                    InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", payload="list_applications")
                ],
                [
                    InlineKeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", payload="set_reminder"),
                    InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", payload="statistics")
                ],
                [
                    InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", payload="help")
                ]
            ]
        )
    
    def get_application_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞—è–≤–æ–∫"""
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìÑ –û–±—â–∞—è", payload="category_general"),
                    InlineKeyboardButton(text="üîß –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", payload="category_support")
                ],
                [
                    InlineKeyboardButton(text="üí∞ –§–∏–Ω–∞–Ω—Å—ã", payload="category_finance"),
                    InlineKeyboardButton(text="üìà –ü—Ä–æ–µ–∫—Ç", payload="category_project")
                ],
                [
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", payload="back_to_main")
                ]
            ]
        )
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        @self.dp.message_handler(command("start"))
        async def start_handler(ctx: Context):
            await ctx.reply(
                f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {ctx.user.name}! –Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–∞—Ä—å.\n\n"
                "üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self.get_main_keyboard()
            )
        
        @self.dp.message_handler(text(["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"]))
        async def greeting_handler(ctx: Context):
            await ctx.reply(
                f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {ctx.user.name}! –Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–∞—Ä—å.\n\n"
                "üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self.get_main_keyboard()
            )
        
        @self.dp.message_handler(text("–ø–æ–º–æ—â—å"))
        async def help_handler(ctx: Context):
            await ctx.reply(
                "‚ùì –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
                "üìù –∑–∞—è–≤–∫–∞: [—Ç–µ–∫—Å—Ç] ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É\n"
                "üìã —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∑–∞—è–≤–∫–∏\n"
                "‚è∞ –Ω–∞–ø–æ–º–Ω–∏ ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
                "üìä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                "‚ùì –ø–æ–º–æ—â—å ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
                "üí° –ü—Ä–∏–º–µ—Ä: –∑–∞—è–≤–∫–∞: –ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ø—Ä–æ–µ–∫—Ç—É",
                reply_markup=self.get_main_keyboard()
            )
        
        @self.dp.message_handler(text("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
        async def stats_handler(ctx: Context):
            user_apps = [a for a in self.applications if a['user_id'] == ctx.user_id]
            total_apps = len(self.applications)
            
            await ctx.reply(
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                f"üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ: {total_apps}\n"
                f"üë§ –í–∞—à–∏—Ö –∑–∞—è–≤–æ–∫: {len(user_apps)}\n"
                f"üìù –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: {len([a for a in user_apps if a['status'] == 'üìù –ù–æ–≤–∞—è'])}\n"
                f"‚è∞ –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(self.reminders)}",
                reply_markup=self.get_main_keyboard()
            )
        
        @self.dp.message_handler(text("–Ω–∞–ø–æ–º–Ω–∏"))
        async def reminder_handler(ctx: Context):
            self.reminders[ctx.user_id] = datetime.now()
            await ctx.reply(
                "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n"
                "üîî –Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ —á–∞—Å.",
                reply_markup=self.get_main_keyboard()
            )
        
        @self.dp.message_handler(text("—Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫"))
        async def list_applications_handler(ctx: Context):
            user_apps = [a for a in self.applications if a['user_id'] == ctx.user_id]
            
            if user_apps:
                apps_text = "üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n"
                for app in user_apps[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
                    apps_text += f"üî∏ #{app['id']} ({app['date']})\n"
                    apps_text += f"   {app['status']} {app['category']}\n"
                    apps_text += f"   üìù {app['text'][:50]}{'...' if len(app['text']) > 50 else ''}\n\n"
                await ctx.reply(apps_text, reply_markup=self.get_main_keyboard())
            else:
                await ctx.reply("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.", reply_markup=self.get_main_keyboard())
        
        @self.dp.message_handler(has_attachment(True))
        async def attachment_handler(ctx: Context):
            """
            –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –≤–ª–æ–∂–µ–Ω–∏—è.
            –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ `has_attachment`.
            """
            attachment_types = [att.type for att in ctx.attachments]
            await ctx.reply(f"–í–∏–∂—É –≤–ª–æ–∂–µ–Ω–∏—è! –¢–∏–ø—ã: {', '.join(attachment_types)}. –°–æ—Ö—Ä–∞–Ω—è—é –≤ –∞—Ä—Ö–∏–≤.", reply_markup=self.get_main_keyboard())
            print(f"User {ctx.user_id} sent attachments: {attachment_types}")
        
        @self.dp.message_handler()
        async def no_attachment_handler(ctx: Context):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π."""
            await ctx.reply("–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π, —è –µ–≥–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É—é.", reply_markup=self.get_main_keyboard())
        
        @self.dp.message_handler()
        async def application_handler(ctx: Context):
            if ctx.text.startswith("–∑–∞—è–≤–∫–∞:"):
                application_text = ctx.text[7:].strip()
                if application_text:
                    app = {
                        "id": len(self.applications) + 1,
                        "user_id": ctx.user_id,
                        "user_name": ctx.user.name,
                        "text": application_text,
                        "status": "üìù –ù–æ–≤–∞—è",
                        "date": datetime.now().strftime("%d.%m.%Y %H:%M"),
                        "category": "üìÑ –û–±—â–∞—è"
                    }
                    self.applications.append(app)
                    await ctx.reply(
                        f"‚úÖ –ó–∞—è–≤–∫–∞ #{app['id']} –ø—Ä–∏–Ω—è—Ç–∞!\n"
                        f"üìù –¢–µ–∫—Å—Ç: {application_text}\n"
                        f"üìÖ –î–∞—Ç–∞: {app['date']}\n"
                        f"üìä –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {len(self.applications)}",
                        reply_markup=self.get_main_keyboard()
                    )
                else:
                    await ctx.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è.", reply_markup=self.get_main_keyboard())
            else:
                await ctx.reply(
                    "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ù–∞–ø–∏—à–∏—Ç–µ '–ø–æ–º–æ—â—å' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
                    reply_markup=self.get_main_keyboard()
                )
        
        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        @self.dp.callback_query_handler(F.payload == "new_application")
        async def new_application_callback(ctx: Context):
            await ctx.answer_callback("üìù –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–∫–∏:")
            await ctx.edit_message(
                "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=self.get_application_keyboard()
            )
        
        @self.dp.callback_query_handler(F.payload == "list_applications")
        async def list_applications_callback(ctx: Context):
            user_apps = [a for a in self.applications if a['user_id'] == ctx.user_id]
            
            if user_apps:
                apps_text = "üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n"
                for app in user_apps[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
                    apps_text += f"üî∏ #{app['id']} ({app['date']})\n"
                    apps_text += f"   {app['status']} {app['category']}\n"
                    apps_text += f"   üìù {app['text'][:50]}{'...' if len(app['text']) > 50 else ''}\n\n"
                await ctx.answer_callback("üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏:")
                await ctx.edit_message(apps_text, reply_markup=self.get_main_keyboard())
            else:
                await ctx.answer_callback("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫")
                await ctx.edit_message("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.", reply_markup=self.get_main_keyboard())
        
        @self.dp.callback_query_handler(F.payload == "set_reminder")
        async def set_reminder_callback(ctx: Context):
            self.reminders[ctx.user_id] = datetime.now()
            await ctx.answer_callback("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
            await ctx.edit_message(
                "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n"
                "üîî –Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ —á–∞—Å.",
                reply_markup=self.get_main_keyboard()
            )
        
        @self.dp.callback_query_handler(F.payload == "statistics")
        async def statistics_callback(ctx: Context):
            user_apps = [a for a in self.applications if a['user_id'] == ctx.user_id]
            total_apps = len(self.applications)
            
            await ctx.answer_callback("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            await ctx.edit_message(
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                f"üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ: {total_apps}\n"
                f"üë§ –í–∞—à–∏—Ö –∑–∞—è–≤–æ–∫: {len(user_apps)}\n"
                f"üìù –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: {len([a for a in user_apps if a['status'] == 'üìù –ù–æ–≤–∞—è'])}\n"
                f"‚è∞ –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(self.reminders)}",
                reply_markup=self.get_main_keyboard()
            )
        
        @self.dp.callback_query_handler(F.payload == "help")
        async def help_callback(ctx: Context):
            await ctx.answer_callback("‚ùì –°–ø—Ä–∞–≤–∫–∞")
            await ctx.edit_message(
                "‚ùì –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
                "üìù –∑–∞—è–≤–∫–∞: [—Ç–µ–∫—Å—Ç] ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É\n"
                "üìã —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∑–∞—è–≤–∫–∏\n"
                "‚è∞ –Ω–∞–ø–æ–º–Ω–∏ ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
                "üìä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                "‚ùì –ø–æ–º–æ—â—å ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
                "üí° –ü—Ä–∏–º–µ—Ä: –∑–∞—è–≤–∫–∞: –ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ø—Ä–æ–µ–∫—Ç—É",
                reply_markup=self.get_main_keyboard()
            )
        
        @self.dp.callback_query_handler(F.payload == "back_to_main")
        async def back_to_main_callback(ctx: Context):
            await ctx.answer_callback("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            await ctx.edit_message(
                f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {ctx.user.name}! –Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–∞—Ä—å.\n\n"
                "üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self.get_main_keyboard()
            )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞—è–≤–æ–∫
        @self.dp.callback_query_handler(F.payload.startswith("category_"))
        async def category_callback(ctx: Context):
            category = ctx.payload.replace("category_", "")
            category_names = {
                "general": "üìÑ –û–±—â–∞—è",
                "support": "üîß –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", 
                "finance": "üí∞ –§–∏–Ω–∞–Ω—Å—ã",
                "project": "üìà –ü—Ä–æ–µ–∫—Ç"
            }
            
            await ctx.answer_callback(f"üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_names.get(category, '–û–±—â–∞—è')} –≤—ã–±—Ä–∞–Ω–∞")
            await ctx.edit_message(
                f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_names.get(category, '–û–±—â–∞—è')}\n\n"
                "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "–∑–∞—è–≤–∫–∞: [–≤–∞—à —Ç–µ–∫—Å—Ç]",
                reply_markup=self.get_main_keyboard()
            )
    
    async def check_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        current_time = datetime.now()
        for user_id, reminder_time in list(self.reminders.items()):
            if (current_time - reminder_time).seconds > 3600:  # –ß–µ—Ä–µ–∑ —á–∞—Å
                await self.bot.send_message(
                    "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n"
                    "üìã –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏.",
                    user_id=user_id
                )
                del self.reminders[user_id]
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("üëî –ë–æ—Ç-—Å–µ–∫—Ä–µ—Ç–∞—Ä—å –∑–∞–ø—É—â–µ–Ω!")
        
        async with self.bot:
            me = await self.bot.get_me()
            print(f"ü§ñ –ë–æ—Ç: {me['name']} (ID: {me['user_id']})")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–æ–Ω–µ
            asyncio.create_task(self.reminder_loop())
            
            await self.bot.polling(
                dispatcher=self.dp,
                timeout=1,
                long_polling_timeout=30
            )
    
    async def reminder_loop(self):
        """–¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        while True:
            await self.check_reminders()
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

async def main():
    bot = SecretaryBot()
    try:
        await bot.run()
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main()) 