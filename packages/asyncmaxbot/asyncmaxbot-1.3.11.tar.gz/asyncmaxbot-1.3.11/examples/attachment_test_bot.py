#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ send_attachment
"""

import asyncio
import json
import os
from maxbot import Bot
from maxbot.dispatcher import Dispatcher
from maxbot.filters import command

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
def get_token():
    token_file = "token.txt"
    if os.path.exists(token_file):
        with open(token_file, 'r') as f:
            return f.read().strip()
    return os.environ.get("MAXBOT_TOKEN", "YOUR_TOKEN_HERE")

TOKEN = get_token()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏–π
def load_attachments():
    if os.path.exists("captured_updates.json"):
        with open("captured_updates.json", 'r', encoding='utf-8') as f:
            data = json.load(f)
            attachments = []
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–æ–º 'updates', –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫
            if isinstance(data, dict) and 'updates' in data:
                updates = data['updates']
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
            elif isinstance(data, list):
                updates = data
            else:
                return []
            
            for update in updates:
                if 'message' in update and 'body' in update['message']:
                    body = update['message']['body']
                    if 'attachments' in body and isinstance(body['attachments'], list):
                        attachments.extend(body['attachments'])
            return attachments
    return []

async def main():
    bot = Bot(TOKEN)
    dispatcher = Dispatcher(bot)
    
    @dispatcher.message_handler(command('test_attachment'))
    async def test_attachment(ctx):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –≤–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥"""
        attachments = load_attachments()
        
        if not attachments:
            await ctx.reply("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ç–æ/—Ñ–∞–π–ª/–≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.")
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –≤–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
        attachment = attachments[0]
        attachment_type = attachment.get('type', 'unknown')
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            result = await bot.send_attachment(
                attachment, 
                chat_id=ctx.message.recipient.chat_id,
                caption=f"–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ {attachment_type} —á–µ—Ä–µ–∑ send_attachment"
            )
            
            await ctx.reply(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {attachment_type}!\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('message_id', 'N/A')}")
            
        except Exception as e:
            await ctx.reply(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {attachment_type}: {str(e)}")
    
    @dispatcher.message_handler(command('test_all_attachments'))
    async def test_all_attachments(ctx):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è"""
        attachments = load_attachments()
        
        if not attachments:
            await ctx.reply("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        
        await ctx.reply(f"–ù–∞–π–¥–µ–Ω–æ {len(attachments)} –≤–ª–æ–∂–µ–Ω–∏–π. –¢–µ—Å—Ç–∏—Ä—É–µ–º...")
        
        success_count = 0
        for i, attachment in enumerate(attachments):
            attachment_type = attachment.get('type', 'unknown')
            
            try:
                result = await bot.send_attachment(
                    attachment,
                    chat_id=ctx.message.recipient.chat_id,
                    caption=f"–¢–µ—Å—Ç {i+1}: {attachment_type}"
                )
                success_count += 1
                await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                
            except Exception as e:
                await ctx.reply(f"‚ùå –û—à–∏–±–∫–∞ {attachment_type}: {str(e)}")
        
        await ctx.reply(f"‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –£—Å–ø–µ—à–Ω–æ: {success_count}/{len(attachments)}")
    
    @dispatcher.message_handler(command('show_attachments'))
    async def show_attachments(ctx):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–ª–æ–∂–µ–Ω–∏—è—Ö"""
        attachments = load_attachments()
        
        if not attachments:
            await ctx.reply("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–ª–æ–∂–µ–Ω–∏–π.")
            return
        
        info = f"–ù–∞–π–¥–µ–Ω–æ {len(attachments)} –≤–ª–æ–∂–µ–Ω–∏–π:\n\n"
        
        for i, attachment in enumerate(attachments):
            attachment_type = attachment.get('type', 'unknown')
            info += f"{i+1}. –¢–∏–ø: {attachment_type}\n"
            
            if attachment_type in ['image', 'file', 'audio', 'video', 'sticker']:
                payload = attachment.get('payload', {})
                if 'photo_id' in payload:
                    info += f"   photo_id: {payload['photo_id']}\n"
                if 'fileId' in payload:
                    info += f"   fileId: {payload['fileId']}\n"
                if 'token' in payload:
                    info += f"   token: {payload['token'][:10]}...\n"
            
            elif attachment_type == 'location':
                info += f"   lat: {attachment.get('latitude')}, lon: {attachment.get('longitude')}\n"
            
            elif attachment_type == 'share':
                info += f"   url: {attachment.get('url', 'N/A')}\n"
            
            info += "\n"
        
        await ctx.reply(info)
    
    @dispatcher.message_handler(command('help'))
    async def help_command(ctx):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
ü§ñ Attachment Test Bot

–ö–æ–º–∞–Ω–¥—ã:
/test_attachment - –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –≤–ª–æ–∂–µ–Ω–∏—è
/test_all_attachments - –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è
/show_attachments - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–ª–æ–∂–µ–Ω–∏—è—Ö
/help - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/—Ñ–∞–π–ª/–≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
        """
        await ctx.reply(help_text)
    
    @dispatcher.message_handler()
    async def echo_handler(ctx):
        """–≠—Ö–æ-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–∏–π"""
        if ctx.has_attachments:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–ª–æ–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
            attachments = ctx.attachments
            if attachments:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                existing_data = []
                if os.path.exists("captured_updates.json"):
                    with open("captured_updates.json", 'r', encoding='utf-8') as f:
                        existing_data = json.load(f)
                        # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–æ–º 'updates', –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫
                        if isinstance(existing_data, dict) and 'updates' in existing_data:
                            existing_data = existing_data['updates']
                        # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
                        elif not isinstance(existing_data, list):
                            existing_data = []
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–ª–æ–∂–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä–∏
                attachment_dicts = []
                for att in attachments:
                    # att —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º BaseAttachment
                    if hasattr(att, 'model_dump'):
                        attachment_dicts.append(att.model_dump())
                    elif hasattr(att, 'dict'):
                        attachment_dicts.append(att.dict())
                    else:
                        # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å–ª–æ–≤–∞—Ä—å
                        attachment_dicts.append(att)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
                new_update = {
                    'message': {
                        'body': {
                            'attachments': attachment_dicts
                        }
                    }
                }
                existing_data.append(new_update)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫
                with open("captured_updates.json", 'w', encoding='utf-8') as f:
                    json.dump(existing_data, f, ensure_ascii=False, indent=2)
                
                await ctx.reply(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(attachments)} –≤–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
            else:
                await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
        else:
            await ctx.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")

    print("ü§ñ Attachment Test Bot –∑–∞–ø—É—â–µ–Ω!")
    print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
    
    async with bot:
        await bot.polling(dispatcher=dispatcher)

if __name__ == "__main__":
    asyncio.run(main()) 