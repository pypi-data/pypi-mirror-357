import asyncio
import os
from maxbot import Bot
from maxbot.dispatcher import Dispatcher
from maxbot.filters import command, text, regex, attachment_type, has_attachment, attachment_type as Attachment, has_attachment as HasAttachment
from datetime import datetime
from PIL import Image, ImageDraw, ImageFont
import io

from maxbot.middleware import (
    MiddlewareManager, LoggingMiddleware, ThrottlingMiddleware, 
    ErrorHandlingMiddleware, MetricsMiddleware, AntispamMiddleware
)
from maxbot.max_types import Context

TOKEN = "YOUR_TOKEN_HERE"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

class AdvancedBot:
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –±–æ—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π SDK.

    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
    - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Middleware (Logging, Error Handling).
    - –ö–æ–º–±–∏–Ω–∞—Ü–∏—é –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
    - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é (`Regex`) –∏
      —Ç–∏–ø—É –≤–ª–æ–∂–µ–Ω–∏—è (`Attachment`).
    """
    
    def __init__(self):
        self.bot = Bot(TOKEN)
        self.dp = Dispatcher(self.bot)
        self.setup_middleware()
        self.setup_handlers()
        self.stats = {"messages": 0, "users": set()}
    
    def setup_middleware(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware —Å–∏—Å—Ç–µ–º—ã"""
        manager = MiddlewareManager()
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        manager.add_middleware(LoggingMiddleware(log_level="INFO"))
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã (1 —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ–∫—É–Ω–¥—É)
        manager.add_middleware(ThrottlingMiddleware(rate_limit=1.0))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        manager.add_middleware(ErrorHandlingMiddleware())
        
        # –ê–Ω—Ç–∏—Å–ø–∞–º
        manager.add_middleware(AntispamMiddleware(interval=2.0))
        
        # –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫
        self.metrics = MetricsMiddleware()
        manager.add_middleware(self.metrics)
        
        self.dp.middleware_manager = manager
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
        
        # –ö–æ–º–∞–Ω–¥—ã —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏
        @self.dp.message_handler(command("start"))
        async def start_handler(ctx: Context):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
            await ctx.reply(
                "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –±–æ—Ç!\n\n"
                "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "üîß /help - —Å–ø—Ä–∞–≤–∫–∞\n"
                "üìä /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                "üñºÔ∏è /photo - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ\n"
                "üìÅ /file - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª\n"
                "üéµ /audio - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ\n"
                "üìπ /video - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ\n"
                "üìç /location - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é\n"
                "üîó /share - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É\n"
                "üìé /test_attachments - —Ç–µ—Å—Ç –≤–ª–æ–∂–µ–Ω–∏–π\n"
                "‚öôÔ∏è /metrics - –º–µ—Ç—Ä–∏–∫–∏ –±–æ—Ç–∞"
            )
        
        @self.dp.message_handler(command("help"))
        async def help_handler(ctx: Context):
            help_text = """
üîß **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞:**

üìù **–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ /metrics - –º–µ—Ç—Ä–∏–∫–∏

üìé **–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏:**
‚Ä¢ /photo - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
‚Ä¢ /file - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª
‚Ä¢ /audio - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ
‚Ä¢ /video - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ

üìç **–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –∏ —Å—Å—ã–ª–∫–∏:**
‚Ä¢ /location - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
‚Ä¢ /share - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É

üß™ **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:**
‚Ä¢ /test_attachments - —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–ª–æ–∂–µ–Ω–∏–π

üí° **–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:**
‚Ä¢ –§–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, —Ñ–∞–π–ª—ã - –±–æ—Ç –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ "–ø—Ä–∏–≤–µ—Ç" - –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
‚Ä¢ –õ—é–±–æ–π —Ç–µ–∫—Å—Ç —Å "—Ç–µ—Å—Ç" - –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç
            """
            await ctx.reply(help_text)
        
        @self.dp.message_handler(command("stats"))
        async def stats_handler(ctx: Context):
            self.stats["messages"] += 1
            self.stats["users"].add(ctx.user_id)
            
            metrics = self.metrics.get_metrics()
            stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**

üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['messages']}
üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.stats['users'])}

‚öôÔ∏è **–°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:**
üìà –°–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É: {metrics['messages_per_second']:.2f}
‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {metrics['uptime_seconds']:.0f} —Å–µ–∫
‚ùå –û—à–∏–±–æ–∫: {metrics['errors']}
üìä –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: {metrics['error_rate']*100:.1f}%
            """
            await ctx.reply(stats_text)
        
        @self.dp.message_handler(command("metrics"))
        async def metrics_handler(ctx: Context):
            metrics = self.metrics.get_metrics()
            await ctx.reply(f"üìà –ú–µ—Ç—Ä–∏–∫–∏: {metrics}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
        @self.dp.message_handler(command("photo"))
        async def photo_handler(ctx: Context):
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.new('RGB', (400, 300), color='lightblue')
            draw = ImageDraw.Draw(img)
            draw.text((20, 20), "–¢–µ—Å—Ç–æ–≤–æ–µ —Ñ–æ—Ç–æ", fill='black')
            draw.text((20, 60), f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {datetime.now()}", fill='black')
            
            img_bytes = io.BytesIO()
            img.save(img_bytes, format='PNG')
            img_bytes.seek(0)
            
            await self.bot.send_photo(
                img_bytes, 
                user_id=ctx.user_id, 
                caption="üñºÔ∏è –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –±–æ—Ç–∞!"
            )
        
        @self.dp.message_handler(command("file"))
        async def file_handler(ctx: Context):
            file_content = f"""
üìÑ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –æ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –±–æ—Ç–∞

üìÖ –°–æ–∑–¥–∞–Ω: {datetime.now()}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ctx.user.name}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {self.stats['messages']}

üîß –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
   –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ Max API.
            """
            
            file_bytes = io.BytesIO(file_content.encode('utf-8'))
            await self.bot.send_document(
                file_bytes,
                user_id=ctx.user_id,
                caption="üìÅ –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç",
                filename="test_document.txt"
            )
        
        @self.dp.message_handler(command("audio"))
        async def audio_handler(ctx: Context):
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞—É–¥–∏–æ—Ñ–∞–π–ª (–∑–∞–≥–ª—É—à–∫–∞)
            audio_content = b"RIFF" + b"\x00" * 100  # –ü—Ä–æ—Å—Ç–æ–π WAV –∑–∞–≥–æ–ª–æ–≤–æ–∫
            audio_bytes = io.BytesIO(audio_content)
            
            await self.bot.send_audio(
                audio_bytes,
                user_id=ctx.user_id,
                caption="üéµ –¢–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ",
                filename="test_audio.wav"
            )
        
        @self.dp.message_handler(command("video"))
        async def video_handler(ctx: Context):
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –≤–∏–¥–µ–æ (–∑–∞–≥–ª—É—à–∫–∞)
            video_content = b"test video content"
            video_bytes = io.BytesIO(video_content)
            
            await self.bot.send_video(
                video_bytes,
                user_id=ctx.user_id,
                caption="üìπ –¢–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ",
                filename="test_video.mp4"
            )
        
        @self.dp.message_handler(command("location"))
        async def location_handler(ctx: Context):
            await self.bot.send_location(
                latitude=55.7558,
                longitude=37.6176,
                user_id=ctx.user_id,
                caption="üìç –ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å"
            )
        
        @self.dp.message_handler(command("share"))
        async def share_handler(ctx: Context):
            await self.bot.send_share(
                url="https://github.com/sdkinfotech/asyncmaxbot",
                title="AsyncMaxBot SDK",
                description="Python SDK –¥–ª—è Max API",
                user_id=ctx.user_id
            )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π
        @self.dp.message_handler(attachment_type("image"))
        async def image_attachment_handler(ctx: Context):
            await ctx.reply("üñºÔ∏è –ü–æ–ª—É—á–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
            
            if ctx.attachments:
                for att in ctx.attachments:
                    if att.type == "image":
                        await ctx.reply(
                            f"üì∏ –î–µ—Ç–∞–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n"
                            f"üîó URL: {att.url}\n"
                            f"üìè –†–∞–∑–º–µ—Ä: {att.width}x{att.height}\n"
                            f"üÜî ID: {att.file_id}"
                        )
        
        @self.dp.message_handler(attachment_type("video"))
        async def video_attachment_handler(ctx: Context):
            await ctx.reply("üìπ –ü–æ–ª—É—á–∏–ª –≤–∏–¥–µ–æ! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
            
            if ctx.attachments:
                for att in ctx.attachments:
                    if att.type == "video":
                        await ctx.reply(
                            f"üé¨ –î–µ—Ç–∞–ª–∏ –≤–∏–¥–µ–æ:\n"
                            f"üîó URL: {att.url}\n"
                            f"üìè –†–∞–∑–º–µ—Ä: {att.width}x{att.height}\n"
                            f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {att.duration} —Å–µ–∫\n"
                            f"üÜî ID: {att.file_id}"
                        )
        
        @self.dp.message_handler(attachment_type("file"))
        async def file_attachment_handler(ctx: Context):
            await ctx.reply("üìÅ –ü–æ–ª—É—á–∏–ª —Ñ–∞–π–ª! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
            
            if ctx.attachments:
                for att in ctx.attachments:
                    if att.type == "file":
                        await ctx.reply(
                            f"üìÑ –î–µ—Ç–∞–ª–∏ —Ñ–∞–π–ª–∞:\n"
                            f"üìù –ò–º—è: {att.filename}\n"
                            f"üìè –†–∞–∑–º–µ—Ä: {att.size} –±–∞–π—Ç\n"
                            f"üîó URL: {att.url}\n"
                            f"üÜî ID: {att.file_id}"
                        )
        
        @self.dp.message_handler(has_attachment())
        async def any_attachment_handler(ctx: Context):
            await ctx.reply("üìé –ü–æ–ª—É—á–∏–ª –≤–ª–æ–∂–µ–Ω–∏–µ! –¢–∏–ø: " + 
                          ", ".join([att.type for att in ctx.attachments]))
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        @self.dp.message_handler(text("–ø—Ä–∏–≤–µ—Ç", exact=False))
        async def hello_handler(ctx: Context):
            await ctx.reply(f"üëã –ü—Ä–∏–≤–µ—Ç, {ctx.user.name}!")
        
        @self.dp.message_handler(text(["—Å–ø–∞—Å–∏–±–æ", "–±–ª–∞–≥–æ–¥–∞—Ä—é"], exact=False))
        async def thanks_handler(ctx: Context):
            await ctx.reply("üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –ø–æ–º–æ—á—å!")
        
        @self.dp.message_handler(regex(r"—Ç–µ—Å—Ç.*"))
        async def test_handler(ctx: Context):
            await ctx.reply("üß™ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        
        @self.dp.message_handler(regex(r"\d+"))
        async def number_handler(ctx: Context):
            await ctx.reply(f"üî¢ –ü–æ–ª—É—á–∏–ª —á–∏—Å–ª–æ: {ctx.text}")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        @self.dp.message_handler()
        async def default_handler(ctx: Context):
            await ctx.reply(
                f"üí¨ –ü–æ–ª—É—á–∏–ª: {ctx.text}\n\n"
                f"üí° –ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
            )
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å polling"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –±–æ—Ç–∞...")
        
        async with self.bot:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            me = await self.bot.get_me()
            print(f"ü§ñ –ë–æ—Ç: {me['name']} (ID: {me['user_id']})")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling —Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º
            await self.bot.polling(
                dispatcher=self.dp,
                timeout=1,
                long_polling_timeout=30
            )

async def main():
    bot = AdvancedBot()
    try:
        await bot.run()
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main()) 