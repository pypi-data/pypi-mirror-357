"""
–ë–ª—ç–∫–¥–∂–µ–∫ –±–æ—Ç - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å –∏–≥—Ä–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
"""

import asyncio
import os
import random
from maxbot import Bot
from maxbot.dispatcher import Dispatcher
from maxbot.filters import command, text
from maxbot.middleware import MiddlewareManager, LoggingMiddleware, ErrorHandlingMiddleware
from maxbot.max_types import Context

TOKEN = "YOUR_TOKEN_HERE"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

# –ö–∞—Ä—Ç—ã –¥–ª—è –∏–≥—Ä—ã
CARDS = {
    '2‚ô†': 2, '3‚ô†': 3, '4‚ô†': 4, '5‚ô†': 5, '6‚ô†': 6, '7‚ô†': 7, '8‚ô†': 8, '9‚ô†': 9, '10‚ô†': 10, 'J‚ô†': 10, 'Q‚ô†': 10, 'K‚ô†': 10, 'A‚ô†': 11,
    '2‚ô£': 2, '3‚ô£': 3, '4‚ô£': 4, '5‚ô£': 5, '6‚ô£': 6, '7‚ô£': 7, '8‚ô£': 8, '9‚ô£': 9, '10‚ô£': 10, 'J‚ô£': 10, 'Q‚ô£': 10, 'K‚ô£': 10, 'A‚ô£': 11,
    '2‚ô•': 2, '3‚ô•': 3, '4‚ô•': 4, '5‚ô•': 5, '6‚ô•': 6, '7‚ô•': 7, '8‚ô•': 8, '9‚ô•': 9, '10‚ô•': 10, 'J‚ô•': 10, 'Q‚ô•': 10, 'K‚ô•': 10, 'A‚ô•': 11,
    '2‚ô¶': 2, '3‚ô¶': 3, '4‚ô¶': 4, '5‚ô¶': 5, '6‚ô¶': 6, '7‚ô¶': 7, '8‚ô¶': 8, '9‚ô¶': 9, '10‚ô¶': 10, 'J‚ô¶': 10, 'Q‚ô¶': 10, 'K‚ô¶': 10, 'A‚ô¶': 11
}

class BlackjackGame:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–≥—Ä—ã –≤ –±–ª—ç–∫–¥–∂–µ–∫"""
    
    def __init__(self, user_id, user_name):
        self.user_id = user_id
        self.user_name = user_name
        self.deck = list(CARDS.keys())
        random.shuffle(self.deck)
        self.player_hand = []
        self.dealer_hand = []
        self.game_over = False
        self.result = ""
        
        # –†–∞–∑–¥–∞—á–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
        self.player_hand.append(self.deck.pop())
        self.dealer_hand.append(self.deck.pop())
        self.player_hand.append(self.deck.pop())
        self.dealer_hand.append(self.deck.pop())
    
    def get_hand_value(self, hand):
        """–ü–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤ –≤ —Ä—É–∫–µ"""
        value = 0
        aces = 0
        
        for card in hand:
            card_value = CARDS[card]
            if card_value == 11:  # –¢—É–∑
                aces += 1
            else:
                value += card_value
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—É–∑—ã
        for _ in range(aces):
            if value + 11 <= 21:
                value += 11
            else:
                value += 1
        
        return value
    
    def hit(self):
        """–í–∑—è—Ç—å –∫–∞—Ä—Ç—É"""
        if not self.game_over:
            self.player_hand.append(self.deck.pop())
            player_value = self.get_hand_value(self.player_hand)
            
            if player_value > 21:
                self.game_over = True
                self.result = "üí• –ü–µ—Ä–µ–±–æ—Ä! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"
            elif player_value == 21:
                self.stand()
    
    def stand(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è"""
        if not self.game_over:
            self.game_over = True
            
            # –î–∏–ª–µ—Ä –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã –¥–æ 17
            while self.get_hand_value(self.dealer_hand) < 17:
                self.dealer_hand.append(self.deck.pop())
            
            player_value = self.get_hand_value(self.player_hand)
            dealer_value = self.get_hand_value(self.dealer_hand)
            
            if dealer_value > 21:
                self.result = "üéâ –î–∏–ª–µ—Ä –ø–µ—Ä–µ–±—Ä–∞–ª! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!"
            elif player_value > dealer_value:
                self.result = "üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!"
            elif player_value < dealer_value:
                self.result = "üòî –î–∏–ª–µ—Ä –≤—ã–∏–≥—Ä–∞–ª!"
            else:
                self.result = "ü§ù –ù–∏—á—å—è!"
    
    def get_game_state(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã"""
        player_value = self.get_hand_value(self.player_hand)
        dealer_value = self.get_hand_value(self.dealer_hand)
        
        state = f"üé∞ –ë–ª—ç–∫–¥–∂–µ–∫ - {self.user_name}\n\n"
        
        # –ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞
        if self.game_over:
            state += f"üÉè –î–∏–ª–µ—Ä: {' '.join(self.dealer_hand)} = {dealer_value}\n"
        else:
            state += f"üÉè –î–∏–ª–µ—Ä: {self.dealer_hand[0]} ?\n"
        
        # –ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞
        state += f"üë§ –í—ã: {' '.join(self.player_hand)} = {player_value}\n\n"
        
        if self.game_over:
            state += f"üèÅ {self.result}\n\n"
            state += "üîÑ /start - –Ω–æ–≤–∞—è –∏–≥—Ä–∞"
        else:
            state += "üéØ –í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è:\n"
            state += "üì• /hit - –≤–∑—è—Ç—å –∫–∞—Ä—Ç—É\n"
            state += "‚úã /stand - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è"
        
        return state

class BlackjackBot:
    """
    –ë–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ –ë–ª—ç–∫–¥–∂–µ–∫.

    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã (–∫–∞—Ä—Ç—ã, —Å—á–µ—Ç) –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞.
    - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ `Text` —Å `ignore_case=True`.
    - –ü—Ä–æ—Å—Ç—É—é –∏–≥—Ä–æ–≤—É—é –ª–æ–≥–∏–∫—É –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    """
    
    def __init__(self):
        self.bot = Bot(TOKEN)
        self.dp = Dispatcher(self.bot)
        self.setup_middleware()
        self.setup_handlers()
        self.active_games = {}
    
    def setup_middleware(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ middleware"""
        manager = MiddlewareManager()
        manager.add_middleware(LoggingMiddleware())
        manager.add_middleware(ErrorHandlingMiddleware())
        self.dp.middleware_manager = manager
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        @self.dp.message_handler(command("start"))
        async def start_handler(ctx: Context):
            # –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
            if ctx.user_id in self.active_games:
                del self.active_games[ctx.user_id]
            
            game = BlackjackGame(ctx.user_id, ctx.user.name)
            self.active_games[ctx.user_id] = game
            
            await ctx.reply(
                f"üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–ª—ç–∫–¥–∂–µ–∫, {ctx.user.name}!\n\n"
                "üéØ –¶–µ–ª—å: –Ω–∞–±—Ä–∞—Ç—å 21 –æ—á–∫–æ –∏–ª–∏ –±–ª–∏–∂–µ –∫ 21, —á–µ–º –¥–∏–ª–µ—Ä\n"
                "üÉè –¢—É–∑ = 1 –∏–ª–∏ 11, –ö–∞—Ä—Ç–∏–Ω–∫–∏ = 10\n\n" +
                game.get_game_state()
            )
        
        @self.dp.message_handler(command("hit"))
        async def hit_handler(ctx: Context):
            if ctx.user_id in self.active_games:
                game = self.active_games[ctx.user_id]
                game.hit()
                await ctx.reply(game.get_game_state())
                
                if game.game_over:
                    del self.active_games[ctx.user_id]
            else:
                await ctx.reply(
                    "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
                )
        
        @self.dp.message_handler(command("stand"))
        async def stand_handler(ctx: Context):
            if ctx.user_id in self.active_games:
                game = self.active_games[ctx.user_id]
                game.stand()
                await ctx.reply(game.get_game_state())
                del self.active_games[ctx.user_id]
            else:
                await ctx.reply(
                    "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
                )
        
        @self.dp.message_handler(command("help"))
        async def help_handler(ctx: Context):
            await ctx.reply(
                "üìñ –ü—Ä–∞–≤–∏–ª–∞ –ë–ª—ç–∫–¥–∂–µ–∫–∞:\n\n"
                "üéØ –¶–µ–ª—å: –Ω–∞–±—Ä–∞—Ç—å 21 –æ—á–∫–æ –∏–ª–∏ –±–ª–∏–∂–µ –∫ 21, —á–µ–º –¥–∏–ª–µ—Ä\n\n"
                "üÉè –ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç:\n"
                "‚Ä¢ 2-10 = –Ω–æ–º–∏–Ω–∞–ª –∫–∞—Ä—Ç—ã\n"
                "‚Ä¢ J, Q, K = 10 –æ—á–∫–æ–≤\n"
                "‚Ä¢ –¢—É–∑ = 1 –∏–ª–∏ 11 (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –ª—É—á—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)\n\n"
                "üéÆ –ö–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ /start - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                "‚Ä¢ /hit - –≤–∑—è—Ç—å –∫–∞—Ä—Ç—É\n"
                "‚Ä¢ /stand - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è\n"
                "‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
            )
        
        @self.dp.message_handler(command("stats"))
        async def stats_handler(ctx: Context):
            active_games = len(self.active_games)
            await ctx.reply(
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                f"üéÆ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä: {active_games}\n"
                f"üÉè –ö–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ: {len(CARDS)}\n"
                f"üë• –ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω: {len(set(game.user_id for game in self.active_games.values()))}\n\n"
                f"üéØ –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É: /start"
            )
        
        @self.dp.message_handler(text(["–Ω–∞—á–∞—Ç—å", "–∏–≥—Ä–∞—Ç—å", "–±–ª—ç–∫–¥–∂–µ–∫"]))
        async def start_text_handler(ctx: Context):
            # –ê–ª–∏–∞—Å –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
            if ctx.user_id in self.active_games:
                del self.active_games[ctx.user_id]
            
            game = BlackjackGame(ctx.user_id, ctx.user.name)
            self.active_games[ctx.user_id] = game
            
            await ctx.reply(
                f"üé∞ –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É, {ctx.user.name}!\n\n" +
                game.get_game_state()
            )
        
        @self.dp.message_handler(text(["–∫–∞—Ä—Ç–∞", "–µ—â–µ", "hit"]))
        async def hit_text_handler(ctx: Context):
            if ctx.user_id in self.active_games:
                game = self.active_games[ctx.user_id]
                game.hit()
                await ctx.reply(game.get_game_state())
                
                if game.game_over:
                    del self.active_games[ctx.user_id]
            else:
                await ctx.reply("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ù–∞–ø–∏—à–∏—Ç–µ '–Ω–∞—á–∞—Ç—å' –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        
        @self.dp.message_handler(text(["—Å—Ç–æ–ø", "—Ö–≤–∞—Ç–∏—Ç", "stand"]))
        async def stand_text_handler(ctx: Context):
            if ctx.user_id in self.active_games:
                game = self.active_games[ctx.user_id]
                game.stand()
                await ctx.reply(game.get_game_state())
                del self.active_games[ctx.user_id]
            else:
                await ctx.reply("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ù–∞–ø–∏—à–∏—Ç–µ '–Ω–∞—á–∞—Ç—å' –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        
        @self.dp.message_handler()
        async def default_handler(ctx: Context):
            if ctx.user_id in self.active_games:
                game = self.active_games[ctx.user_id]
                await ctx.reply(
                    f"ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –í–æ—Ç –≤–∞—à–∞ –∏–≥—Ä–∞:\n\n" + game.get_game_state()
                )
            else:
                await ctx.reply(
                    "üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–ª—ç–∫–¥–∂–µ–∫!\n\n"
                    "üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "üé∞ /start - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
                    "üìñ /help - –ø—Ä–∞–≤–∏–ª–∞\n"
                    "üìä /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
                    "üéØ –ì–æ—Ç–æ–≤—ã –∏–≥—Ä–∞—Ç—å?"
                )
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("üé∞ –ë–ª—ç–∫–¥–∂–µ–∫ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        
        async with self.bot:
            me = await self.bot.get_me()
            print(f"ü§ñ –ë–æ—Ç: {me['name']} (ID: {me['user_id']})")
            
            await self.bot.polling(
                dispatcher=self.dp,
                timeout=1,
                long_polling_timeout=30
            )

async def main():
    bot = BlackjackBot()
    try:
        await bot.run()
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main()) 