"""
–°–ø—Ä–∞–≤–æ—á–Ω—ã–π –±–æ—Ç —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π AsyncMaxBot SDK.
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.
"""

import asyncio
import os
from maxbot import Bot
from maxbot.dispatcher import Dispatcher
from maxbot.filters import command, text, regex, attachment_type, has_attachment
from maxbot.middleware import LoggingMiddleware, ErrorHandlingMiddleware

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª–∞
def get_token():
    token_file = "token.txt"
    if os.path.exists(token_file):
        with open(token_file, 'r') as f:
            return f.read().strip()
    return os.environ.get("MAXBOT_TOKEN", "YOUR_TOKEN_HERE")

async def main():
    bot = Bot(get_token())
    dispatcher = Dispatcher(bot)
    
    # –î–æ–±–∞–≤–ª—è–µ–º middleware
    dispatcher.add_middleware(LoggingMiddleware())
    dispatcher.add_middleware(ErrorHandlingMiddleware())
    
    @dispatcher.message_handler(command("start"))
    async def start_command(ctx):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        help_text = """
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–π –±–æ—Ç!**

üìö **AsyncMaxBot SDK** ‚Äî —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–æ–≤ Max
Messenger —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –∏ —É–¥–æ–±–Ω—ã–º API.

üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/help` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
‚Ä¢ `/info` ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
‚Ä¢ `/test` ‚Äî —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
‚Ä¢ `/upload` ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
‚Ä¢ `/filters` ‚Äî –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤

üí° **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ñ–∞–π–ª** –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏!
        """
        await ctx.reply(help_text)
    
    @dispatcher.message_handler(command("info"))
    async def info_command(ctx):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ"""
        info_text = """
üèóÔ∏è **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ AsyncMaxBot SDK:**

üì¶ **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**
‚Ä¢ `Bot` ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
‚Ä¢ `Dispatcher` ‚Äî –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ `Context` ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
‚Ä¢ `Filters` ‚Äî —Å–∏—Å—Ç–µ–º–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
‚Ä¢ `Middleware` ‚Äî –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

‚ö° **–ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
‚Ä¢ –°—Ç—Ä–æ–≥–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è (Pydantic)
‚Ä¢ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
‚Ä¢ –ì–∏–±–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
‚Ä¢ Middleware –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

üîó **GitHub:** https://github.com/maxbotdev/asyncmaxbot
        """
        await ctx.reply(info_text)
    
    @dispatcher.message_handler(command("test"))
    async def test_command(ctx):
        """–¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
        await ctx.reply("üß™ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç—ã...")
        
        # –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        await ctx.send_action("typing")
        await asyncio.sleep(1)
        
        # –¢–µ—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        msg = await ctx.reply("–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ...")
        await asyncio.sleep(2)
        await ctx.edit_message("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ!")
        
        await ctx.reply("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
    
    @dispatcher.message_handler(command("upload"))
    async def upload_command(ctx):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
        upload_text = """
üì§ **–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤:**

–î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:
‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (PNG, JPG)
‚Ä¢ –í–∏–¥–µ–æ —Ñ–∞–π–ª
‚Ä¢ –ê—É–¥–∏–æ —Ñ–∞–π–ª
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç

–ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ.
        """
        await ctx.reply(upload_text)
    
    @dispatcher.message_handler(command("filters"))
    async def filters_command(ctx):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        filters_text = """
üîç **–°–∏—Å—Ç–µ–º–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤:**

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` ‚Äî —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É "start"

**–¢–µ–∫—Å—Ç:**
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ "–ø—Ä–∏–≤–µ—Ç" ‚Äî —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ ‚Äî —Å—Ä–∞–±–æ—Ç–∞–µ—Ç regex —Ñ–∏–ª—å—Ç—Ä

**–í–ª–æ–∂–µ–Ω–∏—è:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ ‚Äî —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª ‚Äî —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä —Ñ–∞–π–ª–æ–≤
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äî —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –æ–±—â–∏–π —Ñ–∏–ª—å—Ç—Ä

**–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ:**
‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ + –≤–ª–æ–∂–µ–Ω–∏–µ ‚Äî —Å—Ä–∞–±–æ—Ç–∞–µ—Ç AND —Ñ–∏–ª—å—Ç—Ä
        """
        await ctx.reply(filters_text)
    
    @dispatcher.message_handler(text("–ø—Ä–∏–≤–µ—Ç"))
    async def hello_handler(ctx):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞"""
        await ctx.reply("üëã –ü—Ä–∏–≤–µ—Ç! –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä —Å—Ä–∞–±–æ—Ç–∞–ª!")
    
    @dispatcher.message_handler(regex(r"^\d+$"))
    async def number_handler(ctx):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ regex —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è —á–∏—Å–µ–ª"""
        number = int(ctx.text)
        await ctx.reply(f"üî¢ –ü–æ–ª—É—á–∏–ª —á–∏—Å–ª–æ: {number} (regex —Ñ–∏–ª—å—Ç—Ä)")
    
    @dispatcher.message_handler(attachment_type("image"))
    async def image_handler(ctx):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        for attachment in ctx.attachments:
            size = attachment.size or 0
            width = attachment.width or 0
            height = attachment.height or 0
            
            info = f"""
üñºÔ∏è **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!**

üìè –†–∞–∑–º–µ—Ä—ã: {width}x{height}
üíæ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size} –±–∞–π—Ç
üìÑ –¢–∏–ø: {attachment.mime_type or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
            """
            await ctx.reply(info)
    
    @dispatcher.message_handler(attachment_type("file"))
    async def file_handler(ctx):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤"""
        for attachment in ctx.attachments:
            filename = attachment.filename or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            size = attachment.size or 0
            mime_type = attachment.mime_type or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            info = f"""
üìÑ **–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω!**

üìÅ –ò–º—è: {filename}
üíæ –†–∞–∑–º–µ—Ä: {size} –±–∞–π—Ç
üìã –¢–∏–ø: {mime_type}
            """
            await ctx.reply(info)
    
    @dispatcher.message_handler(has_attachment())
    async def any_attachment_handler(ctx):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö –≤–ª–æ–∂–µ–Ω–∏–π"""
        if len(ctx.attachments) > 1:
            await ctx.reply(f"üìé –ü–æ–ª—É—á–∏–ª {len(ctx.attachments)} –≤–ª–æ–∂–µ–Ω–∏–π!")
        else:
            attachment = ctx.attachments[0]
            await ctx.reply(f"üìé –í–ª–æ–∂–µ–Ω–∏–µ —Ç–∏–ø–∞: {attachment.type}")
    
    @dispatcher.message_handler()
    async def echo_handler(ctx):
        """–≠—Ö–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if ctx.text and not ctx.text.startswith('/'):
            await ctx.reply(f"üí¨ –í—ã —Å–∫–∞–∑–∞–ª–∏: {ctx.text}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é —Å–ø—Ä–∞–≤–æ—á–Ω—ã–π –±–æ—Ç...")
    print("üìö –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏")
    
    async with bot:
        await bot.polling(dispatcher=dispatcher)

if __name__ == "__main__":
    asyncio.run(main()) 