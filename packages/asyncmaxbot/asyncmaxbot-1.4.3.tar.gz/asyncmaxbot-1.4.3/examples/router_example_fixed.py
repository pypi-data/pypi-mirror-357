"""
Router —Å–∏—Å—Ç–µ–º–∞ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–∏–º–µ—Ä
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –ª–æ–≥–∏–∫–∏
"""

import asyncio
from maxbot import Bot, Dispatcher, Router, F, Context
from maxbot.max_types import InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = "YOUR_TOKEN_HERE"

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥
def create_commands_router():
    router = Router()
    
    @router.message_handler(F.command == "start")
    async def start_command(ctx: Context):
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üéÆ –ò–≥—Ä—ã", payload="games")],
                [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", payload="stats")],
                [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", payload="help")]
            ]
        )
        await ctx.reply(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {ctx.user.name}! –Ø –º–æ–¥—É–ª—å–Ω—ã–π –±–æ—Ç.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=keyboard
        )
    
    @router.message_handler(F.command == "help")
    async def help_command(ctx: Context):
        await ctx.reply(
            "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "üéÆ /games ‚Äî –∏–≥—Ä—ã\n"
            "üìä /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "‚ÑπÔ∏è /help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "üîß /settings ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        )
    
    @router.message_handler(F.command == "settings")
    async def settings_command(ctx: Context):
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", payload="notifications")],
                [InlineKeyboardButton(text="üåç –Ø–∑—ã–∫", payload="language")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", payload="back_to_main")]
            ]
        )
        await ctx.reply("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=keyboard)
    
    return router

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è callback
def create_callback_router():
    router = Router()
    
    @router.callback_query_handler(F.payload == "games")
    async def games_callback(ctx: Context):
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üé∞ –ë–ª—ç–∫–¥–∂–µ–∫", payload="blackjack")],
                [InlineKeyboardButton(text="üé≤ –ö–æ—Å—Ç–∏", payload="dice")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", payload="back_to_main")]
            ]
        )
        await ctx.answer_callback("üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:")
        await ctx.edit_message("üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:", reply_markup=keyboard)
    
    @router.callback_query_handler(F.payload == "stats")
    async def stats_callback(ctx: Context):
        await ctx.answer_callback("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
        await ctx.edit_message(
            "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            "üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: 15\n"
            "üèÜ –ü–æ–±–µ–¥: 8\n"
            "üìù –°–æ–æ–±—â–µ–Ω–∏–π: 127"
        )
    
    @router.callback_query_handler(F.payload == "help")
    async def help_callback(ctx: Context):
        await ctx.answer_callback("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞")
        await ctx.edit_message(
            "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:\n\n"
            "üéÆ –ò–≥—Ä—ã ‚Äî —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–∏–Ω–∏-–∏–≥—Ä—ã\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è"
        )
    
    @router.callback_query_handler(F.payload == "back_to_main")
    async def back_to_main_callback(ctx: Context):
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üéÆ –ò–≥—Ä—ã", payload="games")],
                [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", payload="stats")],
                [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", payload="help")]
            ]
        )
        await ctx.answer_callback("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        await ctx.edit_message(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {ctx.user.name}! –Ø –º–æ–¥—É–ª—å–Ω—ã–π –±–æ—Ç.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=keyboard
        )
    
    return router

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Å–æ–±—ã—Ç–∏–π
def create_events_router():
    router = Router()
    
    @router.bot_started_handler()
    async def on_bot_started(ctx: Context):
        await ctx.reply(
            f"üéâ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {ctx.user.name}!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
        )
    
    @router.user_added_handler()
    async def on_user_added(ctx: Context):
        await ctx.reply(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {ctx.user.name}!\n"
            "–Ø –º–æ–¥—É–ª—å–Ω—ã–π –±–æ—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
        )
    
    @router.chat_member_updated_handler()
    async def on_member_updated(ctx: Context):
        await ctx.reply(
            f"üë§ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {ctx.user.name} –∏–∑–º–µ–Ω–µ–Ω:\n"
            f"üìä {ctx.old_status} ‚Üí {ctx.new_status}"
        )
    
    return router

async def main():
    async with Bot(token=TOKEN) as bot:
        dp = Dispatcher(bot)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        commands_router = create_commands_router()
        callback_router = create_callback_router()
        events_router = create_events_router()
        
        dp.include_router(commands_router)
        dp.include_router(callback_router)
        dp.include_router(events_router)
        
        print("üîß –ú–æ–¥—É–ª—å–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        await bot.polling(dispatcher=dp)

if __name__ == "__main__":
    asyncio.run(main()) 