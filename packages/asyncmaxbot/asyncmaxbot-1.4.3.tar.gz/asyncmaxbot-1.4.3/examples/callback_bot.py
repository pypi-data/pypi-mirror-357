#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –±–æ—Ç–∞ —Å callback –∫–Ω–æ–ø–∫–∞–º–∏
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É callback_query
"""

import asyncio
from maxbot import Bot, Dispatcher, F
from maxbot.max_types import InlineKeyboardMarkup, InlineKeyboardButton

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot("YOUR_TOKEN_HERE")
dp = Dispatcher(bot)

@dp.message_handler(commands=["start"])
async def start_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ–≥–ª–∞—Å–Ω–æ maxapi —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ö–Ω–æ–ø–∫–∞ 1", payload="btn1"),
                InlineKeyboardButton(text="–ö–Ω–æ–ø–∫–∞ 2", payload="btn2"),
            ],
            [
                InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", payload="info"),
                InlineKeyboardButton(text="–ü–æ–º–æ—â—å", payload="help"),
            ]
        ]
    )
    
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@dp.message_handler(commands=["menu"])
async def menu_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    buttons = []
    for i in range(1, 4):
        buttons.append([
            InlineKeyboardButton(
                text=f"–û–ø—Ü–∏—è {i}", 
                payload=f"option_{i}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    buttons.append([
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", payload="cancel")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=keyboard
    )

@dp.callback_query_handler()
async def handle_all_callbacks(ctx: Context):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∫–æ–ª–±—ç–∫–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç —è–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
    """
    if ctx.payload == 'btn1':
        await ctx.answer_callback("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –ö–Ω–æ–ø–∫—É 1")
    elif ctx.payload == 'btn2':
        await ctx.answer_callback("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –ö–Ω–æ–ø–∫—É 2")
    elif ctx.payload == 'info':
        await ctx.edit_message("–≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", payload="back_to_start")]]
        ))
    elif ctx.payload == 'help':
        await ctx.edit_message("–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏.", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", payload="back_to_start")]]
        ))
    elif ctx.payload.startswith("option_"):
        option_num = ctx.payload.split("_")[1]
        await ctx.answer_callback(f"–í—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è {option_num}")
    elif ctx.payload == "cancel":
        await ctx.edit_message("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    elif ctx.payload == "back_to_start":
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ö–Ω–æ–ø–∫–∞ 1", payload="btn1"),
                    InlineKeyboardButton(text="–ö–Ω–æ–ø–∫–∞ 2", payload="btn2"),
                ],
                [
                    InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", payload="info"),
                    InlineKeyboardButton(text="–ü–æ–º–æ—â—å", payload="help"),
                ]
            ]
        )
        await ctx.edit_message("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
    elif ctx.payload == "back_to_menu":
        # –õ–æ–≥–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é –æ–ø—Ü–∏–π
        pass # –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
    else:
        await ctx.answer_callback(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–ª–±—ç–∫: {ctx.payload}")

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ callback –±–æ—Ç–∞...")
    print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
    print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    async def main():
        async with bot:
            me = await bot.get_me()
            print(f"ü§ñ –ë–æ—Ç: {me['name']} (ID: {me['user_id']})")
            
            await bot.polling(
                dispatcher=dp,
                timeout=1,
                long_polling_timeout=30
            )
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω") 