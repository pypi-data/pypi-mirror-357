"""
–≠—Ö–æ-–±–æ—Ç - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–∏–º–µ—Ä
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ AsyncMaxBot SDK 1.4.2
"""

import asyncio
from maxbot import Bot, Dispatcher, Context, F
from maxbot.filters import command, text
from maxbot.middleware import LoggingMiddleware, ErrorHandlingMiddleware

# ‚ö†Ô∏è –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω —Å—é–¥–∞
TOKEN = "YOUR_TOKEN_HERE"

class EchoBot:
    """–≠—Ö–æ-–±–æ—Ç —Å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    
    def __init__(self):
        self.bot = Bot(TOKEN)
        self.dp = Dispatcher(self.bot)
        self.setup_middleware()
        self.setup_handlers()
        self.stats = {"messages": 0, "users": set()}
    
    def setup_middleware(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ middleware"""
        self.dp.include_middleware(LoggingMiddleware())
        self.dp.include_middleware(ErrorHandlingMiddleware())
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        @self.dp.message_handler(F.command == "start")
        async def start_handler(ctx: Context):
            await ctx.reply(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {ctx.user.name}! –Ø —ç—Ö–æ-–±–æ—Ç.\n"
                "üìù –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –ø–æ–≤—Ç–æ—Ä—é —ç—Ç–æ.\n"
                "üìä /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                "üîÑ /echo ‚Äî —Ä–µ–∂–∏–º —ç—Ö–æ\n"
                "‚ùì /help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
            )
        
        @self.dp.message_handler(F.command == "help")
        async def help_handler(ctx: Context):
            await ctx.reply(
                "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ —ç—Ö–æ-–±–æ—Ç—É:\n\n"
                "üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –µ–≥–æ –ø–æ–≤—Ç–æ—Ä—é\n"
                "üìä /stats ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                "üîÑ /echo ‚Äî –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —ç—Ö–æ\n"
                "‚ùì /help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
            )
        
        @self.dp.message_handler(F.command == "stats")
        async def stats_handler(ctx: Context):
            self.stats["messages"] += 1
            self.stats["users"].add(ctx.user_id)
            
            await ctx.reply(
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {self.stats['messages']}\n"
                f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.stats['users'])}"
            )
        
        @self.dp.message_handler(F.command == "echo")
        async def echo_mode_handler(ctx: Context):
            await ctx.reply("üîÑ –†–µ–∂–∏–º —ç—Ö–æ –≤–∫–ª—é—á–µ–Ω! –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å.")
        
        @self.dp.message_handler(F.text.contains("–ø—Ä–∏–≤–µ—Ç"))
        async def hello_handler(ctx: Context):
            emoji = "ü¶ú" if "–ø—Ä–∏–≤–µ—Ç" in ctx.text.lower() else "üì¢"
            await ctx.reply(f"{emoji} {ctx.text}")
        
        @self.dp.message_handler()
        async def echo_handler(ctx: Context):
            """
            –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≤–∏—Ç –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–µ–º –∂–µ —Ç–µ–∫—Å—Ç–æ–º.
            –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
            - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (—Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –≤—Å–µ).
            - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ `ctx.text` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.
            - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ `ctx.reply` –¥–ª—è –æ—Ç–≤–µ—Ç–∞.
            """
            self.stats["messages"] += 1
            self.stats["users"].add(ctx.user_id)
            
            if ctx.text and ctx.text.startswith("/"):
                await ctx.reply("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏ /help")
            elif ctx.text:
                emoji = "ü¶ú" if "–ø—Ä–∏–≤–µ—Ç" in ctx.text.lower() else "üì¢"
                await ctx.reply(f"{emoji} {ctx.text}")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("ü§ñ –≠—Ö–æ-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        
        async with self.bot:
            me = await self.bot.get_me()
            print(f"ü§ñ –ë–æ—Ç: {me['name']} (ID: {me['user_id']})")
            
            await self.bot.polling(dispatcher=self.dp)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    bot = EchoBot()
    try:
        await bot.run()
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main()) 