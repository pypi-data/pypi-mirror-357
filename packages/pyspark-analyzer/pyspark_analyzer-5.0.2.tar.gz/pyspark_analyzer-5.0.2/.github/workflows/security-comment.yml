name: Security PR Comment

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  comment:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.event == 'pull_request'

    steps:
    - name: Download security artifacts
      uses: actions/download-artifact@v4
      with:
        name: security-reports
        path: ./security-reports
        run-id: ${{ github.event.workflow_run.id }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

    - name: Parse and comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          // Get PR number from workflow run
          const pullRequests = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            sort: 'updated',
            direction: 'desc',
            per_page: 10
          });

          let prNumber = null;
          for (const pr of pullRequests.data) {
            if (pr.head.sha === context.payload.workflow_run.head_sha) {
              prNumber = pr.number;
              break;
            }
          }

          if (!prNumber) {
            console.log('No matching PR found');
            return;
          }

          let comment = '## 🔒 Security Scan Results\n\n';
          comment += `Workflow run: [${context.payload.workflow_run.id}](${context.payload.workflow_run.html_url})\n\n`;

          // Check for security reports
          try {
            const safetyPath = path.join('./security-reports', 'safety-report.json');
            const banditPath = path.join('./security-reports', 'bandit-report.json');

            let hasIssues = false;

            // Parse Safety report
            if (fs.existsSync(safetyPath)) {
              const safetyData = JSON.parse(fs.readFileSync(safetyPath, 'utf8'));
              const vulns = safetyData.vulnerabilities || [];

              if (vulns.length > 0) {
                hasIssues = true;
                comment += '### ⚠️ Safety Vulnerabilities Found\n\n';
                comment += '| Package | Version | Vulnerability | Severity |\n';
                comment += '|---------|---------|--------------|----------|\n';

                vulns.forEach(v => {
                  comment += `| ${v.package_name || 'Unknown'} | ${v.analyzed_version || 'N/A'} | ${v.vulnerability_id || 'N/A'} | ${v.severity || 'Unknown'} |\n`;
                });
                comment += '\n';
              } else {
                comment += '### ✅ Safety Check Passed\n\nNo known vulnerabilities found in dependencies.\n\n';
              }
            }

            // Parse Bandit report
            if (fs.existsSync(banditPath)) {
              const banditData = JSON.parse(fs.readFileSync(banditPath, 'utf8'));
              const results = banditData.results || [];
              const metrics = banditData.metrics || {};

              const highIssues = (metrics['SEVERITY.HIGH'] || 0) + (metrics['CONFIDENCE.HIGH'] || 0);
              const mediumIssues = (metrics['SEVERITY.MEDIUM'] || 0) + (metrics['CONFIDENCE.MEDIUM'] || 0);

              if (highIssues > 0 || mediumIssues > 0) {
                hasIssues = true;
                comment += '### ⚠️ Bandit Security Issues Found\n\n';
                comment += `- High severity/confidence: ${highIssues}\n`;
                comment += `- Medium severity/confidence: ${mediumIssues}\n\n`;

                if (results.length > 0) {
                  comment += 'Top issues:\n';
                  results.slice(0, 5).forEach(r => {
                    comment += `- \`${r.filename}:${r.line_number}\` - ${r.issue_text}\n`;
                  });
                  comment += '\n';
                }
              } else {
                comment += '### ✅ Bandit Security Scan Passed\n\nNo security issues found in code.\n\n';
              }
            }

            if (hasIssues) {
              comment += '### 🔧 Required Actions\n\n';
              comment += '1. Review the security issues listed above\n';
              comment += '2. Update dependencies or fix code as needed\n';
              comment += '3. Re-run security scans after fixes\n\n';
            }

          } catch (error) {
            comment += '⚠️ Error parsing security reports. Check workflow logs for details.\n';
            console.error('Error parsing reports:', error);
          }

          comment += '\n---\n';
          comment += '_Security scans are automatically run on all PRs. [Learn more](../blob/main/SECURITY.md)_';

          // Find existing comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber
          });

          const botComment = comments.data.find(c =>
            c.user.type === 'Bot' && c.body.includes('Security Scan Results')
          );

          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });
          }
