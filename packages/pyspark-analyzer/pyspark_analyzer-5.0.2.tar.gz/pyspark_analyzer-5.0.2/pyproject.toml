[project]
name = "pyspark-analyzer"
version = "5.0.2"
description = "A comprehensive PySpark DataFrame profiler for generating detailed statistics and data quality reports"
requires-python = ">=3.8"
dependencies = [
    "pyspark>=3.0.0",
    "pandas>=1.0.0",
]
authors = [
    {name = "Spark Profiler Contributors", email = "bjornvandijkman@gmail.com"}
]
maintainers = [
    {name = "BjÃ¶rn van Dijkman", email = "bjornvandijkman@gmail.com"}
]
readme = "README.md"
license = {text = "MIT"}
keywords = [
    "pyspark",
    "spark",
    "data-profiling",
    "data-quality",
    "dataframe",
    "statistics",
    "data-analysis",
    "big-data",
    "apache-spark"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Information Analysis",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0.0",
    "pytest-cov>=2.0.0",
    "black>=22.0.0",
    "isort>=5.0.0",
    "mypy>=0.900",
    "safety>=2.0.0",
    "bandit[toml]>=1.7.0",
    "pip-audit>=2.0.0",
    "detect-secrets>=1.4.0",
    "cyclonedx-bom>=4.0.0",
    "pip-licenses>=4.0.0",
    "build>=0.8.0",
    "twine>=4.0.0",
]
docs = [
    "sphinx>=7.1.0,<8.0.0",
    "sphinx-rtd-theme>=3.0.0",
    "sphinx-autodoc-typehints>=1.25.3,<2.0.0",
    "myst-parser>=3.0.0,<4.0.0",
]

[project.urls]
Homepage = "https://github.com/bjornvandijkman1993/pyspark-analyzer"
Repository = "https://github.com/bjornvandijkman1993/pyspark-analyzer"
Documentation = "https://github.com/bjornvandijkman1993/pyspark-analyzer#readme"
Issues = "https://github.com/bjornvandijkman1993/pyspark-analyzer/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["pyspark_analyzer"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"

[tool.black]
line-length = 88
target-version = ['py38', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "pyspark.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pandas.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "py4j.*"
ignore_missing_imports = true

[tool.ruff]
line-length = 88
target-version = "py312"
exclude = [
    ".git",
    "__pycache__",
    "venv",
    ".venv",
    "build",
    "dist",
    "*.egg-info"
]

[tool.ruff.lint]
# Extended rule set for better code quality
select = [
    "E",      # pycodestyle errors
    "F",      # pyflakes (includes F401 unused imports, F841 unused variables)
    "W",      # pycodestyle warnings
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "RET",    # flake8-return
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "RUF",    # Ruff-specific rules
]
ignore = [
    "E203",   # whitespace before ':'
    "E501",   # line length, handled by formatter
    "N802",   # function name should be lowercase (for DataFrame methods)
    "N803",   # argument name should be lowercase (for DataFrame)
    "N806",   # variable in function should be lowercase (for DataFrames)
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101"]  # Skip assert_used test

[tool.coverage.run]
source = ["pyspark_analyzer"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["pyspark_analyzer"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[dependency-groups]
dev = [
    "build>=1.2.2.post1",
    "cyclonedx-bom>=5.5.0",
    "ipykernel>=6.29.5",
    "jupyter>=1.1.1",
    "mypy>=1.14.1",
    "nbstripout>=0.8.1",
    "notebook>=7.3.3",
    "pandas-stubs>=2.0.3.230814",
    "pre-commit>=3.5.0",
    "pytest>=8.3.5",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.1",
    "ruff>=0.11.13",
    "vulture>=2.14",
]
