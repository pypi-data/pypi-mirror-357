name: Dependency Update

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:  # Allow manual triggering

jobs:
  dependency-update:
    name: Update Dependencies
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Python and uv
      uses: ./.github/actions/setup-python-uv
      with:
        python-version: "3.11"

    - name: Check for outdated packages
      run: |
        uv sync --frozen --all-extras
        uv pip list --outdated --format=json > outdated.json

        # Create summary
        if [ -s outdated.json ] && [ "$(cat outdated.json)" != "[]" ]; then
          echo "Outdated packages found:"
          cat outdated.json
          echo "UPDATES_AVAILABLE=true" >> $GITHUB_ENV
        else
          echo "All packages are up to date"
          echo "UPDATES_AVAILABLE=false" >> $GITHUB_ENV
        fi

    - name: Create issue for outdated dependencies
      if: env.UPDATES_AVAILABLE == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const outdated = JSON.parse(fs.readFileSync('outdated.json', 'utf8'));

          if (outdated.length === 0) return;

          let body = '## Outdated Dependencies\n\n';
          body += 'The following packages have newer versions available:\n\n';
          body += '| Package | Current | Latest |\n';
          body += '|---------|---------|--------|\n';

          outdated.forEach(pkg => {
            body += `| ${pkg.name} | ${pkg.version} | ${pkg.latest_version} |\n`;
          });

          body += '\n## Action Required\n\n';
          body += 'Please review and update these dependencies if appropriate.\n';
          body += 'Consider testing thoroughly after updates.\n\n';
          body += '_This issue was automatically created by the dependency update workflow._';

          // Check if issue already exists
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['dependencies'],
            state: 'open'
          });

          const existingIssue = issues.find(issue =>
            issue.title.includes('Outdated Dependencies')
          );

          if (existingIssue) {
            // Update existing issue
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              body: body
            });
          } else {
            // Create new issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸ”„ Outdated Dependencies Detected',
              body: body,
              labels: ['dependencies', 'maintenance']
            });
          }
