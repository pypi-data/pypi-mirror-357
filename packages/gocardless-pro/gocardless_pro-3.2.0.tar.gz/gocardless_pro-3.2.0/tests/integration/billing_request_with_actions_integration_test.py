# WARNING: Do not edit by hand, this file was generated by Crank:
#
#   https://github.com/gocardless/crank
#

import json

import pytest
import requests
import responses

from gocardless_pro.errors import MalformedResponseError
from gocardless_pro import resources
from gocardless_pro import list_response

from .. import helpers
  

@responses.activate
def test_billing_request_with_actions_create_with_actions():
    fixture = helpers.load_fixture('billing_request_with_actions')['create_with_actions']
    helpers.stub_response(fixture)
    response = helpers.client.billing_request_with_actions.create_with_actions(*fixture['url_params'])
    body = fixture['body']['billing_request_with_actions']

    assert isinstance(response, resources.BillingRequestWithAction)
    assert responses.calls[-1].request.headers.get('Idempotency-Key') is not None
    assert response.bank_authorisations.authorisation_type == body.get('bank_authorisations')['authorisation_type']
    assert response.bank_authorisations.authorised_at == body.get('bank_authorisations')['authorised_at']
    assert response.bank_authorisations.created_at == body.get('bank_authorisations')['created_at']
    assert response.bank_authorisations.expires_at == body.get('bank_authorisations')['expires_at']
    assert response.bank_authorisations.id == body.get('bank_authorisations')['id']
    assert response.bank_authorisations.last_visited_at == body.get('bank_authorisations')['last_visited_at']
    assert response.bank_authorisations.links == body.get('bank_authorisations')['links']
    assert response.bank_authorisations.qr_code_url == body.get('bank_authorisations')['qr_code_url']
    assert response.bank_authorisations.redirect_uri == body.get('bank_authorisations')['redirect_uri']
    assert response.bank_authorisations.url == body.get('bank_authorisations')['url']
    assert response.billing_requests.actions == body.get('billing_requests')['actions']
    assert response.billing_requests.created_at == body.get('billing_requests')['created_at']
    assert response.billing_requests.fallback_enabled == body.get('billing_requests')['fallback_enabled']
    assert response.billing_requests.fallback_occurred == body.get('billing_requests')['fallback_occurred']
    assert response.billing_requests.id == body.get('billing_requests')['id']
    assert response.billing_requests.instalment_schedule_request == body.get('billing_requests')['instalment_schedule_request']
    assert response.billing_requests.links == body.get('billing_requests')['links']
    assert response.billing_requests.mandate_request == body.get('billing_requests')['mandate_request']
    assert response.billing_requests.metadata == body.get('billing_requests')['metadata']
    assert response.billing_requests.payment_request == body.get('billing_requests')['payment_request']
    assert response.billing_requests.purpose_code == body.get('billing_requests')['purpose_code']
    assert response.billing_requests.resources == body.get('billing_requests')['resources']
    assert response.billing_requests.status == body.get('billing_requests')['status']
    assert response.billing_requests.subscription_request == body.get('billing_requests')['subscription_request']

@responses.activate
def test_timeout_billing_request_with_actions_create_with_actions_retries():
    fixture = helpers.load_fixture('billing_request_with_actions')['create_with_actions']
    with helpers.stub_timeout_then_response(fixture) as rsps:
      response = helpers.client.billing_request_with_actions.create_with_actions(*fixture['url_params'])
      assert len(rsps.calls) == 2
      assert rsps.calls[0].request.headers.get('Idempotency-Key') == rsps.calls[1].request.headers.get('Idempotency-Key')
    body = fixture['body']['billing_request_with_actions']

    assert isinstance(response, resources.BillingRequestWithAction)

def test_502_billing_request_with_actions_create_with_actions_retries():
    fixture = helpers.load_fixture('billing_request_with_actions')['create_with_actions']
    with helpers.stub_502_then_response(fixture) as rsps:
      response = helpers.client.billing_request_with_actions.create_with_actions(*fixture['url_params'])
      assert len(rsps.calls) == 2
      assert rsps.calls[0].request.headers.get('Idempotency-Key') == rsps.calls[1].request.headers.get('Idempotency-Key')
    body = fixture['body']['billing_request_with_actions']

    assert isinstance(response, resources.BillingRequestWithAction)
  
