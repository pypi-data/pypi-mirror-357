# WARNING: Do not edit by hand, this file was generated by Crank:
#
#   https://github.com/gocardless/crank
#

import json

import pytest
import requests
import responses

from gocardless_pro.errors import MalformedResponseError
from gocardless_pro import resources
from gocardless_pro import list_response

from .. import helpers
  

@responses.activate
def test_outbound_payments_create():
    fixture = helpers.load_fixture('outbound_payments')['create']
    helpers.stub_response(fixture)
    response = helpers.client.outbound_payments.create(*fixture['url_params'])
    body = fixture['body']['outbound_payments']

    assert isinstance(response, resources.OutboundPayment)
    assert responses.calls[-1].request.headers.get('Idempotency-Key') is not None
    assert response.amount == body.get('amount')
    assert response.created_at == body.get('created_at')
    assert response.currency == body.get('currency')
    assert response.description == body.get('description')
    assert response.execution_date == body.get('execution_date')
    assert response.id == body.get('id')
    assert response.is_withdrawal == body.get('is_withdrawal')
    assert response.metadata == body.get('metadata')
    assert response.reference == body.get('reference')
    assert response.scheme == body.get('scheme')
    assert response.status == body.get('status')
    assert response.links.creditor == body.get('links')['creditor']
    assert response.links.customer == body.get('links')['customer']
    assert response.links.recipient_bank_account == body.get('links')['recipient_bank_account']
    assert response.verifications.recipient_bank_account_holder_verification == body.get('verifications')['recipient_bank_account_holder_verification']

@responses.activate
def test_outbound_payments_create_new_idempotency_key_for_each_call():
    fixture = helpers.load_fixture('outbound_payments')['create']
    helpers.stub_response(fixture)
    helpers.client.outbound_payments.create(*fixture['url_params'])
    helpers.client.outbound_payments.create(*fixture['url_params'])
    assert responses.calls[0].request.headers.get('Idempotency-Key') != responses.calls[1].request.headers.get('Idempotency-Key')

def test_timeout_outbound_payments_create_idempotency_conflict():
    create_fixture = helpers.load_fixture('outbound_payments')['create']
    get_fixture = helpers.load_fixture('outbound_payments')['get']
    with helpers.stub_timeout_then_idempotency_conflict(create_fixture, get_fixture) as rsps:
      response = helpers.client.outbound_payments.create(*create_fixture['url_params'])
      assert len(rsps.calls) == 2

    assert isinstance(response, resources.OutboundPayment)

@responses.activate
def test_timeout_outbound_payments_create_retries():
    fixture = helpers.load_fixture('outbound_payments')['create']
    with helpers.stub_timeout_then_response(fixture) as rsps:
      response = helpers.client.outbound_payments.create(*fixture['url_params'])
      assert len(rsps.calls) == 2
      assert rsps.calls[0].request.headers.get('Idempotency-Key') == rsps.calls[1].request.headers.get('Idempotency-Key')
    body = fixture['body']['outbound_payments']

    assert isinstance(response, resources.OutboundPayment)

def test_502_outbound_payments_create_retries():
    fixture = helpers.load_fixture('outbound_payments')['create']
    with helpers.stub_502_then_response(fixture) as rsps:
      response = helpers.client.outbound_payments.create(*fixture['url_params'])
      assert len(rsps.calls) == 2
      assert rsps.calls[0].request.headers.get('Idempotency-Key') == rsps.calls[1].request.headers.get('Idempotency-Key')
    body = fixture['body']['outbound_payments']

    assert isinstance(response, resources.OutboundPayment)
  

@responses.activate
def test_outbound_payments_withdraw():
    fixture = helpers.load_fixture('outbound_payments')['withdraw']
    helpers.stub_response(fixture)
    response = helpers.client.outbound_payments.withdraw(*fixture['url_params'])
    body = fixture['body']['outbound_payments']

    assert isinstance(response, resources.OutboundPayment)
    assert responses.calls[-1].request.headers.get('Idempotency-Key') is not None
    assert response.amount == body.get('amount')
    assert response.created_at == body.get('created_at')
    assert response.currency == body.get('currency')
    assert response.description == body.get('description')
    assert response.execution_date == body.get('execution_date')
    assert response.id == body.get('id')
    assert response.is_withdrawal == body.get('is_withdrawal')
    assert response.metadata == body.get('metadata')
    assert response.reference == body.get('reference')
    assert response.scheme == body.get('scheme')
    assert response.status == body.get('status')
    assert response.links.creditor == body.get('links')['creditor']
    assert response.links.customer == body.get('links')['customer']
    assert response.links.recipient_bank_account == body.get('links')['recipient_bank_account']
    assert response.verifications.recipient_bank_account_holder_verification == body.get('verifications')['recipient_bank_account_holder_verification']

def test_timeout_outbound_payments_withdraw_doesnt_retry():
    fixture = helpers.load_fixture('outbound_payments')['withdraw']
    with helpers.stub_timeout(fixture) as rsps:
      with pytest.raises(requests.ConnectTimeout):
        response = helpers.client.outbound_payments.withdraw(*fixture['url_params'])
      assert len(rsps.calls) == 1

def test_502_outbound_payments_withdraw_doesnt_retry():
    fixture = helpers.load_fixture('outbound_payments')['withdraw']
    with helpers.stub_502(fixture) as rsps:
      with pytest.raises(MalformedResponseError):
        response = helpers.client.outbound_payments.withdraw(*fixture['url_params'])
      assert len(rsps.calls) == 1
  

@responses.activate
def test_outbound_payments_cancel():
    fixture = helpers.load_fixture('outbound_payments')['cancel']
    helpers.stub_response(fixture)
    response = helpers.client.outbound_payments.cancel(*fixture['url_params'])
    body = fixture['body']['outbound_payments']

    assert isinstance(response, resources.OutboundPayment)
    assert responses.calls[-1].request.headers.get('Idempotency-Key') is not None
    assert response.amount == body.get('amount')
    assert response.created_at == body.get('created_at')
    assert response.currency == body.get('currency')
    assert response.description == body.get('description')
    assert response.execution_date == body.get('execution_date')
    assert response.id == body.get('id')
    assert response.is_withdrawal == body.get('is_withdrawal')
    assert response.metadata == body.get('metadata')
    assert response.reference == body.get('reference')
    assert response.scheme == body.get('scheme')
    assert response.status == body.get('status')
    assert response.links.creditor == body.get('links')['creditor']
    assert response.links.customer == body.get('links')['customer']
    assert response.links.recipient_bank_account == body.get('links')['recipient_bank_account']
    assert response.verifications.recipient_bank_account_holder_verification == body.get('verifications')['recipient_bank_account_holder_verification']

def test_timeout_outbound_payments_cancel_doesnt_retry():
    fixture = helpers.load_fixture('outbound_payments')['cancel']
    with helpers.stub_timeout(fixture) as rsps:
      with pytest.raises(requests.ConnectTimeout):
        response = helpers.client.outbound_payments.cancel(*fixture['url_params'])
      assert len(rsps.calls) == 1

def test_502_outbound_payments_cancel_doesnt_retry():
    fixture = helpers.load_fixture('outbound_payments')['cancel']
    with helpers.stub_502(fixture) as rsps:
      with pytest.raises(MalformedResponseError):
        response = helpers.client.outbound_payments.cancel(*fixture['url_params'])
      assert len(rsps.calls) == 1
  

@responses.activate
def test_outbound_payments_approve():
    fixture = helpers.load_fixture('outbound_payments')['approve']
    helpers.stub_response(fixture)
    response = helpers.client.outbound_payments.approve(*fixture['url_params'])
    body = fixture['body']['outbound_payments']

    assert isinstance(response, resources.OutboundPayment)
    assert responses.calls[-1].request.headers.get('Idempotency-Key') is not None
    assert response.amount == body.get('amount')
    assert response.created_at == body.get('created_at')
    assert response.currency == body.get('currency')
    assert response.description == body.get('description')
    assert response.execution_date == body.get('execution_date')
    assert response.id == body.get('id')
    assert response.is_withdrawal == body.get('is_withdrawal')
    assert response.metadata == body.get('metadata')
    assert response.reference == body.get('reference')
    assert response.scheme == body.get('scheme')
    assert response.status == body.get('status')
    assert response.links.creditor == body.get('links')['creditor']
    assert response.links.customer == body.get('links')['customer']
    assert response.links.recipient_bank_account == body.get('links')['recipient_bank_account']
    assert response.verifications.recipient_bank_account_holder_verification == body.get('verifications')['recipient_bank_account_holder_verification']

def test_timeout_outbound_payments_approve_doesnt_retry():
    fixture = helpers.load_fixture('outbound_payments')['approve']
    with helpers.stub_timeout(fixture) as rsps:
      with pytest.raises(requests.ConnectTimeout):
        response = helpers.client.outbound_payments.approve(*fixture['url_params'])
      assert len(rsps.calls) == 1

def test_502_outbound_payments_approve_doesnt_retry():
    fixture = helpers.load_fixture('outbound_payments')['approve']
    with helpers.stub_502(fixture) as rsps:
      with pytest.raises(MalformedResponseError):
        response = helpers.client.outbound_payments.approve(*fixture['url_params'])
      assert len(rsps.calls) == 1
  

@responses.activate
def test_outbound_payments_get():
    fixture = helpers.load_fixture('outbound_payments')['get']
    helpers.stub_response(fixture)
    response = helpers.client.outbound_payments.get(*fixture['url_params'])
    body = fixture['body']['outbound_payments']

    assert isinstance(response, resources.OutboundPayment)
    assert responses.calls[-1].request.headers.get('Idempotency-Key') is None
    assert response.amount == body.get('amount')
    assert response.created_at == body.get('created_at')
    assert response.currency == body.get('currency')
    assert response.description == body.get('description')
    assert response.execution_date == body.get('execution_date')
    assert response.id == body.get('id')
    assert response.is_withdrawal == body.get('is_withdrawal')
    assert response.metadata == body.get('metadata')
    assert response.reference == body.get('reference')
    assert response.scheme == body.get('scheme')
    assert response.status == body.get('status')
    assert response.links.creditor == body.get('links')['creditor']
    assert response.links.customer == body.get('links')['customer']
    assert response.links.recipient_bank_account == body.get('links')['recipient_bank_account']
    assert response.verifications.recipient_bank_account_holder_verification == body.get('verifications')['recipient_bank_account_holder_verification']

@responses.activate
def test_timeout_outbound_payments_get_retries():
    fixture = helpers.load_fixture('outbound_payments')['get']
    with helpers.stub_timeout_then_response(fixture) as rsps:
      response = helpers.client.outbound_payments.get(*fixture['url_params'])
      assert len(rsps.calls) == 2
      assert rsps.calls[0].request.headers.get('Idempotency-Key') == rsps.calls[1].request.headers.get('Idempotency-Key')
    body = fixture['body']['outbound_payments']

    assert isinstance(response, resources.OutboundPayment)

def test_502_outbound_payments_get_retries():
    fixture = helpers.load_fixture('outbound_payments')['get']
    with helpers.stub_502_then_response(fixture) as rsps:
      response = helpers.client.outbound_payments.get(*fixture['url_params'])
      assert len(rsps.calls) == 2
      assert rsps.calls[0].request.headers.get('Idempotency-Key') == rsps.calls[1].request.headers.get('Idempotency-Key')
    body = fixture['body']['outbound_payments']

    assert isinstance(response, resources.OutboundPayment)
  

@responses.activate
def test_outbound_payments_list():
    fixture = helpers.load_fixture('outbound_payments')['list']
    helpers.stub_response(fixture)
    response = helpers.client.outbound_payments.list(*fixture['url_params'])
    body = fixture['body']['outbound_payments']

    assert isinstance(response, list_response.ListResponse)
    assert isinstance(response.records[0], resources.OutboundPayment)

    assert response.before == fixture['body']['meta']['cursors']['before']
    assert response.after == fixture['body']['meta']['cursors']['after']
    assert responses.calls[-1].request.headers.get('Idempotency-Key') is None
    assert [r.amount for r in response.records] == [b.get('amount') for b in body]
    assert [r.created_at for r in response.records] == [b.get('created_at') for b in body]
    assert [r.currency for r in response.records] == [b.get('currency') for b in body]
    assert [r.description for r in response.records] == [b.get('description') for b in body]
    assert [r.execution_date for r in response.records] == [b.get('execution_date') for b in body]
    assert [r.id for r in response.records] == [b.get('id') for b in body]
    assert [r.is_withdrawal for r in response.records] == [b.get('is_withdrawal') for b in body]
    assert [r.metadata for r in response.records] == [b.get('metadata') for b in body]
    assert [r.reference for r in response.records] == [b.get('reference') for b in body]
    assert [r.scheme for r in response.records] == [b.get('scheme') for b in body]
    assert [r.status for r in response.records] == [b.get('status') for b in body]

@responses.activate
def test_timeout_outbound_payments_list_retries():
    fixture = helpers.load_fixture('outbound_payments')['list']
    with helpers.stub_timeout_then_response(fixture) as rsps:
      response = helpers.client.outbound_payments.list(*fixture['url_params'])
      assert len(rsps.calls) == 2
      assert rsps.calls[0].request.headers.get('Idempotency-Key') == rsps.calls[1].request.headers.get('Idempotency-Key')
    body = fixture['body']['outbound_payments']

    assert isinstance(response, list_response.ListResponse)
    assert isinstance(response.records[0], resources.OutboundPayment)

    assert response.before == fixture['body']['meta']['cursors']['before']
    assert response.after == fixture['body']['meta']['cursors']['after']

def test_502_outbound_payments_list_retries():
    fixture = helpers.load_fixture('outbound_payments')['list']
    with helpers.stub_502_then_response(fixture) as rsps:
      response = helpers.client.outbound_payments.list(*fixture['url_params'])
      assert len(rsps.calls) == 2
      assert rsps.calls[0].request.headers.get('Idempotency-Key') == rsps.calls[1].request.headers.get('Idempotency-Key')
    body = fixture['body']['outbound_payments']

    assert isinstance(response, list_response.ListResponse)
    assert isinstance(response.records[0], resources.OutboundPayment)

    assert response.before == fixture['body']['meta']['cursors']['before']
    assert response.after == fixture['body']['meta']['cursors']['after']

@responses.activate
def test_outbound_payments_all():
    fixture = helpers.load_fixture('outbound_payments')['list']

    def callback(request):
        if 'after=123' in request.url:
          fixture['body']['meta']['cursors']['after'] = None
        else:
          fixture['body']['meta']['cursors']['after'] = '123'
        return [200, {}, json.dumps(fixture['body'])]

    url = 'http://example.com' + fixture['path_template']
    responses.add_callback(fixture['method'], url, callback)

    all_records = list(helpers.client.outbound_payments.all())
    assert len(all_records) == len(fixture['body']['outbound_payments']) * 2
    for record in all_records:
      assert isinstance(record, resources.OutboundPayment)
    
  

@responses.activate
def test_outbound_payments_update():
    fixture = helpers.load_fixture('outbound_payments')['update']
    helpers.stub_response(fixture)
    response = helpers.client.outbound_payments.update(*fixture['url_params'])
    body = fixture['body']['outbound_payments']

    assert isinstance(response, resources.OutboundPayment)
    assert responses.calls[-1].request.headers.get('Idempotency-Key') is None
    assert response.amount == body.get('amount')
    assert response.created_at == body.get('created_at')
    assert response.currency == body.get('currency')
    assert response.description == body.get('description')
    assert response.execution_date == body.get('execution_date')
    assert response.id == body.get('id')
    assert response.is_withdrawal == body.get('is_withdrawal')
    assert response.metadata == body.get('metadata')
    assert response.reference == body.get('reference')
    assert response.scheme == body.get('scheme')
    assert response.status == body.get('status')
    assert response.links.creditor == body.get('links')['creditor']
    assert response.links.customer == body.get('links')['customer']
    assert response.links.recipient_bank_account == body.get('links')['recipient_bank_account']
    assert response.verifications.recipient_bank_account_holder_verification == body.get('verifications')['recipient_bank_account_holder_verification']

@responses.activate
def test_timeout_outbound_payments_update_retries():
    fixture = helpers.load_fixture('outbound_payments')['update']
    with helpers.stub_timeout_then_response(fixture) as rsps:
      response = helpers.client.outbound_payments.update(*fixture['url_params'])
      assert len(rsps.calls) == 2
      assert rsps.calls[0].request.headers.get('Idempotency-Key') == rsps.calls[1].request.headers.get('Idempotency-Key')
    body = fixture['body']['outbound_payments']

    assert isinstance(response, resources.OutboundPayment)

def test_502_outbound_payments_update_retries():
    fixture = helpers.load_fixture('outbound_payments')['update']
    with helpers.stub_502_then_response(fixture) as rsps:
      response = helpers.client.outbound_payments.update(*fixture['url_params'])
      assert len(rsps.calls) == 2
      assert rsps.calls[0].request.headers.get('Idempotency-Key') == rsps.calls[1].request.headers.get('Idempotency-Key')
    body = fixture['body']['outbound_payments']

    assert isinstance(response, resources.OutboundPayment)
  
