# WARNING: Do not edit by hand, this file was generated by Crank:
#
#   https://github.com/gocardless/crank
#

from . import base_service
from .. import resources
from ..paginator import Paginator
from .. import errors

class OutboundPaymentsService(base_service.BaseService):
    """Service class that provides access to the outbound_payments
    endpoints of the GoCardless Pro API.
    """

    RESOURCE_CLASS = resources.OutboundPayment
    RESOURCE_NAME = 'outbound_payments'


    def create(self,params=None, headers=None):
        """Create an outbound payment.

        

        Args:
              params (dict, optional): Request body.

        Returns:
              OutboundPayment
        """
        path = '/outbound_payments'
        
        if params is not None:
            params = {self._envelope_key(): params}

        try:
          response = self._perform_request('POST', path, params, headers,
                                            retry_failures=True)
        except errors.IdempotentCreationConflictError as err:
          if self.raise_on_idempotency_conflict:
            raise err
          return self.get(identity=err.conflicting_resource_id,
                          params=params,
                          headers=headers)
        return self._resource_for(response)
  

    def withdraw(self,params=None, headers=None):
        """Create a withdrawal outbound payment.

        Creates an outbound payment to your verified business bank account as
        the recipient.

        Args:
              params (dict, optional): Request body.

        Returns:
              OutboundPayment
        """
        path = '/outbound_payments/withdrawal'
        
        if params is not None:
            params = {'data': params}
        response = self._perform_request('POST', path, params, headers,
                                         retry_failures=False)
        return self._resource_for(response)
  

    def cancel(self,identity,params=None, headers=None):
        """Cancel an outbound payment.

        Cancels an outbound payment. Only outbound payments with either
        `verifying`, `pending_approval`, or `scheduled` status can be
        cancelled.
        Once an outbound payment is `executing`, the money moving process has
        begun and cannot be reversed.

        Args:
              identity (string): Unique identifier of the outbound payment.
              params (dict, optional): Request body.

        Returns:
              OutboundPayment
        """
        path = self._sub_url_params('/outbound_payments/:identity/actions/cancel', {
          
            'identity': identity,
          })
        
        if params is not None:
            params = {'data': params}
        response = self._perform_request('POST', path, params, headers,
                                         retry_failures=False)
        return self._resource_for(response)
  

    def approve(self,identity,params=None, headers=None):
        """Approve an outbound payment.

        Approves an outbound payment. Only outbound payments with the
        “pending_approval” status can be approved.

        Args:
              identity (string): Unique identifier of the outbound payment.
              params (dict, optional): Request body.

        Returns:
              OutboundPayment
        """
        path = self._sub_url_params('/outbound_payments/:identity/actions/approve', {
          
            'identity': identity,
          })
        
        if params is not None:
            params = {'data': params}
        response = self._perform_request('POST', path, params, headers,
                                         retry_failures=False)
        return self._resource_for(response)
  

    def get(self,identity,params=None, headers=None):
        """Get an outbound payment.

        Fetches an outbound_payment by ID

        Args:
              identity (string): Unique identifier of the outbound payment.
              params (dict, optional): Query string parameters.

        Returns:
              OutboundPayment
        """
        path = self._sub_url_params('/outbound_payments/:identity', {
          
            'identity': identity,
          })
        

        response = self._perform_request('GET', path, params, headers,
                                         retry_failures=True)
        return self._resource_for(response)
  

    def list(self,params=None, headers=None):
        """List outbound payments.

        Returns a [cursor-paginated](#api-usage-cursor-pagination) list of
        outbound payments.

        Args:
              params (dict, optional): Query string parameters.

        Returns:
              ListResponse of OutboundPayment instances
        """
        path = '/outbound_payments'
        

        response = self._perform_request('GET', path, params, headers,
                                         retry_failures=True)
        return self._resource_for(response)

    def all(self, params=None):
        if params is None:
            params = {}
        return Paginator(self, params)
    
  

    def update(self,identity,params=None, headers=None):
        """Update an outbound payment.

        Updates an outbound payment object. This accepts only the metadata
        parameter.

        Args:
              identity (string): Unique identifier of the outbound payment.
              params (dict, optional): Request body.

        Returns:
              OutboundPayment
        """
        path = self._sub_url_params('/outbound_payments/:identity', {
          
            'identity': identity,
          })
        
        if params is not None:
            params = {self._envelope_key(): params}

        response = self._perform_request('PUT', path, params, headers,
                                         retry_failures=True)
        return self._resource_for(response)
  
