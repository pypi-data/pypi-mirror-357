# WARNING: Do not edit by hand, this file was generated by Crank:
#
#   https://github.com/gocardless/crank
#

from . import base_service
from .. import resources
from ..paginator import Paginator
from .. import errors

class ExportsService(base_service.BaseService):
    """Service class that provides access to the exports
    endpoints of the GoCardless Pro API.
    """

    RESOURCE_CLASS = resources.Export
    RESOURCE_NAME = 'exports'


    def get(self,identity,params=None, headers=None):
        """Get a single export.

        Returns a single export.

        Args:
              identity (string): Unique identifier, beginning with "EX".
              params (dict, optional): Query string parameters.

        Returns:
              Export
        """
        path = self._sub_url_params('/exports/:identity', {
          
            'identity': identity,
          })
        

        response = self._perform_request('GET', path, params, headers,
                                         retry_failures=True)
        return self._resource_for(response)
  

    def list(self,params=None, headers=None):
        """List exports.

        Returns a list of exports which are available for download.

        Args:
              params (dict, optional): Query string parameters.

        Returns:
              ListResponse of Export instances
        """
        path = '/exports'
        

        response = self._perform_request('GET', path, params, headers,
                                         retry_failures=True)
        return self._resource_for(response)

    def all(self, params=None):
        if params is None:
            params = {}
        return Paginator(self, params)
    
  
