# WARNING: Do not edit by hand, this file was generated by Crank:
#
#   https://github.com/gocardless/crank
#

import json

import pytest
import requests
import responses

from gocardless_pro.errors import MalformedResponseError
from gocardless_pro import resources
from gocardless_pro import list_response

from .. import helpers
  

@responses.activate
def test_mandate_import_entries_create():
    fixture = helpers.load_fixture('mandate_import_entries')['create']
    helpers.stub_response(fixture)
    response = helpers.client.mandate_import_entries.create(*fixture['url_params'])
    body = fixture['body']['mandate_import_entries']

    assert isinstance(response, resources.MandateImportEntry)
    assert responses.calls[-1].request.headers.get('Idempotency-Key') is not None
    assert response.created_at == body.get('created_at')
    assert response.processing_errors == body.get('processing_errors')
    assert response.record_identifier == body.get('record_identifier')
    assert response.links.customer == body.get('links')['customer']
    assert response.links.customer_bank_account == body.get('links')['customer_bank_account']
    assert response.links.mandate == body.get('links')['mandate']
    assert response.links.mandate_import == body.get('links')['mandate_import']

@responses.activate
def test_timeout_mandate_import_entries_create_retries():
    fixture = helpers.load_fixture('mandate_import_entries')['create']
    with helpers.stub_timeout_then_response(fixture) as rsps:
      response = helpers.client.mandate_import_entries.create(*fixture['url_params'])
      assert len(rsps.calls) == 2
      assert rsps.calls[0].request.headers.get('Idempotency-Key') == rsps.calls[1].request.headers.get('Idempotency-Key')
    body = fixture['body']['mandate_import_entries']

    assert isinstance(response, resources.MandateImportEntry)

def test_502_mandate_import_entries_create_retries():
    fixture = helpers.load_fixture('mandate_import_entries')['create']
    with helpers.stub_502_then_response(fixture) as rsps:
      response = helpers.client.mandate_import_entries.create(*fixture['url_params'])
      assert len(rsps.calls) == 2
      assert rsps.calls[0].request.headers.get('Idempotency-Key') == rsps.calls[1].request.headers.get('Idempotency-Key')
    body = fixture['body']['mandate_import_entries']

    assert isinstance(response, resources.MandateImportEntry)
  

@responses.activate
def test_mandate_import_entries_list():
    fixture = helpers.load_fixture('mandate_import_entries')['list']
    helpers.stub_response(fixture)
    response = helpers.client.mandate_import_entries.list(*fixture['url_params'])
    body = fixture['body']['mandate_import_entries']

    assert isinstance(response, list_response.ListResponse)
    assert isinstance(response.records[0], resources.MandateImportEntry)

    assert response.before == fixture['body']['meta']['cursors']['before']
    assert response.after == fixture['body']['meta']['cursors']['after']
    assert responses.calls[-1].request.headers.get('Idempotency-Key') is None
    assert [r.created_at for r in response.records] == [b.get('created_at') for b in body]
    assert [r.processing_errors for r in response.records] == [b.get('processing_errors') for b in body]
    assert [r.record_identifier for r in response.records] == [b.get('record_identifier') for b in body]

@responses.activate
def test_timeout_mandate_import_entries_list_retries():
    fixture = helpers.load_fixture('mandate_import_entries')['list']
    with helpers.stub_timeout_then_response(fixture) as rsps:
      response = helpers.client.mandate_import_entries.list(*fixture['url_params'])
      assert len(rsps.calls) == 2
      assert rsps.calls[0].request.headers.get('Idempotency-Key') == rsps.calls[1].request.headers.get('Idempotency-Key')
    body = fixture['body']['mandate_import_entries']

    assert isinstance(response, list_response.ListResponse)
    assert isinstance(response.records[0], resources.MandateImportEntry)

    assert response.before == fixture['body']['meta']['cursors']['before']
    assert response.after == fixture['body']['meta']['cursors']['after']

def test_502_mandate_import_entries_list_retries():
    fixture = helpers.load_fixture('mandate_import_entries')['list']
    with helpers.stub_502_then_response(fixture) as rsps:
      response = helpers.client.mandate_import_entries.list(*fixture['url_params'])
      assert len(rsps.calls) == 2
      assert rsps.calls[0].request.headers.get('Idempotency-Key') == rsps.calls[1].request.headers.get('Idempotency-Key')
    body = fixture['body']['mandate_import_entries']

    assert isinstance(response, list_response.ListResponse)
    assert isinstance(response.records[0], resources.MandateImportEntry)

    assert response.before == fixture['body']['meta']['cursors']['before']
    assert response.after == fixture['body']['meta']['cursors']['after']

@responses.activate
def test_mandate_import_entries_all():
    fixture = helpers.load_fixture('mandate_import_entries')['list']

    def callback(request):
        if 'after=123' in request.url:
          fixture['body']['meta']['cursors']['after'] = None
        else:
          fixture['body']['meta']['cursors']['after'] = '123'
        return [200, {}, json.dumps(fixture['body'])]

    url = 'http://example.com' + fixture['path_template']
    responses.add_callback(fixture['method'], url, callback)

    all_records = list(helpers.client.mandate_import_entries.all())
    assert len(all_records) == len(fixture['body']['mandate_import_entries']) * 2
    for record in all_records:
      assert isinstance(record, resources.MandateImportEntry)
    
  
