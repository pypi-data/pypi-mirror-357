Metadata-Version: 2.4
Name: arxiv_retriever_batch
Version: 1.0.2
Summary: A Python package for interacting with the arXiv API, providing tools for searching, retrieving, and processing arXiv articles.
Author-email: Giuseppe Zileni <giuseppe.zileni@gmail.com>
Keywords: logi,logging,algho,quest-it,qi_log_loki
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE.md
Requires-Dist: aioboto3>=14.3.0
Requires-Dist: aiobotocore>=2.22.0
Requires-Dist: aiofiles>=24.1.0
Requires-Dist: aiohappyeyeballs>=2.6.1
Requires-Dist: aiohttp>=3.12.13
Requires-Dist: aioitertools>=0.12.0
Requires-Dist: aiosignal>=1.3.2
Requires-Dist: annotated-types>=0.7.0
Requires-Dist: anyio>=4.9.0
Requires-Dist: attrs>=25.3.0
Requires-Dist: boto3>=1.37.3
Requires-Dist: botocore>=1.37.3
Requires-Dist: build>=1.2.2.post1
Requires-Dist: certifi>=2025.6.15
Requires-Dist: chardet>=5.2.0
Requires-Dist: charset-normalizer>=3.4.2
Requires-Dist: contourpy>=1.3.2
Requires-Dist: cycler>=0.12.1
Requires-Dist: fonttools>=4.58.4
Requires-Dist: fpdf>=1.7.2
Requires-Dist: frozenlist>=1.7.0
Requires-Dist: greenlet>=3.2.3
Requires-Dist: h11>=0.16.0
Requires-Dist: httpcore>=1.0.9
Requires-Dist: httpx>=0.28.1
Requires-Dist: idna>=3.10
Requires-Dist: iniconfig>=2.1.0
Requires-Dist: jmespath>=1.0.1
Requires-Dist: jsonpatch>=1.33
Requires-Dist: jsonpointer>=3.0.0
Requires-Dist: kiwisolver>=1.4.8
Requires-Dist: langchain>=0.3.26
Requires-Dist: langchain-core>=0.3.66
Requires-Dist: langchain-text-splitters>=0.3.8
Requires-Dist: langsmith>=0.4.1
Requires-Dist: matplotlib>=3.10.3
Requires-Dist: multidict>=6.5.0
Requires-Dist: narwhals>=1.44.0
Requires-Dist: numpy>=2.3.1
Requires-Dist: orjson>=3.10.18
Requires-Dist: packaging>=24.2
Requires-Dist: pandas>=2.3.0
Requires-Dist: pillow>=11.2.1
Requires-Dist: plotly>=6.1.2
Requires-Dist: pluggy>=1.6.0
Requires-Dist: propcache>=0.3.2
Requires-Dist: pyaws-s3>=1.0.22
Requires-Dist: pydantic>=2.11.7
Requires-Dist: pydantic_core>=2.33.2
Requires-Dist: Pygments>=2.19.2
Requires-Dist: pyparsing>=3.2.3
Requires-Dist: pyproject_hooks>=1.2.0
Requires-Dist: pytest>=8.4.1
Requires-Dist: python-dateutil>=2.9.0.post0
Requires-Dist: pytz>=2025.2
Requires-Dist: PyYAML>=6.0.2
Requires-Dist: reportlab>=4.4.2
Requires-Dist: requests>=2.32.4
Requires-Dist: requests-toolbelt>=1.0.0
Requires-Dist: s3transfer>=0.11.3
Requires-Dist: setuptools>=80.9.0
Requires-Dist: six>=1.17.0
Requires-Dist: sniffio>=1.3.1
Requires-Dist: SQLAlchemy>=2.0.41
Requires-Dist: tenacity>=9.1.2
Requires-Dist: typing-inspection>=0.4.1
Requires-Dist: typing_extensions>=4.14.0
Requires-Dist: tzdata>=2025.2
Requires-Dist: urllib3>=2.5.0
Requires-Dist: wrapt>=1.17.2
Requires-Dist: yarl>=1.20.1
Requires-Dist: zstandard>=0.23.0
Dynamic: license-file

# Py-AXIRV

Py-AXIRV is a Python package installable via pip that allows you to download and upload articles from arXiv directly to S3 storage.

## Installation

```bash
pip install py-axirv
```

## Usage

Example usage to upload arXiv articles to S3:

```python
import urllib.request as libreq
import os
from py_axirv.axirv import ArxivLoader
import xml.etree.ElementTree as ET

documents = []

axirv = ArxivLoader(
    max_results=10000,
    start=0,
    type_storage='s3',
    aws_access_key_id=os.getenv("AWS_ACCESS_KEY_ID"),
    aws_secret_access_key=os.getenv("AWS_SECRET_ACCESS_KEY"),
    region_name=os.getenv("AWS_REGION"),
    bucket_name=os.getenv("AWS_BUCKET_NAME"),
    prefix='arxiv'
)

axirv.load()
```

Make sure to set the AWS environment variables (`AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, `AWS_REGION`, `AWS_BUCKET_NAME`) before running the script.

Example usage to upload arXiv articles to a local path:

```python
import urllib.request as libreq
import os
from py_axirv.axirv import ArxivLoader
import xml.etree.ElementTree as ET

documents = []

axirv = ArxivLoader(
    max_results=10000,
    start=0,
    type_storage='local',
    path_download='tmp'
)

# or configure a different download folder
axirv.set_path_download('/downloads/axirv')

axirv.load()
```

## Retriever Example

Example usage with `ArxivRetriever` to process arXiv articles from S3 and download them locally:

```python
import os
from py_arxiv_retriever import ArxivRetriever

documents = []

axirv = ArxivRetriever(
    type_storage='s3',
    path_type='s3'
    aws_access_key_id=os.getenv("AWS_ACCESS_KEY_ID"),
    aws_secret_access_key=os.getenv("AWS_SECRET_ACCESS_KEY"),
    region_name=os.getenv("AWS_REGION"),
    bucket_name=os.getenv("AWS_BUCKET_NAME"),
    prefix='arxiv',
    path_download='arxiv_documents',
)

axirv.process()
```

## License

This project is distributed under the MIT license.
