import serial
import serial.tools.list_ports
import time
import logging


class ArduinoController:
    """
    –ö–ª–∞—Å—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Arduino.
    """

    # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ VID/PID Arduino-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    DEFAULT_VID_PID_LIST = [
        ("2341", "0043"),  # Arduino Uno
        ("2341", "8036"),  # Arduino Leonardo
        ("2341", "0001"),  # Arduino Uno (–¥—Ä—É–≥–æ–π –∑–∞–≥—Ä—É–∑—á–∏–∫)
        ("1A86", "7523"),  # CH340 USB-UART (—á–∞—Å—Ç–æ –≤ –∫–∏—Ç–∞–π—Å–∫–∏—Ö Arduino)
        ("10C4", "EA60"),  # CP2102
        ("1A86", "55D4"),  # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–∏—Ç–∞–π—Å–∫–∏–µ –∫–ª–æ–Ω—ã
    ]

    def __init__(self, port: str = None, vid_pid_list=None, auto_reconnect: bool = True):
        """
        :param port: –£–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'COM5')
        :param vid_pid_list: –°–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö VID/PID (—Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π —Å—Ç—Ä–æ–∫)
        :param auto_reconnect: –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è (True/False)
        """
        self.__user_port = port
        self.__auto_reconnect = auto_reconnect
        self.__vid_pid_list = vid_pid_list or self.DEFAULT_VID_PID_LIST
        self.__port = None
        self.__serial = None
        self.__logger = logging.getLogger(__name__)
        self.__open()

    @staticmethod
    def list_available_ports(verbose: bool = True):
        """
        –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö COM-–ø–æ—Ä—Ç–æ–≤
        """
        ports = serial.tools.list_ports.comports()
        for port in ports:
            info = f"{port.device} ‚Äî {port.description} (VID={port.vid}, PID={port.pid})"
            if verbose:
                print(f"üîå {info}")
        return ports

    def __find_arduino_port_by_vid_pid(self):
        """
        –ü–æ–∏—Å–∫ Arduino –ø–æ VID/PID
        """
        ports = serial.tools.list_ports.comports()
        for port in ports:
            vid = f"{port.vid:04X}" if port.vid else None
            pid = f"{port.pid:04X}" if port.pid else None
            if vid and pid and (vid, pid) in self.__vid_pid_list:
                return port.device
        return None

    @staticmethod
    def suggest_ports(show_all: bool = False):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ COM-–ø–æ—Ä—Ç–æ–≤, –ø—Ä–∏–≥–æ–¥–Ω—ã—Ö –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞.
        :param show_all: –µ—Å–ª–∏ True ‚Äî –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ, –∏–Ω–∞—á–µ —Ç–æ–ª—å–∫–æ –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ Arduino
        """
        ports = serial.tools.list_ports.comports()
        if not ports:
            print("‚ùå –ü–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ COM-–ø–æ—Ä—Ç—ã:")
        for port in ports:
            description = port.description or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
            vid = f"{port.vid:04X}" if port.vid else "--"
            pid = f"{port.pid:04X}" if port.pid else "--"
            match = any(
                (f"{port.vid:04X}", f"{port.pid:04X}") == known
                for known in ArduinoController.DEFAULT_VID_PID_LIST
            )
            if show_all or match or any(x in description for x in ["Arduino", "Serial", "CH340"]):
                print(f"üîå {port.device}: {description} (VID={vid}, PID={pid})")

    def __find_arduino_port_by_description(self):
        """
        –†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–æ—Å–æ–±: –ø–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
        """
        arduino_identifiers = [
            "Arduino", "CH340", "USB Serial Device", "USB2.0-Serial",
            "Leonardo", "Pro Micro", "CDC", "Composite", "ttyACM", "ttyUSB"
        ]
        ports = serial.tools.list_ports.comports()
        for port in ports:
            desc = port.description or ""
            if any(identifier.lower() in desc.lower() for identifier in arduino_identifiers):
                return port.device
        return None

    def __find_arduino_port(self):
        """
        –ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ Arduino –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        """
        port = self.__find_arduino_port_by_vid_pid()
        if port:
            self.__logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω Arduino –ø–æ VID/PID: {port}")
            return port

        port = self.__find_arduino_port_by_description()
        if port:
            self.__logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω Arduino –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: {port}")
            return port

        return None

    def __open(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Arduino"""
        if self.__serial and self.__serial.is_open:
            return

        self.__port = self.__user_port or self.__find_arduino_port()

        if not self.__port:
            self.suggest_ports(show_all=True)
            raise RuntimeError("‚ùå Arduino –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –ø–æ—Ä—Ç –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")

        for attempt in range(3):
            try:
                self.__serial = serial.Serial(self.__port, baudrate=9600, timeout=1)
                time.sleep(2)
                if self.__serial.is_open:
                    self.__logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Arduino –Ω–∞ –ø–æ—Ä—Ç—É {self.__port}")
                    return
            except serial.SerialException as e:
                self.__logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: {e}")
                time.sleep(1)

        self.suggest_ports()
        raise RuntimeError(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {self.__port}. "
            f"–ü–æ—Ä—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–Ω—è—Ç –∏–ª–∏ Arduino –Ω–µ –≥–æ—Ç–æ–≤. "
            f"–£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ `ArduinoController(port='COMX')`."
        )

    @property
    def __is_connected(self):
        return self.__serial is not None and self.__serial.is_open

    def __close(self):
        if self.__is_connected:
            try:
                self.__serial.close()
                self.__logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Arduino –∑–∞–∫—Ä—ã—Ç–æ")
            except serial.SerialException as e:
                self.__logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.__close()

    def _send_command(self, device: str, action: str, *args) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ Arduino –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        """
        command = f"{device}|{action}|"
        if args:
            command += "|".join(str(arg) for arg in args)

        if not self.__is_connected:
            self.__logger.warning("‚ö†Ô∏è Arduino –æ—Ç–∫–ª—é—á—ë–Ω.")
            if self.__auto_reconnect:
                self.__logger.info("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...")
                for attempt in range(10):
                    try:
                        self.__open()
                        self.__logger.info("‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Arduino.")
                        break
                    except Exception as e:
                        self.__logger.debug(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: {e}")
                        time.sleep(3)
                else:
                    self.__logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Arduino.")
                    return False
            else:
                return False

        try:
            self.__serial.write(f"{command}\n".encode())
            response = self.__serial.readline().decode().strip()
            return response == "True"
        except serial.SerialException as e:
            self.__logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏: {e}")
            self.__serial = None  # –û—Ç–º–µ—Ç–∏–º –∫–∞–∫ –æ—Ç–∫–ª—é—á—ë–Ω–Ω–æ–µ
            return False

