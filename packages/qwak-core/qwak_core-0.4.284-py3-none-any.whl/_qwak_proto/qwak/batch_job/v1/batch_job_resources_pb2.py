# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: qwak/batch_job/v1/batch_job_resources.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n+qwak/batch_job/v1/batch_job_resources.proto\x12\rqwak.batchjob\"L\n\x0cGpuResources\x12(\n\x08gpu_type\x18\x01 \x01(\x0e\x32\x16.qwak.batchjob.GpuType\x12\x12\n\ngpu_amount\x18\x02 \x01(\x05*{\n\x07GpuType\x12\x0f\n\x0bINVALID_GPU\x10\x00\x12\x0e\n\nNVIDIA_K80\x10\x01\x12\x0f\n\x0bNVIDIA_V100\x10\x02\x12\x0f\n\x0bNVIDIA_A100\x10\x03\x12\r\n\tNVIDIA_T4\x10\x04\x12\x0f\n\x0bNVIDIA_A10G\x10\x05\x12\r\n\tNVIDIA_L4\x10\x06\x42.\n\x19\x63om.qwak.ai.batch.job.apiP\x01Z\x0f./;inferencejobb\x06proto3')

_GPUTYPE = DESCRIPTOR.enum_types_by_name['GpuType']
GpuType = enum_type_wrapper.EnumTypeWrapper(_GPUTYPE)
INVALID_GPU = 0
NVIDIA_K80 = 1
NVIDIA_V100 = 2
NVIDIA_A100 = 3
NVIDIA_T4 = 4
NVIDIA_A10G = 5
NVIDIA_L4 = 6


_GPURESOURCES = DESCRIPTOR.message_types_by_name['GpuResources']
GpuResources = _reflection.GeneratedProtocolMessageType('GpuResources', (_message.Message,), {
  'DESCRIPTOR' : _GPURESOURCES,
  '__module__' : 'qwak.batch_job.v1.batch_job_resources_pb2'
  # @@protoc_insertion_point(class_scope:qwak.batchjob.GpuResources)
  })
_sym_db.RegisterMessage(GpuResources)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n\031com.qwak.ai.batch.job.apiP\001Z\017./;inferencejob'
  _GPUTYPE._serialized_start=140
  _GPUTYPE._serialized_end=263
  _GPURESOURCES._serialized_start=62
  _GPURESOURCES._serialized_end=138
# @@protoc_insertion_point(module_scope)
