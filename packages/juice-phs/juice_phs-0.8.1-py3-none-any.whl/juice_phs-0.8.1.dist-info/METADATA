Metadata-Version: 2.3
Name: juice-phs
Version: 0.8.1
Summary: A Pointing Tool OSVE wrapper
License: European Space Agency Public License (ESA-PL) Permissive (Type 3) ‚Äì v2.4
Author: Marc Costa
Author-email: marc.costa@ext.esa.int
Requires-Python: >=3.8,<4.0
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: Other/Proprietary License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Typing :: Typed
Requires-Dist: PyAstronomy (>=0.22.0)
Requires-Dist: jsonschema (>=4.23.0)
Requires-Dist: numpy (>=1.26.4)
Requires-Dist: planetary_coverage (>=1.1.1)
Requires-Dist: plotly (>=5.24.1)
Requires-Dist: python-dotenv (>=1.1.0)
Requires-Dist: requests (>=2.32.3)
Requires-Dist: spiceypy (>=5.1.2)
Requires-Dist: tqdm (>=4.66.5)
Project-URL: Documentation, https://juicesoc.esac.esa.int/panel/#/navigation/help
Project-URL: Homepage, https://gitlab.esa.int/juice-soc-public/python/juice-phs
Project-URL: Repository, https://gitlab.esa.int/juice-soc-public/python/juice-phs
Description-Content-Type: text/markdown

# ü™¢ JUICE Planning Harmonisation System

juice-phs is a Python package that supports the Detailed Scenario Exercises during the Observation Plan,
Pointing and Instrument Timeline Harmonisation processes. It also includes number of routines to calculate the
geometry parameters that require spacecraft attitude information.


## üõ†Ô∏èÔ∏è Prerequisites

   * A computer based on a 64-bit Unix operating system: Linux or Mac
   * Python 3.8 (or higher)


## ‚éÜ Python Installation

Install juice-phs with:

```sh
pip install [--upgrade] juice-phs
```

If you have a JUICE Git user, you can also install juice-phs locally from the repository:

```sh
git clone https://juigitlab.esac.esa.int/python/juice-phs
cd juice-phs
pip install .
```

## Using the library

After installing the library can be used with the Python Shell or with its CLI.

### Command line interface

The package has a number of CLI entry points:
  - `opl2otl` convert Observation Plan (`OPL`) to Observation Timeline (`OTL`).
  - `opl2otc` convert Observation Plan (`OPL`) to Observation Timeline Coverage (`OTC`).

Usage examples are provided hereunder. Using the following input Observation Plan:
```sh
RIME_PRIME_OBSERVATION,2032-07-02T16:09:54.000Z,2032-07-02T16:31:31.000Z,RIME_EUROPA_FLYBY_02,RIME
RPWI_OBSERVATION,2032-07-02T16:08:54.000Z,2032-07-02T16:32:31.000Z,RPWI_In_situ_slow_Radio_Full,RPWI
RPWI_OBSERVATION,2032-07-02T06:52:25.000Z,2032-07-02T14:52:25.000Z,RPWI_In_situ_normal_Radio_Full,RPWI
JANUS_PRIME_OBSERVATION,2032-07-02T04:18:40.000Z,2032-07-02T04:32:00.000Z,SJS0004C50A_UVS_SAT_STELL_OCC_A,JANUS
```

with:
```sh
opl2otl -h 

usage: opl2otl [-h] [-o OUTPUT] [-s SCENARIO] [-i ITERATION] [-u] csv

juice-itl: convert Observation Plan (OPL) to Observation Timeline (OTL).

positional arguments:
  csv                   Observation Plan (OPL) CSV input file.

optional arguments:
  -h, --help            show this help message and exit
  -o OUTPUT, --output OUTPUT
                        Output directory (default: Current).
  -s SCENARIO, --scenario SCENARIO
                        Scenario Identifier (default: E001).
  -i ITERATION, --iteration ITERATION
                        Iteration reference (default: S01P00).
  -u, --utc             File times as UTC (default: Relative to events).
```

with the following arguments:
```sh
opl2otl opl_input.csv
```

generates the following directory structure:
```sh
.
|-- EVF_E001_01_SOC_S01P01.EVF
|-- EVF_E001_01_SOC_SXXPYY.EVF
|-- JANUS
|   |-- OTL_E001_01_JAN_S01P01.ITL
|   `-- OTL_E001_01_JAN_SXXPYY.ITL
|-- RIME
|   |-- OTL_E001_01_RIM_S01P01.ITL
|   `-- OTL_E001_01_RIM_SXXPYY.ITL
`-- RPWI
    |-- OTL_E001_01_RPW_S01P01.ITL
    `-- OTL_E001_01_RPW_SXXPYY.ITL

```

with the following content for `OTL_E001_01_RPW_SXXPYY.ITL`:
```sh
PTR_OBS_END    (COUNT =   1)   02:20:25  RPWI   OBS_START  RPWI_In_situ_normal_Radio_Full 
PTR_OBS_START  (COUNT =   2)  -01:17:29  RPWI   OBS_END    RPWI_In_situ_normal_Radio_Full

PTR_OBS_START  (COUNT =   2)  -00:01:00  RPWI   OBS_START  RPWI_In_situ_slow_Radio_Full 
PTR_OBS_END    (COUNT =   2)   00:01:00  RPWI   OBS_END    RPWI_In_situ_slow_Radio_Full
```

with :
```sh
opl2qlc -h

usage: opl2otc [-h] [-o OUTPUT] csv

juice-itl: convert Observation Plan (OPL) to Observation Timeline Coverage (OTC).

positional arguments:
  csv                   Quick-Look Coverage input CSV input file.

optional arguments:
  -h, --help            show this help message and exit
  -o OUTPUT, --output OUTPUT
                        Output file (default: qlc_output.csv at current directory).
```

with the following arguments:
```sh
opl2otc opl_input.csv -o otc_output.csv
```

generates the following output file:
```sh
RIME_EUROPA_FLYBY_02,2032-07-02T16:09:54.000Z,2032-07-02T16:31:31.000Z,0,RIME
RPWI_In_situ_slow_Radio_Full,2032-07-02T16:08:54.000Z,2032-07-02T16:32:31.000Z,0,RPWI
RPWI_In_situ_normal_Radio_Full,2032-07-02T06:52:25.000Z,2032-07-02T14:52:25.000Z,0,RPWI
SJS0004C50A_UVS_SAT_STELL_OCC_A,2032-07-02T04:18:40.000Z,2032-07-02T04:32:00.000Z,0,JANUS
```
