# coding: utf-8

"""
    AristaFlowREST/OrgModelManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 5.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from af_org_model_manager.models.dummy_parent import DummyParent  # noqa: F401,E501

class Entity(DummyParent):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sub_class': 'str',
        'type': 'str',
        'attrs': 'dict(str, object)',
        'id': 'int'
    }
    if hasattr(DummyParent, "swagger_types"):
        swagger_types.update(DummyParent.swagger_types)

    attribute_map = {
        'sub_class': 'subClass',
        'type': 'type',
        'attrs': 'attrs',
        'id': 'id'
    }
    if hasattr(DummyParent, "attribute_map"):
        attribute_map.update(DummyParent.attribute_map)

    discriminator_value_class_map = {
              }

    def __init__(self, sub_class=None, type=None, attrs=None, id=None, *args, **kwargs):  # noqa: E501
        """Entity - a model defined in Swagger"""  # noqa: E501
        self._sub_class = None
        self._type = None
        self._attrs = None
        self._id = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = 'sub_class'
        if sub_class is not None:
            self.sub_class = sub_class
        self.type = type
        self.attrs = attrs
        self.id = id
        DummyParent.__init__(self, *args, **kwargs)

    @property
    def sub_class(self):
        """Gets the sub_class of this Entity.  # noqa: E501


        :return: The sub_class of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._sub_class

    @sub_class.setter
    def sub_class(self, sub_class):
        """Sets the sub_class of this Entity.


        :param sub_class: The sub_class of this Entity.  # noqa: E501
        :type: str
        """

        self._sub_class = sub_class

    @property
    def type(self):
        """Gets the type of this Entity.  # noqa: E501


        :return: The type of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Entity.


        :param type: The type of this Entity.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["AGENT", "ORG_POSITION", "ORG_UNIT", "ORG_GROUP", "PROJECT_GROUP", "ABILITY", "ROLE", "SUBSTITUTION_RULE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def attrs(self):
        """Gets the attrs of this Entity.  # noqa: E501


        :return: The attrs of this Entity.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._attrs

    @attrs.setter
    def attrs(self, attrs):
        """Sets the attrs of this Entity.


        :param attrs: The attrs of this Entity.  # noqa: E501
        :type: dict(str, object)
        """
        if attrs is None:
            raise ValueError("Invalid value for `attrs`, must not be `None`")  # noqa: E501

        self._attrs = attrs

    @property
    def id(self):
        """Gets the id of this Entity.  # noqa: E501


        :return: The id of this Entity.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Entity.


        :param id: The id of this Entity.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.attribute_map[self.discriminator]]
        return discriminator_value if not(self.__class__.__name__ == discriminator_value) else None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Entity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Entity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
