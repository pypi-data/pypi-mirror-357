# coding: utf-8

"""
    AristaFlowREST/OrgModelManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 5.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PasswordEstimation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'quality': 'str',
        'score': 'int',
        'guesses': 'float',
        'problem': 'str',
        'suggestions': 'list[str]'
    }

    attribute_map = {
        'quality': 'quality',
        'score': 'score',
        'guesses': 'guesses',
        'problem': 'problem',
        'suggestions': 'suggestions'
    }

    def __init__(self, quality=None, score=None, guesses=None, problem=None, suggestions=None):  # noqa: E501
        """PasswordEstimation - a model defined in Swagger"""  # noqa: E501
        self._quality = None
        self._score = None
        self._guesses = None
        self._problem = None
        self._suggestions = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.quality = quality
        if score is not None:
            self.score = score
        if guesses is not None:
            self.guesses = guesses
        if problem is not None:
            self.problem = problem
        if suggestions is not None:
            self.suggestions = suggestions

    @property
    def quality(self):
        """Gets the quality of this PasswordEstimation.  # noqa: E501


        :return: The quality of this PasswordEstimation.  # noqa: E501
        :rtype: str
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this PasswordEstimation.


        :param quality: The quality of this PasswordEstimation.  # noqa: E501
        :type: str
        """
        if quality is None:
            raise ValueError("Invalid value for `quality`, must not be `None`")  # noqa: E501
        allowed_values = ["ACCEPTED", "FORCE_ACCEPTED", "REFUSED"]  # noqa: E501
        if quality not in allowed_values:
            raise ValueError(
                "Invalid value for `quality` ({0}), must be one of {1}"  # noqa: E501
                .format(quality, allowed_values)
            )

        self._quality = quality

    @property
    def score(self):
        """Gets the score of this PasswordEstimation.  # noqa: E501


        :return: The score of this PasswordEstimation.  # noqa: E501
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this PasswordEstimation.


        :param score: The score of this PasswordEstimation.  # noqa: E501
        :type: int
        """

        self._score = score

    @property
    def guesses(self):
        """Gets the guesses of this PasswordEstimation.  # noqa: E501


        :return: The guesses of this PasswordEstimation.  # noqa: E501
        :rtype: float
        """
        return self._guesses

    @guesses.setter
    def guesses(self, guesses):
        """Sets the guesses of this PasswordEstimation.


        :param guesses: The guesses of this PasswordEstimation.  # noqa: E501
        :type: float
        """

        self._guesses = guesses

    @property
    def problem(self):
        """Gets the problem of this PasswordEstimation.  # noqa: E501


        :return: The problem of this PasswordEstimation.  # noqa: E501
        :rtype: str
        """
        return self._problem

    @problem.setter
    def problem(self, problem):
        """Sets the problem of this PasswordEstimation.


        :param problem: The problem of this PasswordEstimation.  # noqa: E501
        :type: str
        """

        self._problem = problem

    @property
    def suggestions(self):
        """Gets the suggestions of this PasswordEstimation.  # noqa: E501


        :return: The suggestions of this PasswordEstimation.  # noqa: E501
        :rtype: list[str]
        """
        return self._suggestions

    @suggestions.setter
    def suggestions(self, suggestions):
        """Sets the suggestions of this PasswordEstimation.


        :param suggestions: The suggestions of this PasswordEstimation.  # noqa: E501
        :type: list[str]
        """

        self._suggestions = suggestions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PasswordEstimation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PasswordEstimation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
