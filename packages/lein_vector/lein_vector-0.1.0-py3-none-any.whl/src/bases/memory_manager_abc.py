from typing import List, Optional, Dict
from uuid import UUID
from src.schemas.chunk import Chunk


class MemoryManagerABC:
    async def upsert_chunk(self, user_id: int, chunk: Chunk) -> None: ...
    async def upsert_chunks(self, user_id: int, chunks: List[Chunk]) -> None: ...
    async def retrieve_by_embedding(
        self, user_id: int, embedding: List[float], topk: int = 3
    ) -> List[Chunk]: ...
    async def retrieve_by_embedding_batch(
        self, user_id: int, embeddings: List[List[float]], topk: int = 3
    ) -> List[List[Chunk]]:
        raise NotImplementedError("Not implemented in this backend")

    async def retrieve_by_type(
        self, user_id: int, chunk_type: str, topk: int = 3
    ) -> List[Chunk]: ...
    async def retrieve_by_text(
        self, user_id: int, query: str, topk: int = 3
    ) -> List[Chunk]: ...
    async def merge_old_chunks(self, user_id: int, chunk_type: str) -> None: ...
    async def archive_user(self, user_id: int) -> None: ...
    async def restore_user(self, user_id: int) -> None: ...
    async def increment_hit(self, user_id: int, chunk_id: UUID) -> None: ...
    async def pop_first_n(
        self, user_id: int, chunk_type: str, n: int
    ) -> List[Chunk]: ...
    async def delete_oldest_nonpersistent(self, user_id: int, keep: int) -> None: ...
    async def delete_chunk(self, user_id: int, chunk_id: UUID) -> None: ...
    async def delete_chunks(self, user_id: int, chunk_ids: List[UUID]) -> None: ...
    async def delete_all(self, user_id: int) -> None: ...
