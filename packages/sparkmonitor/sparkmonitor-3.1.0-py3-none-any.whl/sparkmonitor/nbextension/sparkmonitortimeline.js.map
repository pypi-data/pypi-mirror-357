{"version":3,"file":"sparkmonitortimeline.js","mappings":"iMAaMA,EAAmC,CACvCC,OAAQ,CACNC,KAAM,EACNC,KAAM,GAERC,OAAO,EACPC,cAAc,EACdC,UAAW,QACXC,UAAU,EACVC,QAAS,CACPC,eAAgB,OAElBC,MAAO,SACPC,YAAa,MACbC,gBAAgB,GAsElB,SAnEiBC,EAAAA,EAAAA,KAAS,WACxB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAOC,EAAAA,EAAAA,MAEPC,EAAcC,EAAAA,OAA6B,MAE3CC,EAAe,GACrBJ,EAAKK,KAAKC,SAAQ,SAAAC,GAChBH,EAAaI,KAAK,CAChBC,GAAIF,EAAIG,SACRC,MAAOJ,EAAIK,UACXC,QAAS,GAAFC,OAAKP,EAAIQ,MAAK,KAAAD,OAAIP,EAAIS,MAC7BC,MAAO,OACPC,UAAW,OAASX,EAAIY,OACxBC,KAAqB,YAAfb,EAAIY,OAAuB,UAAY,OAC7CE,IAAKd,EAAIe,QAAUf,EAAIe,QAAU,IAAIC,OAEvChB,EAAIiB,eAAelB,SAAQ,SAAAmB,GACzB,IAAMC,EAAQ5B,EAAS6B,OAAOF,GAC1BC,EAAME,gBACRxB,EAAaI,KAAK,CAChBC,GAAIiB,EAAMhB,SACVC,MAAOe,EAAME,eACbf,QAAS,GAAFC,OAAKY,EAAMG,QAAO,KAAAf,OAAIY,EAAMV,MACnCC,MAAO,SACPC,UAAW,SAAWQ,EAAMP,OAC5BC,KAAuB,YAAjBM,EAAMP,OAAuB,UAAY,OAC/CE,IAAKK,EAAMI,eAAiBJ,EAAMI,eAAiB,IAAIP,MAG7D,GACF,IAEA,IAAMQ,EAAiB,IAAIC,EAAAA,GAAQ,CACjC,CACEvB,GAAI,OACJI,QAAS,OACTK,UAAW,eAEb,CAAET,GAAI,SAAUI,QAAS,YAiB3B,OAdAV,EAAAA,WAAgB,WACd,GAAKD,EAAY+B,QAAjB,CAGA,IAAMC,EAAW,IAAIC,EAAAA,GACnBjC,EAAY+B,QACZ7B,EACA2B,EACA/C,GAEF,OAAO,WACLkD,EAASE,SACX,CATA,CAUF,IAEEjC,EAAAA,cAACkC,EAAAA,EAAa,KACZlC,EAAAA,cAAA,OAAKe,UAAU,cACbf,EAAAA,cAAA,OAAKe,UAAU,8BACbf,EAAAA,cAAA,OAAKmC,IAAKpC,MAKpB,G","sources":["webpack://sparkmonitor/./src/components/timeline.tsx"],"sourcesContent":["import { observer } from 'mobx-react-lite';\nimport React from 'react';\n\nimport {\n  DataSet,\n  Timeline as VisTimeline,\n  TimelineOptions\n} from 'vis-timeline/standalone';\nimport 'vis-timeline/styles/vis-timeline-graph2d.css';\n\nimport { useCellStore, useNotebookStore } from '../store';\nimport { ErrorBoundary } from './error-boundary';\n\nconst timelineOptions: TimelineOptions = {\n  margin: {\n    item: 2,\n    axis: 2\n  },\n  stack: true,\n  showTooltips: true,\n  minHeight: '100px',\n  editable: false,\n  tooltip: {\n    overflowMethod: 'cap'\n  },\n  align: 'center',\n  orientation: 'top',\n  verticalScroll: false\n};\n\nconst Timeline = observer(() => {\n  const notebook = useNotebookStore();\n  const cell = useCellStore();\n\n  const timelineDiv = React.useRef<HTMLDivElement>(null);\n\n  const timelineData = [] as any[];\n  cell.jobs.forEach(job => {\n    timelineData.push({\n      id: job.uniqueId,\n      start: job.startTime,\n      content: `${job.jobId}:${job.name}`,\n      group: 'jobs',\n      className: 'job ' + job.status,\n      mode: job.status === 'RUNNING' ? 'ongoing' : 'done',\n      end: job.endTime ? job.endTime : new Date()\n    });\n    job.uniqueStageIds.forEach(uniqueStageId => {\n      const stage = notebook.stages[uniqueStageId];\n      if (stage.submissionTime) {\n        timelineData.push({\n          id: stage.uniqueId,\n          start: stage.submissionTime,\n          content: `${stage.stageId}:${stage.name}`,\n          group: 'stages',\n          className: 'stage ' + stage.status,\n          mode: stage.status === 'RUNNING' ? 'ongoing' : 'done',\n          end: stage.completionTime ? stage.completionTime : new Date()\n        });\n      }\n    });\n  });\n\n  const timelineGroups = new DataSet([\n    {\n      id: 'jobs',\n      content: 'Jobs',\n      className: 'visjobgroup'\n    },\n    { id: 'stages', content: 'Stages' }\n  ]);\n\n  React.useEffect(() => {\n    if (!timelineDiv.current) {\n      return;\n    }\n    const timeline = new VisTimeline(\n      timelineDiv.current,\n      timelineData,\n      timelineGroups,\n      timelineOptions\n    );\n    return () => {\n      timeline.destroy();\n    };\n  });\n  return (\n    <ErrorBoundary>\n      <div className=\"tabcontent\">\n        <div className=\"timelinewrapper hidephases\">\n          <div ref={timelineDiv}></div>\n        </div>\n      </div>\n    </ErrorBoundary>\n  );\n});\n\nexport default Timeline;\n"],"names":["timelineOptions","margin","item","axis","stack","showTooltips","minHeight","editable","tooltip","overflowMethod","align","orientation","verticalScroll","observer","notebook","useNotebookStore","cell","useCellStore","timelineDiv","React","timelineData","jobs","forEach","job","push","id","uniqueId","start","startTime","content","concat","jobId","name","group","className","status","mode","end","endTime","Date","uniqueStageIds","uniqueStageId","stage","stages","submissionTime","stageId","completionTime","timelineGroups","DataSet","current","timeline","VisTimeline","destroy","ErrorBoundary","ref"],"sourceRoot":""}