{"version":3,"file":"sparkmonitortaskchart.js","mappings":"w8CAOA,IAAMA,GAAOC,EAAAA,EAAAA,GAAsBC,KAE7BC,EAA4C,CAChDC,YAAY,EACZC,OAAQ,CACNC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,IAELC,MAAO,CACLC,KAAM,QAGRC,MAAO,CACLC,YAAY,GAEdC,SAAU,MACVC,OAAQ,GACRC,OAAQ,CACNC,YAAa,IACbC,EAAG,EACHC,EAAG,EAEHC,KAAM,CACJC,OAAQ,aACRC,KAAM,GACNC,MAAO,UAQPC,EAAc,CAAEC,aAAa,EAAOC,YAAY,GAoGtD,SAlGkBC,EAAAA,EAAAA,KAAS,WACzB,I,IACMC,GADOC,EAAAA,EAAAA,MACeD,eAEiCE,G,EAAjBC,EAAAA,SAAe,G,EAAE,E,k5BAAtDC,EAAoBF,EAAA,GAAEG,EAAWH,EAAA,GAElCI,EAAOH,EAAAA,SAAc,WACzB,IAAMI,EAAyB,CAC7BjB,EAAGU,EAAeQ,UAClBjB,EAAGS,EAAeS,UAClBC,KAAM,UACN3B,KAAM,UACN4B,KAAM,OACNC,UAAW,UACXC,KAAM,gBA0BR,MAAO,CAxB4B,CACjCvB,EAAGU,EAAec,cAClBvB,EAAGS,EAAee,cAClBL,KAAM,UACN3B,KAAM,UACN4B,KAAM,OACNC,UAAW,UACXC,KAAM,kBAiBeN,EAfO,CAC5BjB,EAAGU,EAAegB,SAClBzB,EAAGS,EAAeiB,SAClBC,KAAMlB,EAAemB,YACrBpC,KAAM,UACN4B,KAAM,UACNC,UAAW,UAEXpC,YAAY,EACZ4C,OAAQ,CACNC,OAAQ,GACR1B,MAAO,UACPD,KAAM,IAIZ,GAAG,CACDM,EAAeQ,UACfR,EAAeS,UACfT,EAAec,cACfd,EAAee,cACff,EAAegB,SACfhB,EAAeiB,SACfjB,EAAemB,cAGXG,EAAqCnB,EAAAA,SAAc,WACvD,OAAAoB,EAAAA,EAAA,GACKhD,GAAiB,IACpBY,OAAQa,EAAegB,SAASQ,KAAI,SAAAC,GAClC,MAAO,CACL1C,KAAM,OACN2C,KAAM,QACNC,GAAIF,EACJG,GAAI,EACJC,GAAIJ,EACJK,GAAI,EACJC,KAAM,CACJpC,MAAO,UACPqC,MAAO,KAGb,IACAC,aAAc7B,GAElB,GAAG,CAACJ,EAAegB,SAAUZ,IAa7B,OAVAD,EAAAA,WAAgB,WACd,IAAM+B,EAAkBC,aAAY,WAClC9B,GAAY,SAAA+B,GAAQ,OAAIA,EAAW,CAAC,GACtC,GAAG,KACH,OAAO,WAELC,cAAcH,EAChB,CACF,IAGE/B,EAAAA,cAACmC,EAAAA,EAAa,KACZnC,EAAAA,cAAA,OAAKoC,UAAU,cACbpC,EAAAA,cAAC/B,EAAI,CACHoE,OAAQlB,EACRhB,KAAMA,EACNmC,OAAQ7C,EACR8C,kBAAkB,EAClBC,MAAO,CAAEX,MAAO,OAAQY,OAAQ,QAChCR,SAAUhC,KAKpB,G","sources":["webpack://sparkmonitor/./src/components/task-chart.tsx"],"sourcesContent":["import React from 'react';\nimport Plotly from 'plotly.js-basic-dist';\nimport { observer } from 'mobx-react-lite';\nimport { useCellStore } from '../store';\n\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport { ErrorBoundary } from './error-boundary';\nconst Plot = createPlotlyComponent(Plotly);\n\nconst plotDefaultLayout: Partial<Plotly.Layout> = {\n  showlegend: true,\n  margin: {\n    t: 30, // top margin\n    l: 30, // left margin\n    r: 30, // right margin\n    b: 60 // bottom margin\n  },\n  xaxis: {\n    type: 'date'\n    // title: 'Time',\n  },\n  yaxis: {\n    fixedrange: true\n  },\n  dragmode: 'pan',\n  shapes: [],\n  legend: {\n    orientation: 'h',\n    x: 0,\n    y: 5,\n    // traceorder: 'normal',\n    font: {\n      family: 'sans-serif',\n      size: 12,\n      color: '#000'\n    }\n    // bgcolor: '#E2E2E2',\n    // bordercolor: '#FFFFFF',\n    // borderwidth: 2\n  }\n};\n\nconst plotOptions = { displaylogo: false, scrollZoom: true };\n\nconst TaskChart = observer(() => {\n  const cell = useCellStore();\n  const taskChartStore = cell.taskChartStore;\n\n  const [chartRefreshRevision, setRevision] = React.useState(1);\n\n  const data = React.useMemo(() => {\n    const tasktrace: Plotly.Data = {\n      x: taskChartStore.taskDataX,\n      y: taskChartStore.taskDataY,\n      fill: 'tozeroy',\n      type: 'scatter',\n      mode: 'none',\n      fillcolor: '#00aedb',\n      name: 'Active Tasks'\n    };\n    const executortrace: Plotly.Data = {\n      x: taskChartStore.executorDataX,\n      y: taskChartStore.executorDataY,\n      fill: 'tozeroy',\n      type: 'scatter',\n      mode: 'none',\n      fillcolor: '#F5C936',\n      name: 'Executor Cores'\n    };\n    const jobtrace: Plotly.Data = {\n      x: taskChartStore.jobDataX,\n      y: taskChartStore.jobDataY,\n      text: taskChartStore.jobDataText as any, //this.jobDataText,\n      type: 'scatter',\n      mode: 'markers',\n      fillcolor: '#F5C936',\n      // name: 'Jobs',\n      showlegend: false,\n      marker: {\n        symbol: 23,\n        color: '#4CB5AE',\n        size: 1\n      }\n    };\n    return [executortrace, tasktrace, jobtrace];\n  }, [\n    taskChartStore.taskDataX,\n    taskChartStore.taskDataY,\n    taskChartStore.executorDataX,\n    taskChartStore.executorDataY,\n    taskChartStore.jobDataX,\n    taskChartStore.jobDataY,\n    taskChartStore.jobDataText\n  ]);\n\n  const plotLayout: Partial<Plotly.Layout> = React.useMemo(() => {\n    return {\n      ...plotDefaultLayout,\n      shapes: taskChartStore.jobDataX.map(job => {\n        return {\n          type: 'line',\n          yref: 'paper',\n          x0: job,\n          y0: 0,\n          x1: job,\n          y1: 1,\n          line: {\n            color: '#4CB5AE',\n            width: 1.5\n          }\n        };\n      }),\n      datarevision: chartRefreshRevision\n    };\n  }, [taskChartStore.jobDataX, chartRefreshRevision]);\n\n  // Periodically refresh the chart by updating the revision\n  React.useEffect(() => {\n    const refreshInterval = setInterval(() => {\n      setRevision(revision => revision + 1);\n    }, 2000);\n    return () => {\n      // clean up when react component is unmounted.\n      clearInterval(refreshInterval);\n    };\n  });\n\n  return (\n    <ErrorBoundary>\n      <div className=\"tabcontent\">\n        <Plot\n          layout={plotLayout}\n          data={data}\n          config={plotOptions}\n          useResizeHandler={true}\n          style={{ width: '100%', height: '100%' }}\n          revision={chartRefreshRevision}\n        />\n      </div>\n    </ErrorBoundary>\n  );\n});\nexport default TaskChart;\n"],"names":["Plot","createPlotlyComponent","Plotly","plotDefaultLayout","showlegend","margin","t","l","r","b","xaxis","type","yaxis","fixedrange","dragmode","shapes","legend","orientation","x","y","font","family","size","color","plotOptions","displaylogo","scrollZoom","observer","taskChartStore","useCellStore","_React$useState2","React","chartRefreshRevision","setRevision","data","tasktrace","taskDataX","taskDataY","fill","mode","fillcolor","name","executorDataX","executorDataY","jobDataX","jobDataY","text","jobDataText","marker","symbol","plotLayout","_objectSpread","map","job","yref","x0","y0","x1","y1","line","width","datarevision","refreshInterval","setInterval","revision","clearInterval","ErrorBoundary","className","layout","config","useResizeHandler","style","height"],"sourceRoot":""}