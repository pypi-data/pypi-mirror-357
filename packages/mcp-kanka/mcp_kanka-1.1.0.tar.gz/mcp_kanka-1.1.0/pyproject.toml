[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mcp-kanka"
version = "1.1.0"
description = "MCP server for Kanka API integration"
readme = "README.md"
requires-python = "==3.13.5"
license = {text = "MIT"}
authors = [
    {name = "Erv Walter", email = "erv@ewal.net"}
]
keywords = ["kanka", "mcp", "api", "rpg", "tabletop"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "mcp==1.9.4",
    "python-kanka==2.2.0",
    "mistune==3.1.3",
    "beautifulsoup4==4.13.4",
    "python-dotenv==1.1.0",
    "markdownify==1.1.0",
]

[project.urls]
Homepage = "https://github.com/ervwalter/mcp-kanka"
Documentation = "https://github.com/ervwalter/mcp-kanka#readme"
Repository = "https://github.com/ervwalter/mcp-kanka"
Issues = "https://github.com/ervwalter/mcp-kanka/issues"

[project.scripts]
mcp-kanka = "mcp_kanka.cli:run"

[dependency-groups]
dev = [
    "pytest==8.4.1",
    "pytest-asyncio==1.0.0",
    "pytest-cov==6.2.1",
    "mypy==1.16.1",
    "ruff==0.12.0",
    "black==25.1.0",
    "isort==6.0.1",
    "build==1.2.2.post1",
    "bump2version==1.0.1",
    "twine==6.1.0",
    "types-beautifulsoup4",
    "types-Markdown",
    "pre-commit==4.2.0",
]

[tool.hatch.build.targets.wheel]
packages = ["src/mcp_kanka"]

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
strict_equality = true
ignore_missing_imports = true
exclude = [
    "site-packages",
    "_pytest",
    "tests/",
]

[tool.ruff]
line-length = 88
target-version = "py310"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    # "I",     # isort - disabled, using standalone isort
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "UP",    # pyupgrade
    "ARG",   # flake8-unused-arguments
    "SIM",   # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # imported but unused
"tests/*" = ["ARG"]       # unused arguments in tests

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = [
    "tests",
]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"