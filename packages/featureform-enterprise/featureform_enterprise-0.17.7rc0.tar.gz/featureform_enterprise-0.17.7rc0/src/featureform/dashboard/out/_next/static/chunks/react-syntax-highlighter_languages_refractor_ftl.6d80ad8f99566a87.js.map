{"version":3,"file":"static/chunks/react-syntax-highlighter_languages_refractor_ftl.6d80ad8f99566a87.js","mappings":"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","sources":["webpack://_N_E/./node_modules/refractor/lang/ftl.js","webpack://_N_E/./node_modules/refractor/lang/markup-templating.js","webpack://_N_E/<anon>"],"sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = ftl\nftl.displayName = 'ftl'\nftl.aliases = []\nfunction ftl(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    // https://freemarker.apache.org/docs/dgui_template_exp.html\n    // FTL expression with 4 levels of nesting supported\n    var FTL_EXPR =\n      /[^<()\"']|\\((?:<expr>)*\\)|<(?!#--)|<#--(?:[^-]|-(?!->))*-->|\"(?:[^\\\\\"]|\\\\.)*\"|'(?:[^\\\\']|\\\\.)*'/\n        .source\n    for (var i = 0; i < 2; i++) {\n      FTL_EXPR = FTL_EXPR.replace(/<expr>/g, function () {\n        return FTL_EXPR\n      })\n    }\n    FTL_EXPR = FTL_EXPR.replace(/<expr>/g, /[^\\s\\S]/.source)\n    var ftl = {\n      comment: /<#--[\\s\\S]*?-->/,\n      string: [\n        {\n          // raw string\n          pattern: /\\br(\"|')(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,\n          greedy: true\n        },\n        {\n          pattern: RegExp(\n            /(\"|')(?:(?!\\1|\\$\\{)[^\\\\]|\\\\.|\\$\\{(?:(?!\\})(?:<expr>))*\\})*\\1/.source.replace(\n              /<expr>/g,\n              function () {\n                return FTL_EXPR\n              }\n            )\n          ),\n          greedy: true,\n          inside: {\n            interpolation: {\n              pattern: RegExp(\n                /((?:^|[^\\\\])(?:\\\\\\\\)*)\\$\\{(?:(?!\\})(?:<expr>))*\\}/.source.replace(\n                  /<expr>/g,\n                  function () {\n                    return FTL_EXPR\n                  }\n                )\n              ),\n              lookbehind: true,\n              inside: {\n                'interpolation-punctuation': {\n                  pattern: /^\\$\\{|\\}$/,\n                  alias: 'punctuation'\n                },\n                rest: null\n              }\n            }\n          }\n        }\n      ],\n      keyword: /\\b(?:as)\\b/,\n      boolean: /\\b(?:false|true)\\b/,\n      'builtin-function': {\n        pattern: /((?:^|[^?])\\?\\s*)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      function: /\\b\\w+(?=\\s*\\()/,\n      number: /\\b\\d+(?:\\.\\d+)?\\b/,\n      operator:\n        /\\.\\.[<*!]?|->|--|\\+\\+|&&|\\|\\||\\?{1,2}|[-+*/%!=<>]=?|\\b(?:gt|gte|lt|lte)\\b/,\n      punctuation: /[,;.:()[\\]{}]/\n    }\n    ftl.string[1].inside.interpolation.inside.rest = ftl\n    Prism.languages.ftl = {\n      'ftl-comment': {\n        // the pattern is shortened to be more efficient\n        pattern: /^<#--[\\s\\S]*/,\n        alias: 'comment'\n      },\n      'ftl-directive': {\n        pattern: /^<[\\s\\S]+>$/,\n        inside: {\n          directive: {\n            pattern: /(^<\\/?)[#@][a-z]\\w*/i,\n            lookbehind: true,\n            alias: 'keyword'\n          },\n          punctuation: /^<\\/?|\\/?>$/,\n          content: {\n            pattern: /\\s*\\S[\\s\\S]*/,\n            alias: 'ftl',\n            inside: ftl\n          }\n        }\n      },\n      'ftl-interpolation': {\n        pattern: /^\\$\\{[\\s\\S]*\\}$/,\n        inside: {\n          punctuation: /^\\$\\{|\\}$/,\n          content: {\n            pattern: /\\s*\\S[\\s\\S]*/,\n            alias: 'ftl',\n            inside: ftl\n          }\n        }\n      }\n    }\n    Prism.hooks.add('before-tokenize', function (env) {\n      // eslint-disable-next-line regexp/no-useless-lazy\n      var pattern = RegExp(\n        /<#--[\\s\\S]*?-->|<\\/?[#@][a-zA-Z](?:<expr>)*?>|\\$\\{(?:<expr>)*?\\}/.source.replace(\n          /<expr>/g,\n          function () {\n            return FTL_EXPR\n          }\n        ),\n        'gi'\n      )\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'ftl',\n        pattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'ftl')\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function (env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            ) {\n              ++i\n            } // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function (env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n","\"use strict\";\n(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[8389,3047],{\n\n/***/ 82114:\n/***/ (function(module, __unused_webpack_exports, __webpack_require__) {\n\n\nvar refractorMarkupTemplating = __webpack_require__(93205)\nmodule.exports = ftl\nftl.displayName = 'ftl'\nftl.aliases = []\nfunction ftl(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    // https://freemarker.apache.org/docs/dgui_template_exp.html\n    // FTL expression with 4 levels of nesting supported\n    var FTL_EXPR =\n      /[^<()\"']|\\((?:<expr>)*\\)|<(?!#--)|<#--(?:[^-]|-(?!->))*-->|\"(?:[^\\\\\"]|\\\\.)*\"|'(?:[^\\\\']|\\\\.)*'/\n        .source\n    for (var i = 0; i < 2; i++) {\n      FTL_EXPR = FTL_EXPR.replace(/<expr>/g, function () {\n        return FTL_EXPR\n      })\n    }\n    FTL_EXPR = FTL_EXPR.replace(/<expr>/g, /[^\\s\\S]/.source)\n    var ftl = {\n      comment: /<#--[\\s\\S]*?-->/,\n      string: [\n        {\n          // raw string\n          pattern: /\\br(\"|')(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,\n          greedy: true\n        },\n        {\n          pattern: RegExp(\n            /(\"|')(?:(?!\\1|\\$\\{)[^\\\\]|\\\\.|\\$\\{(?:(?!\\})(?:<expr>))*\\})*\\1/.source.replace(\n              /<expr>/g,\n              function () {\n                return FTL_EXPR\n              }\n            )\n          ),\n          greedy: true,\n          inside: {\n            interpolation: {\n              pattern: RegExp(\n                /((?:^|[^\\\\])(?:\\\\\\\\)*)\\$\\{(?:(?!\\})(?:<expr>))*\\}/.source.replace(\n                  /<expr>/g,\n                  function () {\n                    return FTL_EXPR\n                  }\n                )\n              ),\n              lookbehind: true,\n              inside: {\n                'interpolation-punctuation': {\n                  pattern: /^\\$\\{|\\}$/,\n                  alias: 'punctuation'\n                },\n                rest: null\n              }\n            }\n          }\n        }\n      ],\n      keyword: /\\b(?:as)\\b/,\n      boolean: /\\b(?:false|true)\\b/,\n      'builtin-function': {\n        pattern: /((?:^|[^?])\\?\\s*)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      function: /\\b\\w+(?=\\s*\\()/,\n      number: /\\b\\d+(?:\\.\\d+)?\\b/,\n      operator:\n        /\\.\\.[<*!]?|->|--|\\+\\+|&&|\\|\\||\\?{1,2}|[-+*/%!=<>]=?|\\b(?:gt|gte|lt|lte)\\b/,\n      punctuation: /[,;.:()[\\]{}]/\n    }\n    ftl.string[1].inside.interpolation.inside.rest = ftl\n    Prism.languages.ftl = {\n      'ftl-comment': {\n        // the pattern is shortened to be more efficient\n        pattern: /^<#--[\\s\\S]*/,\n        alias: 'comment'\n      },\n      'ftl-directive': {\n        pattern: /^<[\\s\\S]+>$/,\n        inside: {\n          directive: {\n            pattern: /(^<\\/?)[#@][a-z]\\w*/i,\n            lookbehind: true,\n            alias: 'keyword'\n          },\n          punctuation: /^<\\/?|\\/?>$/,\n          content: {\n            pattern: /\\s*\\S[\\s\\S]*/,\n            alias: 'ftl',\n            inside: ftl\n          }\n        }\n      },\n      'ftl-interpolation': {\n        pattern: /^\\$\\{[\\s\\S]*\\}$/,\n        inside: {\n          punctuation: /^\\$\\{|\\}$/,\n          content: {\n            pattern: /\\s*\\S[\\s\\S]*/,\n            alias: 'ftl',\n            inside: ftl\n          }\n        }\n      }\n    }\n    Prism.hooks.add('before-tokenize', function (env) {\n      // eslint-disable-next-line regexp/no-useless-lazy\n      var pattern = RegExp(\n        /<#--[\\s\\S]*?-->|<\\/?[#@][a-zA-Z](?:<expr>)*?>|\\$\\{(?:<expr>)*?\\}/.source.replace(\n          /<expr>/g,\n          function () {\n            return FTL_EXPR\n          }\n        ),\n        'gi'\n      )\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'ftl',\n        pattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'ftl')\n    })\n  })(Prism)\n}\n\n\n/***/ }),\n\n/***/ 93205:\n/***/ (function(module) {\n\n\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function (env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            ) {\n              ++i\n            } // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function (env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n\n\n/***/ })\n\n}]);"],"names":["self","push","module","__unused_webpack_exports","__webpack_require__","refractorMarkupTemplating","ftl","Prism","register","FTL_EXPR","source","i","replace","comment","string","pattern","greedy","RegExp","inside","interpolation","lookbehind","alias","rest","keyword","boolean","function","number","operator","punctuation","languages","directive","content","hooks","add","env","buildPlaceholders","tokenizePlaceholders","exports","displayName","aliases","markupTemplating","getPlaceholder","language","index","toUpperCase","defineProperties","value","placeholderPattern","replaceFilter","tokenStack","code","match","placeholder","length","indexOf","grammar","markup","j","keys","Object","walkTokens","tokens","token","k","t","s","before","substring","middle","Token","tokenize","after","replacement","apply","splice","concat"],"sourceRoot":""}