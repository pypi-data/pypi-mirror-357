{"version":3,"file":"static/chunks/react-syntax-highlighter_languages_refractor_smarty.8c3b309b82839010.js","mappings":"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","sources":["webpack://_N_E/./node_modules/refractor/lang/markup-templating.js","webpack://_N_E/./node_modules/refractor/lang/smarty.js","webpack://_N_E/<anon>"],"sourcesContent":["'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function (env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            ) {\n              ++i\n            } // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function (env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n","'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = smarty\nsmarty.displayName = 'smarty'\nsmarty.aliases = []\nfunction smarty(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    Prism.languages.smarty = {\n      comment: {\n        pattern: /^\\{\\*[\\s\\S]*?\\*\\}/,\n        greedy: true\n      },\n      'embedded-php': {\n        pattern: /^\\{php\\}[\\s\\S]*?\\{\\/php\\}/,\n        greedy: true,\n        inside: {\n          smarty: {\n            pattern: /^\\{php\\}|\\{\\/php\\}$/,\n            inside: null // see below\n          },\n          php: {\n            pattern: /[\\s\\S]+/,\n            alias: 'language-php',\n            inside: Prism.languages.php\n          }\n        }\n      },\n      string: [\n        {\n          pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n          greedy: true,\n          inside: {\n            interpolation: {\n              pattern: /\\{[^{}]*\\}|`[^`]*`/,\n              inside: {\n                'interpolation-punctuation': {\n                  pattern: /^[{`]|[`}]$/,\n                  alias: 'punctuation'\n                },\n                expression: {\n                  pattern: /[\\s\\S]+/,\n                  inside: null // see below\n                }\n              }\n            },\n            variable: /\\$\\w+/\n          }\n        },\n        {\n          pattern: /'(?:\\\\.|[^'\\\\\\r\\n])*'/,\n          greedy: true\n        }\n      ],\n      keyword: {\n        pattern: /(^\\{\\/?)[a-z_]\\w*\\b(?!\\()/i,\n        lookbehind: true,\n        greedy: true\n      },\n      delimiter: {\n        pattern: /^\\{\\/?|\\}$/,\n        greedy: true,\n        alias: 'punctuation'\n      },\n      number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n      variable: [\n        /\\$(?!\\d)\\w+/,\n        /#(?!\\d)\\w+#/,\n        {\n          pattern: /(\\.|->|\\w\\s*=)(?!\\d)\\w+\\b(?!\\()/,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n          lookbehind: true\n        }\n      ],\n      function: {\n        pattern: /(\\|\\s*)@?[a-z_]\\w*|\\b[a-z_]\\w*(?=\\()/i,\n        lookbehind: true\n      },\n      'attr-name': /\\b[a-z_]\\w*(?=\\s*=)/i,\n      boolean: /\\b(?:false|no|off|on|true|yes)\\b/,\n      punctuation: /[\\[\\](){}.,:`]|->/,\n      operator: [\n        /[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/,\n        /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/,\n        /\\b(?:and|eq|gt?e|gt|lt?e|lt|mod|neq?|not|or)\\b/\n      ]\n    }\n    Prism.languages.smarty['embedded-php'].inside.smarty.inside =\n      Prism.languages.smarty\n    Prism.languages.smarty.string[0].inside.interpolation.inside.expression.inside =\n      Prism.languages.smarty\n    var string = /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|'(?:\\\\.|[^'\\\\\\r\\n])*'/\n    var smartyPattern = RegExp(\n      // comments\n      /\\{\\*[\\s\\S]*?\\*\\}/.source +\n        '|' + // php tags\n        /\\{php\\}[\\s\\S]*?\\{\\/php\\}/.source +\n        '|' + // smarty blocks\n        /\\{(?:[^{}\"']|<str>|\\{(?:[^{}\"']|<str>|\\{(?:[^{}\"']|<str>)*\\})*\\})*\\}/.source.replace(\n          /<str>/g,\n          function () {\n            return string.source\n          }\n        ),\n      'g'\n    ) // Tokenize all inline Smarty expressions\n    Prism.hooks.add('before-tokenize', function (env) {\n      var smartyLiteralStart = '{literal}'\n      var smartyLiteralEnd = '{/literal}'\n      var smartyLiteralMode = false\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'smarty',\n        smartyPattern,\n        function (match) {\n          // Smarty tags inside {literal} block are ignored\n          if (match === smartyLiteralEnd) {\n            smartyLiteralMode = false\n          }\n          if (!smartyLiteralMode) {\n            if (match === smartyLiteralStart) {\n              smartyLiteralMode = true\n            }\n            return true\n          }\n          return false\n        }\n      )\n    }) // Re-insert the tokens after tokenizing\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty')\n    })\n  })(Prism)\n}\n","\"use strict\";\n(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[849,3047],{\n\n/***/ 93205:\n/***/ (function(module) {\n\n\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function (env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            ) {\n              ++i\n            } // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function (env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n\n\n/***/ }),\n\n/***/ 64020:\n/***/ (function(module, __unused_webpack_exports, __webpack_require__) {\n\n\nvar refractorMarkupTemplating = __webpack_require__(93205)\nmodule.exports = smarty\nsmarty.displayName = 'smarty'\nsmarty.aliases = []\nfunction smarty(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    Prism.languages.smarty = {\n      comment: {\n        pattern: /^\\{\\*[\\s\\S]*?\\*\\}/,\n        greedy: true\n      },\n      'embedded-php': {\n        pattern: /^\\{php\\}[\\s\\S]*?\\{\\/php\\}/,\n        greedy: true,\n        inside: {\n          smarty: {\n            pattern: /^\\{php\\}|\\{\\/php\\}$/,\n            inside: null // see below\n          },\n          php: {\n            pattern: /[\\s\\S]+/,\n            alias: 'language-php',\n            inside: Prism.languages.php\n          }\n        }\n      },\n      string: [\n        {\n          pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n          greedy: true,\n          inside: {\n            interpolation: {\n              pattern: /\\{[^{}]*\\}|`[^`]*`/,\n              inside: {\n                'interpolation-punctuation': {\n                  pattern: /^[{`]|[`}]$/,\n                  alias: 'punctuation'\n                },\n                expression: {\n                  pattern: /[\\s\\S]+/,\n                  inside: null // see below\n                }\n              }\n            },\n            variable: /\\$\\w+/\n          }\n        },\n        {\n          pattern: /'(?:\\\\.|[^'\\\\\\r\\n])*'/,\n          greedy: true\n        }\n      ],\n      keyword: {\n        pattern: /(^\\{\\/?)[a-z_]\\w*\\b(?!\\()/i,\n        lookbehind: true,\n        greedy: true\n      },\n      delimiter: {\n        pattern: /^\\{\\/?|\\}$/,\n        greedy: true,\n        alias: 'punctuation'\n      },\n      number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n      variable: [\n        /\\$(?!\\d)\\w+/,\n        /#(?!\\d)\\w+#/,\n        {\n          pattern: /(\\.|->|\\w\\s*=)(?!\\d)\\w+\\b(?!\\()/,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n          lookbehind: true\n        }\n      ],\n      function: {\n        pattern: /(\\|\\s*)@?[a-z_]\\w*|\\b[a-z_]\\w*(?=\\()/i,\n        lookbehind: true\n      },\n      'attr-name': /\\b[a-z_]\\w*(?=\\s*=)/i,\n      boolean: /\\b(?:false|no|off|on|true|yes)\\b/,\n      punctuation: /[\\[\\](){}.,:`]|->/,\n      operator: [\n        /[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/,\n        /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/,\n        /\\b(?:and|eq|gt?e|gt|lt?e|lt|mod|neq?|not|or)\\b/\n      ]\n    }\n    Prism.languages.smarty['embedded-php'].inside.smarty.inside =\n      Prism.languages.smarty\n    Prism.languages.smarty.string[0].inside.interpolation.inside.expression.inside =\n      Prism.languages.smarty\n    var string = /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|'(?:\\\\.|[^'\\\\\\r\\n])*'/\n    var smartyPattern = RegExp(\n      // comments\n      /\\{\\*[\\s\\S]*?\\*\\}/.source +\n        '|' + // php tags\n        /\\{php\\}[\\s\\S]*?\\{\\/php\\}/.source +\n        '|' + // smarty blocks\n        /\\{(?:[^{}\"']|<str>|\\{(?:[^{}\"']|<str>|\\{(?:[^{}\"']|<str>)*\\})*\\})*\\}/.source.replace(\n          /<str>/g,\n          function () {\n            return string.source\n          }\n        ),\n      'g'\n    ) // Tokenize all inline Smarty expressions\n    Prism.hooks.add('before-tokenize', function (env) {\n      var smartyLiteralStart = '{literal}'\n      var smartyLiteralEnd = '{/literal}'\n      var smartyLiteralMode = false\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'smarty',\n        smartyPattern,\n        function (match) {\n          // Smarty tags inside {literal} block are ignored\n          if (match === smartyLiteralEnd) {\n            smartyLiteralMode = false\n          }\n          if (!smartyLiteralMode) {\n            if (match === smartyLiteralStart) {\n              smartyLiteralMode = true\n            }\n            return true\n          }\n          return false\n        }\n      )\n    }) // Re-insert the tokens after tokenizing\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty')\n    })\n  })(Prism)\n}\n\n\n/***/ })\n\n}]);"],"names":["self","push","module","markupTemplating","Prism","getPlaceholder","language","index","toUpperCase","defineProperties","languages","buildPlaceholders","value","env","placeholderPattern","replaceFilter","tokenStack","code","replace","match","placeholder","i","length","indexOf","grammar","markup","tokenizePlaceholders","j","keys","Object","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","apply","splice","concat","exports","displayName","aliases","__unused_webpack_exports","__webpack_require__","refractorMarkupTemplating","smarty","string","smartyPattern","register","comment","pattern","greedy","inside","php","alias","interpolation","expression","variable","keyword","lookbehind","delimiter","number","function","boolean","punctuation","operator","RegExp","source","hooks","add","smartyLiteralMode"],"sourceRoot":""}