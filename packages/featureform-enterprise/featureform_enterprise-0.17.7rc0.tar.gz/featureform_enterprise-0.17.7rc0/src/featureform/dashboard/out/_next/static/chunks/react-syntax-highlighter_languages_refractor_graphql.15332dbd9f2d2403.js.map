{"version":3,"file":"static/chunks/react-syntax-highlighter_languages_refractor_graphql.15332dbd9f2d2403.js","mappings":"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","sources":["webpack://_N_E/./node_modules/refractor/lang/graphql.js","webpack://_N_E/<anon>"],"sourcesContent":["'use strict'\n\nmodule.exports = graphql\ngraphql.displayName = 'graphql'\ngraphql.aliases = []\nfunction graphql(Prism) {\n  Prism.languages.graphql = {\n    comment: /#.*/,\n    description: {\n      pattern:\n        /(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'language-markdown': {\n          pattern: /(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,\n          lookbehind: true,\n          inside: Prism.languages.markdown\n        }\n      }\n    },\n    string: {\n      pattern: /\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n      greedy: true\n    },\n    number: /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n    boolean: /\\b(?:false|true)\\b/,\n    variable: /\\$[a-z_]\\w*/i,\n    directive: {\n      pattern: /@[a-z_]\\w*/i,\n      alias: 'function'\n    },\n    'attr-name': {\n      pattern: /\\b[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n      greedy: true\n    },\n    'atom-input': {\n      pattern: /\\b[A-Z]\\w*Input\\b/,\n      alias: 'class-name'\n    },\n    scalar: /\\b(?:Boolean|Float|ID|Int|String)\\b/,\n    constant: /\\b[A-Z][A-Z_\\d]*\\b/,\n    'class-name': {\n      pattern:\n        /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*|:\\s*|\\[)[A-Z_]\\w*/,\n      lookbehind: true\n    },\n    fragment: {\n      pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'definition-mutation': {\n      pattern: /(\\bmutation\\s+)[a-zA-Z_]\\w*/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'definition-query': {\n      pattern: /(\\bquery\\s+)[a-zA-Z_]\\w*/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    keyword:\n      /\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,\n    operator: /[!=|&]|\\.{3}/,\n    'property-query': /\\w+(?=\\s*\\()/,\n    object: /\\w+(?=\\s*\\{)/,\n    punctuation: /[!(){}\\[\\]:=,]/,\n    property: /\\w+/\n  }\n  Prism.hooks.add('after-tokenize', function afterTokenizeGraphql(env) {\n    if (env.language !== 'graphql') {\n      return\n    }\n    /**\n     * get the graphql token stream that we want to customize\n     *\n     * @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n     * @type {Token[]}\n     */\n    var validTokens = env.tokens.filter(function (token) {\n      return (\n        typeof token !== 'string' &&\n        token.type !== 'comment' &&\n        token.type !== 'scalar'\n      )\n    })\n    var currentIndex = 0\n    /**\n     * Returns whether the token relative to the current index has the given type.\n     *\n     * @param {number} offset\n     * @returns {Token | undefined}\n     */\n    function getToken(offset) {\n      return validTokens[currentIndex + offset]\n    }\n    /**\n     * Returns whether the token relative to the current index has the given type.\n     *\n     * @param {readonly string[]} types\n     * @param {number} [offset=0]\n     * @returns {boolean}\n     */\n    function isTokenType(types, offset) {\n      offset = offset || 0\n      for (var i = 0; i < types.length; i++) {\n        var token = getToken(i + offset)\n        if (!token || token.type !== types[i]) {\n          return false\n        }\n      }\n      return true\n    }\n    /**\n     * Returns the index of the closing bracket to an opening bracket.\n     *\n     * It is assumed that `token[currentIndex - 1]` is an opening bracket.\n     *\n     * If no closing bracket could be found, `-1` will be returned.\n     *\n     * @param {RegExp} open\n     * @param {RegExp} close\n     * @returns {number}\n     */\n    function findClosingBracket(open, close) {\n      var stackHeight = 1\n      for (var i = currentIndex; i < validTokens.length; i++) {\n        var token = validTokens[i]\n        var content = token.content\n        if (token.type === 'punctuation' && typeof content === 'string') {\n          if (open.test(content)) {\n            stackHeight++\n          } else if (close.test(content)) {\n            stackHeight--\n            if (stackHeight === 0) {\n              return i\n            }\n          }\n        }\n      }\n      return -1\n    }\n    /**\n     * Adds an alias to the given token.\n     *\n     * @param {Token} token\n     * @param {string} alias\n     * @returns {void}\n     */\n    function addAlias(token, alias) {\n      var aliases = token.alias\n      if (!aliases) {\n        token.alias = aliases = []\n      } else if (!Array.isArray(aliases)) {\n        token.alias = aliases = [aliases]\n      }\n      aliases.push(alias)\n    }\n    for (; currentIndex < validTokens.length; ) {\n      var startToken = validTokens[currentIndex++] // add special aliases for mutation tokens\n      if (startToken.type === 'keyword' && startToken.content === 'mutation') {\n        // any array of the names of all input variables (if any)\n        var inputVariables = []\n        if (\n          isTokenType(['definition-mutation', 'punctuation']) &&\n          getToken(1).content === '('\n        ) {\n          // definition\n          currentIndex += 2 // skip 'definition-mutation' and 'punctuation'\n          var definitionEnd = findClosingBracket(/^\\($/, /^\\)$/)\n          if (definitionEnd === -1) {\n            continue\n          } // find all input variables\n          for (; currentIndex < definitionEnd; currentIndex++) {\n            var t = getToken(0)\n            if (t.type === 'variable') {\n              addAlias(t, 'variable-input')\n              inputVariables.push(t.content)\n            }\n          }\n          currentIndex = definitionEnd + 1\n        }\n        if (\n          isTokenType(['punctuation', 'property-query']) &&\n          getToken(0).content === '{'\n        ) {\n          currentIndex++ // skip opening bracket\n          addAlias(getToken(0), 'property-mutation')\n          if (inputVariables.length > 0) {\n            var mutationEnd = findClosingBracket(/^\\{$/, /^\\}$/)\n            if (mutationEnd === -1) {\n              continue\n            } // give references to input variables a special alias\n            for (var i = currentIndex; i < mutationEnd; i++) {\n              var varToken = validTokens[i]\n              if (\n                varToken.type === 'variable' &&\n                inputVariables.indexOf(varToken.content) >= 0\n              ) {\n                addAlias(varToken, 'variable-input')\n              }\n            }\n          }\n        }\n      }\n    }\n  })\n}\n","\"use strict\";\n(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[8921],{\n\n/***/ 94055:\n/***/ (function(module) {\n\n\n\nmodule.exports = graphql\ngraphql.displayName = 'graphql'\ngraphql.aliases = []\nfunction graphql(Prism) {\n  Prism.languages.graphql = {\n    comment: /#.*/,\n    description: {\n      pattern:\n        /(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'language-markdown': {\n          pattern: /(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,\n          lookbehind: true,\n          inside: Prism.languages.markdown\n        }\n      }\n    },\n    string: {\n      pattern: /\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n      greedy: true\n    },\n    number: /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n    boolean: /\\b(?:false|true)\\b/,\n    variable: /\\$[a-z_]\\w*/i,\n    directive: {\n      pattern: /@[a-z_]\\w*/i,\n      alias: 'function'\n    },\n    'attr-name': {\n      pattern: /\\b[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n      greedy: true\n    },\n    'atom-input': {\n      pattern: /\\b[A-Z]\\w*Input\\b/,\n      alias: 'class-name'\n    },\n    scalar: /\\b(?:Boolean|Float|ID|Int|String)\\b/,\n    constant: /\\b[A-Z][A-Z_\\d]*\\b/,\n    'class-name': {\n      pattern:\n        /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*|:\\s*|\\[)[A-Z_]\\w*/,\n      lookbehind: true\n    },\n    fragment: {\n      pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'definition-mutation': {\n      pattern: /(\\bmutation\\s+)[a-zA-Z_]\\w*/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'definition-query': {\n      pattern: /(\\bquery\\s+)[a-zA-Z_]\\w*/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    keyword:\n      /\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,\n    operator: /[!=|&]|\\.{3}/,\n    'property-query': /\\w+(?=\\s*\\()/,\n    object: /\\w+(?=\\s*\\{)/,\n    punctuation: /[!(){}\\[\\]:=,]/,\n    property: /\\w+/\n  }\n  Prism.hooks.add('after-tokenize', function afterTokenizeGraphql(env) {\n    if (env.language !== 'graphql') {\n      return\n    }\n    /**\n     * get the graphql token stream that we want to customize\n     *\n     * @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n     * @type {Token[]}\n     */\n    var validTokens = env.tokens.filter(function (token) {\n      return (\n        typeof token !== 'string' &&\n        token.type !== 'comment' &&\n        token.type !== 'scalar'\n      )\n    })\n    var currentIndex = 0\n    /**\n     * Returns whether the token relative to the current index has the given type.\n     *\n     * @param {number} offset\n     * @returns {Token | undefined}\n     */\n    function getToken(offset) {\n      return validTokens[currentIndex + offset]\n    }\n    /**\n     * Returns whether the token relative to the current index has the given type.\n     *\n     * @param {readonly string[]} types\n     * @param {number} [offset=0]\n     * @returns {boolean}\n     */\n    function isTokenType(types, offset) {\n      offset = offset || 0\n      for (var i = 0; i < types.length; i++) {\n        var token = getToken(i + offset)\n        if (!token || token.type !== types[i]) {\n          return false\n        }\n      }\n      return true\n    }\n    /**\n     * Returns the index of the closing bracket to an opening bracket.\n     *\n     * It is assumed that `token[currentIndex - 1]` is an opening bracket.\n     *\n     * If no closing bracket could be found, `-1` will be returned.\n     *\n     * @param {RegExp} open\n     * @param {RegExp} close\n     * @returns {number}\n     */\n    function findClosingBracket(open, close) {\n      var stackHeight = 1\n      for (var i = currentIndex; i < validTokens.length; i++) {\n        var token = validTokens[i]\n        var content = token.content\n        if (token.type === 'punctuation' && typeof content === 'string') {\n          if (open.test(content)) {\n            stackHeight++\n          } else if (close.test(content)) {\n            stackHeight--\n            if (stackHeight === 0) {\n              return i\n            }\n          }\n        }\n      }\n      return -1\n    }\n    /**\n     * Adds an alias to the given token.\n     *\n     * @param {Token} token\n     * @param {string} alias\n     * @returns {void}\n     */\n    function addAlias(token, alias) {\n      var aliases = token.alias\n      if (!aliases) {\n        token.alias = aliases = []\n      } else if (!Array.isArray(aliases)) {\n        token.alias = aliases = [aliases]\n      }\n      aliases.push(alias)\n    }\n    for (; currentIndex < validTokens.length; ) {\n      var startToken = validTokens[currentIndex++] // add special aliases for mutation tokens\n      if (startToken.type === 'keyword' && startToken.content === 'mutation') {\n        // any array of the names of all input variables (if any)\n        var inputVariables = []\n        if (\n          isTokenType(['definition-mutation', 'punctuation']) &&\n          getToken(1).content === '('\n        ) {\n          // definition\n          currentIndex += 2 // skip 'definition-mutation' and 'punctuation'\n          var definitionEnd = findClosingBracket(/^\\($/, /^\\)$/)\n          if (definitionEnd === -1) {\n            continue\n          } // find all input variables\n          for (; currentIndex < definitionEnd; currentIndex++) {\n            var t = getToken(0)\n            if (t.type === 'variable') {\n              addAlias(t, 'variable-input')\n              inputVariables.push(t.content)\n            }\n          }\n          currentIndex = definitionEnd + 1\n        }\n        if (\n          isTokenType(['punctuation', 'property-query']) &&\n          getToken(0).content === '{'\n        ) {\n          currentIndex++ // skip opening bracket\n          addAlias(getToken(0), 'property-mutation')\n          if (inputVariables.length > 0) {\n            var mutationEnd = findClosingBracket(/^\\{$/, /^\\}$/)\n            if (mutationEnd === -1) {\n              continue\n            } // give references to input variables a special alias\n            for (var i = currentIndex; i < mutationEnd; i++) {\n              var varToken = validTokens[i]\n              if (\n                varToken.type === 'variable' &&\n                inputVariables.indexOf(varToken.content) >= 0\n              ) {\n                addAlias(varToken, 'variable-input')\n              }\n            }\n          }\n        }\n      }\n    }\n  })\n}\n\n\n/***/ })\n\n}]);"],"names":["self","push","module","graphql","Prism","languages","comment","description","pattern","greedy","alias","inside","lookbehind","markdown","string","number","boolean","variable","directive","scalar","constant","fragment","keyword","operator","object","punctuation","property","hooks","add","env","language","validTokens","tokens","filter","token","type","currentIndex","length","startToken","content","inputVariables","isTokenType","getToken","definitionEnd","findClosingBracket","t","addAlias","mutationEnd","i","varToken","indexOf","offset","types","open","close","stackHeight","test","aliases","Array","isArray","exports","displayName"],"sourceRoot":""}