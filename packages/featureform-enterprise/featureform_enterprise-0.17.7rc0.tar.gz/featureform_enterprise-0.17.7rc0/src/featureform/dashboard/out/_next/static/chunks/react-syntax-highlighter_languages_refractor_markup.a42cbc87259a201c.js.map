{"version":3,"file":"static/chunks/react-syntax-highlighter_languages_refractor_markup.a42cbc87259a201c.js","mappings":"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","sources":["webpack://_N_E/./node_modules/refractor/lang/markup.js","webpack://_N_E/<anon>"],"sourcesContent":["'use strict'\n\nmodule.exports = markup\nmarkup.displayName = 'markup'\nmarkup.aliases = ['html', 'mathml', 'svg', 'xml', 'ssml', 'atom', 'rss']\nfunction markup(Prism) {\n  Prism.languages.markup = {\n    comment: {\n      pattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n      greedy: true\n    },\n    prolog: {\n      pattern: /<\\?[\\s\\S]+?\\?>/,\n      greedy: true\n    },\n    doctype: {\n      // https://www.w3.org/TR/xml/#NT-doctypedecl\n      pattern:\n        /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n      greedy: true,\n      inside: {\n        'internal-subset': {\n          pattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n          lookbehind: true,\n          greedy: true,\n          inside: null // see below\n        },\n        string: {\n          pattern: /\"[^\"]*\"|'[^']*'/,\n          greedy: true\n        },\n        punctuation: /^<!|>$|[[\\]]/,\n        'doctype-tag': /^DOCTYPE/i,\n        name: /[^\\s<>'\"]+/\n      }\n    },\n    cdata: {\n      pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n      greedy: true\n    },\n    tag: {\n      pattern:\n        /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n      greedy: true,\n      inside: {\n        tag: {\n          pattern: /^<\\/?[^\\s>\\/]+/,\n          inside: {\n            punctuation: /^<\\/?/,\n            namespace: /^[^\\s>\\/:]+:/\n          }\n        },\n        'special-attr': [],\n        'attr-value': {\n          pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n          inside: {\n            punctuation: [\n              {\n                pattern: /^=/,\n                alias: 'attr-equals'\n              },\n              /\"|'/\n            ]\n          }\n        },\n        punctuation: /\\/?>/,\n        'attr-name': {\n          pattern: /[^\\s>\\/]+/,\n          inside: {\n            namespace: /^[^\\s>\\/:]+:/\n          }\n        }\n      }\n    },\n    entity: [\n      {\n        pattern: /&[\\da-z]{1,8};/i,\n        alias: 'named-entity'\n      },\n      /&#x?[\\da-f]{1,8};/i\n    ]\n  }\n  Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] =\n    Prism.languages.markup['entity']\n  Prism.languages.markup['doctype'].inside['internal-subset'].inside =\n    Prism.languages.markup // Plugin to make entity title show the real entity, idea by Roman Komarov\n  Prism.hooks.add('wrap', function (env) {\n    if (env.type === 'entity') {\n      env.attributes['title'] = env.content.value.replace(/&amp;/, '&')\n    }\n  })\n  Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n    /**\n     * Adds an inlined language to markup.\n     *\n     * An example of an inlined language is CSS with `<style>` tags.\n     *\n     * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n     * case insensitive.\n     * @param {string} lang The language key.\n     * @example\n     * addInlined('style', 'css');\n     */\n    value: function addInlined(tagName, lang) {\n      var includedCdataInside = {}\n      includedCdataInside['language-' + lang] = {\n        pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n        lookbehind: true,\n        inside: Prism.languages[lang]\n      }\n      includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i\n      var inside = {\n        'included-cdata': {\n          pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n          inside: includedCdataInside\n        }\n      }\n      inside['language-' + lang] = {\n        pattern: /[\\s\\S]+/,\n        inside: Prism.languages[lang]\n      }\n      var def = {}\n      def[tagName] = {\n        pattern: RegExp(\n          /(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(\n            /__/g,\n            function () {\n              return tagName\n            }\n          ),\n          'i'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: inside\n      }\n      Prism.languages.insertBefore('markup', 'cdata', def)\n    }\n  })\n  Object.defineProperty(Prism.languages.markup.tag, 'addAttribute', {\n    /**\n     * Adds an pattern to highlight languages embedded in HTML attributes.\n     *\n     * An example of an inlined language is CSS with `style` attributes.\n     *\n     * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n     * case insensitive.\n     * @param {string} lang The language key.\n     * @example\n     * addAttribute('style', 'css');\n     */\n    value: function (attrName, lang) {\n      Prism.languages.markup.tag.inside['special-attr'].push({\n        pattern: RegExp(\n          /(^|[\"'\\s])/.source +\n            '(?:' +\n            attrName +\n            ')' +\n            /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source,\n          'i'\n        ),\n        lookbehind: true,\n        inside: {\n          'attr-name': /^[^\\s=]+/,\n          'attr-value': {\n            pattern: /=[\\s\\S]+/,\n            inside: {\n              value: {\n                pattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n                lookbehind: true,\n                alias: [lang, 'language-' + lang],\n                inside: Prism.languages[lang]\n              },\n              punctuation: [\n                {\n                  pattern: /^=/,\n                  alias: 'attr-equals'\n                },\n                /\"|'/\n              ]\n            }\n          }\n        }\n      })\n    }\n  })\n  Prism.languages.html = Prism.languages.markup\n  Prism.languages.mathml = Prism.languages.markup\n  Prism.languages.svg = Prism.languages.markup\n  Prism.languages.xml = Prism.languages.extend('markup', {})\n  Prism.languages.ssml = Prism.languages.xml\n  Prism.languages.atom = Prism.languages.xml\n  Prism.languages.rss = Prism.languages.xml\n}\n","\"use strict\";\n(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[2496],{\n\n/***/ 2717:\n/***/ (function(module) {\n\n\n\nmodule.exports = markup\nmarkup.displayName = 'markup'\nmarkup.aliases = ['html', 'mathml', 'svg', 'xml', 'ssml', 'atom', 'rss']\nfunction markup(Prism) {\n  Prism.languages.markup = {\n    comment: {\n      pattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n      greedy: true\n    },\n    prolog: {\n      pattern: /<\\?[\\s\\S]+?\\?>/,\n      greedy: true\n    },\n    doctype: {\n      // https://www.w3.org/TR/xml/#NT-doctypedecl\n      pattern:\n        /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n      greedy: true,\n      inside: {\n        'internal-subset': {\n          pattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n          lookbehind: true,\n          greedy: true,\n          inside: null // see below\n        },\n        string: {\n          pattern: /\"[^\"]*\"|'[^']*'/,\n          greedy: true\n        },\n        punctuation: /^<!|>$|[[\\]]/,\n        'doctype-tag': /^DOCTYPE/i,\n        name: /[^\\s<>'\"]+/\n      }\n    },\n    cdata: {\n      pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n      greedy: true\n    },\n    tag: {\n      pattern:\n        /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n      greedy: true,\n      inside: {\n        tag: {\n          pattern: /^<\\/?[^\\s>\\/]+/,\n          inside: {\n            punctuation: /^<\\/?/,\n            namespace: /^[^\\s>\\/:]+:/\n          }\n        },\n        'special-attr': [],\n        'attr-value': {\n          pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n          inside: {\n            punctuation: [\n              {\n                pattern: /^=/,\n                alias: 'attr-equals'\n              },\n              /\"|'/\n            ]\n          }\n        },\n        punctuation: /\\/?>/,\n        'attr-name': {\n          pattern: /[^\\s>\\/]+/,\n          inside: {\n            namespace: /^[^\\s>\\/:]+:/\n          }\n        }\n      }\n    },\n    entity: [\n      {\n        pattern: /&[\\da-z]{1,8};/i,\n        alias: 'named-entity'\n      },\n      /&#x?[\\da-f]{1,8};/i\n    ]\n  }\n  Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] =\n    Prism.languages.markup['entity']\n  Prism.languages.markup['doctype'].inside['internal-subset'].inside =\n    Prism.languages.markup // Plugin to make entity title show the real entity, idea by Roman Komarov\n  Prism.hooks.add('wrap', function (env) {\n    if (env.type === 'entity') {\n      env.attributes['title'] = env.content.value.replace(/&amp;/, '&')\n    }\n  })\n  Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n    /**\n     * Adds an inlined language to markup.\n     *\n     * An example of an inlined language is CSS with `<style>` tags.\n     *\n     * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n     * case insensitive.\n     * @param {string} lang The language key.\n     * @example\n     * addInlined('style', 'css');\n     */\n    value: function addInlined(tagName, lang) {\n      var includedCdataInside = {}\n      includedCdataInside['language-' + lang] = {\n        pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n        lookbehind: true,\n        inside: Prism.languages[lang]\n      }\n      includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i\n      var inside = {\n        'included-cdata': {\n          pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n          inside: includedCdataInside\n        }\n      }\n      inside['language-' + lang] = {\n        pattern: /[\\s\\S]+/,\n        inside: Prism.languages[lang]\n      }\n      var def = {}\n      def[tagName] = {\n        pattern: RegExp(\n          /(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(\n            /__/g,\n            function () {\n              return tagName\n            }\n          ),\n          'i'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: inside\n      }\n      Prism.languages.insertBefore('markup', 'cdata', def)\n    }\n  })\n  Object.defineProperty(Prism.languages.markup.tag, 'addAttribute', {\n    /**\n     * Adds an pattern to highlight languages embedded in HTML attributes.\n     *\n     * An example of an inlined language is CSS with `style` attributes.\n     *\n     * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n     * case insensitive.\n     * @param {string} lang The language key.\n     * @example\n     * addAttribute('style', 'css');\n     */\n    value: function (attrName, lang) {\n      Prism.languages.markup.tag.inside['special-attr'].push({\n        pattern: RegExp(\n          /(^|[\"'\\s])/.source +\n            '(?:' +\n            attrName +\n            ')' +\n            /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source,\n          'i'\n        ),\n        lookbehind: true,\n        inside: {\n          'attr-name': /^[^\\s=]+/,\n          'attr-value': {\n            pattern: /=[\\s\\S]+/,\n            inside: {\n              value: {\n                pattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n                lookbehind: true,\n                alias: [lang, 'language-' + lang],\n                inside: Prism.languages[lang]\n              },\n              punctuation: [\n                {\n                  pattern: /^=/,\n                  alias: 'attr-equals'\n                },\n                /\"|'/\n              ]\n            }\n          }\n        }\n      })\n    }\n  })\n  Prism.languages.html = Prism.languages.markup\n  Prism.languages.mathml = Prism.languages.markup\n  Prism.languages.svg = Prism.languages.markup\n  Prism.languages.xml = Prism.languages.extend('markup', {})\n  Prism.languages.ssml = Prism.languages.xml\n  Prism.languages.atom = Prism.languages.xml\n  Prism.languages.rss = Prism.languages.xml\n}\n\n\n/***/ })\n\n}]);"],"names":["self","push","module","markup","Prism","languages","comment","pattern","greedy","prolog","doctype","inside","lookbehind","string","punctuation","name","cdata","tag","namespace","alias","entity","hooks","add","env","type","attributes","content","value","replace","Object","defineProperty","tagName","lang","includedCdataInside","def","RegExp","source","insertBefore","attrName","html","mathml","svg","xml","extend","ssml","atom","rss","exports","displayName","aliases"],"sourceRoot":""}