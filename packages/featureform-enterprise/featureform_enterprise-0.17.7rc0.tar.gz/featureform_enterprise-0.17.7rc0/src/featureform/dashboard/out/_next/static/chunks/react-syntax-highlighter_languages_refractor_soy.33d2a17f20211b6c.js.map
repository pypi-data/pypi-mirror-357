{"version":3,"file":"static/chunks/react-syntax-highlighter_languages_refractor_soy.33d2a17f20211b6c.js","mappings":"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","sources":["webpack://_N_E/./node_modules/refractor/lang/markup-templating.js","webpack://_N_E/./node_modules/refractor/lang/soy.js","webpack://_N_E/<anon>"],"sourcesContent":["'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function (env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            ) {\n              ++i\n            } // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function (env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n","'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = soy\nsoy.displayName = 'soy'\nsoy.aliases = []\nfunction soy(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    var stringPattern = /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/\n    var numberPattern = /\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/\n    Prism.languages.soy = {\n      comment: [\n        /\\/\\*[\\s\\S]*?\\*\\//,\n        {\n          pattern: /(\\s)\\/\\/.*/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      'command-arg': {\n        pattern:\n          /(\\{+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'string',\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      parameter: {\n        pattern: /(\\{+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      keyword: [\n        {\n          pattern:\n            /(\\{+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,\n          lookbehind: true\n        },\n        /\\b(?:any|as|attributes|bool|css|float|html|in|int|js|list|map|null|number|string|uri)\\b/\n      ],\n      delimiter: {\n        pattern: /^\\{+\\/?|\\/?\\}+$/,\n        alias: 'punctuation'\n      },\n      property: /\\w+(?==)/,\n      variable: {\n        pattern: /\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+\\]))*/,\n        inside: {\n          string: {\n            pattern: stringPattern,\n            greedy: true\n          },\n          number: numberPattern,\n          punctuation: /[\\[\\].?]/\n        }\n      },\n      string: {\n        pattern: stringPattern,\n        greedy: true\n      },\n      function: [\n        /\\w+(?=\\()/,\n        {\n          pattern: /(\\|[^\\S\\r\\n]*)\\w+/,\n          lookbehind: true\n        }\n      ],\n      boolean: /\\b(?:false|true)\\b/,\n      number: numberPattern,\n      operator: /\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,\n      punctuation: /[{}()\\[\\]|.,:]/\n    } // Tokenize all inline Soy expressions\n    Prism.hooks.add('before-tokenize', function (env) {\n      var soyPattern = /\\{\\{.+?\\}\\}|\\{.+?\\}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g\n      var soyLitteralStart = '{literal}'\n      var soyLitteralEnd = '{/literal}'\n      var soyLitteralMode = false\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'soy',\n        soyPattern,\n        function (match) {\n          // Soy tags inside {literal} block are ignored\n          if (match === soyLitteralEnd) {\n            soyLitteralMode = false\n          }\n          if (!soyLitteralMode) {\n            if (match === soyLitteralStart) {\n              soyLitteralMode = true\n            }\n            return true\n          }\n          return false\n        }\n      )\n    }) // Re-insert the tokens after tokenizing\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'soy')\n    })\n  })(Prism)\n}\n","\"use strict\";\n(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[1423,3047],{\n\n/***/ 93205:\n/***/ (function(module) {\n\n\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function (env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            ) {\n              ++i\n            } // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function (env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n\n\n/***/ }),\n\n/***/ 38181:\n/***/ (function(module, __unused_webpack_exports, __webpack_require__) {\n\n\nvar refractorMarkupTemplating = __webpack_require__(93205)\nmodule.exports = soy\nsoy.displayName = 'soy'\nsoy.aliases = []\nfunction soy(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    var stringPattern = /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/\n    var numberPattern = /\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/\n    Prism.languages.soy = {\n      comment: [\n        /\\/\\*[\\s\\S]*?\\*\\//,\n        {\n          pattern: /(\\s)\\/\\/.*/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      'command-arg': {\n        pattern:\n          /(\\{+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'string',\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      parameter: {\n        pattern: /(\\{+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      keyword: [\n        {\n          pattern:\n            /(\\{+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,\n          lookbehind: true\n        },\n        /\\b(?:any|as|attributes|bool|css|float|html|in|int|js|list|map|null|number|string|uri)\\b/\n      ],\n      delimiter: {\n        pattern: /^\\{+\\/?|\\/?\\}+$/,\n        alias: 'punctuation'\n      },\n      property: /\\w+(?==)/,\n      variable: {\n        pattern: /\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+\\]))*/,\n        inside: {\n          string: {\n            pattern: stringPattern,\n            greedy: true\n          },\n          number: numberPattern,\n          punctuation: /[\\[\\].?]/\n        }\n      },\n      string: {\n        pattern: stringPattern,\n        greedy: true\n      },\n      function: [\n        /\\w+(?=\\()/,\n        {\n          pattern: /(\\|[^\\S\\r\\n]*)\\w+/,\n          lookbehind: true\n        }\n      ],\n      boolean: /\\b(?:false|true)\\b/,\n      number: numberPattern,\n      operator: /\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,\n      punctuation: /[{}()\\[\\]|.,:]/\n    } // Tokenize all inline Soy expressions\n    Prism.hooks.add('before-tokenize', function (env) {\n      var soyPattern = /\\{\\{.+?\\}\\}|\\{.+?\\}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g\n      var soyLitteralStart = '{literal}'\n      var soyLitteralEnd = '{/literal}'\n      var soyLitteralMode = false\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'soy',\n        soyPattern,\n        function (match) {\n          // Soy tags inside {literal} block are ignored\n          if (match === soyLitteralEnd) {\n            soyLitteralMode = false\n          }\n          if (!soyLitteralMode) {\n            if (match === soyLitteralStart) {\n              soyLitteralMode = true\n            }\n            return true\n          }\n          return false\n        }\n      )\n    }) // Re-insert the tokens after tokenizing\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'soy')\n    })\n  })(Prism)\n}\n\n\n/***/ })\n\n}]);"],"names":["self","push","module","markupTemplating","Prism","getPlaceholder","language","index","toUpperCase","defineProperties","languages","buildPlaceholders","value","env","placeholderPattern","replaceFilter","tokenStack","code","replace","match","placeholder","i","length","indexOf","grammar","markup","tokenizePlaceholders","j","keys","Object","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","apply","splice","concat","exports","displayName","aliases","__unused_webpack_exports","__webpack_require__","refractorMarkupTemplating","soy","stringPattern","numberPattern","register","comment","pattern","lookbehind","greedy","alias","inside","punctuation","parameter","keyword","delimiter","property","variable","string","number","function","boolean","operator","hooks","add","soyLitteralMode"],"sourceRoot":""}