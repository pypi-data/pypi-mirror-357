{"version":3,"file":"static/chunks/react-syntax-highlighter_languages_refractor_javadoclike.6ca963116fa85528.js","mappings":"ACAA,YAAY,EACXA,IAAI,CAAC,gBAAkB,CAAIA,IAAI,CAAC,gBAAkB,EAAK,EAAE,EAAEC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAElE,IAAI,CACH,SAASC,CAAM,CAAE,CDExB,SAAGC,CAAA,CAAAC,CAAA,MACHA,CAAA,CACAC,CAAA,CA4EAC,MAAA,CAAAC,cAAA,CA5EAF,CAAA,CAAAD,CADAA,CAAA,CAiFAA,CAAA,EAhFAI,SAAA,CAAAL,WAAA,EACAM,SAAA,EACAC,OAAA,iEACA,CACOC,UAAA,IACP,CACAC,OAAA,EAGAF,OAAA,yDACOC,UAAA,IACP,CACKE,WAAA,QACL,CA+DA,cACKC,KAAA,CAdL,SAAAN,CAAA,CAAAO,CAAA,EACA,iBAAAP,CAAA,EACAA,CAAAA,CAAA,EAAAA,CAAA,GAEAA,CAAA,CAAAQ,OAAA,UAAAC,CAAA,GACAC,SAhDAD,CAAA,CAAAE,CAAA,EACA,IAAAC,CAAA,eACAC,CAAA,CAAAjB,CAAA,CAAAI,SAAA,CAAAS,CAAA,KACAI,CAAA,EAGA,IAAAC,CAAA,CAAAD,CAAA,CAAAD,CAAA,KACA,CAAAE,CAAA,EAEA,IAAAC,CAAA,IACAA,CAAA,CAAAH,CAAA,GACAV,OAAA,yCACAC,UAAA,IACAa,KAAA,WACA,CAEAF,CAAA,CAAAD,CADAA,CAAA,CAAAjB,CAAA,CAAAI,SAAA,CAAAiB,YAAA,CAAAR,CAAA,WAAAM,CAAA,GACAH,CAAA,EACA,GACAE,CAAA,YAAAI,MAAA,EAEAJ,CAAAA,CAAA,CAAAD,CAAA,CAAAD,CAAA,GACAV,OAAA,CAAAY,CAAA,CACA,EAEAK,KAAA,CAAAC,OAAA,CAAAN,CAAA,EACA,QAAAO,CAAA,GAAAC,CAAA,CAAAR,CAAA,CAAAS,MAAA,CAAAF,CAAA,CAAAC,CAAA,CAAAD,CAAA,GACAP,CAAA,CAAAO,CAAA,YAAAH,MAAA,EACAJ,CAAAA,CAAA,CAAAO,CAAA,GACAnB,OAAA,CAAAY,CAAA,CAAAO,CAAA,EACA,EAEAV,CAAA,CAAAG,CAAA,CAAAO,CAAA,QAGAV,CAAA,CAAAG,CAAA,EA7BA,CA+BA,CAYAL,CAAA,UAAAP,CAAA,EACAA,CAAA,CAAAsB,MAAA,EACAtB,CAAAA,CAAA,CAAAsB,MAAA,KAEStB,CAAA,CAAAsB,MAAA,CAAAC,IAAA,CAAAlB,CAAA,CACF,EACP,EACA,CAGA,EACGV,CAAA,CAAA6B,UAAA,6BAAA7B,CAAA,EACH,CArFA,CAAA8B,OAAA,CAAAhC,CAAA,CACAA,CAAA,CAAAiC,WAAA,eACAjC,CAAA,CAAAkC,OAAA,IAmFA","sources":["webpack://_N_E/./node_modules/refractor/lang/javadoclike.js","webpack://_N_E/<anon>"],"sourcesContent":["'use strict'\n\nmodule.exports = javadoclike\njavadoclike.displayName = 'javadoclike'\njavadoclike.aliases = []\nfunction javadoclike(Prism) {\n  ;(function (Prism) {\n    var javaDocLike = (Prism.languages.javadoclike = {\n      parameter: {\n        pattern:\n          /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:arg|arguments|param)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    })\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment'\n      var grammar = Prism.languages[lang]\n      if (!grammar) {\n        return\n      }\n      var token = grammar[tokenName]\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {}\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        }\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\n        token = grammar[tokenName]\n      }\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        }\n      }\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            }\n          }\n          callback(token[i])\n        }\n      } else {\n        callback(token)\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages]\n      }\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {}\n          }\n          pattern.inside.rest = docLanguage\n        })\n      })\n    }\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    })\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\n  })(Prism)\n}\n","\"use strict\";\n(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[902],{\n\n/***/ 9858:\n/***/ (function(module) {\n\n\n\nmodule.exports = javadoclike\njavadoclike.displayName = 'javadoclike'\njavadoclike.aliases = []\nfunction javadoclike(Prism) {\n  ;(function (Prism) {\n    var javaDocLike = (Prism.languages.javadoclike = {\n      parameter: {\n        pattern:\n          /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:arg|arguments|param)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    })\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment'\n      var grammar = Prism.languages[lang]\n      if (!grammar) {\n        return\n      }\n      var token = grammar[tokenName]\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {}\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        }\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\n        token = grammar[tokenName]\n      }\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        }\n      }\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            }\n          }\n          callback(token[i])\n        }\n      } else {\n        callback(token)\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages]\n      }\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {}\n          }\n          pattern.inside.rest = docLanguage\n        })\n      })\n    }\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    })\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\n  })(Prism)\n}\n\n\n/***/ })\n\n}]);"],"names":["self","push","module","javadoclike","Prism","javaDocLike","Object","defineProperty","languages","parameter","pattern","lookbehind","keyword","punctuation","value","docLanguage","forEach","lang","docCommentSupport","callback","tokenName","grammar","token","definition","alias","insertBefore","RegExp","Array","isArray","i","l","length","inside","rest","addSupport","exports","displayName","aliases"],"sourceRoot":""}