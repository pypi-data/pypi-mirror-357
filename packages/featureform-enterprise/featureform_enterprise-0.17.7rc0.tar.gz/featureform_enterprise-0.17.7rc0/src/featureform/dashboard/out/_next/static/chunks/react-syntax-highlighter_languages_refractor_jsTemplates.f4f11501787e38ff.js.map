{"version":3,"file":"static/chunks/react-syntax-highlighter_languages_refractor_jsTemplates.f4f11501787e38ff.js","mappings":"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","sources":["webpack://_N_E/./node_modules/refractor/lang/js-templates.js","webpack://_N_E/<anon>"],"sourcesContent":["'use strict'\n\nmodule.exports = jsTemplates\njsTemplates.displayName = 'jsTemplates'\njsTemplates.aliases = []\nfunction jsTemplates(Prism) {\n  ;(function (Prism) {\n    var templateString = Prism.languages.javascript['template-string'] // see the pattern in prism-javascript.js\n    var templateLiteralPattern = templateString.pattern.source\n    var interpolationObject = templateString.inside['interpolation']\n    var interpolationPunctuationObject =\n      interpolationObject.inside['interpolation-punctuation']\n    var interpolationPattern = interpolationObject.pattern.source\n    /**\n     * Creates a new pattern to match a template string with a special tag.\n     *\n     * This will return `undefined` if there is no grammar with the given language id.\n     *\n     * @param {string} language The language id of the embedded language. E.g. `markdown`.\n     * @param {string} tag The regex pattern to match the tag.\n     * @returns {object | undefined}\n     * @example\n     * createTemplate('css', /\\bcss/.source);\n     */\n    function createTemplate(language, tag) {\n      if (!Prism.languages[language]) {\n        return undefined\n      }\n      return {\n        pattern: RegExp('((?:' + tag + ')\\\\s*)' + templateLiteralPattern),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          'template-punctuation': {\n            pattern: /^`|`$/,\n            alias: 'string'\n          },\n          'embedded-code': {\n            pattern: /[\\s\\S]+/,\n            alias: language\n          }\n        }\n      }\n    }\n    Prism.languages.javascript['template-string'] = [\n      // styled-jsx:\n      //   css`a { color: #25F; }`\n      // styled-components:\n      //   styled.h1`color: red;`\n      createTemplate(\n        'css',\n        /\\b(?:styled(?:\\([^)]*\\))?(?:\\s*\\.\\s*\\w+(?:\\([^)]*\\))*)*|css(?:\\s*\\.\\s*(?:global|resolve))?|createGlobalStyle|keyframes)/\n          .source\n      ), // html`<p></p>`\n      // div.innerHTML = `<p></p>`\n      createTemplate('html', /\\bhtml|\\.\\s*(?:inner|outer)HTML\\s*\\+?=/.source), // svg`<path fill=\"#fff\" d=\"M55.37 ...\"/>`\n      createTemplate('svg', /\\bsvg/.source), // md`# h1`, markdown`## h2`\n      createTemplate('markdown', /\\b(?:markdown|md)/.source), // gql`...`, graphql`...`, graphql.experimental`...`\n      createTemplate(\n        'graphql',\n        /\\b(?:gql|graphql(?:\\s*\\.\\s*experimental)?)/.source\n      ), // sql`...`\n      createTemplate('sql', /\\bsql/.source), // vanilla template string\n      templateString\n    ].filter(Boolean)\n    /**\n     * Returns a specific placeholder literal for the given language.\n     *\n     * @param {number} counter\n     * @param {string} language\n     * @returns {string}\n     */\n    function getPlaceholder(counter, language) {\n      return '___' + language.toUpperCase() + '_' + counter + '___'\n    }\n    /**\n     * Returns the tokens of `Prism.tokenize` but also runs the `before-tokenize` and `after-tokenize` hooks.\n     *\n     * @param {string} code\n     * @param {any} grammar\n     * @param {string} language\n     * @returns {(string|Token)[]}\n     */\n    function tokenizeWithHooks(code, grammar, language) {\n      var env = {\n        code: code,\n        grammar: grammar,\n        language: language\n      }\n      Prism.hooks.run('before-tokenize', env)\n      env.tokens = Prism.tokenize(env.code, env.grammar)\n      Prism.hooks.run('after-tokenize', env)\n      return env.tokens\n    }\n    /**\n     * Returns the token of the given JavaScript interpolation expression.\n     *\n     * @param {string} expression The code of the expression. E.g. `\"${42}\"`\n     * @returns {Token}\n     */\n    function tokenizeInterpolationExpression(expression) {\n      var tempGrammar = {}\n      tempGrammar['interpolation-punctuation'] = interpolationPunctuationObject\n      /** @type {Array} */\n      var tokens = Prism.tokenize(expression, tempGrammar)\n      if (tokens.length === 3) {\n        /**\n         * The token array will look like this\n         * [\n         *     [\"interpolation-punctuation\", \"${\"]\n         *     \"...\" // JavaScript expression of the interpolation\n         *     [\"interpolation-punctuation\", \"}\"]\n         * ]\n         */\n        var args = [1, 1]\n        args.push.apply(\n          args,\n          tokenizeWithHooks(tokens[1], Prism.languages.javascript, 'javascript')\n        )\n        tokens.splice.apply(tokens, args)\n      }\n      return new Prism.Token(\n        'interpolation',\n        tokens,\n        interpolationObject.alias,\n        expression\n      )\n    }\n    /**\n     * Tokenizes the given code with support for JavaScript interpolation expressions mixed in.\n     *\n     * This function has 3 phases:\n     *\n     * 1. Replace all JavaScript interpolation expression with a placeholder.\n     *    The placeholder will have the syntax of a identify of the target language.\n     * 2. Tokenize the code with placeholders.\n     * 3. Tokenize the interpolation expressions and re-insert them into the tokenize code.\n     *    The insertion only works if a placeholder hasn't been \"ripped apart\" meaning that the placeholder has been\n     *    tokenized as two tokens by the grammar of the embedded language.\n     *\n     * @param {string} code\n     * @param {object} grammar\n     * @param {string} language\n     * @returns {Token}\n     */\n    function tokenizeEmbedded(code, grammar, language) {\n      // 1. First filter out all interpolations\n      // because they might be escaped, we need a lookbehind, so we use Prism\n      /** @type {(Token|string)[]} */\n      var _tokens = Prism.tokenize(code, {\n        interpolation: {\n          pattern: RegExp(interpolationPattern),\n          lookbehind: true\n        }\n      }) // replace all interpolations with a placeholder which is not in the code already\n      var placeholderCounter = 0\n      /** @type {Object<string, string>} */\n      var placeholderMap = {}\n      var embeddedCode = _tokens\n        .map(function (token) {\n          if (typeof token === 'string') {\n            return token\n          } else {\n            var interpolationExpression = token.content\n            var placeholder\n            while (\n              code.indexOf(\n                (placeholder = getPlaceholder(placeholderCounter++, language))\n              ) !== -1\n            ) {\n              /* noop */\n            }\n            placeholderMap[placeholder] = interpolationExpression\n            return placeholder\n          }\n        })\n        .join('') // 2. Tokenize the embedded code\n      var embeddedTokens = tokenizeWithHooks(embeddedCode, grammar, language) // 3. Re-insert the interpolation\n      var placeholders = Object.keys(placeholderMap)\n      placeholderCounter = 0\n      /**\n       *\n       * @param {(Token|string)[]} tokens\n       * @returns {void}\n       */\n      function walkTokens(tokens) {\n        for (var i = 0; i < tokens.length; i++) {\n          if (placeholderCounter >= placeholders.length) {\n            return\n          }\n          var token = tokens[i]\n          if (typeof token === 'string' || typeof token.content === 'string') {\n            var placeholder = placeholders[placeholderCounter]\n            var s =\n              typeof token === 'string'\n                ? token\n                : /** @type {string} */\n                  token.content\n            var index = s.indexOf(placeholder)\n            if (index !== -1) {\n              ++placeholderCounter\n              var before = s.substring(0, index)\n              var middle = tokenizeInterpolationExpression(\n                placeholderMap[placeholder]\n              )\n              var after = s.substring(index + placeholder.length)\n              var replacement = []\n              if (before) {\n                replacement.push(before)\n              }\n              replacement.push(middle)\n              if (after) {\n                var afterTokens = [after]\n                walkTokens(afterTokens)\n                replacement.push.apply(replacement, afterTokens)\n              }\n              if (typeof token === 'string') {\n                tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                i += replacement.length - 1\n              } else {\n                token.content = replacement\n              }\n            }\n          } else {\n            var content = token.content\n            if (Array.isArray(content)) {\n              walkTokens(content)\n            } else {\n              walkTokens([content])\n            }\n          }\n        }\n      }\n      walkTokens(embeddedTokens)\n      return new Prism.Token(\n        language,\n        embeddedTokens,\n        'language-' + language,\n        code\n      )\n    }\n    /**\n     * The languages for which JS templating will handle tagged template literals.\n     *\n     * JS templating isn't active for only JavaScript but also related languages like TypeScript, JSX, and TSX.\n     */\n    var supportedLanguages = {\n      javascript: true,\n      js: true,\n      typescript: true,\n      ts: true,\n      jsx: true,\n      tsx: true\n    }\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (!(env.language in supportedLanguages)) {\n        return\n      }\n      /**\n       * Finds and tokenizes all template strings with an embedded languages.\n       *\n       * @param {(Token | string)[]} tokens\n       * @returns {void}\n       */\n      function findTemplateStrings(tokens) {\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i]\n          if (typeof token === 'string') {\n            continue\n          }\n          var content = token.content\n          if (!Array.isArray(content)) {\n            if (typeof content !== 'string') {\n              findTemplateStrings([content])\n            }\n            continue\n          }\n          if (token.type === 'template-string') {\n            /**\n             * A JavaScript template-string token will look like this:\n             *\n             * [\"template-string\", [\n             *     [\"template-punctuation\", \"`\"],\n             *     (\n             *         An array of \"string\" and \"interpolation\" tokens. This is the simple string case.\n             *         or\n             *         [\"embedded-code\", \"...\"] This is the token containing the embedded code.\n             *                                  It also has an alias which is the language of the embedded code.\n             *     ),\n             *     [\"template-punctuation\", \"`\"]\n             * ]]\n             */\n            var embedded = content[1]\n            if (\n              content.length === 3 &&\n              typeof embedded !== 'string' &&\n              embedded.type === 'embedded-code'\n            ) {\n              // get string content\n              var code = stringContent(embedded)\n              var alias = embedded.alias\n              var language = Array.isArray(alias) ? alias[0] : alias\n              var grammar = Prism.languages[language]\n              if (!grammar) {\n                // the embedded language isn't registered.\n                continue\n              }\n              content[1] = tokenizeEmbedded(code, grammar, language)\n            }\n          } else {\n            findTemplateStrings(content)\n          }\n        }\n      }\n      findTemplateStrings(env.tokens)\n    })\n    /**\n     * Returns the string content of a token or token stream.\n     *\n     * @param {string | Token | (string | Token)[]} value\n     * @returns {string}\n     */\n    function stringContent(value) {\n      if (typeof value === 'string') {\n        return value\n      } else if (Array.isArray(value)) {\n        return value.map(stringContent).join('')\n      } else {\n        return stringContent(value.content)\n      }\n    }\n  })(Prism)\n}\n","\"use strict\";\n(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[7661],{\n\n/***/ 47359:\n/***/ (function(module) {\n\n\n\nmodule.exports = jsTemplates\njsTemplates.displayName = 'jsTemplates'\njsTemplates.aliases = []\nfunction jsTemplates(Prism) {\n  ;(function (Prism) {\n    var templateString = Prism.languages.javascript['template-string'] // see the pattern in prism-javascript.js\n    var templateLiteralPattern = templateString.pattern.source\n    var interpolationObject = templateString.inside['interpolation']\n    var interpolationPunctuationObject =\n      interpolationObject.inside['interpolation-punctuation']\n    var interpolationPattern = interpolationObject.pattern.source\n    /**\n     * Creates a new pattern to match a template string with a special tag.\n     *\n     * This will return `undefined` if there is no grammar with the given language id.\n     *\n     * @param {string} language The language id of the embedded language. E.g. `markdown`.\n     * @param {string} tag The regex pattern to match the tag.\n     * @returns {object | undefined}\n     * @example\n     * createTemplate('css', /\\bcss/.source);\n     */\n    function createTemplate(language, tag) {\n      if (!Prism.languages[language]) {\n        return undefined\n      }\n      return {\n        pattern: RegExp('((?:' + tag + ')\\\\s*)' + templateLiteralPattern),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          'template-punctuation': {\n            pattern: /^`|`$/,\n            alias: 'string'\n          },\n          'embedded-code': {\n            pattern: /[\\s\\S]+/,\n            alias: language\n          }\n        }\n      }\n    }\n    Prism.languages.javascript['template-string'] = [\n      // styled-jsx:\n      //   css`a { color: #25F; }`\n      // styled-components:\n      //   styled.h1`color: red;`\n      createTemplate(\n        'css',\n        /\\b(?:styled(?:\\([^)]*\\))?(?:\\s*\\.\\s*\\w+(?:\\([^)]*\\))*)*|css(?:\\s*\\.\\s*(?:global|resolve))?|createGlobalStyle|keyframes)/\n          .source\n      ), // html`<p></p>`\n      // div.innerHTML = `<p></p>`\n      createTemplate('html', /\\bhtml|\\.\\s*(?:inner|outer)HTML\\s*\\+?=/.source), // svg`<path fill=\"#fff\" d=\"M55.37 ...\"/>`\n      createTemplate('svg', /\\bsvg/.source), // md`# h1`, markdown`## h2`\n      createTemplate('markdown', /\\b(?:markdown|md)/.source), // gql`...`, graphql`...`, graphql.experimental`...`\n      createTemplate(\n        'graphql',\n        /\\b(?:gql|graphql(?:\\s*\\.\\s*experimental)?)/.source\n      ), // sql`...`\n      createTemplate('sql', /\\bsql/.source), // vanilla template string\n      templateString\n    ].filter(Boolean)\n    /**\n     * Returns a specific placeholder literal for the given language.\n     *\n     * @param {number} counter\n     * @param {string} language\n     * @returns {string}\n     */\n    function getPlaceholder(counter, language) {\n      return '___' + language.toUpperCase() + '_' + counter + '___'\n    }\n    /**\n     * Returns the tokens of `Prism.tokenize` but also runs the `before-tokenize` and `after-tokenize` hooks.\n     *\n     * @param {string} code\n     * @param {any} grammar\n     * @param {string} language\n     * @returns {(string|Token)[]}\n     */\n    function tokenizeWithHooks(code, grammar, language) {\n      var env = {\n        code: code,\n        grammar: grammar,\n        language: language\n      }\n      Prism.hooks.run('before-tokenize', env)\n      env.tokens = Prism.tokenize(env.code, env.grammar)\n      Prism.hooks.run('after-tokenize', env)\n      return env.tokens\n    }\n    /**\n     * Returns the token of the given JavaScript interpolation expression.\n     *\n     * @param {string} expression The code of the expression. E.g. `\"${42}\"`\n     * @returns {Token}\n     */\n    function tokenizeInterpolationExpression(expression) {\n      var tempGrammar = {}\n      tempGrammar['interpolation-punctuation'] = interpolationPunctuationObject\n      /** @type {Array} */\n      var tokens = Prism.tokenize(expression, tempGrammar)\n      if (tokens.length === 3) {\n        /**\n         * The token array will look like this\n         * [\n         *     [\"interpolation-punctuation\", \"${\"]\n         *     \"...\" // JavaScript expression of the interpolation\n         *     [\"interpolation-punctuation\", \"}\"]\n         * ]\n         */\n        var args = [1, 1]\n        args.push.apply(\n          args,\n          tokenizeWithHooks(tokens[1], Prism.languages.javascript, 'javascript')\n        )\n        tokens.splice.apply(tokens, args)\n      }\n      return new Prism.Token(\n        'interpolation',\n        tokens,\n        interpolationObject.alias,\n        expression\n      )\n    }\n    /**\n     * Tokenizes the given code with support for JavaScript interpolation expressions mixed in.\n     *\n     * This function has 3 phases:\n     *\n     * 1. Replace all JavaScript interpolation expression with a placeholder.\n     *    The placeholder will have the syntax of a identify of the target language.\n     * 2. Tokenize the code with placeholders.\n     * 3. Tokenize the interpolation expressions and re-insert them into the tokenize code.\n     *    The insertion only works if a placeholder hasn't been \"ripped apart\" meaning that the placeholder has been\n     *    tokenized as two tokens by the grammar of the embedded language.\n     *\n     * @param {string} code\n     * @param {object} grammar\n     * @param {string} language\n     * @returns {Token}\n     */\n    function tokenizeEmbedded(code, grammar, language) {\n      // 1. First filter out all interpolations\n      // because they might be escaped, we need a lookbehind, so we use Prism\n      /** @type {(Token|string)[]} */\n      var _tokens = Prism.tokenize(code, {\n        interpolation: {\n          pattern: RegExp(interpolationPattern),\n          lookbehind: true\n        }\n      }) // replace all interpolations with a placeholder which is not in the code already\n      var placeholderCounter = 0\n      /** @type {Object<string, string>} */\n      var placeholderMap = {}\n      var embeddedCode = _tokens\n        .map(function (token) {\n          if (typeof token === 'string') {\n            return token\n          } else {\n            var interpolationExpression = token.content\n            var placeholder\n            while (\n              code.indexOf(\n                (placeholder = getPlaceholder(placeholderCounter++, language))\n              ) !== -1\n            ) {\n              /* noop */\n            }\n            placeholderMap[placeholder] = interpolationExpression\n            return placeholder\n          }\n        })\n        .join('') // 2. Tokenize the embedded code\n      var embeddedTokens = tokenizeWithHooks(embeddedCode, grammar, language) // 3. Re-insert the interpolation\n      var placeholders = Object.keys(placeholderMap)\n      placeholderCounter = 0\n      /**\n       *\n       * @param {(Token|string)[]} tokens\n       * @returns {void}\n       */\n      function walkTokens(tokens) {\n        for (var i = 0; i < tokens.length; i++) {\n          if (placeholderCounter >= placeholders.length) {\n            return\n          }\n          var token = tokens[i]\n          if (typeof token === 'string' || typeof token.content === 'string') {\n            var placeholder = placeholders[placeholderCounter]\n            var s =\n              typeof token === 'string'\n                ? token\n                : /** @type {string} */\n                  token.content\n            var index = s.indexOf(placeholder)\n            if (index !== -1) {\n              ++placeholderCounter\n              var before = s.substring(0, index)\n              var middle = tokenizeInterpolationExpression(\n                placeholderMap[placeholder]\n              )\n              var after = s.substring(index + placeholder.length)\n              var replacement = []\n              if (before) {\n                replacement.push(before)\n              }\n              replacement.push(middle)\n              if (after) {\n                var afterTokens = [after]\n                walkTokens(afterTokens)\n                replacement.push.apply(replacement, afterTokens)\n              }\n              if (typeof token === 'string') {\n                tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                i += replacement.length - 1\n              } else {\n                token.content = replacement\n              }\n            }\n          } else {\n            var content = token.content\n            if (Array.isArray(content)) {\n              walkTokens(content)\n            } else {\n              walkTokens([content])\n            }\n          }\n        }\n      }\n      walkTokens(embeddedTokens)\n      return new Prism.Token(\n        language,\n        embeddedTokens,\n        'language-' + language,\n        code\n      )\n    }\n    /**\n     * The languages for which JS templating will handle tagged template literals.\n     *\n     * JS templating isn't active for only JavaScript but also related languages like TypeScript, JSX, and TSX.\n     */\n    var supportedLanguages = {\n      javascript: true,\n      js: true,\n      typescript: true,\n      ts: true,\n      jsx: true,\n      tsx: true\n    }\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (!(env.language in supportedLanguages)) {\n        return\n      }\n      /**\n       * Finds and tokenizes all template strings with an embedded languages.\n       *\n       * @param {(Token | string)[]} tokens\n       * @returns {void}\n       */\n      function findTemplateStrings(tokens) {\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i]\n          if (typeof token === 'string') {\n            continue\n          }\n          var content = token.content\n          if (!Array.isArray(content)) {\n            if (typeof content !== 'string') {\n              findTemplateStrings([content])\n            }\n            continue\n          }\n          if (token.type === 'template-string') {\n            /**\n             * A JavaScript template-string token will look like this:\n             *\n             * [\"template-string\", [\n             *     [\"template-punctuation\", \"`\"],\n             *     (\n             *         An array of \"string\" and \"interpolation\" tokens. This is the simple string case.\n             *         or\n             *         [\"embedded-code\", \"...\"] This is the token containing the embedded code.\n             *                                  It also has an alias which is the language of the embedded code.\n             *     ),\n             *     [\"template-punctuation\", \"`\"]\n             * ]]\n             */\n            var embedded = content[1]\n            if (\n              content.length === 3 &&\n              typeof embedded !== 'string' &&\n              embedded.type === 'embedded-code'\n            ) {\n              // get string content\n              var code = stringContent(embedded)\n              var alias = embedded.alias\n              var language = Array.isArray(alias) ? alias[0] : alias\n              var grammar = Prism.languages[language]\n              if (!grammar) {\n                // the embedded language isn't registered.\n                continue\n              }\n              content[1] = tokenizeEmbedded(code, grammar, language)\n            }\n          } else {\n            findTemplateStrings(content)\n          }\n        }\n      }\n      findTemplateStrings(env.tokens)\n    })\n    /**\n     * Returns the string content of a token or token stream.\n     *\n     * @param {string | Token | (string | Token)[]} value\n     * @returns {string}\n     */\n    function stringContent(value) {\n      if (typeof value === 'string') {\n        return value\n      } else if (Array.isArray(value)) {\n        return value.map(stringContent).join('')\n      } else {\n        return stringContent(value.content)\n      }\n    }\n  })(Prism)\n}\n\n\n/***/ })\n\n}]);"],"names":["self","push","module","jsTemplates","Prism","templateString","languages","javascript","templateLiteralPattern","pattern","source","interpolationObject","inside","interpolationPunctuationObject","interpolationPattern","createTemplate","language","tag","RegExp","lookbehind","greedy","alias","getPlaceholder","counter","toUpperCase","tokenizeWithHooks","code","grammar","env","hooks","run","tokens","tokenize","tokenizeInterpolationExpression","expression","tempGrammar","length","args","apply","splice","Token","tokenizeEmbedded","_tokens","interpolation","placeholderCounter","placeholderMap","embeddedCode","map","token","placeholder","interpolationExpression","content","indexOf","join","embeddedTokens","placeholders","Object","keys","walkTokens","i","s","index","before","substring","middle","after","replacement","afterTokens","concat","Array","isArray","filter","Boolean","supportedLanguages","js","typescript","ts","jsx","tsx","stringContent","value","add","findTemplateStrings","l","type","embedded","exports","displayName","aliases"],"sourceRoot":""}