{"version":3,"file":"static/chunks/react-syntax-highlighter_languages_refractor_sass.7f4533ff3c33b5dd.js","mappings":"ACAA,YAAY,EACXA,IAAI,CAAC,gBAAkB,CAAIA,IAAI,CAAC,gBAAkB,EAAK,EAAE,EAAEC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAEnE,KAAK,CACJ,SAASC,CAAM,CAAE,CDExB,SAAGC,CAAA,CAAAC,CAAA,MACHA,CAAA,CAqBAC,CAAA,CACAC,CAAA,EAtBAF,CAAA,CAsEAA,CAAA,EArEAG,SAAA,CAAAJ,IAAA,CAAAC,CAAA,CAAAG,SAAA,CAAAC,MAAA,QAEAC,OAAA,EACAC,OAAA,iDACAC,UAAA,IACAC,MAAA,IACK,CACL,EACAR,CAAA,CAAAG,SAAA,CAAAM,YAAA,kBAEA,eAEAH,OAAA,uBACAE,MAAA,IACAE,MAAA,EACAC,MAAA,oBACA,CACK,CACL,EACA,OAAAX,CAAA,CAAAG,SAAA,CAAAJ,IAAA,CAAgCY,MAAA,CAChCV,CAAA,0BACAC,CAAA,6CAEA,CACAI,OAAA,eACAC,UAAA,IACA,CACA,CACAP,CAAA,CAAAG,SAAA,CAAAM,YAAA,oBAEA,iBACAH,OAAA,gBACAE,MAAA,IACAE,MAAA,EACAE,WAAA,KACAX,QAAA,CAAAA,CAAA,CACAC,QAAA,CAAAA,CAAA,CACO,CACP,CAEA,iBACAI,OAAA,sCACAE,MAAA,IACAE,MAAA,EACAG,QAAA,oBAEA,CACAP,OAAA,cACAC,UAAA,IACA,CACA,CACAK,WAAA,KACAX,QAAA,CAAAA,CAAA,CACAC,QAAA,CAAAA,CAAA,CACAY,SAAA,CAAAd,CAAA,CAAAG,SAAA,CAAAJ,IAAA,CAAAe,SAAA,CACA,CACK,CACL,EACA,OAAAd,CAAA,CAAAG,SAAA,CAAAJ,IAAA,CAAAc,QAAA,CACA,OAAAb,CAAA,CAAAG,SAAA,CAAAJ,IAAA,CAAAe,SAAA,CAEAd,CAAA,CAAAG,SAAA,CAAAM,YAAA,uBACAM,QAAA,EACAT,OAAA,yHACA,CACAC,UAAA,IACAC,MAAA,IACK,CACF,EACH,CA1EA,CAAAQ,OAAA,CAAAjB,CAAA,CACAA,CAAA,CAAAkB,WAAA,QACAlB,CAAA,CAAAmB,OAAA,IAwEA","sources":["webpack://_N_E/./node_modules/refractor/lang/sass.js","webpack://_N_E/<anon>"],"sourcesContent":["'use strict'\n\nmodule.exports = sass\nsass.displayName = 'sass'\nsass.aliases = []\nfunction sass(Prism) {\n  ;(function (Prism) {\n    Prism.languages.sass = Prism.languages.extend('css', {\n      // Sass comments don't need to be closed, only indented\n      comment: {\n        pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n        lookbehind: true,\n        greedy: true\n      }\n    })\n    Prism.languages.insertBefore('sass', 'atrule', {\n      // We want to consume the whole line\n      'atrule-line': {\n        // Includes support for = and + shortcuts\n        pattern: /^(?:[ \\t]*)[@+=].+/m,\n        greedy: true,\n        inside: {\n          atrule: /(?:@[\\w-]+|[+=])/\n        }\n      }\n    })\n    delete Prism.languages.sass.atrule\n    var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    var operator = [\n      /[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|not|or)\\b/,\n      {\n        pattern: /(\\s)-(?=\\s)/,\n        lookbehind: true\n      }\n    ]\n    Prism.languages.insertBefore('sass', 'property', {\n      // We want to consume the whole line\n      'variable-line': {\n        pattern: /^[ \\t]*\\$.+/m,\n        greedy: true,\n        inside: {\n          punctuation: /:/,\n          variable: variable,\n          operator: operator\n        }\n      },\n      // We want to consume the whole line\n      'property-line': {\n        pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n        greedy: true,\n        inside: {\n          property: [\n            /[^:\\s]+(?=\\s*:)/,\n            {\n              pattern: /(:)[^:\\s]+/,\n              lookbehind: true\n            }\n          ],\n          punctuation: /:/,\n          variable: variable,\n          operator: operator,\n          important: Prism.languages.sass.important\n        }\n      }\n    })\n    delete Prism.languages.sass.property\n    delete Prism.languages.sass.important // Now that whole lines for other patterns are consumed,\n    // what's left should be selectors\n    Prism.languages.insertBefore('sass', 'punctuation', {\n      selector: {\n        pattern:\n          /^([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/m,\n        lookbehind: true,\n        greedy: true\n      }\n    })\n  })(Prism)\n}\n","\"use strict\";\n(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[9797],{\n\n/***/ 41720:\n/***/ (function(module) {\n\n\n\nmodule.exports = sass\nsass.displayName = 'sass'\nsass.aliases = []\nfunction sass(Prism) {\n  ;(function (Prism) {\n    Prism.languages.sass = Prism.languages.extend('css', {\n      // Sass comments don't need to be closed, only indented\n      comment: {\n        pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n        lookbehind: true,\n        greedy: true\n      }\n    })\n    Prism.languages.insertBefore('sass', 'atrule', {\n      // We want to consume the whole line\n      'atrule-line': {\n        // Includes support for = and + shortcuts\n        pattern: /^(?:[ \\t]*)[@+=].+/m,\n        greedy: true,\n        inside: {\n          atrule: /(?:@[\\w-]+|[+=])/\n        }\n      }\n    })\n    delete Prism.languages.sass.atrule\n    var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    var operator = [\n      /[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|not|or)\\b/,\n      {\n        pattern: /(\\s)-(?=\\s)/,\n        lookbehind: true\n      }\n    ]\n    Prism.languages.insertBefore('sass', 'property', {\n      // We want to consume the whole line\n      'variable-line': {\n        pattern: /^[ \\t]*\\$.+/m,\n        greedy: true,\n        inside: {\n          punctuation: /:/,\n          variable: variable,\n          operator: operator\n        }\n      },\n      // We want to consume the whole line\n      'property-line': {\n        pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n        greedy: true,\n        inside: {\n          property: [\n            /[^:\\s]+(?=\\s*:)/,\n            {\n              pattern: /(:)[^:\\s]+/,\n              lookbehind: true\n            }\n          ],\n          punctuation: /:/,\n          variable: variable,\n          operator: operator,\n          important: Prism.languages.sass.important\n        }\n      }\n    })\n    delete Prism.languages.sass.property\n    delete Prism.languages.sass.important // Now that whole lines for other patterns are consumed,\n    // what's left should be selectors\n    Prism.languages.insertBefore('sass', 'punctuation', {\n      selector: {\n        pattern:\n          /^([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/m,\n        lookbehind: true,\n        greedy: true\n      }\n    })\n  })(Prism)\n}\n\n\n/***/ })\n\n}]);"],"names":["self","push","module","sass","Prism","variable","operator","languages","extend","comment","pattern","lookbehind","greedy","insertBefore","inside","atrule","punctuation","property","important","selector","exports","displayName","aliases"],"sourceRoot":""}