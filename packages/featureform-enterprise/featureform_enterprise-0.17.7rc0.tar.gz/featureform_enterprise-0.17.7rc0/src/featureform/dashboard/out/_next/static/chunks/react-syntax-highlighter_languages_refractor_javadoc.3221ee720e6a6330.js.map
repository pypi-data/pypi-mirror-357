{"version":3,"file":"static/chunks/react-syntax-highlighter_languages_refractor_javadoc.3221ee720e6a6330.js","mappings":"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","sources":["webpack://_N_E/./node_modules/refractor/lang/java.js","webpack://_N_E/./node_modules/refractor/lang/javadoc.js","webpack://_N_E/./node_modules/refractor/lang/javadoclike.js","webpack://_N_E/<anon>"],"sourcesContent":["'use strict'\n\nmodule.exports = java\njava.displayName = 'java'\njava.aliases = []\nfunction java(Prism) {\n  ;(function (Prism) {\n    var keywords =\n      /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/ // full package (optional) + parent classes (optional)\n    var classNamePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/\n      .source // based on the java naming conventions\n    var className = {\n      pattern: RegExp(classNamePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n      lookbehind: true,\n      inside: {\n        namespace: {\n          pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        punctuation: /\\./\n      }\n    }\n    Prism.languages.java = Prism.languages.extend('clike', {\n      string: {\n        pattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n        lookbehind: true,\n        greedy: true\n      },\n      'class-name': [\n        className,\n        {\n          // variables and parameters\n          // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n          pattern: RegExp(\n            classNamePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source\n          ),\n          lookbehind: true,\n          inside: className.inside\n        }\n      ],\n      keyword: keywords,\n      function: [\n        Prism.languages.clike.function,\n        {\n          pattern: /(::\\s*)[a-z_]\\w*/,\n          lookbehind: true\n        }\n      ],\n      number:\n        /\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n      operator: {\n        pattern:\n          /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('java', 'string', {\n      'triple-quoted-string': {\n        // http://openjdk.java.net/jeps/355#Description\n        pattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\n        greedy: true,\n        alias: 'string'\n      },\n      char: {\n        pattern: /'(?:\\\\.|[^'\\\\\\r\\n]){1,6}'/,\n        greedy: true\n      }\n    })\n    Prism.languages.insertBefore('java', 'class-name', {\n      annotation: {\n        pattern: /(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      generics: {\n        pattern:\n          /<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&))*>)*>)*>)*>/,\n        inside: {\n          'class-name': className,\n          keyword: keywords,\n          punctuation: /[<>(),.:]/,\n          operator: /[?&|]/\n        }\n      },\n      namespace: {\n        pattern: RegExp(\n          /(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/.source.replace(\n            /<keyword>/g,\n            function () {\n              return keywords.source\n            }\n          )\n        ),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    })\n  })(Prism)\n}\n","'use strict'\nvar refractorJava = require('./java.js')\nvar refractorJavadoclike = require('./javadoclike.js')\nmodule.exports = javadoc\njavadoc.displayName = 'javadoc'\njavadoc.aliases = []\nfunction javadoc(Prism) {\n  Prism.register(refractorJava)\n  Prism.register(refractorJavadoclike)\n  ;(function (Prism) {\n    var codeLinePattern = /(^(?:[\\t ]*(?:\\*\\s*)*))[^*\\s].*$/m\n    var memberReference = /#\\s*\\w+(?:\\s*\\([^()]*\\))?/.source\n    var reference =\n      /(?:\\b[a-zA-Z]\\w+\\s*\\.\\s*)*\\b[A-Z]\\w*(?:\\s*<mem>)?|<mem>/.source.replace(\n        /<mem>/g,\n        function () {\n          return memberReference\n        }\n      )\n    Prism.languages.javadoc = Prism.languages.extend('javadoclike', {})\n    Prism.languages.insertBefore('javadoc', 'keyword', {\n      reference: {\n        pattern: RegExp(\n          /(@(?:exception|link|linkplain|see|throws|value)\\s+(?:\\*\\s*)?)/\n            .source +\n            '(?:' +\n            reference +\n            ')'\n        ),\n        lookbehind: true,\n        inside: {\n          function: {\n            pattern: /(#\\s*)\\w+(?=\\s*\\()/,\n            lookbehind: true\n          },\n          field: {\n            pattern: /(#\\s*)\\w+/,\n            lookbehind: true\n          },\n          namespace: {\n            pattern: /\\b(?:[a-z]\\w*\\s*\\.\\s*)+/,\n            inside: {\n              punctuation: /\\./\n            }\n          },\n          'class-name': /\\b[A-Z]\\w*/,\n          keyword: Prism.languages.java.keyword,\n          punctuation: /[#()[\\],.]/\n        }\n      },\n      'class-name': {\n        // @param <T> the first generic type parameter\n        pattern: /(@param\\s+)<[A-Z]\\w*>/,\n        lookbehind: true,\n        inside: {\n          punctuation: /[.<>]/\n        }\n      },\n      'code-section': [\n        {\n          pattern:\n            /(\\{@code\\s+(?!\\s))(?:[^\\s{}]|\\s+(?![\\s}])|\\{(?:[^{}]|\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\\})+(?=\\s*\\})/,\n          lookbehind: true,\n          inside: {\n            code: {\n              // there can't be any HTML inside of {@code} tags\n              pattern: codeLinePattern,\n              lookbehind: true,\n              inside: Prism.languages.java,\n              alias: 'language-java'\n            }\n          }\n        },\n        {\n          pattern:\n            /(<(code|pre|tt)>(?!<code>)\\s*)\\S(?:\\S|\\s+\\S)*?(?=\\s*<\\/\\2>)/,\n          lookbehind: true,\n          inside: {\n            line: {\n              pattern: codeLinePattern,\n              lookbehind: true,\n              inside: {\n                // highlight HTML tags and entities\n                tag: Prism.languages.markup.tag,\n                entity: Prism.languages.markup.entity,\n                code: {\n                  // everything else is Java code\n                  pattern: /.+/,\n                  inside: Prism.languages.java,\n                  alias: 'language-java'\n                }\n              }\n            }\n          }\n        }\n      ],\n      tag: Prism.languages.markup.tag,\n      entity: Prism.languages.markup.entity\n    })\n    Prism.languages.javadoclike.addSupport('java', Prism.languages.javadoc)\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = javadoclike\njavadoclike.displayName = 'javadoclike'\njavadoclike.aliases = []\nfunction javadoclike(Prism) {\n  ;(function (Prism) {\n    var javaDocLike = (Prism.languages.javadoclike = {\n      parameter: {\n        pattern:\n          /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:arg|arguments|param)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    })\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment'\n      var grammar = Prism.languages[lang]\n      if (!grammar) {\n        return\n      }\n      var token = grammar[tokenName]\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {}\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        }\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\n        token = grammar[tokenName]\n      }\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        }\n      }\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            }\n          }\n          callback(token[i])\n        }\n      } else {\n        callback(token)\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages]\n      }\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {}\n          }\n          pattern.inside.rest = docLanguage\n        })\n      })\n    }\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    })\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\n  })(Prism)\n}\n","\"use strict\";\n(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[8947,3980,902],{\n\n/***/ 15909:\n/***/ (function(module) {\n\n\n\nmodule.exports = java\njava.displayName = 'java'\njava.aliases = []\nfunction java(Prism) {\n  ;(function (Prism) {\n    var keywords =\n      /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/ // full package (optional) + parent classes (optional)\n    var classNamePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/\n      .source // based on the java naming conventions\n    var className = {\n      pattern: RegExp(classNamePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n      lookbehind: true,\n      inside: {\n        namespace: {\n          pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        punctuation: /\\./\n      }\n    }\n    Prism.languages.java = Prism.languages.extend('clike', {\n      string: {\n        pattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n        lookbehind: true,\n        greedy: true\n      },\n      'class-name': [\n        className,\n        {\n          // variables and parameters\n          // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n          pattern: RegExp(\n            classNamePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source\n          ),\n          lookbehind: true,\n          inside: className.inside\n        }\n      ],\n      keyword: keywords,\n      function: [\n        Prism.languages.clike.function,\n        {\n          pattern: /(::\\s*)[a-z_]\\w*/,\n          lookbehind: true\n        }\n      ],\n      number:\n        /\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n      operator: {\n        pattern:\n          /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('java', 'string', {\n      'triple-quoted-string': {\n        // http://openjdk.java.net/jeps/355#Description\n        pattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\n        greedy: true,\n        alias: 'string'\n      },\n      char: {\n        pattern: /'(?:\\\\.|[^'\\\\\\r\\n]){1,6}'/,\n        greedy: true\n      }\n    })\n    Prism.languages.insertBefore('java', 'class-name', {\n      annotation: {\n        pattern: /(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      generics: {\n        pattern:\n          /<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&))*>)*>)*>)*>/,\n        inside: {\n          'class-name': className,\n          keyword: keywords,\n          punctuation: /[<>(),.:]/,\n          operator: /[?&|]/\n        }\n      },\n      namespace: {\n        pattern: RegExp(\n          /(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/.source.replace(\n            /<keyword>/g,\n            function () {\n              return keywords.source\n            }\n          )\n        ),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    })\n  })(Prism)\n}\n\n\n/***/ }),\n\n/***/ 36553:\n/***/ (function(module, __unused_webpack_exports, __webpack_require__) {\n\n\nvar refractorJava = __webpack_require__(15909)\nvar refractorJavadoclike = __webpack_require__(9858)\nmodule.exports = javadoc\njavadoc.displayName = 'javadoc'\njavadoc.aliases = []\nfunction javadoc(Prism) {\n  Prism.register(refractorJava)\n  Prism.register(refractorJavadoclike)\n  ;(function (Prism) {\n    var codeLinePattern = /(^(?:[\\t ]*(?:\\*\\s*)*))[^*\\s].*$/m\n    var memberReference = /#\\s*\\w+(?:\\s*\\([^()]*\\))?/.source\n    var reference =\n      /(?:\\b[a-zA-Z]\\w+\\s*\\.\\s*)*\\b[A-Z]\\w*(?:\\s*<mem>)?|<mem>/.source.replace(\n        /<mem>/g,\n        function () {\n          return memberReference\n        }\n      )\n    Prism.languages.javadoc = Prism.languages.extend('javadoclike', {})\n    Prism.languages.insertBefore('javadoc', 'keyword', {\n      reference: {\n        pattern: RegExp(\n          /(@(?:exception|link|linkplain|see|throws|value)\\s+(?:\\*\\s*)?)/\n            .source +\n            '(?:' +\n            reference +\n            ')'\n        ),\n        lookbehind: true,\n        inside: {\n          function: {\n            pattern: /(#\\s*)\\w+(?=\\s*\\()/,\n            lookbehind: true\n          },\n          field: {\n            pattern: /(#\\s*)\\w+/,\n            lookbehind: true\n          },\n          namespace: {\n            pattern: /\\b(?:[a-z]\\w*\\s*\\.\\s*)+/,\n            inside: {\n              punctuation: /\\./\n            }\n          },\n          'class-name': /\\b[A-Z]\\w*/,\n          keyword: Prism.languages.java.keyword,\n          punctuation: /[#()[\\],.]/\n        }\n      },\n      'class-name': {\n        // @param <T> the first generic type parameter\n        pattern: /(@param\\s+)<[A-Z]\\w*>/,\n        lookbehind: true,\n        inside: {\n          punctuation: /[.<>]/\n        }\n      },\n      'code-section': [\n        {\n          pattern:\n            /(\\{@code\\s+(?!\\s))(?:[^\\s{}]|\\s+(?![\\s}])|\\{(?:[^{}]|\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\\})+(?=\\s*\\})/,\n          lookbehind: true,\n          inside: {\n            code: {\n              // there can't be any HTML inside of {@code} tags\n              pattern: codeLinePattern,\n              lookbehind: true,\n              inside: Prism.languages.java,\n              alias: 'language-java'\n            }\n          }\n        },\n        {\n          pattern:\n            /(<(code|pre|tt)>(?!<code>)\\s*)\\S(?:\\S|\\s+\\S)*?(?=\\s*<\\/\\2>)/,\n          lookbehind: true,\n          inside: {\n            line: {\n              pattern: codeLinePattern,\n              lookbehind: true,\n              inside: {\n                // highlight HTML tags and entities\n                tag: Prism.languages.markup.tag,\n                entity: Prism.languages.markup.entity,\n                code: {\n                  // everything else is Java code\n                  pattern: /.+/,\n                  inside: Prism.languages.java,\n                  alias: 'language-java'\n                }\n              }\n            }\n          }\n        }\n      ],\n      tag: Prism.languages.markup.tag,\n      entity: Prism.languages.markup.entity\n    })\n    Prism.languages.javadoclike.addSupport('java', Prism.languages.javadoc)\n  })(Prism)\n}\n\n\n/***/ }),\n\n/***/ 9858:\n/***/ (function(module) {\n\n\n\nmodule.exports = javadoclike\njavadoclike.displayName = 'javadoclike'\njavadoclike.aliases = []\nfunction javadoclike(Prism) {\n  ;(function (Prism) {\n    var javaDocLike = (Prism.languages.javadoclike = {\n      parameter: {\n        pattern:\n          /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:arg|arguments|param)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    })\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment'\n      var grammar = Prism.languages[lang]\n      if (!grammar) {\n        return\n      }\n      var token = grammar[tokenName]\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {}\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        }\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\n        token = grammar[tokenName]\n      }\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        }\n      }\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            }\n          }\n          callback(token[i])\n        }\n      } else {\n        callback(token)\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages]\n      }\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {}\n          }\n          pattern.inside.rest = docLanguage\n        })\n      })\n    }\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    })\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\n  })(Prism)\n}\n\n\n/***/ })\n\n}]);"],"names":["self","push","module","java","Prism","keywords","classNamePrefix","className","pattern","RegExp","source","lookbehind","inside","namespace","punctuation","languages","extend","string","greedy","keyword","function","clike","number","operator","insertBefore","alias","char","annotation","generics","replace","exports","displayName","aliases","__unused_webpack_exports","__webpack_require__","refractorJava","refractorJavadoclike","javadoc","codeLinePattern","memberReference","reference","register","field","code","line","tag","markup","entity","javadoclike","addSupport","javaDocLike","Object","defineProperty","parameter","value","docLanguage","forEach","lang","docCommentSupport","callback","tokenName","grammar","token","definition","Array","isArray","i","l","length","rest"],"sourceRoot":""}