{"version":3,"file":"static/chunks/react-syntax-highlighter_languages_refractor_erb.7ddda1b3fcd8cedf.js","mappings":"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","sources":["webpack://_N_E/./node_modules/refractor/lang/erb.js","webpack://_N_E/./node_modules/refractor/lang/markup-templating.js","webpack://_N_E/./node_modules/refractor/lang/ruby.js","webpack://_N_E/<anon>"],"sourcesContent":["'use strict'\nvar refractorRuby = require('./ruby.js')\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = erb\nerb.displayName = 'erb'\nerb.aliases = []\nfunction erb(Prism) {\n  Prism.register(refractorRuby)\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    Prism.languages.erb = {\n      delimiter: {\n        pattern: /^(\\s*)<%=?|%>(?=\\s*$)/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      ruby: {\n        pattern: /\\s*\\S[\\s\\S]*/,\n        alias: 'language-ruby',\n        inside: Prism.languages.ruby\n      }\n    }\n    Prism.hooks.add('before-tokenize', function (env) {\n      var erbPattern =\n        /<%=?(?:[^\\r\\n]|[\\r\\n](?!=begin)|[\\r\\n]=begin\\s(?:[^\\r\\n]|[\\r\\n](?!=end))*[\\r\\n]=end)+?%>/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'erb',\n        erbPattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'erb')\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function (env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            ) {\n              ++i\n            } // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function (env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = ruby\nruby.displayName = 'ruby'\nruby.aliases = ['rb']\nfunction ruby(Prism) {\n  /**\n   * Original by Samuel Flores\n   *\n   * Adds the following new token classes:\n   *     constant, builtin, variable, symbol, regex\n   */\n  ;(function (Prism) {\n    Prism.languages.ruby = Prism.languages.extend('clike', {\n      comment: {\n        pattern: /#.*|^=begin\\s[\\s\\S]*?^=end/m,\n        greedy: true\n      },\n      'class-name': {\n        pattern:\n          /(\\b(?:class|module)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+|\\b[A-Z_]\\w*(?=\\s*\\.\\s*new\\b)/,\n        lookbehind: true,\n        inside: {\n          punctuation: /[.\\\\]/\n        }\n      },\n      keyword:\n        /\\b(?:BEGIN|END|alias|and|begin|break|case|class|def|define_method|defined|do|each|else|elsif|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|private|protected|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\\b/,\n      operator:\n        /\\.{2,3}|&\\.|===|<?=>|[!=]?~|(?:&&|\\|\\||<<|>>|\\*\\*|[+\\-*/%<>!^&|=])=?|[?:]/,\n      punctuation: /[(){}[\\].,;]/\n    })\n    Prism.languages.insertBefore('ruby', 'operator', {\n      'double-colon': {\n        pattern: /::/,\n        alias: 'punctuation'\n      }\n    })\n    var interpolation = {\n      pattern: /((?:^|[^\\\\])(?:\\\\{2})*)#\\{(?:[^{}]|\\{[^{}]*\\})*\\}/,\n      lookbehind: true,\n      inside: {\n        content: {\n          pattern: /^(#\\{)[\\s\\S]+(?=\\}$)/,\n          lookbehind: true,\n          inside: Prism.languages.ruby\n        },\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: 'punctuation'\n        }\n      }\n    }\n    delete Prism.languages.ruby.function\n    var percentExpression =\n      '(?:' +\n      [\n        /([^a-zA-Z0-9\\s{(\\[<=])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,\n        /\\((?:[^()\\\\]|\\\\[\\s\\S]|\\((?:[^()\\\\]|\\\\[\\s\\S])*\\))*\\)/.source,\n        /\\{(?:[^{}\\\\]|\\\\[\\s\\S]|\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\})*\\}/.source,\n        /\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S]|\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\])*\\]/.source,\n        /<(?:[^<>\\\\]|\\\\[\\s\\S]|<(?:[^<>\\\\]|\\\\[\\s\\S])*>)*>/.source\n      ].join('|') +\n      ')'\n    var symbolName =\n      /(?:\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|(?:\\b[a-zA-Z_]\\w*|[^\\s\\0-\\x7F]+)[?!]?|\\$.)/\n        .source\n    Prism.languages.insertBefore('ruby', 'keyword', {\n      'regex-literal': [\n        {\n          pattern: RegExp(\n            /%r/.source + percentExpression + /[egimnosux]{0,6}/.source\n          ),\n          greedy: true,\n          inside: {\n            interpolation: interpolation,\n            regex: /[\\s\\S]+/\n          }\n        },\n        {\n          pattern:\n            /(^|[^/])\\/(?!\\/)(?:\\[[^\\r\\n\\]]+\\]|\\\\.|[^[/\\\\\\r\\n])+\\/[egimnosux]{0,6}(?=\\s*(?:$|[\\r\\n,.;})#]))/,\n          lookbehind: true,\n          greedy: true,\n          inside: {\n            interpolation: interpolation,\n            regex: /[\\s\\S]+/\n          }\n        }\n      ],\n      variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      symbol: [\n        {\n          pattern: RegExp(/(^|[^:]):/.source + symbolName),\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          pattern: RegExp(\n            /([\\r\\n{(,][ \\t]*)/.source + symbolName + /(?=:(?!:))/.source\n          ),\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      'method-definition': {\n        pattern: /(\\bdef\\s+)\\w+(?:\\s*\\.\\s*\\w+)?/,\n        lookbehind: true,\n        inside: {\n          function: /\\b\\w+$/,\n          keyword: /^self\\b/,\n          'class-name': /^\\w+/,\n          punctuation: /\\./\n        }\n      }\n    })\n    Prism.languages.insertBefore('ruby', 'string', {\n      'string-literal': [\n        {\n          pattern: RegExp(/%[qQiIwWs]?/.source + percentExpression),\n          greedy: true,\n          inside: {\n            interpolation: interpolation,\n            string: /[\\s\\S]+/\n          }\n        },\n        {\n          pattern:\n            /(\"|')(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\#\\r\\n])*\\1/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation,\n            string: /[\\s\\S]+/\n          }\n        },\n        {\n          pattern: /<<[-~]?([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,\n          alias: 'heredoc-string',\n          greedy: true,\n          inside: {\n            delimiter: {\n              pattern: /^<<[-~]?[a-z_]\\w*|\\b[a-z_]\\w*$/i,\n              inside: {\n                symbol: /\\b\\w+/,\n                punctuation: /^<<[-~]?/\n              }\n            },\n            interpolation: interpolation,\n            string: /[\\s\\S]+/\n          }\n        },\n        {\n          pattern: /<<[-~]?'([a-z_]\\w*)'[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,\n          alias: 'heredoc-string',\n          greedy: true,\n          inside: {\n            delimiter: {\n              pattern: /^<<[-~]?'[a-z_]\\w*'|\\b[a-z_]\\w*$/i,\n              inside: {\n                symbol: /\\b\\w+/,\n                punctuation: /^<<[-~]?'|'$/\n              }\n            },\n            string: /[\\s\\S]+/\n          }\n        }\n      ],\n      'command-literal': [\n        {\n          pattern: RegExp(/%x/.source + percentExpression),\n          greedy: true,\n          inside: {\n            interpolation: interpolation,\n            command: {\n              pattern: /[\\s\\S]+/,\n              alias: 'string'\n            }\n          }\n        },\n        {\n          pattern: /`(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|[^\\\\`#\\r\\n])*`/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation,\n            command: {\n              pattern: /[\\s\\S]+/,\n              alias: 'string'\n            }\n          }\n        }\n      ]\n    })\n    delete Prism.languages.ruby.string\n    Prism.languages.insertBefore('ruby', 'number', {\n      builtin:\n        /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Fixnum|Float|Hash|IO|Integer|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|Stat|String|Struct|Symbol|TMS|Thread|ThreadGroup|Time|TrueClass)\\b/,\n      constant: /\\b[A-Z][A-Z0-9_]*(?:[?!]|\\b)/\n    })\n    Prism.languages.rb = Prism.languages.ruby\n  })(Prism)\n}\n","\"use strict\";\n(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[2584,3047,369],{\n\n/***/ 84790:\n/***/ (function(module, __unused_webpack_exports, __webpack_require__) {\n\n\nvar refractorRuby = __webpack_require__(56939)\nvar refractorMarkupTemplating = __webpack_require__(93205)\nmodule.exports = erb\nerb.displayName = 'erb'\nerb.aliases = []\nfunction erb(Prism) {\n  Prism.register(refractorRuby)\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    Prism.languages.erb = {\n      delimiter: {\n        pattern: /^(\\s*)<%=?|%>(?=\\s*$)/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      ruby: {\n        pattern: /\\s*\\S[\\s\\S]*/,\n        alias: 'language-ruby',\n        inside: Prism.languages.ruby\n      }\n    }\n    Prism.hooks.add('before-tokenize', function (env) {\n      var erbPattern =\n        /<%=?(?:[^\\r\\n]|[\\r\\n](?!=begin)|[\\r\\n]=begin\\s(?:[^\\r\\n]|[\\r\\n](?!=end))*[\\r\\n]=end)+?%>/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'erb',\n        erbPattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'erb')\n    })\n  })(Prism)\n}\n\n\n/***/ }),\n\n/***/ 93205:\n/***/ (function(module) {\n\n\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function (env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            ) {\n              ++i\n            } // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function (env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n\n\n/***/ }),\n\n/***/ 56939:\n/***/ (function(module) {\n\n\n\nmodule.exports = ruby\nruby.displayName = 'ruby'\nruby.aliases = ['rb']\nfunction ruby(Prism) {\n  /**\n   * Original by Samuel Flores\n   *\n   * Adds the following new token classes:\n   *     constant, builtin, variable, symbol, regex\n   */\n  ;(function (Prism) {\n    Prism.languages.ruby = Prism.languages.extend('clike', {\n      comment: {\n        pattern: /#.*|^=begin\\s[\\s\\S]*?^=end/m,\n        greedy: true\n      },\n      'class-name': {\n        pattern:\n          /(\\b(?:class|module)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+|\\b[A-Z_]\\w*(?=\\s*\\.\\s*new\\b)/,\n        lookbehind: true,\n        inside: {\n          punctuation: /[.\\\\]/\n        }\n      },\n      keyword:\n        /\\b(?:BEGIN|END|alias|and|begin|break|case|class|def|define_method|defined|do|each|else|elsif|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|private|protected|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\\b/,\n      operator:\n        /\\.{2,3}|&\\.|===|<?=>|[!=]?~|(?:&&|\\|\\||<<|>>|\\*\\*|[+\\-*/%<>!^&|=])=?|[?:]/,\n      punctuation: /[(){}[\\].,;]/\n    })\n    Prism.languages.insertBefore('ruby', 'operator', {\n      'double-colon': {\n        pattern: /::/,\n        alias: 'punctuation'\n      }\n    })\n    var interpolation = {\n      pattern: /((?:^|[^\\\\])(?:\\\\{2})*)#\\{(?:[^{}]|\\{[^{}]*\\})*\\}/,\n      lookbehind: true,\n      inside: {\n        content: {\n          pattern: /^(#\\{)[\\s\\S]+(?=\\}$)/,\n          lookbehind: true,\n          inside: Prism.languages.ruby\n        },\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: 'punctuation'\n        }\n      }\n    }\n    delete Prism.languages.ruby.function\n    var percentExpression =\n      '(?:' +\n      [\n        /([^a-zA-Z0-9\\s{(\\[<=])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,\n        /\\((?:[^()\\\\]|\\\\[\\s\\S]|\\((?:[^()\\\\]|\\\\[\\s\\S])*\\))*\\)/.source,\n        /\\{(?:[^{}\\\\]|\\\\[\\s\\S]|\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\})*\\}/.source,\n        /\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S]|\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\])*\\]/.source,\n        /<(?:[^<>\\\\]|\\\\[\\s\\S]|<(?:[^<>\\\\]|\\\\[\\s\\S])*>)*>/.source\n      ].join('|') +\n      ')'\n    var symbolName =\n      /(?:\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|(?:\\b[a-zA-Z_]\\w*|[^\\s\\0-\\x7F]+)[?!]?|\\$.)/\n        .source\n    Prism.languages.insertBefore('ruby', 'keyword', {\n      'regex-literal': [\n        {\n          pattern: RegExp(\n            /%r/.source + percentExpression + /[egimnosux]{0,6}/.source\n          ),\n          greedy: true,\n          inside: {\n            interpolation: interpolation,\n            regex: /[\\s\\S]+/\n          }\n        },\n        {\n          pattern:\n            /(^|[^/])\\/(?!\\/)(?:\\[[^\\r\\n\\]]+\\]|\\\\.|[^[/\\\\\\r\\n])+\\/[egimnosux]{0,6}(?=\\s*(?:$|[\\r\\n,.;})#]))/,\n          lookbehind: true,\n          greedy: true,\n          inside: {\n            interpolation: interpolation,\n            regex: /[\\s\\S]+/\n          }\n        }\n      ],\n      variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      symbol: [\n        {\n          pattern: RegExp(/(^|[^:]):/.source + symbolName),\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          pattern: RegExp(\n            /([\\r\\n{(,][ \\t]*)/.source + symbolName + /(?=:(?!:))/.source\n          ),\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      'method-definition': {\n        pattern: /(\\bdef\\s+)\\w+(?:\\s*\\.\\s*\\w+)?/,\n        lookbehind: true,\n        inside: {\n          function: /\\b\\w+$/,\n          keyword: /^self\\b/,\n          'class-name': /^\\w+/,\n          punctuation: /\\./\n        }\n      }\n    })\n    Prism.languages.insertBefore('ruby', 'string', {\n      'string-literal': [\n        {\n          pattern: RegExp(/%[qQiIwWs]?/.source + percentExpression),\n          greedy: true,\n          inside: {\n            interpolation: interpolation,\n            string: /[\\s\\S]+/\n          }\n        },\n        {\n          pattern:\n            /(\"|')(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\#\\r\\n])*\\1/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation,\n            string: /[\\s\\S]+/\n          }\n        },\n        {\n          pattern: /<<[-~]?([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,\n          alias: 'heredoc-string',\n          greedy: true,\n          inside: {\n            delimiter: {\n              pattern: /^<<[-~]?[a-z_]\\w*|\\b[a-z_]\\w*$/i,\n              inside: {\n                symbol: /\\b\\w+/,\n                punctuation: /^<<[-~]?/\n              }\n            },\n            interpolation: interpolation,\n            string: /[\\s\\S]+/\n          }\n        },\n        {\n          pattern: /<<[-~]?'([a-z_]\\w*)'[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,\n          alias: 'heredoc-string',\n          greedy: true,\n          inside: {\n            delimiter: {\n              pattern: /^<<[-~]?'[a-z_]\\w*'|\\b[a-z_]\\w*$/i,\n              inside: {\n                symbol: /\\b\\w+/,\n                punctuation: /^<<[-~]?'|'$/\n              }\n            },\n            string: /[\\s\\S]+/\n          }\n        }\n      ],\n      'command-literal': [\n        {\n          pattern: RegExp(/%x/.source + percentExpression),\n          greedy: true,\n          inside: {\n            interpolation: interpolation,\n            command: {\n              pattern: /[\\s\\S]+/,\n              alias: 'string'\n            }\n          }\n        },\n        {\n          pattern: /`(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|[^\\\\`#\\r\\n])*`/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation,\n            command: {\n              pattern: /[\\s\\S]+/,\n              alias: 'string'\n            }\n          }\n        }\n      ]\n    })\n    delete Prism.languages.ruby.string\n    Prism.languages.insertBefore('ruby', 'number', {\n      builtin:\n        /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Fixnum|Float|Hash|IO|Integer|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|Stat|String|Struct|Symbol|TMS|Thread|ThreadGroup|Time|TrueClass)\\b/,\n      constant: /\\b[A-Z][A-Z0-9_]*(?:[?!]|\\b)/\n    })\n    Prism.languages.rb = Prism.languages.ruby\n  })(Prism)\n}\n\n\n/***/ })\n\n}]);"],"names":["self","push","module","__unused_webpack_exports","__webpack_require__","refractorRuby","refractorMarkupTemplating","erb","Prism","register","languages","delimiter","pattern","lookbehind","alias","ruby","inside","hooks","add","env","buildPlaceholders","tokenizePlaceholders","exports","displayName","aliases","markupTemplating","getPlaceholder","language","index","toUpperCase","defineProperties","value","placeholderPattern","replaceFilter","tokenStack","code","replace","match","placeholder","i","length","indexOf","grammar","markup","j","keys","Object","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","apply","splice","concat","interpolation","percentExpression","symbolName","extend","comment","greedy","punctuation","keyword","operator","insertBefore","function","source","join","RegExp","regex","variable","symbol","string","command","builtin","constant","rb"],"sourceRoot":""}