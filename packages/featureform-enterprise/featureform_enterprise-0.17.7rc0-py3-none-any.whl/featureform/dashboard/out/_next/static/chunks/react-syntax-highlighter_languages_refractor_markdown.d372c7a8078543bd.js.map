{"version":3,"file":"static/chunks/react-syntax-highlighter_languages_refractor_markdown.d372c7a8078543bd.js","mappings":"ACAA,YAAY,EACXA,IAAI,CAAC,gBAAkB,CAAIA,IAAI,CAAC,gBAAkB,EAAK,EAAE,EAAEC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAEnE,KAAK,CACJ,SAASC,CAAM,CAAE,CDExB,SAAGC,CAAA,CAAAC,CAAA,GACH,SAAAA,CAAA,EAEA,IAAAC,CAAA,4CAAAC,MAAA,UAWAC,CAAA,CAAAC,CAAA,EAIA,OAHAA,CAAA,CAAAA,CAAA,CAAAC,OAAA,uBACO,OAAAJ,CAAA,CACP,EACAK,MAAA,2BAAAJ,MAAA,OAAAE,CAAA,MACA,IACAG,CAAA,6DACAL,MAAA,CACAM,CAAA,CACA,+CAAAN,MAAA,CAAAG,OAAA,OAEA,WACA,OAAAE,CAAA,CACA,CACA,CACAE,CAAA,CACA,sEACAP,MAAA,CACAF,CAAA,CAAAU,SAAA,CAAAX,QAAA,CAAAC,CAAA,CAAAU,SAAA,CAAAC,MAAA,cACAX,CAAA,CAAAU,SAAA,CAAAE,YAAA,sBACA,sBACAR,OAAA,mDACAS,UAAA,IACAC,MAAA,IACAC,MAAA,EACAC,WAAA,aACA,gBACAZ,OAAA,kBACAa,KAAA,0BACAF,MAAA,CAAAf,CAAA,CAAAU,SAAA,CAAAQ,IAAA,CACA,CACO,CACP,CACAC,UAAA,EAEAf,OAAA,mBACOa,KAAA,eACP,CACAG,KAAA,EACAhB,OAAA,CAAAE,MAAA,CACA,IAAAE,CAAA,CAAAC,CAAA,OAAAD,CAAA,MACA,IACA,CACAO,MAAA,EACA,mBACAX,OAAA,CAAAE,MAAA,CACA,KAAAE,CAAA,CAAAC,CAAA,QAAAD,CAAA,OACA,CACAK,UAAA,IACAE,MAAA,EACA,cACAX,OAAA,CAAAE,MAAA,CAAAC,CAAA,EACeQ,MAAA,CAAAf,CAAA,CAAAU,SAAA,CAAAX,QAAA,CACf,CACAiB,WAAA,MACW,CACX,CACA,cACAZ,OAAA,CAAAE,MAAA,MAAAE,CAAA,KAAAC,CAAA,MACAI,UAAA,IACAE,MAAA,EACAC,WAAA,gBACW,CACX,CACA,oBACAZ,OAAA,CAAAE,MAAA,KAAAE,CAAA,MACAO,MAAA,EACA,gBACAX,OAAA,CAAAE,MAAA,CAAAC,CAAA,EACAU,KAAA,aACeF,MAAA,CAAAf,CAAA,CAAAU,SAAA,CAAAX,QAAA,CACf,CACAiB,WAAA,MACA,CACA,CACO,CACP,CACAK,IAAA,EACA,CAEAjB,OAAA,uFACA,CACAS,UAAA,IACSI,KAAA,WACT,CACA,CAIAb,OAAA,sBACAU,MAAA,IACAC,MAAA,EACA,cACAX,OAAA,sDACaS,UAAA,IACb,CACA,iBACAT,OAAA,YACaS,UAAA,IACb,CACAG,WAAA,OACA,CACA,CACA,CACAM,KAAA,EACA,CAKAlB,OAAA,2CACAa,KAAA,aACAF,MAAA,EACAC,WAAA,aACS,CACT,CACA,CAGAZ,OAAA,cACAS,UAAA,IACAI,KAAA,aACAF,MAAA,EACAC,WAAA,WACA,CACA,CACA,CACAO,EAAA,EAKAnB,OAAA,yCACAS,UAAA,IACOI,KAAA,eACP,CACAO,IAAA,EAKApB,OAAA,oCACAS,UAAA,IACOI,KAAA,eACP,CACA,iBAKAb,OAAA,qHACA,CACAW,MAAA,EACAU,QAAA,EACArB,OAAA,iBACWS,UAAA,IACX,CACAa,MAAA,+DACA,CACSV,WAAA,kBACT,CACOC,KAAA,OACP,CACAU,IAAA,EAIAvB,OAAA,CAAAD,CAAA,CACA,kGACAD,MAAA,CACA,CACAW,UAAA,IACAC,MAAA,IACAC,MAAA,EACAa,OAAA,EACAxB,OAAA,uBACAS,UAAA,CAAuB,GACZE,MAAA,IACX,CACAC,WAAA,WACO,CACP,CACAa,MAAA,EAIAzB,OAAA,CAAAD,CAAA,CACA,kGACAD,MAAA,CACA,CACAW,UAAA,IACAC,MAAA,IACAC,MAAA,EACAa,OAAA,EACAxB,OAAA,qBACAS,UAAA,CAAuB,GACZE,MAAA,IACX,CACAC,WAAA,QACO,CACP,CACAc,MAAA,EAIA1B,OAAA,CAAAD,CAAA,4BAAAD,MAAA,EACAW,UAAA,IACAC,MAAA,IACAC,MAAA,EACAa,OAAA,EACAxB,OAAA,wBACAS,UAAA,CAAuB,GACZE,MAAA,IACX,CACAC,WAAA,OACO,CACP,CACA,gBAGAZ,OAAA,mEACA,CACAS,UAA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","sources":["webpack://_N_E/./node_modules/refractor/lang/markdown.js","webpack://_N_E/<anon>"],"sourcesContent":["'use strict'\n\nmodule.exports = markdown\nmarkdown.displayName = 'markdown'\nmarkdown.aliases = ['md']\nfunction markdown(Prism) {\n  ;(function (Prism) {\n    // Allow only one line break\n    var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source\n    /**\n     * This function is intended for the creation of the bold or italic pattern.\n     *\n     * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n     *\n     * _Note:_ Keep in mind that this adds a capturing group.\n     *\n     * @param {string} pattern\n     * @returns {RegExp}\n     */\n    function createInline(pattern) {\n      pattern = pattern.replace(/<inner>/g, function () {\n        return inner\n      })\n      return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')')\n    }\n    var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/\n      .source\n    var tableRow =\n      /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(\n        /__/g,\n        function () {\n          return tableCell\n        }\n      )\n    var tableLine =\n      /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/\n        .source\n    Prism.languages.markdown = Prism.languages.extend('markup', {})\n    Prism.languages.insertBefore('markdown', 'prolog', {\n      'front-matter-block': {\n        pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          punctuation: /^---|---$/,\n          'front-matter': {\n            pattern: /\\S+(?:\\s+\\S+)*/,\n            alias: ['yaml', 'language-yaml'],\n            inside: Prism.languages.yaml\n          }\n        }\n      },\n      blockquote: {\n        // > ...\n        pattern: /^>(?:[\\t ]*>)*/m,\n        alias: 'punctuation'\n      },\n      table: {\n        pattern: RegExp(\n          '^' + tableRow + tableLine + '(?:' + tableRow + ')*',\n          'm'\n        ),\n        inside: {\n          'table-data-rows': {\n            pattern: RegExp(\n              '^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'\n            ),\n            lookbehind: true,\n            inside: {\n              'table-data': {\n                pattern: RegExp(tableCell),\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          },\n          'table-line': {\n            pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n            lookbehind: true,\n            inside: {\n              punctuation: /\\||:?-{3,}:?/\n            }\n          },\n          'table-header-row': {\n            pattern: RegExp('^' + tableRow + '$'),\n            inside: {\n              'table-header': {\n                pattern: RegExp(tableCell),\n                alias: 'important',\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          }\n        }\n      },\n      code: [\n        {\n          // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n          pattern:\n            /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n          lookbehind: true,\n          alias: 'keyword'\n        },\n        {\n          // ```optional language\n          // code block\n          // ```\n          pattern: /^```[\\s\\S]*?^```$/m,\n          greedy: true,\n          inside: {\n            'code-block': {\n              pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n              lookbehind: true\n            },\n            'code-language': {\n              pattern: /^(```).+/,\n              lookbehind: true\n            },\n            punctuation: /```/\n          }\n        }\n      ],\n      title: [\n        {\n          // title 1\n          // =======\n          // title 2\n          // -------\n          pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n          alias: 'important',\n          inside: {\n            punctuation: /==+$|--+$/\n          }\n        },\n        {\n          // # title 1\n          // ###### title 6\n          pattern: /(^\\s*)#.+/m,\n          lookbehind: true,\n          alias: 'important',\n          inside: {\n            punctuation: /^#+|#+$/\n          }\n        }\n      ],\n      hr: {\n        // ***\n        // ---\n        // * * *\n        // -----------\n        pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      list: {\n        // * item\n        // + item\n        // - item\n        // 1. item\n        pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      'url-reference': {\n        // [id]: http://example.com \"Optional title\"\n        // [id]: http://example.com 'Optional title'\n        // [id]: http://example.com (Optional title)\n        // [id]: <http://example.com> \"Optional title\"\n        pattern:\n          /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n        inside: {\n          variable: {\n            pattern: /^(!?\\[)[^\\]]+/,\n            lookbehind: true\n          },\n          string:\n            /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n          punctuation: /^[\\[\\]!:]|[<>]/\n        },\n        alias: 'url'\n      },\n      bold: {\n        // **strong**\n        // __strong__\n        // allow one nested instance of italic text using the same delimiter\n        pattern: createInline(\n          /\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/\n            .source\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^..)[\\s\\S]+(?=..$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          punctuation: /\\*\\*|__/\n        }\n      },\n      italic: {\n        // *em*\n        // _em_\n        // allow one nested instance of bold text using the same delimiter\n        pattern: createInline(\n          /\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/\n            .source\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^.)[\\s\\S]+(?=.$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          punctuation: /[*_]/\n        }\n      },\n      strike: {\n        // ~~strike through~~\n        // ~strike~\n        // eslint-disable-next-line regexp/strict\n        pattern: createInline(/(~~?)(?:(?!~)<inner>)+\\2/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          punctuation: /~~?/\n        }\n      },\n      'code-snippet': {\n        // `code`\n        // ``code``\n        pattern:\n          /(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,\n        lookbehind: true,\n        greedy: true,\n        alias: ['code', 'keyword']\n      },\n      url: {\n        // [example](http://example.com \"Optional title\")\n        // [example][id]\n        // [example] [id]\n        pattern: createInline(\n          /!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/\n            .source\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          operator: /^!/,\n          content: {\n            pattern: /(^\\[)[^\\]]+(?=\\])/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          variable: {\n            pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n            lookbehind: true\n          },\n          url: {\n            pattern: /(^\\]\\()[^\\s)]+/,\n            lookbehind: true\n          },\n          string: {\n            pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n            lookbehind: true\n          }\n        }\n      }\n    })\n    ;['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n      ;['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (\n        inside\n      ) {\n        if (token !== inside) {\n          Prism.languages.markdown[token].inside.content.inside[inside] =\n            Prism.languages.markdown[inside]\n        }\n      })\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (env.language !== 'markdown' && env.language !== 'md') {\n        return\n      }\n      function walkTokens(tokens) {\n        if (!tokens || typeof tokens === 'string') {\n          return\n        }\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i]\n          if (token.type !== 'code') {\n            walkTokens(token.content)\n            continue\n          }\n          /*\n           * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n           * is optional. But the grammar is defined so that there is only one case we have to handle:\n           *\n           * token.content = [\n           *     <span class=\"punctuation\">```</span>,\n           *     <span class=\"code-language\">xxxx</span>,\n           *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n           *     <span class=\"code-block\">...</span>,\n           *     '\\n', // exactly one new lines again\n           *     <span class=\"punctuation\">```</span>\n           * ];\n           */\n          var codeLang = token.content[1]\n          var codeBlock = token.content[3]\n          if (\n            codeLang &&\n            codeBlock &&\n            codeLang.type === 'code-language' &&\n            codeBlock.type === 'code-block' &&\n            typeof codeLang.content === 'string'\n          ) {\n            // this might be a language that Prism does not support\n            // do some replacements to support C++, C#, and F#\n            var lang = codeLang.content\n              .replace(/\\b#/g, 'sharp')\n              .replace(/\\b\\+\\+/g, 'pp') // only use the first word\n            lang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase()\n            var alias = 'language-' + lang // add alias\n            if (!codeBlock.alias) {\n              codeBlock.alias = [alias]\n            } else if (typeof codeBlock.alias === 'string') {\n              codeBlock.alias = [codeBlock.alias, alias]\n            } else {\n              codeBlock.alias.push(alias)\n            }\n          }\n        }\n      }\n      walkTokens(env.tokens)\n    })\n    Prism.hooks.add('wrap', function (env) {\n      if (env.type !== 'code-block') {\n        return\n      }\n      var codeLang = ''\n      for (var i = 0, l = env.classes.length; i < l; i++) {\n        var cls = env.classes[i]\n        var match = /language-(.+)/.exec(cls)\n        if (match) {\n          codeLang = match[1]\n          break\n        }\n      }\n      var grammar = Prism.languages[codeLang]\n      if (!grammar) {\n        if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n          var id =\n            'md-' +\n            new Date().valueOf() +\n            '-' +\n            Math.floor(Math.random() * 1e16)\n          env.attributes['id'] = id\n          Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n            var ele = document.getElementById(id)\n            if (ele) {\n              ele.innerHTML = Prism.highlight(\n                ele.textContent,\n                Prism.languages[codeLang],\n                codeLang\n              )\n            }\n          })\n        }\n      } else {\n        env.content = Prism.highlight(\n          textContent(env.content.value),\n          grammar,\n          codeLang\n        )\n      }\n    })\n    var tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi')\n    /**\n     * A list of known entity names.\n     *\n     * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.\n     *\n     * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}\n     */\n    var KNOWN_ENTITY_NAMES = {\n      amp: '&',\n      lt: '<',\n      gt: '>',\n      quot: '\"'\n    } // IE 11 doesn't support `String.fromCodePoint`\n    var fromCodePoint = String.fromCodePoint || String.fromCharCode\n    /**\n     * Returns the text content of a given HTML source code string.\n     *\n     * @param {string} html\n     * @returns {string}\n     */\n    function textContent(html) {\n      // remove all tags\n      var text = html.replace(tagPattern, '') // decode known entities\n      text = text.replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi, function (m, code) {\n        code = code.toLowerCase()\n        if (code[0] === '#') {\n          var value\n          if (code[1] === 'x') {\n            value = parseInt(code.slice(2), 16)\n          } else {\n            value = Number(code.slice(1))\n          }\n          return fromCodePoint(value)\n        } else {\n          var known = KNOWN_ENTITY_NAMES[code]\n          if (known) {\n            return known\n          } // unable to decode\n          return m\n        }\n      })\n      return text\n    }\n    Prism.languages.md = Prism.languages.markdown\n  })(Prism)\n}\n","\"use strict\";\n(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[9835],{\n\n/***/ 90542:\n/***/ (function(module) {\n\n\n\nmodule.exports = markdown\nmarkdown.displayName = 'markdown'\nmarkdown.aliases = ['md']\nfunction markdown(Prism) {\n  ;(function (Prism) {\n    // Allow only one line break\n    var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source\n    /**\n     * This function is intended for the creation of the bold or italic pattern.\n     *\n     * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n     *\n     * _Note:_ Keep in mind that this adds a capturing group.\n     *\n     * @param {string} pattern\n     * @returns {RegExp}\n     */\n    function createInline(pattern) {\n      pattern = pattern.replace(/<inner>/g, function () {\n        return inner\n      })\n      return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')')\n    }\n    var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/\n      .source\n    var tableRow =\n      /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(\n        /__/g,\n        function () {\n          return tableCell\n        }\n      )\n    var tableLine =\n      /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/\n        .source\n    Prism.languages.markdown = Prism.languages.extend('markup', {})\n    Prism.languages.insertBefore('markdown', 'prolog', {\n      'front-matter-block': {\n        pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          punctuation: /^---|---$/,\n          'front-matter': {\n            pattern: /\\S+(?:\\s+\\S+)*/,\n            alias: ['yaml', 'language-yaml'],\n            inside: Prism.languages.yaml\n          }\n        }\n      },\n      blockquote: {\n        // > ...\n        pattern: /^>(?:[\\t ]*>)*/m,\n        alias: 'punctuation'\n      },\n      table: {\n        pattern: RegExp(\n          '^' + tableRow + tableLine + '(?:' + tableRow + ')*',\n          'm'\n        ),\n        inside: {\n          'table-data-rows': {\n            pattern: RegExp(\n              '^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'\n            ),\n            lookbehind: true,\n            inside: {\n              'table-data': {\n                pattern: RegExp(tableCell),\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          },\n          'table-line': {\n            pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n            lookbehind: true,\n            inside: {\n              punctuation: /\\||:?-{3,}:?/\n            }\n          },\n          'table-header-row': {\n            pattern: RegExp('^' + tableRow + '$'),\n            inside: {\n              'table-header': {\n                pattern: RegExp(tableCell),\n                alias: 'important',\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          }\n        }\n      },\n      code: [\n        {\n          // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n          pattern:\n            /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n          lookbehind: true,\n          alias: 'keyword'\n        },\n        {\n          // ```optional language\n          // code block\n          // ```\n          pattern: /^```[\\s\\S]*?^```$/m,\n          greedy: true,\n          inside: {\n            'code-block': {\n              pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n              lookbehind: true\n            },\n            'code-language': {\n              pattern: /^(```).+/,\n              lookbehind: true\n            },\n            punctuation: /```/\n          }\n        }\n      ],\n      title: [\n        {\n          // title 1\n          // =======\n          // title 2\n          // -------\n          pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n          alias: 'important',\n          inside: {\n            punctuation: /==+$|--+$/\n          }\n        },\n        {\n          // # title 1\n          // ###### title 6\n          pattern: /(^\\s*)#.+/m,\n          lookbehind: true,\n          alias: 'important',\n          inside: {\n            punctuation: /^#+|#+$/\n          }\n        }\n      ],\n      hr: {\n        // ***\n        // ---\n        // * * *\n        // -----------\n        pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      list: {\n        // * item\n        // + item\n        // - item\n        // 1. item\n        pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      'url-reference': {\n        // [id]: http://example.com \"Optional title\"\n        // [id]: http://example.com 'Optional title'\n        // [id]: http://example.com (Optional title)\n        // [id]: <http://example.com> \"Optional title\"\n        pattern:\n          /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n        inside: {\n          variable: {\n            pattern: /^(!?\\[)[^\\]]+/,\n            lookbehind: true\n          },\n          string:\n            /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n          punctuation: /^[\\[\\]!:]|[<>]/\n        },\n        alias: 'url'\n      },\n      bold: {\n        // **strong**\n        // __strong__\n        // allow one nested instance of italic text using the same delimiter\n        pattern: createInline(\n          /\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/\n            .source\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^..)[\\s\\S]+(?=..$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          punctuation: /\\*\\*|__/\n        }\n      },\n      italic: {\n        // *em*\n        // _em_\n        // allow one nested instance of bold text using the same delimiter\n        pattern: createInline(\n          /\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/\n            .source\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^.)[\\s\\S]+(?=.$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          punctuation: /[*_]/\n        }\n      },\n      strike: {\n        // ~~strike through~~\n        // ~strike~\n        // eslint-disable-next-line regexp/strict\n        pattern: createInline(/(~~?)(?:(?!~)<inner>)+\\2/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          punctuation: /~~?/\n        }\n      },\n      'code-snippet': {\n        // `code`\n        // ``code``\n        pattern:\n          /(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,\n        lookbehind: true,\n        greedy: true,\n        alias: ['code', 'keyword']\n      },\n      url: {\n        // [example](http://example.com \"Optional title\")\n        // [example][id]\n        // [example] [id]\n        pattern: createInline(\n          /!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/\n            .source\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          operator: /^!/,\n          content: {\n            pattern: /(^\\[)[^\\]]+(?=\\])/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          variable: {\n            pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n            lookbehind: true\n          },\n          url: {\n            pattern: /(^\\]\\()[^\\s)]+/,\n            lookbehind: true\n          },\n          string: {\n            pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n            lookbehind: true\n          }\n        }\n      }\n    })\n    ;['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n      ;['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (\n        inside\n      ) {\n        if (token !== inside) {\n          Prism.languages.markdown[token].inside.content.inside[inside] =\n            Prism.languages.markdown[inside]\n        }\n      })\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (env.language !== 'markdown' && env.language !== 'md') {\n        return\n      }\n      function walkTokens(tokens) {\n        if (!tokens || typeof tokens === 'string') {\n          return\n        }\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i]\n          if (token.type !== 'code') {\n            walkTokens(token.content)\n            continue\n          }\n          /*\n           * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n           * is optional. But the grammar is defined so that there is only one case we have to handle:\n           *\n           * token.content = [\n           *     <span class=\"punctuation\">```</span>,\n           *     <span class=\"code-language\">xxxx</span>,\n           *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n           *     <span class=\"code-block\">...</span>,\n           *     '\\n', // exactly one new lines again\n           *     <span class=\"punctuation\">```</span>\n           * ];\n           */\n          var codeLang = token.content[1]\n          var codeBlock = token.content[3]\n          if (\n            codeLang &&\n            codeBlock &&\n            codeLang.type === 'code-language' &&\n            codeBlock.type === 'code-block' &&\n            typeof codeLang.content === 'string'\n          ) {\n            // this might be a language that Prism does not support\n            // do some replacements to support C++, C#, and F#\n            var lang = codeLang.content\n              .replace(/\\b#/g, 'sharp')\n              .replace(/\\b\\+\\+/g, 'pp') // only use the first word\n            lang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase()\n            var alias = 'language-' + lang // add alias\n            if (!codeBlock.alias) {\n              codeBlock.alias = [alias]\n            } else if (typeof codeBlock.alias === 'string') {\n              codeBlock.alias = [codeBlock.alias, alias]\n            } else {\n              codeBlock.alias.push(alias)\n            }\n          }\n        }\n      }\n      walkTokens(env.tokens)\n    })\n    Prism.hooks.add('wrap', function (env) {\n      if (env.type !== 'code-block') {\n        return\n      }\n      var codeLang = ''\n      for (var i = 0, l = env.classes.length; i < l; i++) {\n        var cls = env.classes[i]\n        var match = /language-(.+)/.exec(cls)\n        if (match) {\n          codeLang = match[1]\n          break\n        }\n      }\n      var grammar = Prism.languages[codeLang]\n      if (!grammar) {\n        if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n          var id =\n            'md-' +\n            new Date().valueOf() +\n            '-' +\n            Math.floor(Math.random() * 1e16)\n          env.attributes['id'] = id\n          Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n            var ele = document.getElementById(id)\n            if (ele) {\n              ele.innerHTML = Prism.highlight(\n                ele.textContent,\n                Prism.languages[codeLang],\n                codeLang\n              )\n            }\n          })\n        }\n      } else {\n        env.content = Prism.highlight(\n          textContent(env.content.value),\n          grammar,\n          codeLang\n        )\n      }\n    })\n    var tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi')\n    /**\n     * A list of known entity names.\n     *\n     * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.\n     *\n     * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}\n     */\n    var KNOWN_ENTITY_NAMES = {\n      amp: '&',\n      lt: '<',\n      gt: '>',\n      quot: '\"'\n    } // IE 11 doesn't support `String.fromCodePoint`\n    var fromCodePoint = String.fromCodePoint || String.fromCharCode\n    /**\n     * Returns the text content of a given HTML source code string.\n     *\n     * @param {string} html\n     * @returns {string}\n     */\n    function textContent(html) {\n      // remove all tags\n      var text = html.replace(tagPattern, '') // decode known entities\n      text = text.replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi, function (m, code) {\n        code = code.toLowerCase()\n        if (code[0] === '#') {\n          var value\n          if (code[1] === 'x') {\n            value = parseInt(code.slice(2), 16)\n          } else {\n            value = Number(code.slice(1))\n          }\n          return fromCodePoint(value)\n        } else {\n          var known = KNOWN_ENTITY_NAMES[code]\n          if (known) {\n            return known\n          } // unable to decode\n          return m\n        }\n      })\n      return text\n    }\n    Prism.languages.md = Prism.languages.markdown\n  })(Prism)\n}\n\n\n/***/ })\n\n}]);"],"names":["self","push","module","markdown","Prism","inner","source","createInline","pattern","replace","RegExp","tableCell","tableRow","tableLine","languages","extend","insertBefore","lookbehind","greedy","inside","punctuation","alias","yaml","blockquote","table","code","title","hr","list","variable","string","bold","content","italic","strike","url","operator","forEach","token","hooks","add","env","language","walkTokens","tokens","i","l","length","type","codeLang","codeBlock","lang","exec","toLowerCase","classes","cls","match","grammar","highlight","textContent","value","plugins","autoloader","id","Date","valueOf","Math","floor","random","attributes","loadLanguages","ele","document","getElementById","innerHTML","tagPattern","markup","tag","KNOWN_ENTITY_NAMES","amp","lt","gt","quot","fromCodePoint","String","fromCharCode","html","text","m","parseInt","slice","Number","known","md","exports","displayName","aliases"],"sourceRoot":""}