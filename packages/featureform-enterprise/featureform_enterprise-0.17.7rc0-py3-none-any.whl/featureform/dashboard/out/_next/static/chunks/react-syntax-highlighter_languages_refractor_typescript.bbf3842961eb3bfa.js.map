{"version":3,"file":"static/chunks/react-syntax-highlighter_languages_refractor_typescript.bbf3842961eb3bfa.js","mappings":"ACAA,YAAY,EACXA,IAAI,CAAC,gBAAkB,CAAIA,IAAI,CAAC,gBAAkB,EAAK,EAAE,EAAEC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAEnE,IAAI,CACH,SAASC,CAAM,CAAE,CDExB,SAAGC,CAAA,CAAAC,CAAA,MACHA,CAAA,CAmBAC,CAAA,EAnBAD,CAAA,CAkDAA,CAAA,EAjDAE,SAAA,CAAAH,UAAA,CAAAC,CAAA,CAAAE,SAAA,CAAAC,MAAA,eACA,cACAC,OAAA,+KACA,CACAC,UAAA,IACAC,MAAA,IACOC,MAAA,MACP,CACAC,OAAA,wFACK,CACL,EACAR,CAAA,CAAAE,SAAA,CAAAH,UAAA,CAAAU,OAAA,CAAAZ,IAAA,8KAIA,CACA,OAAAG,CAAA,CAAAE,SAAA,CAAAH,UAAA,WACA,OAAAC,CAAA,CAAAE,SAAA,CAAAH,UAAA,qBAEA,MAAAE,CADAA,CAAA,CAAAD,CAAA,CAAAE,SAAA,CAAAC,MAAA,kBACA,eACAH,CAAA,CAAAE,SAAA,CAAAH,UAAA,eAAAQ,MAAA,CAAAN,CAAA,CACAD,CAAA,CAAAE,SAAA,CAAAQ,YAAA,0BACAC,SAAA,EACAP,OAAA,sBACAG,MAAA,EACAK,EAAA,EACAR,OAAA,MACWS,KAAA,YACX,CACAC,QAAA,YACO,CACP,CACA,oBAEAV,OAAA,yGACA,CACAE,MAAA,IACAC,MAAA,EACAO,QAAA,6DACAC,OAAA,EACAX,OAAA,YAEAS,KAAA,cACAN,MAAA,CAAAN,CAAA,CACA,CACA,CACK,CACL,EACGD,CAAA,CAAAE,SAAA,CAAAc,EAAA,CAAAhB,CAAA,CAAAE,SAAA,CAAAH,UAAA,CACH,CAtDA,CAAAkB,OAAA,CAAAlB,CAAA,CACAA,CAAA,CAAAmB,WAAA,cACAnB,CAAA,CAAAoB,OAAA,QAoDA","sources":["webpack://_N_E/./node_modules/refractor/lang/typescript.js","webpack://_N_E/<anon>"],"sourcesContent":["'use strict'\n\nmodule.exports = typescript\ntypescript.displayName = 'typescript'\ntypescript.aliases = ['ts']\nfunction typescript(Prism) {\n  ;(function (Prism) {\n    Prism.languages.typescript = Prism.languages.extend('javascript', {\n      'class-name': {\n        pattern:\n          /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n      },\n      builtin:\n        /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\n    }) // The keywords TypeScript adds to JavaScript\n    Prism.languages.typescript.keyword.push(\n      /\\b(?:abstract|declare|is|keyof|readonly|require)\\b/, // keywords that have to be followed by an identifier\n      /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, // This is for `import type *, {}`\n      /\\btype\\b(?=\\s*(?:[\\{*]|$))/\n    ) // doesn't work with TS because TS is too complex\n    delete Prism.languages.typescript['parameter']\n    delete Prism.languages.typescript['literal-property'] // a version of typescript specifically for highlighting types\n    var typeInside = Prism.languages.extend('typescript', {})\n    delete typeInside['class-name']\n    Prism.languages.typescript['class-name'].inside = typeInside\n    Prism.languages.insertBefore('typescript', 'function', {\n      decorator: {\n        pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n        inside: {\n          at: {\n            pattern: /^@/,\n            alias: 'operator'\n          },\n          function: /^[\\s\\S]+/\n        }\n      },\n      'generic-function': {\n        // e.g. foo<T extends \"bar\" | \"baz\">( ...\n        pattern:\n          /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n        greedy: true,\n        inside: {\n          function: /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n          generic: {\n            pattern: /<[\\s\\S]+/,\n            // everything after the first <\n            alias: 'class-name',\n            inside: typeInside\n          }\n        }\n      }\n    })\n    Prism.languages.ts = Prism.languages.typescript\n  })(Prism)\n}\n","\"use strict\";\n(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[9461],{\n\n/***/ 4979:\n/***/ (function(module) {\n\n\n\nmodule.exports = typescript\ntypescript.displayName = 'typescript'\ntypescript.aliases = ['ts']\nfunction typescript(Prism) {\n  ;(function (Prism) {\n    Prism.languages.typescript = Prism.languages.extend('javascript', {\n      'class-name': {\n        pattern:\n          /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n      },\n      builtin:\n        /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\n    }) // The keywords TypeScript adds to JavaScript\n    Prism.languages.typescript.keyword.push(\n      /\\b(?:abstract|declare|is|keyof|readonly|require)\\b/, // keywords that have to be followed by an identifier\n      /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, // This is for `import type *, {}`\n      /\\btype\\b(?=\\s*(?:[\\{*]|$))/\n    ) // doesn't work with TS because TS is too complex\n    delete Prism.languages.typescript['parameter']\n    delete Prism.languages.typescript['literal-property'] // a version of typescript specifically for highlighting types\n    var typeInside = Prism.languages.extend('typescript', {})\n    delete typeInside['class-name']\n    Prism.languages.typescript['class-name'].inside = typeInside\n    Prism.languages.insertBefore('typescript', 'function', {\n      decorator: {\n        pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n        inside: {\n          at: {\n            pattern: /^@/,\n            alias: 'operator'\n          },\n          function: /^[\\s\\S]+/\n        }\n      },\n      'generic-function': {\n        // e.g. foo<T extends \"bar\" | \"baz\">( ...\n        pattern:\n          /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n        greedy: true,\n        inside: {\n          function: /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n          generic: {\n            pattern: /<[\\s\\S]+/,\n            // everything after the first <\n            alias: 'class-name',\n            inside: typeInside\n          }\n        }\n      }\n    })\n    Prism.languages.ts = Prism.languages.typescript\n  })(Prism)\n}\n\n\n/***/ })\n\n}]);"],"names":["self","push","module","typescript","Prism","typeInside","languages","extend","pattern","lookbehind","greedy","inside","builtin","keyword","insertBefore","decorator","at","alias","function","generic","ts","exports","displayName","aliases"],"sourceRoot":""}