{"version":3,"file":"static/chunks/react-syntax-highlighter_languages_refractor_jsdoc.c7377e771b995b53.js","mappings":"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","sources":["webpack://_N_E/./node_modules/refractor/lang/javadoclike.js","webpack://_N_E/./node_modules/refractor/lang/jsdoc.js","webpack://_N_E/./node_modules/refractor/lang/typescript.js","webpack://_N_E/<anon>"],"sourcesContent":["'use strict'\n\nmodule.exports = javadoclike\njavadoclike.displayName = 'javadoclike'\njavadoclike.aliases = []\nfunction javadoclike(Prism) {\n  ;(function (Prism) {\n    var javaDocLike = (Prism.languages.javadoclike = {\n      parameter: {\n        pattern:\n          /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:arg|arguments|param)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    })\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment'\n      var grammar = Prism.languages[lang]\n      if (!grammar) {\n        return\n      }\n      var token = grammar[tokenName]\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {}\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        }\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\n        token = grammar[tokenName]\n      }\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        }\n      }\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            }\n          }\n          callback(token[i])\n        }\n      } else {\n        callback(token)\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages]\n      }\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {}\n          }\n          pattern.inside.rest = docLanguage\n        })\n      })\n    }\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    })\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\n  })(Prism)\n}\n","'use strict'\nvar refractorJavadoclike = require('./javadoclike.js')\nvar refractorTypescript = require('./typescript.js')\nmodule.exports = jsdoc\njsdoc.displayName = 'jsdoc'\njsdoc.aliases = []\nfunction jsdoc(Prism) {\n  Prism.register(refractorJavadoclike)\n  Prism.register(refractorTypescript)\n  ;(function (Prism) {\n    var javascript = Prism.languages.javascript\n    var type = /\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})+\\}/.source\n    var parameterPrefix =\n      '(@(?:arg|argument|param|property)\\\\s+(?:' + type + '\\\\s+)?)'\n    Prism.languages.jsdoc = Prism.languages.extend('javadoclike', {\n      parameter: {\n        // @param {string} foo - foo bar\n        pattern: RegExp(\n          parameterPrefix + /(?:(?!\\s)[$\\w\\xA0-\\uFFFF.])+(?=\\s|$)/.source\n        ),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    })\n    Prism.languages.insertBefore('jsdoc', 'keyword', {\n      'optional-parameter': {\n        // @param {string} [baz.foo=\"bar\"] foo bar\n        pattern: RegExp(\n          parameterPrefix +\n            /\\[(?:(?!\\s)[$\\w\\xA0-\\uFFFF.])+(?:=[^[\\]]+)?\\](?=\\s|$)/.source\n        ),\n        lookbehind: true,\n        inside: {\n          parameter: {\n            pattern: /(^\\[)[$\\w\\xA0-\\uFFFF\\.]+/,\n            lookbehind: true,\n            inside: {\n              punctuation: /\\./\n            }\n          },\n          code: {\n            pattern: /(=)[\\s\\S]*(?=\\]$)/,\n            lookbehind: true,\n            inside: javascript,\n            alias: 'language-javascript'\n          },\n          punctuation: /[=[\\]]/\n        }\n      },\n      'class-name': [\n        {\n          pattern: RegExp(\n            /(@(?:augments|class|extends|interface|memberof!?|template|this|typedef)\\s+(?:<TYPE>\\s+)?)[A-Z]\\w*(?:\\.[A-Z]\\w*)*/.source.replace(\n              /<TYPE>/g,\n              function () {\n                return type\n              }\n            )\n          ),\n          lookbehind: true,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        {\n          pattern: RegExp('(@[a-z]+\\\\s+)' + type),\n          lookbehind: true,\n          inside: {\n            string: javascript.string,\n            number: javascript.number,\n            boolean: javascript.boolean,\n            keyword: Prism.languages.typescript.keyword,\n            operator: /=>|\\.\\.\\.|[&|?:*]/,\n            punctuation: /[.,;=<>{}()[\\]]/\n          }\n        }\n      ],\n      example: {\n        pattern:\n          /(@example\\s+(?!\\s))(?:[^@\\s]|\\s+(?!\\s))+?(?=\\s*(?:\\*\\s*)?(?:@\\w|\\*\\/))/,\n        lookbehind: true,\n        inside: {\n          code: {\n            pattern: /^([\\t ]*(?:\\*\\s*)?)\\S.*$/m,\n            lookbehind: true,\n            inside: javascript,\n            alias: 'language-javascript'\n          }\n        }\n      }\n    })\n    Prism.languages.javadoclike.addSupport('javascript', Prism.languages.jsdoc)\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = typescript\ntypescript.displayName = 'typescript'\ntypescript.aliases = ['ts']\nfunction typescript(Prism) {\n  ;(function (Prism) {\n    Prism.languages.typescript = Prism.languages.extend('javascript', {\n      'class-name': {\n        pattern:\n          /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n      },\n      builtin:\n        /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\n    }) // The keywords TypeScript adds to JavaScript\n    Prism.languages.typescript.keyword.push(\n      /\\b(?:abstract|declare|is|keyof|readonly|require)\\b/, // keywords that have to be followed by an identifier\n      /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, // This is for `import type *, {}`\n      /\\btype\\b(?=\\s*(?:[\\{*]|$))/\n    ) // doesn't work with TS because TS is too complex\n    delete Prism.languages.typescript['parameter']\n    delete Prism.languages.typescript['literal-property'] // a version of typescript specifically for highlighting types\n    var typeInside = Prism.languages.extend('typescript', {})\n    delete typeInside['class-name']\n    Prism.languages.typescript['class-name'].inside = typeInside\n    Prism.languages.insertBefore('typescript', 'function', {\n      decorator: {\n        pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n        inside: {\n          at: {\n            pattern: /^@/,\n            alias: 'operator'\n          },\n          function: /^[\\s\\S]+/\n        }\n      },\n      'generic-function': {\n        // e.g. foo<T extends \"bar\" | \"baz\">( ...\n        pattern:\n          /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n        greedy: true,\n        inside: {\n          function: /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n          generic: {\n            pattern: /<[\\s\\S]+/,\n            // everything after the first <\n            alias: 'class-name',\n            inside: typeInside\n          }\n        }\n      }\n    })\n    Prism.languages.ts = Prism.languages.typescript\n  })(Prism)\n}\n","\"use strict\";\n(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[8825,902,9461],{\n\n/***/ 9858:\n/***/ (function(module) {\n\n\n\nmodule.exports = javadoclike\njavadoclike.displayName = 'javadoclike'\njavadoclike.aliases = []\nfunction javadoclike(Prism) {\n  ;(function (Prism) {\n    var javaDocLike = (Prism.languages.javadoclike = {\n      parameter: {\n        pattern:\n          /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:arg|arguments|param)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    })\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment'\n      var grammar = Prism.languages[lang]\n      if (!grammar) {\n        return\n      }\n      var token = grammar[tokenName]\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {}\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        }\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\n        token = grammar[tokenName]\n      }\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        }\n      }\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            }\n          }\n          callback(token[i])\n        }\n      } else {\n        callback(token)\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages]\n      }\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {}\n          }\n          pattern.inside.rest = docLanguage\n        })\n      })\n    }\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    })\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\n  })(Prism)\n}\n\n\n/***/ }),\n\n/***/ 25319:\n/***/ (function(module, __unused_webpack_exports, __webpack_require__) {\n\n\nvar refractorJavadoclike = __webpack_require__(9858)\nvar refractorTypescript = __webpack_require__(4979)\nmodule.exports = jsdoc\njsdoc.displayName = 'jsdoc'\njsdoc.aliases = []\nfunction jsdoc(Prism) {\n  Prism.register(refractorJavadoclike)\n  Prism.register(refractorTypescript)\n  ;(function (Prism) {\n    var javascript = Prism.languages.javascript\n    var type = /\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})+\\}/.source\n    var parameterPrefix =\n      '(@(?:arg|argument|param|property)\\\\s+(?:' + type + '\\\\s+)?)'\n    Prism.languages.jsdoc = Prism.languages.extend('javadoclike', {\n      parameter: {\n        // @param {string} foo - foo bar\n        pattern: RegExp(\n          parameterPrefix + /(?:(?!\\s)[$\\w\\xA0-\\uFFFF.])+(?=\\s|$)/.source\n        ),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    })\n    Prism.languages.insertBefore('jsdoc', 'keyword', {\n      'optional-parameter': {\n        // @param {string} [baz.foo=\"bar\"] foo bar\n        pattern: RegExp(\n          parameterPrefix +\n            /\\[(?:(?!\\s)[$\\w\\xA0-\\uFFFF.])+(?:=[^[\\]]+)?\\](?=\\s|$)/.source\n        ),\n        lookbehind: true,\n        inside: {\n          parameter: {\n            pattern: /(^\\[)[$\\w\\xA0-\\uFFFF\\.]+/,\n            lookbehind: true,\n            inside: {\n              punctuation: /\\./\n            }\n          },\n          code: {\n            pattern: /(=)[\\s\\S]*(?=\\]$)/,\n            lookbehind: true,\n            inside: javascript,\n            alias: 'language-javascript'\n          },\n          punctuation: /[=[\\]]/\n        }\n      },\n      'class-name': [\n        {\n          pattern: RegExp(\n            /(@(?:augments|class|extends|interface|memberof!?|template|this|typedef)\\s+(?:<TYPE>\\s+)?)[A-Z]\\w*(?:\\.[A-Z]\\w*)*/.source.replace(\n              /<TYPE>/g,\n              function () {\n                return type\n              }\n            )\n          ),\n          lookbehind: true,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        {\n          pattern: RegExp('(@[a-z]+\\\\s+)' + type),\n          lookbehind: true,\n          inside: {\n            string: javascript.string,\n            number: javascript.number,\n            boolean: javascript.boolean,\n            keyword: Prism.languages.typescript.keyword,\n            operator: /=>|\\.\\.\\.|[&|?:*]/,\n            punctuation: /[.,;=<>{}()[\\]]/\n          }\n        }\n      ],\n      example: {\n        pattern:\n          /(@example\\s+(?!\\s))(?:[^@\\s]|\\s+(?!\\s))+?(?=\\s*(?:\\*\\s*)?(?:@\\w|\\*\\/))/,\n        lookbehind: true,\n        inside: {\n          code: {\n            pattern: /^([\\t ]*(?:\\*\\s*)?)\\S.*$/m,\n            lookbehind: true,\n            inside: javascript,\n            alias: 'language-javascript'\n          }\n        }\n      }\n    })\n    Prism.languages.javadoclike.addSupport('javascript', Prism.languages.jsdoc)\n  })(Prism)\n}\n\n\n/***/ }),\n\n/***/ 4979:\n/***/ (function(module) {\n\n\n\nmodule.exports = typescript\ntypescript.displayName = 'typescript'\ntypescript.aliases = ['ts']\nfunction typescript(Prism) {\n  ;(function (Prism) {\n    Prism.languages.typescript = Prism.languages.extend('javascript', {\n      'class-name': {\n        pattern:\n          /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n      },\n      builtin:\n        /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\n    }) // The keywords TypeScript adds to JavaScript\n    Prism.languages.typescript.keyword.push(\n      /\\b(?:abstract|declare|is|keyof|readonly|require)\\b/, // keywords that have to be followed by an identifier\n      /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, // This is for `import type *, {}`\n      /\\btype\\b(?=\\s*(?:[\\{*]|$))/\n    ) // doesn't work with TS because TS is too complex\n    delete Prism.languages.typescript['parameter']\n    delete Prism.languages.typescript['literal-property'] // a version of typescript specifically for highlighting types\n    var typeInside = Prism.languages.extend('typescript', {})\n    delete typeInside['class-name']\n    Prism.languages.typescript['class-name'].inside = typeInside\n    Prism.languages.insertBefore('typescript', 'function', {\n      decorator: {\n        pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n        inside: {\n          at: {\n            pattern: /^@/,\n            alias: 'operator'\n          },\n          function: /^[\\s\\S]+/\n        }\n      },\n      'generic-function': {\n        // e.g. foo<T extends \"bar\" | \"baz\">( ...\n        pattern:\n          /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n        greedy: true,\n        inside: {\n          function: /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n          generic: {\n            pattern: /<[\\s\\S]+/,\n            // everything after the first <\n            alias: 'class-name',\n            inside: typeInside\n          }\n        }\n      }\n    })\n    Prism.languages.ts = Prism.languages.typescript\n  })(Prism)\n}\n\n\n/***/ })\n\n}]);"],"names":["self","push","module","javadoclike","Prism","javaDocLike","Object","defineProperty","languages","parameter","pattern","lookbehind","keyword","punctuation","value","docLanguage","forEach","lang","docCommentSupport","callback","tokenName","grammar","token","definition","alias","insertBefore","RegExp","Array","isArray","i","l","length","inside","rest","addSupport","exports","displayName","aliases","__unused_webpack_exports","__webpack_require__","refractorJavadoclike","refractorTypescript","jsdoc","javascript","type","parameterPrefix","register","source","extend","code","replace","string","number","boolean","typescript","operator","example","typeInside","greedy","builtin","decorator","at","function","generic","ts"],"sourceRoot":""}