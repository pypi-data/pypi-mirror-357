{"version":3,"file":"static/chunks/react-syntax-highlighter_languages_refractor_coffeescript.4db232b49eb88db2.js","mappings":"ACAA,YAAY,EACXA,IAAI,CAAC,gBAAkB,CAAIA,IAAI,CAAC,gBAAkB,EAAK,EAAE,EAAEC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAEnE,KAAK,CACJ,SAASC,CAAM,CAAE,CDExB,SAAGC,CAAA,CAAAC,CAAA,MACHA,CAAA,CAEAC,CAAA,CACAC,CAAmB,CADnBD,CAAA,aACAC,CAAmB,CAAG,CACtBC,OAAA,cACAC,KAAA,YACA,CACAJ,CAPAA,CAAA,CAoFAA,CAAA,EA7EAK,SAAA,CAAAN,YAAA,CAAAC,CAAA,CAAAK,SAAA,CAAAC,MAAA,eACAL,OAAA,CAAAA,CAAA,CACAM,MAAA,EAEA,CACAJ,OAAA,0BACSK,MAAA,IACT,CACA,CAEAL,OAAA,0BACAK,MAAA,IACAC,MAAA,EACAP,aAAA,CAAAA,CAAA,CACA,CACA,CACA,CACAQ,OAAA,mSACA,CACA,gBACAP,OAAA,cACAC,KAAA,YACK,CACL,EACAJ,CAAA,CAAAK,SAAA,CAAAM,YAAA,2BACA,qBACAR,OAAA,kBACOC,KAAA,WACP,CAEA,cAAqB,CACrBD,OAAA,sBACAC,KAAA,SACAK,MAAA,EACAR,OAAA,CAAAA,CAAA,CACAC,aAAA,CAAAA,CAAA,CACA,CACK,CACL,EACAF,CAAA,CAAAK,SAAA,CAAAM,YAAA,0BACA,qBACAR,OAAA,0BACAM,MAAA,EACAG,SAAA,EACAT,OAAA,SACWC,KAAA,eACX,CACAS,MAAA,EACAV,OAAA,WACAC,KAAA,uBACAK,MAAA,CAAAT,CAAA,CAAAK,SAAA,CAAAS,UAAA,CACA,CACO,CACP,CAEA,oBACA,CACAX,OAAA,kBACAK,MAAA,IACSJ,KAAA,UACT,CACA,CACAD,OAAA,kBACAK,MAAA,IACAJ,KAAA,UACAK,MAAA,EACAP,aAAA,CAAAA,CAAA,CACA,CACA,CACK,CACL,EACAF,CAAA,CAAAK,SAAA,CAAAM,YAAA,2BAEKI,QAAA,0BACL,EACA,OAAAf,CAAA,CAAAK,SAAA,CAAAN,YAAA,oBACGC,CAAA,CAAAK,SAAA,CAAAW,MAAA,CAAAhB,CAAA,CAAAK,SAAA,CAAAN,YAAA,CACH,CAxFA,CAAAkB,OAAA,CAAAlB,CAAA,CACAA,CAAA,CAAAmB,WAAA,gBACAnB,CAAA,CAAAoB,OAAA,YAsFA","sources":["webpack://_N_E/./node_modules/refractor/lang/coffeescript.js","webpack://_N_E/<anon>"],"sourcesContent":["'use strict'\n\nmodule.exports = coffeescript\ncoffeescript.displayName = 'coffeescript'\ncoffeescript.aliases = ['coffee']\nfunction coffeescript(Prism) {\n  ;(function (Prism) {\n    // Ignore comments starting with { to privilege string interpolation highlighting\n    var comment = /#(?!\\{).+/\n    var interpolation = {\n      pattern: /#\\{[^}]+\\}/,\n      alias: 'variable'\n    }\n    Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n      comment: comment,\n      string: [\n        // Strings are multiline\n        {\n          pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n          greedy: true\n        },\n        {\n          // Strings are multiline\n          pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        }\n      ],\n      keyword:\n        /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n      'class-member': {\n        pattern: /@(?!\\d)\\w+/,\n        alias: 'variable'\n      }\n    })\n    Prism.languages.insertBefore('coffeescript', 'comment', {\n      'multiline-comment': {\n        pattern: /###[\\s\\S]+?###/,\n        alias: 'comment'\n      },\n      // Block regexp can contain comments and interpolation\n      'block-regex': {\n        pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n        alias: 'regex',\n        inside: {\n          comment: comment,\n          interpolation: interpolation\n        }\n      }\n    })\n    Prism.languages.insertBefore('coffeescript', 'string', {\n      'inline-javascript': {\n        pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n        inside: {\n          delimiter: {\n            pattern: /^`|`$/,\n            alias: 'punctuation'\n          },\n          script: {\n            pattern: /[\\s\\S]+/,\n            alias: 'language-javascript',\n            inside: Prism.languages.javascript\n          }\n        }\n      },\n      // Block strings\n      'multiline-string': [\n        {\n          pattern: /'''[\\s\\S]*?'''/,\n          greedy: true,\n          alias: 'string'\n        },\n        {\n          pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n          greedy: true,\n          alias: 'string',\n          inside: {\n            interpolation: interpolation\n          }\n        }\n      ]\n    })\n    Prism.languages.insertBefore('coffeescript', 'keyword', {\n      // Object property\n      property: /(?!\\d)\\w+(?=\\s*:(?!:))/\n    })\n    delete Prism.languages.coffeescript['template-string']\n    Prism.languages.coffee = Prism.languages.coffeescript\n  })(Prism)\n}\n","\"use strict\";\n(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[6118],{\n\n/***/ 43576:\n/***/ (function(module) {\n\n\n\nmodule.exports = coffeescript\ncoffeescript.displayName = 'coffeescript'\ncoffeescript.aliases = ['coffee']\nfunction coffeescript(Prism) {\n  ;(function (Prism) {\n    // Ignore comments starting with { to privilege string interpolation highlighting\n    var comment = /#(?!\\{).+/\n    var interpolation = {\n      pattern: /#\\{[^}]+\\}/,\n      alias: 'variable'\n    }\n    Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n      comment: comment,\n      string: [\n        // Strings are multiline\n        {\n          pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n          greedy: true\n        },\n        {\n          // Strings are multiline\n          pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        }\n      ],\n      keyword:\n        /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n      'class-member': {\n        pattern: /@(?!\\d)\\w+/,\n        alias: 'variable'\n      }\n    })\n    Prism.languages.insertBefore('coffeescript', 'comment', {\n      'multiline-comment': {\n        pattern: /###[\\s\\S]+?###/,\n        alias: 'comment'\n      },\n      // Block regexp can contain comments and interpolation\n      'block-regex': {\n        pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n        alias: 'regex',\n        inside: {\n          comment: comment,\n          interpolation: interpolation\n        }\n      }\n    })\n    Prism.languages.insertBefore('coffeescript', 'string', {\n      'inline-javascript': {\n        pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n        inside: {\n          delimiter: {\n            pattern: /^`|`$/,\n            alias: 'punctuation'\n          },\n          script: {\n            pattern: /[\\s\\S]+/,\n            alias: 'language-javascript',\n            inside: Prism.languages.javascript\n          }\n        }\n      },\n      // Block strings\n      'multiline-string': [\n        {\n          pattern: /'''[\\s\\S]*?'''/,\n          greedy: true,\n          alias: 'string'\n        },\n        {\n          pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n          greedy: true,\n          alias: 'string',\n          inside: {\n            interpolation: interpolation\n          }\n        }\n      ]\n    })\n    Prism.languages.insertBefore('coffeescript', 'keyword', {\n      // Object property\n      property: /(?!\\d)\\w+(?=\\s*:(?!:))/\n    })\n    delete Prism.languages.coffeescript['template-string']\n    Prism.languages.coffee = Prism.languages.coffeescript\n  })(Prism)\n}\n\n\n/***/ })\n\n}]);"],"names":["self","push","module","coffeescript","Prism","comment","interpolation","pattern","alias","languages","extend","string","greedy","inside","keyword","insertBefore","delimiter","script","javascript","property","coffee","exports","displayName","aliases"],"sourceRoot":""}