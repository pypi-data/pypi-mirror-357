"""
    ai/h2o/notebook/v1/base_types.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from h2o_notebook.gen.api_client import ApiClient, Endpoint as _Endpoint
from h2o_notebook.gen.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from h2o_notebook.gen.model.rpc_status import RpcStatus
from h2o_notebook.gen.model.v1_create_kernel_task_response import V1CreateKernelTaskResponse
from h2o_notebook.gen.model.v1_get_kernel_task_response import V1GetKernelTaskResponse
from h2o_notebook.gen.model.v1_kernel_task import V1KernelTask
from h2o_notebook.gen.model.v1_list_kernel_tasks_response import V1ListKernelTasksResponse


class KernelTaskServiceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.kernel_task_service_cancel_kernel_task_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/v1/{name}:cancel',
                'operation_id': 'kernel_task_service_cancel_kernel_task',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'body',
                ],
                'required': [
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name',
                ]
            },
            root_map={
                'validations': {
                    ('name',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/kernels\/[^\/]+\/tasks\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'name': 'name',
                },
                'location_map': {
                    'name': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.kernel_task_service_create_kernel_task_endpoint = _Endpoint(
            settings={
                'response_type': (V1CreateKernelTaskResponse,),
                'auth': [],
                'endpoint_path': '/v1/{parent}/tasks',
                'operation_id': 'kernel_task_service_create_kernel_task',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'parent',
                    'kernel_task',
                    'kernel_task_id',
                ],
                'required': [
                    'parent',
                    'kernel_task',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'parent',
                ]
            },
            root_map={
                'validations': {
                    ('parent',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/kernels\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'parent':
                        (str,),
                    'kernel_task':
                        (V1KernelTask,),
                    'kernel_task_id':
                        (str,),
                },
                'attribute_map': {
                    'parent': 'parent',
                    'kernel_task_id': 'kernelTaskId',
                },
                'location_map': {
                    'parent': 'path',
                    'kernel_task': 'body',
                    'kernel_task_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.kernel_task_service_get_kernel_task_endpoint = _Endpoint(
            settings={
                'response_type': (V1GetKernelTaskResponse,),
                'auth': [],
                'endpoint_path': '/v1/{name_3}',
                'operation_id': 'kernel_task_service_get_kernel_task',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name_3',
                ],
                'required': [
                    'name_3',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name_3',
                ]
            },
            root_map={
                'validations': {
                    ('name_3',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/kernels\/[^\/]+\/tasks\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name_3':
                        (str,),
                },
                'attribute_map': {
                    'name_3': 'name_3',
                },
                'location_map': {
                    'name_3': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.kernel_task_service_list_kernel_tasks_endpoint = _Endpoint(
            settings={
                'response_type': (V1ListKernelTasksResponse,),
                'auth': [],
                'endpoint_path': '/v1/{parent}/tasks',
                'operation_id': 'kernel_task_service_list_kernel_tasks',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'parent',
                    'page_size',
                    'page_token',
                ],
                'required': [
                    'parent',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'parent',
                ]
            },
            root_map={
                'validations': {
                    ('parent',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/kernels\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'parent':
                        (str,),
                    'page_size':
                        (int,),
                    'page_token':
                        (str,),
                },
                'attribute_map': {
                    'parent': 'parent',
                    'page_size': 'pageSize',
                    'page_token': 'pageToken',
                },
                'location_map': {
                    'parent': 'path',
                    'page_size': 'query',
                    'page_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def kernel_task_service_cancel_kernel_task(
        self,
        name,
        body,
        **kwargs
    ):
        """Cancels a KernelTask. Enqueued task will be skipped. Running task will be cancelled.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.kernel_task_service_cancel_kernel_task(name, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): Required. The name of the KernelTask to cancel. Format is `workspaces/*/kernels/*/tasks/*`.
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['name'] = \
            name
        kwargs['body'] = \
            body
        return self.kernel_task_service_cancel_kernel_task_endpoint.call_with_http_info(**kwargs)

    def kernel_task_service_create_kernel_task(
        self,
        parent,
        kernel_task,
        **kwargs
    ):
        """Creates a new KernelTask and assign it to a Kernel.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.kernel_task_service_create_kernel_task(parent, kernel_task, async_req=True)
        >>> result = thread.get()

        Args:
            parent (str): Required. The resource name of the Kernel to create the KernelTask in. Format is `workspaces/*/kernels/*`.
            kernel_task (V1KernelTask): Required. The KernelTask resource to create.

        Keyword Args:
            kernel_task_id (str): Optional. Specify the KernelTask ID, which will become a part of the KernelTask resource name. If not specified, the server will generate one.  It must: - contain 1-63 characters - contain only lowercase alphanumeric characters or hyphen ('-') - start with an alphabetic character - end with an alphanumeric character  This matches a regular expression: ^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1CreateKernelTaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['parent'] = \
            parent
        kwargs['kernel_task'] = \
            kernel_task
        return self.kernel_task_service_create_kernel_task_endpoint.call_with_http_info(**kwargs)

    def kernel_task_service_get_kernel_task(
        self,
        name_3,
        **kwargs
    ):
        """Returns a specific KernelTask.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.kernel_task_service_get_kernel_task(name_3, async_req=True)
        >>> result = thread.get()

        Args:
            name_3 (str): Required. The name of the KernelTask to retrieve. Format is `workspaces/*/kernels/*/tasks/*`.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1GetKernelTaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['name_3'] = \
            name_3
        return self.kernel_task_service_get_kernel_task_endpoint.call_with_http_info(**kwargs)

    def kernel_task_service_list_kernel_tasks(
        self,
        parent,
        **kwargs
    ):
        """Returns a collection of KernelTasks assigned to a Kernel.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.kernel_task_service_list_kernel_tasks(parent, async_req=True)
        >>> result = thread.get()

        Args:
            parent (str): Required. The resource name of the Kernel to list KernelTasks from. Format is `workspaces/*/kernels/*`.

        Keyword Args:
            page_size (int): Optional. Maximum number of KernelTasks to return in a response. If unspecified (or set to 0), at most 50 KernelTasks will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.. [optional]
            page_token (str): Optional. Leave unset to receive the initial page. To list any subsequent pages use the value of 'next_page_token' returned from the ListKernelTasksResponse.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1ListKernelTasksResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['parent'] = \
            parent
        return self.kernel_task_service_list_kernel_tasks_endpoint.call_with_http_info(**kwargs)

