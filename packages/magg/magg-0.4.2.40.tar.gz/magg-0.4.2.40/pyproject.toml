[project]
name = "magg"
version = "0.4.2.40"
requires-python = ">=3.13"
description = "MCP Aggregator"
authors = [{ name = "Phillip Sitbon", email = "phillip.sitbon@gmail.com"}]
readme = "readme.md"
license = "license.md"
repository = "https://github.com/sitbon/magg"
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: Python :: 3.15",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: Proxy Servers",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]
keywords = [
    "model",
    "context",
    "protocol",
    "ai",
    "agent",
    "mcp",
    "aggregator",
    "proxy",
    "fastmcp",
    "aiohttp",
    "pydantic",
    "pydantic-settings",
    "rich",
]
packages = [{include = "magg"}]
dependencies = [
    "fastmcp<3",
    "aiohttp<4",
    "pydantic<3",
    "pydantic-settings<3",
    "rich<15",
    "prompt-toolkit<4",
]

[project.urls]
Homepage = "https://github.com/sitbon/magg"
Repository = "https://github.com/sitbon/magg.git"
Documentation = "https://github.com/sitbon/magg#readme"
Issues = "https://github.com/sitbon/magg/issues"
"Release Notes" = "https://github.com/sitbon/magg/releases"

[project.scripts]
magg = "magg.cli:main"
mbro = "magg.mbro.cli:main"

[project.optional-dependencies]
test = [
    "pytest>=8.4.0",
    "pytest-asyncio>=1.0.0",
    "prompt-toolkit>=3.0.51",
]

[dependency-groups]
dev = [
    "pytest>=8.4.0",
    "pytest-asyncio>=1.0.0",
    "prompt-toolkit>=3.0.51",
    "poethepoet>=0.35.0",
    "keyring>=25.6.0",
    "anthropic>=0.54.0",
]

[tool.poe]
verbosity = -1

[tool.poe.tasks]
fix-whitespace.cmd = "python scripts/fix_whitespace.py"

build.sequence = [
    { cmd = "rm -f dist/*" },
    { cmd = "uv build" },
]

sync-git-version.shell = """
VERSION=$(echo -n $(uv version --short) | sed 's/\\(\\.\\)[0-9]*$/\\.'"$(git rev-list --count HEAD)"'/')
uv version $VERSION
git add pyproject.toml uv.lock
"""

publish-commit-message.shell = """
echo '[Automatic] Release Version' v$(uv version --short) from $(git show --pretty=format:'%h' --no-patch)
"""

verified-publish-commit.shell = """
# Check if there are any changes to commit
if [ -z "$(git status --porcelain)" ]; then
    echo "Error: No changes to commit. Version may not have been updated properly."
    exit 1
fi
git commit -s -S -m "$(poe -q publish-commit-message)"
git tag -s -m "$(poe -q publish-commit-message)" magg/v$(uv version --short)
"""

create-publish-commit.sequence = [
    { ref = "sync-git-version" },
    { ref = "build" },
    { ref = "verified-publish-commit" },
]

pypi-publish.cmd = "uv publish --token $PYPI_TOKEN"

verified-publish.sequence = [
    { ref = "create-publish-commit" },
    { ref = "pypi-publish" },
]

[tool.pytest.ini_options]
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
