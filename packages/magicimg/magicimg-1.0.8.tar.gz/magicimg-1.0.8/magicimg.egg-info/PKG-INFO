Metadata-Version: 2.1
Name: magicimg
Version: 1.0.8
Summary: Th∆∞ vi·ªán x·ª≠ l√Ω ·∫£nh th√¥ng minh v·ªõi h·ªó tr·ª£ GPU t·ª± ƒë·ªông
Home-page: https://github.com/magicimg/magicimg
Author: MagicImg Team
Author-email: contact@magicimg.com
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Topic :: Scientific/Engineering :: Image Processing
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Provides-Extra: dev
Provides-Extra: gpu
License-File: LICENSE

# MagicImg - Th∆∞ vi·ªán x·ª≠ l√Ω ·∫£nh th√¥ng minh

[![Version](https://img.shields.io/badge/version-1.0.6-blue.svg)](https://pypi.org/project/magicimg/)
[![Python](https://img.shields.io/badge/python-3.7%2B-blue.svg)](https://www.python.org/)
[![License](https://img.shields.io/badge/license-MIT-green.svg)](LICENSE)

MagicImg l√† th∆∞ vi·ªán Python m·∫°nh m·∫Ω cho x·ª≠ l√Ω v√† ti·ªÅn x·ª≠ l√Ω ·∫£nh, ƒë∆∞·ª£c t·ªëi ∆∞u cho OCR v√† computer vision v·ªõi h·ªó tr·ª£ GPU t·ª± ƒë·ªông.

## üöÄ T√≠nh nƒÉng m·ªõi trong v1.0.6

- ‚úÖ **S·ª≠a l·ªói API consistency**: T·∫•t c·∫£ wrapper functions gi·ªù ƒë√¢y tr·∫£ v·ªÅ format nh·∫•t qu√°n
- ‚úÖ **T·ªëi ∆∞u type annotations**: C·∫£i thi·ªán type hints cho t·∫•t c·∫£ functions
- ‚úÖ **Enhanced error handling**: X·ª≠ l√Ω l·ªói t·ªët h∆°n trong c√°c API functions
- ‚úÖ **Preserve color option**: T√πy ch·ªçn gi·ªØ nguy√™n m√†u s·∫Øc ·∫£nh g·ªëc
- ‚úÖ **API stability**: Kh√¥ng c√≤n l·ªói unpack ProcessingResult objects

## üì¶ C√†i ƒë·∫∑t

### C√†i ƒë·∫∑t c∆° b·∫£n
```bash
pip install magicimg
```

### C√†i ƒë·∫∑t v·ªõi GPU support
```bash
pip install magicimg[gpu]
# ho·∫∑c
pip install magicimg torch torchvision
```

### C√†i ƒë·∫∑t Tesseract OCR

#### Windows
```bash
# S·ª≠ d·ª•ng winget
winget install UB-Mannheim.TesseractOCR

# Th√™m v√†o PATH
set PATH=%PATH%;C:\Program Files\Tesseract-OCR
```

#### Ubuntu/Debian
```bash
sudo apt-get update
sudo apt-get install tesseract-ocr tesseract-ocr-vie
```

#### macOS
```bash
brew install tesseract
```

## üéØ S·ª≠ d·ª•ng nhanh

### Basic Usage
```python
import magicimg

# X·ª≠ l√Ω ·∫£nh c∆° b·∫£n v·ªõi preserve color
result = magicimg.process_image("input.jpg", "output.jpg", preserve_color=True)
print(f"Success: {result.success}")
print(f"Processing steps: {result.processing_steps}")

# Ki·ªÉm tra ch·∫•t l∆∞·ª£ng ·∫£nh
is_good, quality_info, enhanced = magicimg.check_image_quality("input.jpg")
print(f"Quality score: {quality_info['quality_score']}")

# TƒÉng c∆∞·ªùng ·∫£nh
enhanced = magicimg.enhance_image("input.jpg", "enhanced.jpg")

# Preprocessing cho OCR (t·ªëi ∆∞u cho text recognition)
result = magicimg.preprocess_for_ocr("input.jpg", "output.jpg", preserve_color=False)
```

### API Mode (cho Google, Anthropic, Local API)
```python
import magicimg

# Preprocessing cho Google Vision API
success, info, output_path = magicimg.preprocess_image_for_api(
    "input.jpg", 
    provider="google",
    output_dir="./output/",
    min_quality_score=0.3
)

print(f"Success: {success}")
print(f"Output: {output_path}")
print(f"Processing steps: {info['processing_steps']}")
```

## üìö API Reference

### Core Functions

#### `process_image(image_path, output_path=None, auto_rotate=True, preserve_color=True)`
X·ª≠ l√Ω ·∫£nh ho√†n ch·ªânh v·ªõi t·∫•t c·∫£ c√°c b∆∞·ªõc t·ªëi ∆∞u.

**Parameters:**
- `image_path` (str | np.ndarray): ƒê∆∞·ªùng d·∫´n ·∫£nh ho·∫∑c numpy array
- `output_path` (str, optional): ƒê∆∞·ªùng d·∫´n l∆∞u k·∫øt qu·∫£
- `auto_rotate` (bool): T·ª± ƒë·ªông xoay ·∫£nh (default: True)
- `preserve_color` (bool): Gi·ªØ nguy√™n m√†u s·∫Øc (default: True)

**Returns:**
- `ProcessingResult`: Object ch·ª©a k·∫øt qu·∫£ x·ª≠ l√Ω

#### `check_image_quality(image_path)`
Ki·ªÉm tra ch·∫•t l∆∞·ª£ng ·∫£nh v√† ƒë√°nh gi√° c√°c metrics.

**Returns:**
- `tuple(bool, dict, np.ndarray)`: (is_good, quality_info_dict, enhanced_image)

#### `preprocess_image_for_api(image_path, provider="google")`
Ti·ªÅn x·ª≠ l√Ω ·∫£nh t·ªëi ∆∞u cho c√°c API nh√† cung c·∫•p.

**Parameters:**
- `provider`: "google", "anthropic", ho·∫∑c "local"

**Returns:**
- `tuple(bool, dict, str)`: (success, processing_info, output_path)

### Quality Enhancement Functions

#### `enhance_image(image_path, output_path=None)`
TƒÉng c∆∞·ªùng ch·∫•t l∆∞·ª£ng ·∫£nh m·ªôt c√°ch nh·∫π nh√†ng.

#### `enhance_image_for_ocr(image_path, output_path=None)`
T·ªëi ∆∞u ·∫£nh ƒë·∫∑c bi·ªát cho OCR (chuy·ªÉn binary).

### Orientation & Skew Functions

#### `detect_skew(image_path)`
Ph√°t hi·ªán g√≥c nghi√™ng c·ªßa ·∫£nh.

#### `correct_skew(image_path, angle=None)`
S·ª≠a g√≥c nghi√™ng c·ªßa ·∫£nh.

#### `rotate_image(image_path, angle)`
Xoay ·∫£nh theo g√≥c cho tr∆∞·ªõc.

## ‚öôÔ∏è C·∫•u h√¨nh n√¢ng cao

### GPU Configuration
```python
from magicimg import ImageProcessor

# C·∫•u h√¨nh GPU t√πy ch·ªânh
config = {
    "use_gpu": True,
    "gpu_id": 0,
    "gpu_memory_limit": 0.7,
    "batch_size": 4,
    "optimize_for_gpu": True
}

processor = ImageProcessor(config=config)
result = processor.process_image("input.jpg")
```

### Quality Thresholds
```python
# C·∫•u h√¨nh ng∆∞·ª°ng ch·∫•t l∆∞·ª£ng
config = {
    "min_blur_index": 100.0,      # TƒÉng y√™u c·∫ßu ƒë·ªô n√©t
    "min_brightness": 200.0,      # TƒÉng y√™u c·∫ßu ƒë·ªô s√°ng
    "min_contrast": 60.0,         # TƒÉng y√™u c·∫ßu ƒë·ªô t∆∞∆°ng ph·∫£n
    "min_resolution": (1200, 1600) # TƒÉng ƒë·ªô ph√¢n gi·∫£i t·ªëi thi·ªÉu
}

processor = ImageProcessor(config=config)
```

### Processing Modes

#### High Quality Mode (cho ·∫£nh quan tr·ªçng)
```python
config = {
    "min_blur_index": 120.0,
    "min_brightness": 220.0,
    "min_contrast": 70.0,
    "min_resolution": (1500, 2000)
}
result = magicimg.process_image("input.jpg", config=config, preserve_color=True)
```

#### Fast Processing Mode (cho batch processing)
```python
config = {
    "min_blur_index": 60.0,
    "min_brightness": 160.0,
    "min_contrast": 40.0,
    "skip_rotation": True
}
result = magicimg.process_image("input.jpg", config=config)
```

#### OCR Optimization Mode
```python
result = magicimg.preprocess_for_ocr("input.jpg", preserve_color=False)
# preserve_color=False -> chuy·ªÉn binary cho OCR t·ªëi ∆∞u
```

## üîß Debugging & Troubleshooting

### Enable Debug Mode
```python
processor = ImageProcessor(debug_dir="./debug/")
result = processor.process_image("input.jpg")
# Debug images s·∫Ω ƒë∆∞·ª£c l∆∞u trong ./debug/
```

### Common Issues

#### 1. GPU kh√¥ng ƒë∆∞·ª£c ph√°t hi·ªán
```bash
# Ki·ªÉm tra CUDA
python -c "import torch; print(torch.cuda.is_available())"

# N·∫øu False, c√†i ƒë·∫∑t PyTorch v·ªõi CUDA
pip install torch torchvision --index-url https://download.pytorch.org/whl/cu118
```

#### 2. Tesseract error
```bash
# Windows: Th√™m Tesseract v√†o PATH
set PATH=%PATH%;C:\Program Files\Tesseract-OCR

# Linux: C√†i ƒë·∫∑t Tesseract
sudo apt-get install tesseract-ocr
```

#### 3. Memory errors v·ªõi ·∫£nh l·ªõn
```python
# Gi·∫£m batch_size
config = {"batch_size": 2, "gpu_memory_limit": 0.5}
processor = ImageProcessor(config=config)
```

### System Information
```python
import magicimg
magicimg.print_system_info()
# In th√¥ng tin h·ªá th·ªëng v√† dependencies
```

## üìä Performance Tips

### 1. Batch Processing
```python
from magicimg import ImageProcessor

processor = ImageProcessor(config={"batch_size": 8})

# X·ª≠ l√Ω nhi·ªÅu ·∫£nh c√πng l√∫c
image_paths = ["img1.jpg", "img2.jpg", "img3.jpg"]
for path in image_paths:
    result = processor.process_image(path)
    print(f"Processed {path}: {result.success}")
```

### 2. Memory Management
```python
# S·ª≠ d·ª•ng context manager cho GPU
from magicimg.core import gpu_memory_manager

with gpu_memory_manager():
    result = magicimg.process_image("large_image.jpg")
```

### 3. Preserve Color vs OCR Mode
```python
# Cho ·∫£nh c·∫ßn gi·ªØ ch·∫•t l∆∞·ª£ng cao
result = magicimg.process_image("photo.jpg", preserve_color=True)

# Cho text recognition
result = magicimg.preprocess_for_ocr("document.jpg", preserve_color=False)
```

## üß™ Testing

### Run API Consistency Tests
```bash
# Test t·∫•t c·∫£ API functions
python -c "
import magicimg
print('Testing basic APIs...')
result1 = magicimg.check_image_quality('input.jpg')
result2 = magicimg.process_image('input.jpg')
result3 = magicimg.preprocess_image_for_api('input.jpg')
print('All APIs working correctly!')
"
```

### Performance Benchmark
```python
import time
import magicimg

start = time.time()
result = magicimg.process_image("test.jpg")
end = time.time()

print(f"Processing time: {end-start:.2f}s")
print(f"Success: {result.success}")
```

## üìù Examples

### Complete Processing Pipeline
```python
import magicimg

def process_document(input_path, output_dir="./output/"):
    """X·ª≠ l√Ω document ho√†n ch·ªânh"""
    
    # 1. Ki·ªÉm tra ch·∫•t l∆∞·ª£ng
    is_good, quality_info, enhanced = magicimg.check_image_quality(input_path)
    print(f"Quality score: {quality_info['quality_score']:.2f}")
    
    # 2. X·ª≠ l√Ω v·ªõi preserve color
    result = magicimg.process_image(
        input_path, 
        output_path=f"{output_dir}/processed.jpg",
        preserve_color=True
    )
    
    # 3. T·∫°o version cho OCR
    ocr_result = magicimg.preprocess_for_ocr(
        input_path,
        output_path=f"{output_dir}/ocr_ready.jpg", 
        preserve_color=False
    )
    
    # 4. API processing
    api_success, api_info, api_path = magicimg.preprocess_image_for_api(
        input_path,
        provider="google",
        output_dir=output_dir
    )
    
    return {
        "quality": quality_info,
        "processed": result.success,
        "ocr_ready": ocr_result.success,
        "api_ready": api_success,
        "steps": result.processing_steps
    }

# S·ª≠ d·ª•ng
results = process_document("document.jpg")
print(results)
```

## üÜï Changelog v1.0.6

### Fixed
- ‚úÖ S·ª≠a l·ªói API consistency trong wrapper functions
- ‚úÖ S·ª≠a l·ªói unpack ProcessingResult objects  
- ‚úÖ C·∫£i thi·ªán type annotations cho t·∫•t c·∫£ functions
- ‚úÖ S·ª≠a l·ªói return type mismatch gi·ªØa core v√† wrapper functions

### Improved
- üöÄ T·ªëi ∆∞u memory management cho GPU processing
- üöÄ C·∫£i thi·ªán error handling trong t·∫•t c·∫£ API functions
- üöÄ Th√™m preserve_color option cho flexibility
- üöÄ Enhanced debugging capabilities

### Added
- ‚ûï API consistency test suite
- ‚ûï Comprehensive error reporting
- ‚ûï Better documentation v·ªõi examples

## ü§ù Contributing

1. Fork repository
2. T·∫°o feature branch (`git checkout -b feature/AmazingFeature`)
3. Commit changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to branch (`git push origin feature/AmazingFeature`)
5. T·∫°o Pull Request

## üìÑ License

Distributed under the MIT License. See `LICENSE` for more information.

## üôã‚Äç‚ôÇÔ∏è Support

- üìß Email: shumi2011@gmail.com
- üêõ Issues: [GitHub Issues](https://github.com/magicimg/magicimg/issues)
- üìñ Documentation: [Full Docs](https://magicimg.readthedocs.io/)

---

**Made with ‚ù§Ô∏è by MagicImg Team** 
