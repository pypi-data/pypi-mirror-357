[build-system]
requires = [
    "hatchling",
]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
asyncio_mode = "strict"
testpaths = "tests"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "macos: marks tests that should only run on macOS",
    "slow: marks tests as slow running",
]
filterwarnings = [
    "ignore::RuntimeWarning:selectors:",
    "ignore::pytest.PytestUnhandledCoroutineWarning:",
    "ignore::pytest.PytestUnraisableExceptionWarning:",
    "ignore::DeprecationWarning:pytest_asyncio.plugin:",
]

[tool.ruff.lint]
select = [
    "E",
    "F",
    "W",
    "I",
    "C",
    "B",
]
ignore = [
    "E501",
    "B008",
    "C901",
]

[tool.black]
line-length = 88
target-version = [
    "py311",
]

[tool.isort]
profile = "black"
line_length = 88

[tool.hatch.version]
path = "src/mcp_shell_server/version.py"

[tool.hatch.build.targets.wheel]
packages = [
    "src/mcp_shell_server",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
    "__version__",
    "except IOError:",
    "except IOError as e:",
    "def _cleanup_handles",
    "def __aexit__",
    "if path in [\">\", \">>\", \"<\"]:",
    "def _close_handles",
]
omit = [
    "src/mcp_shell_server/__init__.py",
    "src/mcp_shell_server/version.py",
]
