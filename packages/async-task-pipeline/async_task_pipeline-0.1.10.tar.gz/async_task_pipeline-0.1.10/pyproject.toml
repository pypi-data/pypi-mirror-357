[project]
name = "async-task-pipeline"
version = "0.1.10"
description = "A framework for processing streaming data through CPU-intensive tasks while maintaining order and tracking latency"
readme = "README.md"
authors = [{ name = "Chenghao Mou", email = "mouchenghao@gmail.com" }]
requires-python = ">=3.11, <3.12"
dependencies = ["pydantic>=2.11.5", "returns>=0.25.0", "rich>=14.0.0"]
keywords = ["async", "pipeline", "streaming", "data-processing"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "pytest-asyncio>=0.24.0",
    "ruff>=0.7.0",
    "pre-commit>=4.0.0",
    "bump-my-version>=0.26.0",
    "pytest-watch>=4.2.0",
    "tox>=4.0.0",
]


[project.urls]
Homepage = "https://github.com/mouchenghao/async-task-pipeline"
Repository = "https://github.com/mouchenghao/async-task-pipeline"
Issues = "https://github.com/mouchenghao/async-task-pipeline/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "src/async_task_pipeline/__init__.py"

# [tool.hatch.build.targets.wheel]
# packages = ["src/async_task_pipeline"]

[tool.mypy]
plugins = ["pydantic.mypy", "returns.contrib.mypy.returns_plugin"]
exclude = "tests"
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
ignore_missing_imports = true


[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.ruff]
target-version = "py312"
line-length = 120
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "I", # isort
]
ignore = [
    "E501", # line too long, handled by ruff format
]

[tool.ruff.lint.isort]
known-first-party = ["async_task_pipeline"]
force-sort-within-sections = true
force-single-line = true


[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"

[tool.coverage.run]
source = ["src"]
branch = true

[tool.bumpversion]
current_version = "0.1.10"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
ignore_missing_files = false
tag = true
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = false
commit = true
message = "Bump version: {current_version} → {new_version}"
moveable_tags = []
commit_args = ""
setup_hooks = []
pre_commit_hooks = []
post_commit_hooks = []

[[tool.bumpversion.files]]
filename = "src/async_task_pipeline/__init__.py"

[[tool.bumpversion.files]]
filename = "pyproject.toml"

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]

[dependency-groups]
dev = [
    "griffe-typingdoc>=0.2.8",
    "mkdocs-material>=9.6.14",
    "mkdocs-mermaid2-plugin>=1.2.1",
    "mkdocstrings[python]>=0.29.1",
    "mypy<1.16",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.1.1",
    "returns>=0.25.0",
]

[[tool.uv.index]]
name = "testpypi"
url = "https://test.pypi.org/simple/"
publish-url = "https://test.pypi.org/legacy/"
explicit = true

[tool.tox]
legacy_tox_ini = """
[tox]
env_list = py312, py313, lint, type-check
min_version = 4.0

[testenv]
description = Run tests with pytest
package = wheel
wheel_build_env = .pkg
deps =
    pytest>=8.0.0
    pytest-cov>=5.0.0
    pytest-asyncio>=0.24.0
commands =
    pytest {posargs}

[testenv:lint]
description = Run linting with ruff
skip_install = true
deps = ruff>=0.7.0
commands =
    ruff check src tests
    ruff format --check src tests

[testenv:type-check]
description = Run type checking with mypy
deps =
    mypy<1.16
    pydantic>=2.11.5
commands =
    mypy src

[testenv:cov]
description = Run tests with coverage reporting
deps =
    pytest>=8.0.0
    pytest-cov>=5.0.0
    pytest-asyncio>=0.24.0
commands =
    pytest --cov=async_task_pipeline --cov-report=html --cov-report=term-missing

[testenv:py312]
base_python = python3.12

[testenv:py313]
base_python = python3.13
"""
