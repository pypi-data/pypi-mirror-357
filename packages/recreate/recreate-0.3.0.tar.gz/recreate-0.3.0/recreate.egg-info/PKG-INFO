Metadata-Version: 2.4
Name: recreate
Version: 0.3.0
Summary: A tool to index files and recreate directory structures with symlinks.
Author-email: Thomas Germer <Thomas.Germer@hhu.de>
License: MIT License
        
        Copyright (c) 2025 Thomas Germer
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/99991/recreate
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: tqdm
Dynamic: license-file

# recreate

[![PyPI version](https://img.shields.io/pypi/v/recreate)](https://pypi.org/project/recreate/)
[![License: MIT](https://img.shields.io/github/license/99991/recreate?color=brightgreen)](https://opensource.org/licenses/MIT)
![PyPI downloads](https://img.shields.io/pypi/dm/recreate)

`recreate` is a tool to automatically recreate a directory from an index by symlinking to files found elsewhere on your system.

![Motivating image](https://github.com/user-attachments/assets/1688cff9-b887-4925-b1d5-84a2d05a552e)

`recreate` is useful for reproducible data science projects where authors somehow never have the time to describe the directory structure for their experiments. With `recreate`, the authors only have to run a single-line command to create an index for their data directory (a `JSON` file with paths, file sizes and hashes) and users can recreate the exact file structure without having to move files manually. It is sufficient to specify the directory in which the files can be found.

# Installation

```
pip install recreate
```

# Creating the index

Create `index.json` from files found in in `data/`.

```bash
recreate --index index.json data/
```

# Using the index

Recreate the file structure defined in `index.json` by linking files found anywhere in `source/`.

```bash
recreate --recreate index.json source/
```

You can also specify multiple source directories. This is a common use case for deep learning projects, where multiple datasets (e.g. train/validation/test) may have to be placed at the correct location. The `recreate` tool makes this easy. You only have to point it to the datasets and it will link the files to the appropriate location.

```bash
recreate --recreate index.json dataset1/ dataset2/ dataset3/ # and so on...
```

Or let `recreate` search through the current directory.

```bash
recreate --recreate index.json .
```

For more options, see `recreate --help`

#### How does `recreate` work?

For indexing, `recreate` runs through all given directories in parallel and hashes all files (except those starting with `.`) with SHA-256.

For recreating, files in the given directory are again hashed in parallel and compared to the index. If there is a match, the file is linked to where it is supposed to be according to the index.

To accelerate matching, files which have the same name as a file in the index are hashed first, since they are more likely to have a matching SHA-256 hash. Files with file sizes that do not occur in the index are not hashed, since they can never have a matching SHA-256 hash.
