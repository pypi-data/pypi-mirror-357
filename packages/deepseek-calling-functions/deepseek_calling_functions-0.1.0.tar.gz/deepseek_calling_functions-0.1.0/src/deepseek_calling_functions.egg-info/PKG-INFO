Metadata-Version: 2.4
Name: deepseek-calling-functions
Version: 0.1.0
Summary: Python client for DeepSeek AI with function calling capabilities
Author-email: CarlosMaroRuiz <221220@ids.upchiapas.edu.mx>
License: MIT
Project-URL: Homepage, https://github.com/CarlosMaroRuiz/DeepSeek_calling-
Project-URL: Bug Tracker, https://github.com/CarlosMaroRuiz/DeepSeek_calling-/issues
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: openai>=1.0.0
Requires-Dist: python-dotenv>=0.19.0
Requires-Dist: pandas>=1.3.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: isort>=5.10.0; extra == "dev"

# Documentaci√≥n DeepSeek Agent(core)

## Introducci√≥n

El **DeepSeek Agent** es una biblioteca Python dise√±ada para facilitar la integraci√≥n con la API de DeepSeek, proporcionando capacidades avanzadas de **function calling**, gesti√≥n de esquemas y herramientas personalizadas.

## üìÅ Estructura del Core

```
core/
‚îú‚îÄ‚îÄ __init__.py
‚îú‚îÄ‚îÄ DeepSeekAgent.py          # Agente principal
‚îú‚îÄ‚îÄ config/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îî‚îÄ‚îÄ Config.py             # Configuraciones y variables de entorno
‚îî‚îÄ‚îÄ utils/
    ‚îú‚îÄ‚îÄ __init__.py
    ‚îî‚îÄ‚îÄ generator_schema.py   # Generador autom√°tico de esquemas
```

---

## üîß Function Calling

### ¬øQu√© es Function Calling?

**Function Calling** es una caracter√≠stica que permite a los modelos de IA ejecutar funciones espec√≠ficas durante una conversaci√≥n. En lugar de solo generar texto, el modelo puede:

- Identificar cu√°ndo necesita ejecutar una funci√≥n
- Extraer los par√°metros necesarios del contexto
- Llamar a la funci√≥n con los par√°metros correctos
- Usar el resultado de la funci√≥n para generar una respuesta m√°s precisa

### Beneficios

- **Precisi√≥n**: Acceso a datos en tiempo real
- **Flexibilidad**: Extensi√≥n de capacidades del modelo
- **Integraci√≥n**: Conexi√≥n con sistemas externos
- **Automatizaci√≥n**: Ejecuci√≥n de tareas complejas

---

## üìã Schemas (Esquemas)

### Prop√≥sito de los Schemas

Los **schemas** son definiciones estructuradas que describen:
- Qu√© hace una funci√≥n
- Qu√© par√°metros necesita
- Tipos de datos esperados
- Validaciones y restricciones

### Estructura de un Schema

```json
{
  "type": "function",
  "function": {
    "name": "nombre_funci√≥n",
    "description": "Descripci√≥n de qu√© hace la funci√≥n",
    "parameters": {
      "type": "object",
      "properties": {
        "parametro1": {
          "type": "string",
          "description": "Descripci√≥n del par√°metro"
        }
      },
      "required": ["parametro1"]
    }
  }
}
```

### Ejemplo Pr√°ctico

```python
schema_clima = {
    "type": "function",
    "function": {
        "name": "obtener_clima",
        "description": "Obtiene informaci√≥n del clima actual",
        "parameters": {
            "type": "object",
            "properties": {
                "ciudad": {
                    "type": "string",
                    "description": "Nombre de la ciudad"
                },
                "unidad": {
                    "type": "string",
                    "enum": ["celsius", "fahrenheit"],
                    "description": "Unidad de temperatura"
                }
            },
            "required": ["ciudad"]
        }
    }
}
```

---

## üõ†Ô∏è Tools (Herramientas)

### Definici√≥n

Las **tools** son funciones Python que el agente puede ejecutar. Cada tool debe:
- Tener un schema asociado
- Manejar errores apropiadamente
- Retornar resultados en formato string o serializable

### Ejemplo de Tool

```python
def obtener_clima(ciudad: str, unidad: str = "celsius") -> str:
    """Tool que obtiene informaci√≥n del clima"""
    try:
        # L√≥gica para obtener clima
        temperatura = 25  # Ejemplo
        return f"La temperatura en {ciudad} es {temperatura}¬∞{unidad[0].upper()}"
    except Exception as e:
        return f"Error obteniendo clima: {str(e)}"
```

### Registro de Tools

```python
agent = DeepSeekAgent()
agent.add_function(obtener_clima, schema_clima)
```

---

## ü§ñ DeepSeekAgent - M√©todos Principales

### Inicializaci√≥n

```python
from core.DeepSeekAgent import DeepSeekAgent

# Crear instancia del agente
agent = DeepSeekAgent()
```

**Qu√© hace**: Inicializa el agente con configuraci√≥n de API, modelos disponibles, sistema de logging y diccionarios para almacenar funciones y schemas.

### Configuraci√≥n del Sistema

```python
# Establecer personalidad/contexto del agente
agent.add_system_message("Eres un asistente especializado en an√°lisis de datos.")
```

**Qu√© hace**: Define el comportamiento y contexto del agente. Este mensaje se mantiene al inicio de todas las conversaciones.

### Gesti√≥n de Funciones

```python
# Agregar funci√≥n
agent.add_function(mi_funcion, mi_schema)
```

**Qu√© hace**: Registra una funci√≥n Python y su schema correspondiente para que el agente pueda ejecutarla durante las conversaciones.

```python
# Listar funciones disponibles
funciones = agent.get_available_functions()
```

**Qu√© hace**: Retorna una lista con los nombres de todas las funciones registradas en el agente.

```python
# Remover funci√≥n
agent.remove_function("nombre_funci√≥n")
```

**Qu√© hace**: Elimina una funci√≥n espec√≠fica del agente, incluyendo su schema asociado.

### Chat B√°sico

```python
# Chat normal
respuesta = agent.chat("¬øC√≥mo est√° el clima en Madrid?")
```

**Qu√© hace**: Env√≠a un mensaje al modelo, eval√∫a si necesita ejecutar funciones, las ejecuta si es necesario y retorna la respuesta final.

```python
# Chat sin usar funciones
respuesta = agent.chat("Expl√≠came qu√© es Python", use_functions=False)
```

**Qu√© hace**: Realiza una conversaci√≥n normal sin evaluar o ejecutar ninguna funci√≥n, √∫til para preguntas generales.

```python
# Chat con streaming
respuesta = agent.stream_chat("Analiza estos datos...")
```

**Qu√© hace**: Igual que chat normal pero muestra la respuesta en tiempo real palabra por palabra, √∫til para respuestas largas.

### Chat con Razonamiento

```python
# Para problemas complejos que requieren razonamiento paso a paso
resultado = agent.reasoning_chat("Resuelve este problema matem√°tico complejo...")

print("Razonamiento:", resultado["reasoning"])
print("Respuesta:", resultado["answer"])
```

**Qu√© hace**: Utiliza el modelo DeepSeek-R1 especializado en razonamiento para problemas complejos que requieren an√°lisis paso a paso.

### Gesti√≥n del Historial

```python
# Limpiar historial (mantener mensaje del sistema)
agent.clear_history(keep_system=True)
```

**Qu√© hace**: Elimina todo el historial de conversaci√≥n, opcionalmente manteniendo el mensaje del sistema.

```python
# Guardar conversaci√≥n
agent.save_conversation("mi_conversacion.json")
```

**Qu√© hace**: Exporta todo el historial de conversaci√≥n a un archivo JSON para futura referencia.

```python
# Cargar conversaci√≥n
agent.load_conversation("mi_conversacion.json")
```

**Qu√© hace**: Importa un historial de conversaci√≥n previo desde un archivo JSON.

### Estad√≠sticas

```python
# Obtener estad√≠sticas del agente
stats = agent.get_stats()
print(f"Funciones registradas: {stats['functions_count']}")
print(f"Longitud de conversaci√≥n: {stats['conversation_length']}")
```

**Qu√© hace**: Retorna un diccionario con informaci√≥n sobre el estado actual del agente: n√∫mero de funciones, longitud del historial, etc.

---

## ‚öôÔ∏è Configuraci√≥n (Config.py)

### Prop√≥sito

La clase `Config` gestiona:
- Variables de entorno
- Configuraciones globales
- Credenciales de API

### Uso

```python
from core.config.Config import config

# La API key se carga autom√°ticamente desde .env
api_key = config.deepseek_api
```

### Variables de Entorno

Crear archivo `.env`:
```env
DEEPSEEK_API_KEY=tu_api_key_aqui
```

---

## üìÅ Estructura de Proyecto Recomendada

### Example1 - An√°lisis de Excel

```
example1/
‚îú‚îÄ‚îÄ __init__.py
‚îú‚îÄ‚îÄ app.py                    # Punto de entrada del ejemplo
‚îú‚îÄ‚îÄ schemas/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îî‚îÄ‚îÄ schema_excel.py       # Schema para funciones de Excel
‚îî‚îÄ‚îÄ tools/
    ‚îú‚îÄ‚îÄ __init__.py
    ‚îî‚îÄ‚îÄ extract_information_excel.py  # Herramienta de an√°lisis
```

**Ventajas de esta Estructura**:
- **Modularidad**: Cada ejemplo es independiente
- **Escalabilidad**: F√°cil agregar nuevos ejemplos
- **Reutilizaci√≥n**: Schemas y tools compartidas
- **Mantenimiento**: Separaci√≥n clara de responsabilidades

---

## üîÑ Flujo de Trabajo Detallado - Paso a Paso

### Paso 1: Preparaci√≥n del Entorno

```python
# 1.1 Instalar dependencias
# pip install openai python-dotenv pandas

# 1.2 Configurar variables de entorno
# Crear archivo .env con DEEPSEEK_API_KEY=tu_clave
```

### Paso 2: Importar y Crear el Agente

```python
from core.DeepSeekAgent import DeepSeekAgent

# 2.1 Instanciar el agente
agent = DeepSeekAgent()
```

**Lo que sucede internamente**:
- Se carga la configuraci√≥n de API
- Se inicializa el cliente OpenAI con la URL de DeepSeek
- Se preparan los diccionarios para funciones y schemas
- Se configura el sistema de logging

### Paso 3: Configurar la Personalidad del Agente

```python
# 3.1 Definir el comportamiento del agente
agent.add_system_message(
    "Eres un analista de datos experto especializado en Excel. "
    "Proporcionas insights claros y an√°lisis detallados."
)
```

**Lo que sucede**:
- Se agrega o reemplaza el mensaje del sistema
- Este mensaje gu√≠a todas las respuestas del agente

### Paso 4: Crear y Registrar Tools

```python
# 4.1 Definir la funci√≥n/tool
def analizar_excel(file_path: str) -> str:
    """Analiza un archivo Excel y retorna informaci√≥n b√°sica"""
    try:
        import pandas as pd
        df = pd.read_excel(file_path)
        
        info = {
            "filas": len(df),
            "columnas": list(df.columns),
            "muestra": df.head(3).to_dict('records')
        }
        return json.dumps(info, indent=2, default=str)
    except Exception as e:
        return f"Error: {str(e)}"

# 4.2 Definir el schema
schema_excel = {
    "type": "function",
    "function": {
        "name": "analizar_excel",
        "description": "Analiza archivo Excel y extrae informaci√≥n b√°sica",
        "parameters": {
            "type": "object",
            "properties": {
                "file_path": {
                    "type": "string",
                    "description": "Ruta del archivo Excel a analizar"
                }
            },
            "required": ["file_path"]
        }
    }
}

# 4.3 Registrar la funci√≥n en el agente
agent.add_function(analizar_excel, schema_excel)
```

**Lo que sucede al registrar**:
- Se valida que el schema est√© bien formado
- Se almacena la funci√≥n en el diccionario de funciones disponibles
- Se agrega el schema a la lista de herramientas del agente

### Paso 5: Iniciar la Conversaci√≥n

```python
# 5.1 Enviar mensaje del usuario
mensaje_usuario = "Analiza el archivo datos_ventas.xlsx y dame un resumen"
respuesta = agent.chat(mensaje_usuario)
```

**Proceso interno detallado**:

1. **Evaluaci√≥n del mensaje**: El agente analiza si necesita usar funciones
2. **Construcci√≥n de par√°metros**: Se prepara la llamada a la API con el historial y las tools disponibles
3. **Llamada al modelo**: DeepSeek eval√∫a el mensaje y decide ejecutar funciones
4. **Identificaci√≥n de funci√≥n**: El modelo identifica que necesita `analizar_excel`
5. **Extracci√≥n de par√°metros**: Extrae `file_path = "datos_ventas.xlsx"`
6. **Ejecuci√≥n de funci√≥n**: Se ejecuta la funci√≥n Python con los par√°metros
7. **Procesamiento de resultado**: Se agrega el resultado al historial
8. **Respuesta final**: Nueva llamada al modelo para generar respuesta basada en los resultados

### Paso 6: An√°lisis del Resultado

```python
# 6.1 El agente retorna una respuesta integrada
print(respuesta)

# Ejemplo de respuesta:
# "He analizado el archivo datos_ventas.xlsx. El archivo contiene 1,250 filas 
# de datos con las columnas: fecha, producto, ventas, regi√≥n. Los datos muestran
# ventas de productos tecnol√≥gicos en diferentes regiones..."
```

### Paso 7: Conversaci√≥n Continua

```python
# 7.1 Seguir la conversaci√≥n
respuesta2 = agent.chat("¬øCu√°l es la regi√≥n con m√°s ventas?")

# 7.2 El agente puede volver a usar las funciones o responder basado en contexto previo
```

### Paso 8: Gesti√≥n del Historial

```python
# 8.1 Ver estad√≠sticas
stats = agent.get_stats()
print(f"Mensajes en conversaci√≥n: {stats['conversation_length']}")

# 8.2 Guardar conversaci√≥n para an√°lisis posterior
agent.save_conversation("sesion_analisis_ventas.json")

# 8.3 Limpiar historial para nueva sesi√≥n
agent.clear_history(keep_system=True)
```

### Ejemplo Completo Funcional

```python
# script_completo.py
from core.DeepSeekAgent import DeepSeekAgent
import pandas as pd
import json

def main():
    # Paso 1: Crear agente
    agent = DeepSeekAgent()
    
    # Paso 2: Configurar personalidad
    agent.add_system_message("Eres un analista de datos experto.")
    
    # Paso 3: Definir tool
    def analizar_datos(archivo: str) -> str:
        try:
            df = pd.read_excel(archivo)
            return f"Archivo analizado: {len(df)} filas, columnas: {list(df.columns)}"
        except Exception as e:
            return f"Error: {str(e)}"
    
    # Paso 4: Definir schema
    schema = {
        "type": "function",
        "function": {
            "name": "analizar_datos",
            "description": "Analiza archivos Excel",
            "parameters": {
                "type": "object",
                "properties": {
                    "archivo": {"type": "string", "description": "Ruta del archivo"}
                },
                "required": ["archivo"]
            }
        }
    }
    
    # Paso 5: Registrar funci√≥n
    agent.add_function(analizar_datos, schema)
    
    # Paso 6: Interactuar
    respuesta = agent.chat("Analiza el archivo ventas.xlsx")
    print(respuesta)

if __name__ == "__main__":
    main()
```

---

## üìù Mejores Pr√°cticas

### Para Schemas
- Descripciones claras y espec√≠ficas
- Validaciones apropiadas (min/max, enum, etc.)
- Manejo de par√°metros opcionales

### Para Tools
- Manejo robusto de errores
- Retorno de strings descriptivos
- Validaci√≥n de par√°metros de entrada

### Para el Agente
- Mensajes del sistema espec√≠ficos al dominio
- Limpieza peri√≥dica del historial
- Uso apropiado del modelo de razonamiento para problemas complejos

### Para el Flujo de Trabajo
- Siempre validar que las funciones manejen errores
- Testear funciones independientemente antes de registrarlas
- Usar nombres descriptivos para funciones y par√°metros
- Mantener el historial organizado con guardado peri√≥dico

---

Esta biblioteca proporciona una base s√≥lida para crear asistentes de IA especializados con capacidades extendidas a trav√©s de function calling, manteniendo simplicidad en el uso y flexibilidad en la implementaci√≥n.
