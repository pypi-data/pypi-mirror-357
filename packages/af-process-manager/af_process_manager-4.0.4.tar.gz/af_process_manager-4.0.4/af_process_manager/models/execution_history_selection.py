# coding: utf-8

"""
    AristaFlowREST/ProcessManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExecutionHistorySelection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'LongFilter',
        'timestamp': 'InstantFilter',
        'inst_log_id': 'UuidFilter',
        'node_id': 'IntegerFilter',
        'node_iteration': 'IntegerFilter',
        'state_change': 'StateChangeFilter',
        'agent_id': 'LongFilter',
        'agent_org_pos_id': 'LongFilter',
        'client_delay': 'LongFilter',
        'arbitrary_string': 'StringFilter',
        'template_name': 'StringFilter',
        'instance_name': 'StringFilter',
        'node_name': 'StringFilter',
        'supports_view_only': 'BooleanFilter',
        'error_data': 'ErrorDataFilter',
        'exec_mgr_uris': 'StringFilter'
    }

    attribute_map = {
        'id': 'id',
        'timestamp': 'timestamp',
        'inst_log_id': 'instLogId',
        'node_id': 'nodeId',
        'node_iteration': 'nodeIteration',
        'state_change': 'stateChange',
        'agent_id': 'agentId',
        'agent_org_pos_id': 'agentOrgPosId',
        'client_delay': 'clientDelay',
        'arbitrary_string': 'arbitraryString',
        'template_name': 'templateName',
        'instance_name': 'instanceName',
        'node_name': 'nodeName',
        'supports_view_only': 'supportsViewOnly',
        'error_data': 'errorData',
        'exec_mgr_uris': 'execMgrUris'
    }

    def __init__(self, id=None, timestamp=None, inst_log_id=None, node_id=None, node_iteration=None, state_change=None, agent_id=None, agent_org_pos_id=None, client_delay=None, arbitrary_string=None, template_name=None, instance_name=None, node_name=None, supports_view_only=None, error_data=None, exec_mgr_uris=None):  # noqa: E501
        """ExecutionHistorySelection - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._timestamp = None
        self._inst_log_id = None
        self._node_id = None
        self._node_iteration = None
        self._state_change = None
        self._agent_id = None
        self._agent_org_pos_id = None
        self._client_delay = None
        self._arbitrary_string = None
        self._template_name = None
        self._instance_name = None
        self._node_name = None
        self._supports_view_only = None
        self._error_data = None
        self._exec_mgr_uris = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        if id is not None:
            self.id = id
        if timestamp is not None:
            self.timestamp = timestamp
        if inst_log_id is not None:
            self.inst_log_id = inst_log_id
        if node_id is not None:
            self.node_id = node_id
        if node_iteration is not None:
            self.node_iteration = node_iteration
        if state_change is not None:
            self.state_change = state_change
        if agent_id is not None:
            self.agent_id = agent_id
        if agent_org_pos_id is not None:
            self.agent_org_pos_id = agent_org_pos_id
        if client_delay is not None:
            self.client_delay = client_delay
        if arbitrary_string is not None:
            self.arbitrary_string = arbitrary_string
        if template_name is not None:
            self.template_name = template_name
        if instance_name is not None:
            self.instance_name = instance_name
        if node_name is not None:
            self.node_name = node_name
        if supports_view_only is not None:
            self.supports_view_only = supports_view_only
        if error_data is not None:
            self.error_data = error_data
        if exec_mgr_uris is not None:
            self.exec_mgr_uris = exec_mgr_uris

    @property
    def id(self):
        """Gets the id of this ExecutionHistorySelection.  # noqa: E501


        :return: The id of this ExecutionHistorySelection.  # noqa: E501
        :rtype: LongFilter
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExecutionHistorySelection.


        :param id: The id of this ExecutionHistorySelection.  # noqa: E501
        :type: LongFilter
        """

        self._id = id

    @property
    def timestamp(self):
        """Gets the timestamp of this ExecutionHistorySelection.  # noqa: E501


        :return: The timestamp of this ExecutionHistorySelection.  # noqa: E501
        :rtype: InstantFilter
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ExecutionHistorySelection.


        :param timestamp: The timestamp of this ExecutionHistorySelection.  # noqa: E501
        :type: InstantFilter
        """

        self._timestamp = timestamp

    @property
    def inst_log_id(self):
        """Gets the inst_log_id of this ExecutionHistorySelection.  # noqa: E501


        :return: The inst_log_id of this ExecutionHistorySelection.  # noqa: E501
        :rtype: UuidFilter
        """
        return self._inst_log_id

    @inst_log_id.setter
    def inst_log_id(self, inst_log_id):
        """Sets the inst_log_id of this ExecutionHistorySelection.


        :param inst_log_id: The inst_log_id of this ExecutionHistorySelection.  # noqa: E501
        :type: UuidFilter
        """

        self._inst_log_id = inst_log_id

    @property
    def node_id(self):
        """Gets the node_id of this ExecutionHistorySelection.  # noqa: E501


        :return: The node_id of this ExecutionHistorySelection.  # noqa: E501
        :rtype: IntegerFilter
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this ExecutionHistorySelection.


        :param node_id: The node_id of this ExecutionHistorySelection.  # noqa: E501
        :type: IntegerFilter
        """

        self._node_id = node_id

    @property
    def node_iteration(self):
        """Gets the node_iteration of this ExecutionHistorySelection.  # noqa: E501


        :return: The node_iteration of this ExecutionHistorySelection.  # noqa: E501
        :rtype: IntegerFilter
        """
        return self._node_iteration

    @node_iteration.setter
    def node_iteration(self, node_iteration):
        """Sets the node_iteration of this ExecutionHistorySelection.


        :param node_iteration: The node_iteration of this ExecutionHistorySelection.  # noqa: E501
        :type: IntegerFilter
        """

        self._node_iteration = node_iteration

    @property
    def state_change(self):
        """Gets the state_change of this ExecutionHistorySelection.  # noqa: E501


        :return: The state_change of this ExecutionHistorySelection.  # noqa: E501
        :rtype: StateChangeFilter
        """
        return self._state_change

    @state_change.setter
    def state_change(self, state_change):
        """Sets the state_change of this ExecutionHistorySelection.


        :param state_change: The state_change of this ExecutionHistorySelection.  # noqa: E501
        :type: StateChangeFilter
        """

        self._state_change = state_change

    @property
    def agent_id(self):
        """Gets the agent_id of this ExecutionHistorySelection.  # noqa: E501


        :return: The agent_id of this ExecutionHistorySelection.  # noqa: E501
        :rtype: LongFilter
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """Sets the agent_id of this ExecutionHistorySelection.


        :param agent_id: The agent_id of this ExecutionHistorySelection.  # noqa: E501
        :type: LongFilter
        """

        self._agent_id = agent_id

    @property
    def agent_org_pos_id(self):
        """Gets the agent_org_pos_id of this ExecutionHistorySelection.  # noqa: E501


        :return: The agent_org_pos_id of this ExecutionHistorySelection.  # noqa: E501
        :rtype: LongFilter
        """
        return self._agent_org_pos_id

    @agent_org_pos_id.setter
    def agent_org_pos_id(self, agent_org_pos_id):
        """Sets the agent_org_pos_id of this ExecutionHistorySelection.


        :param agent_org_pos_id: The agent_org_pos_id of this ExecutionHistorySelection.  # noqa: E501
        :type: LongFilter
        """

        self._agent_org_pos_id = agent_org_pos_id

    @property
    def client_delay(self):
        """Gets the client_delay of this ExecutionHistorySelection.  # noqa: E501


        :return: The client_delay of this ExecutionHistorySelection.  # noqa: E501
        :rtype: LongFilter
        """
        return self._client_delay

    @client_delay.setter
    def client_delay(self, client_delay):
        """Sets the client_delay of this ExecutionHistorySelection.


        :param client_delay: The client_delay of this ExecutionHistorySelection.  # noqa: E501
        :type: LongFilter
        """

        self._client_delay = client_delay

    @property
    def arbitrary_string(self):
        """Gets the arbitrary_string of this ExecutionHistorySelection.  # noqa: E501


        :return: The arbitrary_string of this ExecutionHistorySelection.  # noqa: E501
        :rtype: StringFilter
        """
        return self._arbitrary_string

    @arbitrary_string.setter
    def arbitrary_string(self, arbitrary_string):
        """Sets the arbitrary_string of this ExecutionHistorySelection.


        :param arbitrary_string: The arbitrary_string of this ExecutionHistorySelection.  # noqa: E501
        :type: StringFilter
        """

        self._arbitrary_string = arbitrary_string

    @property
    def template_name(self):
        """Gets the template_name of this ExecutionHistorySelection.  # noqa: E501


        :return: The template_name of this ExecutionHistorySelection.  # noqa: E501
        :rtype: StringFilter
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this ExecutionHistorySelection.


        :param template_name: The template_name of this ExecutionHistorySelection.  # noqa: E501
        :type: StringFilter
        """

        self._template_name = template_name

    @property
    def instance_name(self):
        """Gets the instance_name of this ExecutionHistorySelection.  # noqa: E501


        :return: The instance_name of this ExecutionHistorySelection.  # noqa: E501
        :rtype: StringFilter
        """
        return self._instance_name

    @instance_name.setter
    def instance_name(self, instance_name):
        """Sets the instance_name of this ExecutionHistorySelection.


        :param instance_name: The instance_name of this ExecutionHistorySelection.  # noqa: E501
        :type: StringFilter
        """

        self._instance_name = instance_name

    @property
    def node_name(self):
        """Gets the node_name of this ExecutionHistorySelection.  # noqa: E501


        :return: The node_name of this ExecutionHistorySelection.  # noqa: E501
        :rtype: StringFilter
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this ExecutionHistorySelection.


        :param node_name: The node_name of this ExecutionHistorySelection.  # noqa: E501
        :type: StringFilter
        """

        self._node_name = node_name

    @property
    def supports_view_only(self):
        """Gets the supports_view_only of this ExecutionHistorySelection.  # noqa: E501


        :return: The supports_view_only of this ExecutionHistorySelection.  # noqa: E501
        :rtype: BooleanFilter
        """
        return self._supports_view_only

    @supports_view_only.setter
    def supports_view_only(self, supports_view_only):
        """Sets the supports_view_only of this ExecutionHistorySelection.


        :param supports_view_only: The supports_view_only of this ExecutionHistorySelection.  # noqa: E501
        :type: BooleanFilter
        """

        self._supports_view_only = supports_view_only

    @property
    def error_data(self):
        """Gets the error_data of this ExecutionHistorySelection.  # noqa: E501


        :return: The error_data of this ExecutionHistorySelection.  # noqa: E501
        :rtype: ErrorDataFilter
        """
        return self._error_data

    @error_data.setter
    def error_data(self, error_data):
        """Sets the error_data of this ExecutionHistorySelection.


        :param error_data: The error_data of this ExecutionHistorySelection.  # noqa: E501
        :type: ErrorDataFilter
        """

        self._error_data = error_data

    @property
    def exec_mgr_uris(self):
        """Gets the exec_mgr_uris of this ExecutionHistorySelection.  # noqa: E501


        :return: The exec_mgr_uris of this ExecutionHistorySelection.  # noqa: E501
        :rtype: StringFilter
        """
        return self._exec_mgr_uris

    @exec_mgr_uris.setter
    def exec_mgr_uris(self, exec_mgr_uris):
        """Sets the exec_mgr_uris of this ExecutionHistorySelection.


        :param exec_mgr_uris: The exec_mgr_uris of this ExecutionHistorySelection.  # noqa: E501
        :type: StringFilter
        """

        self._exec_mgr_uris = exec_mgr_uris

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExecutionHistorySelection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExecutionHistorySelection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
