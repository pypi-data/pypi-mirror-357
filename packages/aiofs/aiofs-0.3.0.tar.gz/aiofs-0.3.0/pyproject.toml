[tool.poetry]
name = "aiofs"
version = "0.3.0"
description = "Wrap data sources like files with asyncio python"
authors = ["Salvador Ruiz <salvador.ruiz.r@gmail.com>"]
license = "LGPL"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
redis = {version = "^5.0.1", optional = true}
azure-storage-blob = {version = "^12.19.0", optional = true}
aiofiles = "^24.1.0"
aiohttp = "^3.11.10"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.extras]
redis = ["redis"]
azure = ["aiohttp", "azure-storage-blob"]

[tool.poetry.group.dev.dependencies]
black = "^23.3.0"
pytest = "^7.3.1"
isort = "^5.12.0"
flake8 = "^6.0.0"
pyright = "^1.1.309"
pre-commit = "^3.3.2"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
commitizen = "^3.6.0"
ipython = "^8.22.2"
pytest-nunit = "^1.0.7"

[tool.commitizen]
name = "cz_conventional_commits"
bump_message = "bump: version $current_version â†’ $new_version [skip ci]"
tag_format = "v$version"
version_scheme = "pep440"
version_provider = "poetry"
# update_changelog_on_bump = true

[tool.commitizen.customize]
# Dont work because name != "cz_customize"
bump_pattern = "^(break|new|fix|hotfix|cicd|build|doc|refactor)"
bump_map = {"break" = "MAJOR", "new" = "MINOR", "fix" = "PATCH", "hotfix" = "PATCH", "cicd" = "PATCH", "build" = "PATCH", "doc" = "PATCH", "refactor" = "PATCH"}


[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = [
    "tests"
]
python_files = "test_* feat_*"
python_classes = "A_* An_* UseCase_* Test*"
python_functions = "should_* scenario_* test_*"
markers = [
    "integration: tests comunication to simulated external systems(devel mode)",
    "acceptance: test application layer as external user",
    "skip_publish: Skip publishing coverage data"
]
asyncio_mode = "auto"


[tool.coverage.report]
exclude_lines = [
    "\\.\\.\\.",  # Matches ellipses (...)
    "pragma: no cover",  # Matches pragma-based exclusions
]
