# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type
from ..types.support_ticket_response import SupportTicketResponse
from .types.create_support_ticket_dto_bug_subcategory import CreateSupportTicketDtoBugSubcategory
from .types.create_support_ticket_dto_category import CreateSupportTicketDtoCategory

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawSupportClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def support_controller_create_ticket(
        self,
        *,
        category: CreateSupportTicketDtoCategory,
        subject: str,
        message: str,
        bug_subcategory: typing.Optional[CreateSupportTicketDtoBugSubcategory] = OMIT,
        call_details: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[SupportTicketResponse]:
        """
        Parameters
        ----------
        category : CreateSupportTicketDtoCategory
            The category of the support request

        subject : str
            The subject/title of the support request

        message : str
            Detailed description of the issue or request

        bug_subcategory : typing.Optional[CreateSupportTicketDtoBugSubcategory]
            The subcategory for bug reports

        call_details : typing.Optional[str]
            Call IDs and recording URLs if applicable

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[SupportTicketResponse]

        """
        _response = self._client_wrapper.httpx_client.request(
            "support/ticket",
            method="POST",
            json={
                "category": category,
                "bugSubcategory": bug_subcategory,
                "subject": subject,
                "message": message,
                "callDetails": call_details,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SupportTicketResponse,
                    construct_type(
                        type_=SupportTicketResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawSupportClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def support_controller_create_ticket(
        self,
        *,
        category: CreateSupportTicketDtoCategory,
        subject: str,
        message: str,
        bug_subcategory: typing.Optional[CreateSupportTicketDtoBugSubcategory] = OMIT,
        call_details: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[SupportTicketResponse]:
        """
        Parameters
        ----------
        category : CreateSupportTicketDtoCategory
            The category of the support request

        subject : str
            The subject/title of the support request

        message : str
            Detailed description of the issue or request

        bug_subcategory : typing.Optional[CreateSupportTicketDtoBugSubcategory]
            The subcategory for bug reports

        call_details : typing.Optional[str]
            Call IDs and recording URLs if applicable

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[SupportTicketResponse]

        """
        _response = await self._client_wrapper.httpx_client.request(
            "support/ticket",
            method="POST",
            json={
                "category": category,
                "bugSubcategory": bug_subcategory,
                "subject": subject,
                "message": message,
                "callDetails": call_details,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SupportTicketResponse,
                    construct_type(
                        type_=SupportTicketResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
