# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.24.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dragonk8s.dragon.configuration import Configuration


class IoDragonAppsV1JobStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active': 'int',
        'completed_indexes': 'str',
        'completion_time': 'datetime',
        'conditions': 'list[IoDragonAppsV1JobStatusConditions]',
        'failed': 'int',
        'ready': 'int',
        'start_time': 'datetime',
        'succeeded': 'int',
        'uncounted_terminated_pods': 'IoDragonAppsV1JobStatusUncountedTerminatedPods'
    }

    attribute_map = {
        'active': 'active',
        'completed_indexes': 'completedIndexes',
        'completion_time': 'completionTime',
        'conditions': 'conditions',
        'failed': 'failed',
        'ready': 'ready',
        'start_time': 'startTime',
        'succeeded': 'succeeded',
        'uncounted_terminated_pods': 'uncountedTerminatedPods'
    }

    def __init__(self, active=None, completed_indexes=None, completion_time=None, conditions=None, failed=None, ready=None, start_time=None, succeeded=None, uncounted_terminated_pods=None, local_vars_configuration=None):  # noqa: E501
        """IoDragonAppsV1JobStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._active = None
        self._completed_indexes = None
        self._completion_time = None
        self._conditions = None
        self._failed = None
        self._ready = None
        self._start_time = None
        self._succeeded = None
        self._uncounted_terminated_pods = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if completed_indexes is not None:
            self.completed_indexes = completed_indexes
        if completion_time is not None:
            self.completion_time = completion_time
        if conditions is not None:
            self.conditions = conditions
        if failed is not None:
            self.failed = failed
        if ready is not None:
            self.ready = ready
        if start_time is not None:
            self.start_time = start_time
        if succeeded is not None:
            self.succeeded = succeeded
        if uncounted_terminated_pods is not None:
            self.uncounted_terminated_pods = uncounted_terminated_pods

    @property
    def active(self):
        """Gets the active of this IoDragonAppsV1JobStatus.  # noqa: E501


        :return: The active of this IoDragonAppsV1JobStatus.  # noqa: E501
        :rtype: int
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this IoDragonAppsV1JobStatus.


        :param active: The active of this IoDragonAppsV1JobStatus.  # noqa: E501
        :type: int
        """

        self._active = active

    @property
    def completed_indexes(self):
        """Gets the completed_indexes of this IoDragonAppsV1JobStatus.  # noqa: E501


        :return: The completed_indexes of this IoDragonAppsV1JobStatus.  # noqa: E501
        :rtype: str
        """
        return self._completed_indexes

    @completed_indexes.setter
    def completed_indexes(self, completed_indexes):
        """Sets the completed_indexes of this IoDragonAppsV1JobStatus.


        :param completed_indexes: The completed_indexes of this IoDragonAppsV1JobStatus.  # noqa: E501
        :type: str
        """

        self._completed_indexes = completed_indexes

    @property
    def completion_time(self):
        """Gets the completion_time of this IoDragonAppsV1JobStatus.  # noqa: E501


        :return: The completion_time of this IoDragonAppsV1JobStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._completion_time

    @completion_time.setter
    def completion_time(self, completion_time):
        """Sets the completion_time of this IoDragonAppsV1JobStatus.


        :param completion_time: The completion_time of this IoDragonAppsV1JobStatus.  # noqa: E501
        :type: datetime
        """

        self._completion_time = completion_time

    @property
    def conditions(self):
        """Gets the conditions of this IoDragonAppsV1JobStatus.  # noqa: E501


        :return: The conditions of this IoDragonAppsV1JobStatus.  # noqa: E501
        :rtype: list[IoDragonAppsV1JobStatusConditions]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this IoDragonAppsV1JobStatus.


        :param conditions: The conditions of this IoDragonAppsV1JobStatus.  # noqa: E501
        :type: list[IoDragonAppsV1JobStatusConditions]
        """

        self._conditions = conditions

    @property
    def failed(self):
        """Gets the failed of this IoDragonAppsV1JobStatus.  # noqa: E501


        :return: The failed of this IoDragonAppsV1JobStatus.  # noqa: E501
        :rtype: int
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this IoDragonAppsV1JobStatus.


        :param failed: The failed of this IoDragonAppsV1JobStatus.  # noqa: E501
        :type: int
        """

        self._failed = failed

    @property
    def ready(self):
        """Gets the ready of this IoDragonAppsV1JobStatus.  # noqa: E501


        :return: The ready of this IoDragonAppsV1JobStatus.  # noqa: E501
        :rtype: int
        """
        return self._ready

    @ready.setter
    def ready(self, ready):
        """Sets the ready of this IoDragonAppsV1JobStatus.


        :param ready: The ready of this IoDragonAppsV1JobStatus.  # noqa: E501
        :type: int
        """

        self._ready = ready

    @property
    def start_time(self):
        """Gets the start_time of this IoDragonAppsV1JobStatus.  # noqa: E501


        :return: The start_time of this IoDragonAppsV1JobStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this IoDragonAppsV1JobStatus.


        :param start_time: The start_time of this IoDragonAppsV1JobStatus.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def succeeded(self):
        """Gets the succeeded of this IoDragonAppsV1JobStatus.  # noqa: E501


        :return: The succeeded of this IoDragonAppsV1JobStatus.  # noqa: E501
        :rtype: int
        """
        return self._succeeded

    @succeeded.setter
    def succeeded(self, succeeded):
        """Sets the succeeded of this IoDragonAppsV1JobStatus.


        :param succeeded: The succeeded of this IoDragonAppsV1JobStatus.  # noqa: E501
        :type: int
        """

        self._succeeded = succeeded

    @property
    def uncounted_terminated_pods(self):
        """Gets the uncounted_terminated_pods of this IoDragonAppsV1JobStatus.  # noqa: E501


        :return: The uncounted_terminated_pods of this IoDragonAppsV1JobStatus.  # noqa: E501
        :rtype: IoDragonAppsV1JobStatusUncountedTerminatedPods
        """
        return self._uncounted_terminated_pods

    @uncounted_terminated_pods.setter
    def uncounted_terminated_pods(self, uncounted_terminated_pods):
        """Sets the uncounted_terminated_pods of this IoDragonAppsV1JobStatus.


        :param uncounted_terminated_pods: The uncounted_terminated_pods of this IoDragonAppsV1JobStatus.  # noqa: E501
        :type: IoDragonAppsV1JobStatusUncountedTerminatedPods
        """

        self._uncounted_terminated_pods = uncounted_terminated_pods

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoDragonAppsV1JobStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoDragonAppsV1JobStatus):
            return True

        return self.to_dict() != other.to_dict()
