# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..types.user_request import UserRequest
from ..types.organization_request import OrganizationRequest
from ..types.workspace_request import WorkspaceRequest
from ..types.project_request import ProjectRequest
from ..types.organization_membership_request import OrganizationMembershipRequest
from ..types.workspace_membership_request import WorkspaceMembershipRequest
from ..types.project_membership_request import ProjectMembershipRequest
from ..core.request_options import RequestOptions
from ..types.scopes_response_model import ScopesResponseModel
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.legacy_user_request import LegacyUserRequest
from ..types.legacy_scope_request import LegacyScopeRequest
from ..types.account_response import AccountResponse
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AdminClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create_accounts(
        self,
        *,
        users: typing.Dict[str, UserRequest],
        organizations: typing.Dict[str, OrganizationRequest],
        workspaces: typing.Dict[str, WorkspaceRequest],
        projects: typing.Dict[str, ProjectRequest],
        organization_memberships: typing.Dict[str, OrganizationMembershipRequest],
        workspace_memberships: typing.Dict[str, WorkspaceMembershipRequest],
        project_memberships: typing.Dict[str, ProjectMembershipRequest],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ScopesResponseModel:
        """
        Parameters
        ----------
        users : typing.Dict[str, UserRequest]

        organizations : typing.Dict[str, OrganizationRequest]

        workspaces : typing.Dict[str, WorkspaceRequest]

        projects : typing.Dict[str, ProjectRequest]

        organization_memberships : typing.Dict[str, OrganizationMembershipRequest]

        workspace_memberships : typing.Dict[str, WorkspaceMembershipRequest]

        project_memberships : typing.Dict[str, ProjectMembershipRequest]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ScopesResponseModel
            Successful Response

        Examples
        --------
        from agenta import (
            AgentaApi,
            OrganizationMembershipRequest,
            OrganizationRequest,
            ProjectMembershipRequest,
            ProjectRequest,
            Reference,
            UserRequest,
            WorkspaceMembershipRequest,
            WorkspaceRequest,
        )

        client = AgentaApi(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.admin.create_accounts(
            users={
                "key": UserRequest(
                    name="name",
                    email="email",
                )
            },
            organizations={
                "key": OrganizationRequest(
                    name="name",
                    description="description",
                    is_paying=True,
                )
            },
            workspaces={
                "key": WorkspaceRequest(
                    name="name",
                    description="description",
                    is_default=True,
                    organization_ref=Reference(),
                )
            },
            projects={
                "key": ProjectRequest(
                    name="name",
                    description="description",
                    is_default=True,
                    workspace_ref=Reference(),
                    organization_ref=Reference(),
                )
            },
            organization_memberships={
                "key": OrganizationMembershipRequest(
                    role="owner",
                    is_demo=True,
                    user_ref=Reference(),
                    organization_ref=Reference(),
                )
            },
            workspace_memberships={
                "key": WorkspaceMembershipRequest(
                    role="owner",
                    is_demo=True,
                    user_ref=Reference(),
                    workspace_ref=Reference(),
                )
            },
            project_memberships={
                "key": ProjectMembershipRequest(
                    role="owner",
                    is_demo=True,
                    user_ref=Reference(),
                    project_ref=Reference(),
                )
            },
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "admin/accounts",
            method="POST",
            json={
                "users": convert_and_respect_annotation_metadata(
                    object_=users,
                    annotation=typing.Dict[str, UserRequest],
                    direction="write",
                ),
                "organizations": convert_and_respect_annotation_metadata(
                    object_=organizations,
                    annotation=typing.Dict[str, OrganizationRequest],
                    direction="write",
                ),
                "workspaces": convert_and_respect_annotation_metadata(
                    object_=workspaces,
                    annotation=typing.Dict[str, WorkspaceRequest],
                    direction="write",
                ),
                "projects": convert_and_respect_annotation_metadata(
                    object_=projects,
                    annotation=typing.Dict[str, ProjectRequest],
                    direction="write",
                ),
                "organization_memberships": convert_and_respect_annotation_metadata(
                    object_=organization_memberships,
                    annotation=typing.Dict[str, OrganizationMembershipRequest],
                    direction="write",
                ),
                "workspace_memberships": convert_and_respect_annotation_metadata(
                    object_=workspace_memberships,
                    annotation=typing.Dict[str, WorkspaceMembershipRequest],
                    direction="write",
                ),
                "project_memberships": convert_and_respect_annotation_metadata(
                    object_=project_memberships,
                    annotation=typing.Dict[str, ProjectMembershipRequest],
                    direction="write",
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ScopesResponseModel,
                    parse_obj_as(
                        type_=ScopesResponseModel,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_account(
        self,
        *,
        user: LegacyUserRequest,
        scope: LegacyScopeRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AccountResponse:
        """
        Parameters
        ----------
        user : LegacyUserRequest

        scope : LegacyScopeRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccountResponse
            Successful Response

        Examples
        --------
        from agenta import AgentaApi, LegacyScopeRequest, LegacyUserRequest

        client = AgentaApi(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.admin.create_account(
            user=LegacyUserRequest(
                name="name",
                email="email",
            ),
            scope=LegacyScopeRequest(
                name="name",
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "admin/account",
            method="POST",
            json={
                "user": convert_and_respect_annotation_metadata(
                    object_=user, annotation=LegacyUserRequest, direction="write"
                ),
                "scope": convert_and_respect_annotation_metadata(
                    object_=scope, annotation=LegacyScopeRequest, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AccountResponse,
                    parse_obj_as(
                        type_=AccountResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncAdminClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create_accounts(
        self,
        *,
        users: typing.Dict[str, UserRequest],
        organizations: typing.Dict[str, OrganizationRequest],
        workspaces: typing.Dict[str, WorkspaceRequest],
        projects: typing.Dict[str, ProjectRequest],
        organization_memberships: typing.Dict[str, OrganizationMembershipRequest],
        workspace_memberships: typing.Dict[str, WorkspaceMembershipRequest],
        project_memberships: typing.Dict[str, ProjectMembershipRequest],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ScopesResponseModel:
        """
        Parameters
        ----------
        users : typing.Dict[str, UserRequest]

        organizations : typing.Dict[str, OrganizationRequest]

        workspaces : typing.Dict[str, WorkspaceRequest]

        projects : typing.Dict[str, ProjectRequest]

        organization_memberships : typing.Dict[str, OrganizationMembershipRequest]

        workspace_memberships : typing.Dict[str, WorkspaceMembershipRequest]

        project_memberships : typing.Dict[str, ProjectMembershipRequest]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ScopesResponseModel
            Successful Response

        Examples
        --------
        import asyncio

        from agenta import (
            AsyncAgentaApi,
            OrganizationMembershipRequest,
            OrganizationRequest,
            ProjectMembershipRequest,
            ProjectRequest,
            Reference,
            UserRequest,
            WorkspaceMembershipRequest,
            WorkspaceRequest,
        )

        client = AsyncAgentaApi(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.admin.create_accounts(
                users={
                    "key": UserRequest(
                        name="name",
                        email="email",
                    )
                },
                organizations={
                    "key": OrganizationRequest(
                        name="name",
                        description="description",
                        is_paying=True,
                    )
                },
                workspaces={
                    "key": WorkspaceRequest(
                        name="name",
                        description="description",
                        is_default=True,
                        organization_ref=Reference(),
                    )
                },
                projects={
                    "key": ProjectRequest(
                        name="name",
                        description="description",
                        is_default=True,
                        workspace_ref=Reference(),
                        organization_ref=Reference(),
                    )
                },
                organization_memberships={
                    "key": OrganizationMembershipRequest(
                        role="owner",
                        is_demo=True,
                        user_ref=Reference(),
                        organization_ref=Reference(),
                    )
                },
                workspace_memberships={
                    "key": WorkspaceMembershipRequest(
                        role="owner",
                        is_demo=True,
                        user_ref=Reference(),
                        workspace_ref=Reference(),
                    )
                },
                project_memberships={
                    "key": ProjectMembershipRequest(
                        role="owner",
                        is_demo=True,
                        user_ref=Reference(),
                        project_ref=Reference(),
                    )
                },
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "admin/accounts",
            method="POST",
            json={
                "users": convert_and_respect_annotation_metadata(
                    object_=users,
                    annotation=typing.Dict[str, UserRequest],
                    direction="write",
                ),
                "organizations": convert_and_respect_annotation_metadata(
                    object_=organizations,
                    annotation=typing.Dict[str, OrganizationRequest],
                    direction="write",
                ),
                "workspaces": convert_and_respect_annotation_metadata(
                    object_=workspaces,
                    annotation=typing.Dict[str, WorkspaceRequest],
                    direction="write",
                ),
                "projects": convert_and_respect_annotation_metadata(
                    object_=projects,
                    annotation=typing.Dict[str, ProjectRequest],
                    direction="write",
                ),
                "organization_memberships": convert_and_respect_annotation_metadata(
                    object_=organization_memberships,
                    annotation=typing.Dict[str, OrganizationMembershipRequest],
                    direction="write",
                ),
                "workspace_memberships": convert_and_respect_annotation_metadata(
                    object_=workspace_memberships,
                    annotation=typing.Dict[str, WorkspaceMembershipRequest],
                    direction="write",
                ),
                "project_memberships": convert_and_respect_annotation_metadata(
                    object_=project_memberships,
                    annotation=typing.Dict[str, ProjectMembershipRequest],
                    direction="write",
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ScopesResponseModel,
                    parse_obj_as(
                        type_=ScopesResponseModel,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_account(
        self,
        *,
        user: LegacyUserRequest,
        scope: LegacyScopeRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AccountResponse:
        """
        Parameters
        ----------
        user : LegacyUserRequest

        scope : LegacyScopeRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccountResponse
            Successful Response

        Examples
        --------
        import asyncio

        from agenta import AsyncAgentaApi, LegacyScopeRequest, LegacyUserRequest

        client = AsyncAgentaApi(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.admin.create_account(
                user=LegacyUserRequest(
                    name="name",
                    email="email",
                ),
                scope=LegacyScopeRequest(
                    name="name",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "admin/account",
            method="POST",
            json={
                "user": convert_and_respect_annotation_metadata(
                    object_=user, annotation=LegacyUserRequest, direction="write"
                ),
                "scope": convert_and_respect_annotation_metadata(
                    object_=scope, annotation=LegacyScopeRequest, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AccountResponse,
                    parse_obj_as(
                        type_=AccountResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
