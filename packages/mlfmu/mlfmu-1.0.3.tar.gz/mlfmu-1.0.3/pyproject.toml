[build-system]
requires = [
    "hatchling",
]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
only-include = [
    "src/mlfmu",
    "tests",
    ".coveragerc",
    ".editorconfig",
    "pytest.ini",
    "ruff.toml",
    "uv.lock",
]

[tool.hatch.build.targets.wheel]
packages = [
    "src/mlfmu",
]

[project]
name = "mlfmu"
version = "1.0.3"
description = "Export ML models represented as ONNX files to Functional-Mockup-Units (FMU)"
readme = "README.md"
requires-python = ">= 3.10,<3.13"
license = { file = "LICENSE" }
authors = [
    { name = "Jorge Luis Mendez", email = "jorge.luis.mendez@dnv.com" },
    { name = "Kristoffer Skare", email = "kristoffer.skare@dnv.com" },
]
maintainers = [
    { name = "Kristoffer Skare", email = "kristoffer.skare@dnv.com" },
    { name = "Jorge Luis Mendez", email = "jorge.luis.mendez@dnv.com" },
    { name = "Hee Jong Park", email = "hee.jong.park@dnv.com" },
    { name = "Claas Rostock", email = "claas.rostock@dnv.com" },
]
keywords = [
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    # "Operating System :: MacOS",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "dictIO>=0.3.4",
    "pydantic>=2.6",
    "json-schema-for-humans>=0.4.7",
    "onnxruntime==1.18.1",
    "conan>=2.1",
]

[project.urls]
Homepage = "https://github.com/dnv-opensource/mlfmu"
Documentation = "https://dnv-opensource.github.io/mlfmu/README.html"
Repository = "https://github.com/dnv-opensource/mlfmu.git"
Issues = "https://github.com/dnv-opensource/mlfmu/issues"
Changelog = "https://github.com/dnv-opensource/mlfmu/blob/main/CHANGELOG.md"


[tool.uv]
dev-dependencies = [
    "pytest>=8.3",
    "pytest-cov>=5.0",
    "ruff>=0.6.3",
    "pyright>=1.1.378",
    "mypy>=1.11.1",
    "sourcery>=1.22",
    "pre-commit>=3.8",
    "Sphinx>=8.0",
    "sphinx-argparse-cli>=1.17",
    "sphinx-autodoc-typehints>=2.2",
    "sphinxcontrib-mermaid>=1.0.0",
    "myst-parser>=4.0",
    "furo>=2024.8",
    "bump-my-version>=0.29.0"
]
native-tls = true


[project.scripts]
publish-interface-docs = "mlfmu.cli.publish_docs:main"
mlfmu = "mlfmu.cli.mlfmu:main"


[tool.mypy]
plugins = [
    "numpy.typing.mypy_plugin",
]
mypy_path = "stubs"
files = [
    "src",
    "tests",
]
exclude = [
    "^src/mlfmu/fmu_build/cppfmu/",
]
check_untyped_defs = true
disable_error_code = [
    "misc",
    "import-untyped",
]


[tool.pyright]
stubPath = "stubs"
include = [
    "src",
    "tests",
    "examples",
]
exclude = [
    "src/mlfmu/fmu_build/cppfmu",
]

typeCheckingMode = "basic"
useLibraryCodeForTypes = true
reportMissingParameterType = "error"
reportUnknownParameterType = "warning"
reportUnknownMemberType = "warning"                # consider to set to `false` if you work a lot with matplotlib and pandas, which are both not properly typed and known to trigger this warning
reportMissingTypeArgument = "error"
reportPropertyTypeMismatch = "error"
reportFunctionMemberAccess = "warning"
reportPrivateUsage = "warning"
reportTypeCommentUsage = "warning"
reportIncompatibleMethodOverride = "warning"
reportIncompatibleVariableOverride = "error"
reportInconsistentConstructor = "error"
reportOverlappingOverload = "warning"
reportUninitializedInstanceVariable = "warning"
reportCallInDefaultInitializer = "warning"
reportUnnecessaryIsInstance = "information"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"
reportUnnecessaryContains = "warning"
reportUnusedCallResult = "warning"
reportUnusedExpression = "warning"
reportMatchNotExhaustive = "warning"
reportShadowedImports = "warning"
reportUntypedFunctionDecorator = "warning"
reportUntypedClassDecorator = "warning"
reportUntypedBaseClass = "error"
reportUntypedNamedTuple = "warning"
reportUnnecessaryTypeIgnoreComment = "information"
# Activate the following rules only locally and temporary, i.e. for a QA session.
# (For server side CI they are considered too strict.)
# reportMissingTypeStubs = true
# reportConstantRedefinition = "warning"
# reportImportCycles = "warning"
# reportImplicitStringConcatenation = "warning"


[tool.bumpversion]
current_version = "1.0.3"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
tag = false
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = false
commit = false
message = "Bump version: {current_version} → {new_version}"
commit_args = ""

[[tool.bumpversion.files]]
filename = "docs/source/conf.py"

[[tool.bumpversion.files]]
filename = "CHANGELOG.md"
search = "## Unreleased"
replace = "## [{new_version}]"

[[tool.bumpversion.files]]
filename = "pyproject.toml"
