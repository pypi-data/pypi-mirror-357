from typing import Any

from pydantic import BaseModel

class ModuleContextImport(BaseModel):
    component_type: type
    from_context: str
    name: str | None
    alias: str | None
    required: bool

    def __init__(
        self,
        *,
        component_type: type,
        from_context: str,
        name: str | None = None,
        alias: str | None = None,
        required: bool = True,
        **data: Any,
    ) -> None: ...
    def model_post_init(self, __context: Any, /) -> None: ...
    def get_provider_name(self) -> str: ...
    def get_import_key(self) -> str: ...
    def get_effective_name(self) -> str: ...

class ImportCollection:
    imports: list[ModuleContextImport]

    def __init__(self, imports: list[ModuleContextImport] | None = None) -> None: ...
    def add_import(self, import_declaration: ModuleContextImport) -> None: ...
    def get_imports_by_context(
        self, context_name: str
    ) -> list[ModuleContextImport]: ...
    def get_required_imports(self) -> list[ModuleContextImport]: ...
    def get_optional_imports(self) -> list[ModuleContextImport]: ...
    def get_component_types(self) -> list[type]: ...
    def get_source_contexts(self) -> list[str]: ...
    def validate_imports(self) -> list[str]: ...
    def get_import_count(self) -> int: ...
    def clear(self) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Any: ...
    def __contains__(self, item: ModuleContextImport | str) -> bool: ...
