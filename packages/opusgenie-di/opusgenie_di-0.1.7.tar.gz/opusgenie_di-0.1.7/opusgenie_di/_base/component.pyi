from abc import ABC
from datetime import datetime
from typing import Any

from pydantic import BaseModel

from .enums import ComponentLayer, LifecycleStage
from .metadata import ComponentMetadata

class BaseComponent(BaseModel, ABC):
    # Core fields (explicitly declared for type checkers)
    component_id: str
    component_type: str | None
    component_name: str | None
    layer: ComponentLayer | None
    created_at: datetime
    updated_at: datetime | None
    config: dict[str, Any]
    tags: dict[str, str]
    lifecycle_stage: LifecycleStage

    def __init__(self, **data: Any) -> None: ...

    # Component identity methods
    def get_component_id(self) -> str: ...
    def get_component_name(self) -> str | None: ...
    def get_component_type(self) -> str: ...

    # Lifecycle methods
    def get_lifecycle_stage(self) -> LifecycleStage: ...
    def set_lifecycle_stage(self, stage: LifecycleStage) -> None: ...

    # Tag management
    def add_tag(self, key: str, value: str) -> None: ...
    def remove_tag(self, key: str) -> bool: ...
    def get_tag(self, key: str, default: str | None = None) -> str | None: ...

    # Configuration management
    def update_config(self, **config_updates: Any) -> None: ...
    def get_config(self, key: str, default: Any = None) -> Any: ...

    # Metadata
    def get_metadata(self) -> ComponentMetadata: ...

    # State checking
    def is_active(self) -> bool: ...
    def is_stopped(self) -> bool: ...
    def is_error(self) -> bool: ...
    def get_age_seconds(self) -> float: ...

    # Async lifecycle methods
    async def initialize(self) -> None: ...
    async def start(self) -> None: ...
    async def stop(self) -> None: ...
    async def cleanup(self) -> None: ...

    # Sync lifecycle methods
    def initialize_sync(self) -> None: ...
    def start_sync(self) -> None: ...
    def stop_sync(self) -> None: ...
    def cleanup_sync(self) -> None: ...
    def dispose(self) -> None: ...
