from typing import Any

from pydantic import BaseModel

from .._base import ComponentScope

class ProviderConfig(BaseModel):
    interface: type
    implementation: type | None
    scope: ComponentScope
    name: str | None
    factory: Any
    tags: dict[str, str]
    conditional: Any

    def model_post_init(self, __context: Any, /) -> None: ...
    def get_implementation(self) -> type: ...
    def get_provider_name(self) -> str: ...
    def get_tags_dict(self) -> dict[str, str]: ...

class ProviderCollection:
    providers: list[ProviderConfig]

    def __init__(self, providers: list[ProviderConfig] | None = None) -> None: ...
    def add_provider(self, provider: ProviderConfig) -> None: ...
    def get_provider_by_name(self, name: str) -> ProviderConfig | None: ...
    def get_provider_by_interface(self, interface: type) -> ProviderConfig | None: ...
    def get_providers_by_scope(self, scope: ComponentScope) -> list[ProviderConfig]: ...
    def get_conditional_providers(self) -> list[ProviderConfig]: ...
    def get_active_providers(self) -> list[ProviderConfig]: ...
    def get_interfaces(self) -> list[type]: ...
    def get_implementations(self) -> list[type]: ...
    def validate_providers(self) -> list[str]: ...
    def to_registration_dict(self) -> dict[type, dict[str, Any]]: ...
    def get_provider_count(self) -> int: ...
    def get_active_provider_count(self) -> int: ...
    def clear(self) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Any: ...
    def __contains__(self, item: ProviderConfig | str | type) -> bool: ...

def normalize_provider_specification(spec: Any) -> ProviderConfig: ...
def normalize_provider_list(providers: list[Any] | None) -> list[ProviderConfig]: ...
