"""Utility functions and helpers for the dependency injection system."""

from .helpers import (
    create_unique_key,
    ensure_coroutine,
    filter_none_values,
    get_class_name,
    get_module_name,
    merge_dicts,
    run_async_in_sync,
    safe_getattr,
    safe_isinstance,
    safe_issubclass,
    truncate_string,
)
from .logging import (
    get_logger,
    log_component_registration,
    log_component_resolution,
    log_context_creation,
    log_error,
    log_import_resolution,
    log_info,
    log_module_registration,
    log_warning,
    logger,
)
from .type_helpers import (
    extract_non_none_types,
    get_constructor_dependencies,
    get_primary_type,
    get_type_name,
    is_concrete_type,
    is_optional_type,
    is_union_type,
    validate_type_compatibility,
)
from .validation import (
    ComponentValidationError,
    ModuleValidationError,
    ValidationError,
    validate_component_dependencies,
    validate_component_registration,
    validate_context_name,
    validate_exports,
    validate_module_name,
    validate_provider_name,
    validate_tags,
)

__all__ = [
    # Logging
    "get_logger",
    "logger",
    "log_component_registration",
    "log_component_resolution",
    "log_context_creation",
    "log_module_registration",
    "log_import_resolution",
    "log_error",
    "log_warning",
    "log_info",
    # Type helpers
    "is_union_type",
    "extract_non_none_types",
    "get_primary_type",
    "is_optional_type",
    "get_constructor_dependencies",
    "get_type_name",
    "is_concrete_type",
    "validate_type_compatibility",
    # Validation
    "ValidationError",
    "ComponentValidationError",
    "ModuleValidationError",
    "validate_component_registration",
    "validate_context_name",
    "validate_module_name",
    "validate_provider_name",
    "validate_tags",
    "validate_exports",
    "validate_component_dependencies",
    # Helpers
    "ensure_coroutine",
    "run_async_in_sync",
    "safe_getattr",
    "safe_isinstance",
    "safe_issubclass",
    "merge_dicts",
    "filter_none_values",
    "get_class_name",
    "get_module_name",
    "create_unique_key",
    "truncate_string",
]
