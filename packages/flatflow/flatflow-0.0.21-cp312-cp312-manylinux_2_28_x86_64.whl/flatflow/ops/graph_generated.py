# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatflow

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from flatflow.ops.node_generated import Node
from typing import Optional
np = import_numpy()

# `Graph` is the main data structure for tracing a given model at the
# intermediate representation (IR) level. It consists of a series of `Node`s,
# each representing callsites such as opcode and the input/output shapes of
# the corresponding operator.
class Graph(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Graph()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGraph(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Graph
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Graph
    def Nodes(self, j: int) -> Optional[Node]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Node()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Graph
    def NodesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Graph
    def NodesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def GraphStart(builder: flatbuffers.Builder):
    builder.StartObject(1)

def GraphAddNodes(builder: flatbuffers.Builder, nodes: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodes), 0)

def GraphStartNodesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def GraphEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()



