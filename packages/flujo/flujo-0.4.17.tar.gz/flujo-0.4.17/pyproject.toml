[build-system]
requires      = ["hatchling"]
build-backend = "hatchling.build"

# --------------------------------------------------------------------------- #
# Core project metadata (PEP 621)
# --------------------------------------------------------------------------- #
[project]
name            = "flujo"
version         = "0.4.17" # Patch release with additional fixes
description     = "Production-ready orchestration for AI agents, built with Pydantic."
readme          = "README.md"
requires-python = ">=3.11,<4.0"

authors = [
  { name = "Alvaro", email = "alvaro@example.com" }
]

license = { text = "AGPL-3.0" }

classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: GNU Affero General Public License v3",
  "License :: Other/Proprietary License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Libraries :: Application Frameworks",
  "Typing :: Typed",
]

# Runtime dependencies
dependencies = [
  "pydantic>=2.7",
  "pydantic-ai>=0.2.16",
  "pydantic-settings",
  "python-dotenv>=1.0",
  "pyyaml>=6.0",
  "tenacity>=8.2",
  "typer>=0.12",
  "rich>=13.7",
  "logfire>=0.3",
  "sqlvalidator>=0.0.8",
  "pydantic-evals>=0.0.47", # Added for Intelligent Evals
  "orjson>=3.9.0",
]

# Optional dependency groups (install with: `pip install .[dev]`, etc.)
[project.optional-dependencies]
dev = [
  "ruff",
  "mypy",
  "pip-audit",
  "pytest",
  "pytest-cov",
  "pytest-asyncio",
  "hypothesis",
  "vcrpy",
  "rich",
  "build",     # Added for package building
  "twine",     # Added for package uploading
  "pytest-benchmark>=4.0.0",
  "bandit>=1.7.5",
  "cyclonedx-python-lib>=5.2.0",
  "cyclonedx-py",  # Added for CycloneDX CLI support
]
docs = [
    "mkdocs",
    "mkdocs-material", # Added for a professional theme
    "mkdocstrings[python]",
]
opentelemetry = ["opentelemetry-sdk>=1.26"]
bench = [
    "numpy",
    "pytest-benchmark>=4.0.0",
]

# CLI entry point (install adds `flujo` command to PATH)
[project.scripts]
flujo = "flujo.cli.main:app"

# Project links (PEP 621)
[project.urls]
Homepage = "https://github.com/aandresalvarez/flujo"
Repository = "https://github.com/aandresalvarez/flujo"
Documentation = "https://aandresalvarez.github.io/flujo/"
Bug_Tracker = "https://github.com/aandresalvarez/flujo/issues"
Changelog = "https://github.com/aandresalvarez/flujo/blob/main/CHANGELOG.md"

# --------------------------------------------------------------------------- #
# Tool-specific configuration
# --------------------------------------------------------------------------- #
[tool.mypy]
python_version = "3.11"
strict         = true

# Focus type checking on the core library first. Examples are excluded as they are
# meant to be educational and may not follow strict typing.
exclude = [
    "examples/.*",
]

# Allow third-party libraries that do not ship type information.
[[tool.mypy.overrides]]
module = ["yaml", "sqlvalidator", "vcr", "orjson"]
ignore_missing_imports = true

[tool.ruff]
line-length = 100

[tool.pytest.ini_options]
asyncio_mode = "auto"
markers = [
  "e2e: marks tests as end-to-end (requires network access or VCR cassettes)",
  "benchmark: marks tests as benchmarks (requires pytest-benchmark)",
]

# --------------------------------------------------------------------------- #
# Build system configuration
# --------------------------------------------------------------------------- #
[tool.hatch.build.targets.wheel]
packages = ["flujo"]

[tool.hatch.build.targets.sdist]
include = [
    "flujo",
    "tests",
    "docs",
    "examples",
    "README.md",
    "LICENSE",
    "CHANGELOG.md",
    "pyproject.toml",
]


[tool.hatch.build.targets.wheel.shared-data]
"README.md" = "share/doc/flujo/README.md"
"LICENSE" = "share/doc/flujo/LICENSE"
"CHANGELOG.md" = "share/doc/flujo/CHANGELOG.md"

[tool.hatch.envs.default]
features = ["dev"]

[tool.hatch.envs.default.scripts]
lint = "ruff check flujo tests"
format = "ruff format flujo tests"
type-check = "mypy flujo"
test = "pytest {args}"
cov = "pytest --cov=flujo --cov-report=term-missing {args}"
bandit-check = "bandit -c pyproject.toml -r flujo -s B101,B404,B603 --exit-zero"
cyclonedx = "cyclonedx-py environment --output-file sbom.json --output-format JSON"
setup = [
  "pip install --upgrade pip",
  "pip install -e '.[dev,bench,docs]'",
  "pre-commit install",
]

install-dev = "hatch run setup"

# Composite script for all quality checks
quality = [
  "format",
  "lint",
  "type-check",
  "bandit-check",
]

# Suppress LogfireNotConfiguredWarning for users who do not enable Logfire
[tool.logfire]
ignore_no_config = true
