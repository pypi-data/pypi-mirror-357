Metadata-Version: 2.4
Name: ida-domain
Version: 0.1.0rc2
Summary: IDA Domain API - Python interface for IDA Pro reverse engineering platform
Author-email: Hex-Rays SA <support@hex-rays.com>
License-Expression: MIT
Project-URL: Documentation, https://ida-domain.docs.hex-rays.com/
Project-URL: Hex-Rays, https://hex-rays.com/
Keywords: ida,ida-pro,reverse-engineering,disassembler,binary-analysis,malware-analysis,security
Classifier: Development Status :: 4 - Beta
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Information Technology
Classifier: Intended Audience :: Science/Research
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Operating System :: OS Independent
Classifier: Topic :: Software Development :: Disassemblers
Classifier: Topic :: Security
Classifier: Topic :: Scientific/Engineering :: Information Analysis
Classifier: Topic :: System :: Software Distribution
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: idapro>=0.0.4
Provides-Extra: dev
Requires-Dist: pre-commit>=4.2.0; extra == "dev"
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: ruff>=0.11.13; extra == "dev"
Requires-Dist: sphinx>=5.0.0; extra == "dev"
Requires-Dist: sphinx-copybutton; extra == "dev"
Requires-Dist: sphinx-autodoc-typehints>=1.19.0; extra == "dev"
Requires-Dist: sphinx-rtd-theme>=1.2.0; extra == "dev"
Requires-Dist: setuptools>=65; extra == "dev"
Requires-Dist: setuptools-scm>=8.0; extra == "dev"
Requires-Dist: graphviz>=0.20.0; extra == "dev"
Requires-Dist: twine>=6.1.0; extra == "dev"
Dynamic: license-file

# IDA Domain

[![PyPI version](https://badge.fury.io/py/ida-domain.svg)](https://badge.fury.io/py/ida-domain)
[![Python Support](https://img.shields.io/pypi/pyversions/ida-domain.svg)](https://pypi.org/project/ida-domain/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

This project provides a **Domain Model** for IDA Pro, allowing seamless interaction with IDA SDK components via Python.

## ðŸš€ Features

- **Domain Model Interface**: Clean, Pythonic API on top of IDA Python
- **Fully compatible with IDA Python SDK**: Can be used alongside the IDA Python SDK
- **Easy Installation**: Simple pip install from PyPI
- **Documentation**: API reference and usage examples
- **Cross-Platform**: Works on Windows, macOS, and Linux

## ðŸ“¦ Installation

### Prerequisites

Set the `IDADIR` environment variable to point to your IDA installation directory:

```bash
export IDADIR="[IDA Installation Directory]"
```

**Example:**
```bash
export IDADIR="/Applications/IDA Professional 9.1.app/Contents/MacOS/"
```

> **Note:** If you have already installed and configured the `idapro` Python package, setting `IDADIR` is not required.

### Install from PyPI

```bash
pip install ida-domain
```

## ðŸŽ¯ Usage Example

Here is an example showing how to use IDA Domain to analyze a binary:

```python
#!/usr/bin/env python3
"""
Database exploration example for IDA Domain API.

This example demonstrates how to open an IDA database and explore its basic properties.
"""

import argparse

import ida_domain

def explore_database(db_path):
    """Explore basic database information."""
    ida_options = ida_domain.Database.IdaCommandBuilder().auto_analysis(True).new_database(True)
    db = ida_domain.Database()
    if db.open(db_path, ida_options):
        # Get basic information
        print(f'Address range: {hex(db.minimum_ea)} - {hex(db.maximum_ea)}')

        # Get metadata
        print('Database metadata:')
        for key, value in db.metadata.items():
            print(f'  {key}: {value}')

        # Count functions
        function_count = 0
        for _ in db.functions.get_all():
            function_count += 1
        print(f'Total functions: {function_count}')

        db.close(save=False)

def main():
    """Main entry point with argument parsing."""
    parser = argparse.ArgumentParser(description='Database exploration example')
    parser.add_argument(
        '-f', '--input-file', help='Binary input file to be loaded', type=str, required=True
    )
    args = parser.parse_args()
    explore_database(args.input_file)

if __name__ == '__main__':
    main()

```

## ðŸ“– Documentation

Complete documentation is available at: [https://ida-domain.docs.hex-rays.com/](https://ida-domain.docs.hex-rays.com/)

- **[API Reference](https://ida-domain.docs.hex-rays.com/api.html)**: Documentation of available classes and methods
- **[Installation Guide](https://ida-domain.docs.hex-rays.com/installation.html)**: Detailed setup instructions
- **[Examples](https://ida-domain.docs.hex-rays.com/examples.html)**: Usage examples for common tasks
- **[Getting Started](https://ida-domain.docs.hex-rays.com/installation.html)**: Basic guide for new users

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.
