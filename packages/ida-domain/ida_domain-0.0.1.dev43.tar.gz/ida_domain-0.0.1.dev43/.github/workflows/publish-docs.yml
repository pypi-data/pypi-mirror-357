name: Build and Deploy Documentation

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-docs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: false

      - name: Set up Python
        run: uv python install 3.11

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc
          sudo apt-get install -y graphviz

      - name: Install Python dependencies and build docs
        run: |
          # Get the latest tag to determine base version for docs
          git fetch --tags

          # Look for the latest dev tag in format: v0.0.1-dev.22
          LATEST_DEV_TAG=$(git tag -l "v*-dev.*" | sort -V | tail -n 1)

          if [[ -n "$LATEST_DEV_TAG" ]]; then
            # Extract base version from dev tag: v0.0.1-dev.22 -> 0.0.1
            BASE_VERSION=$(echo "$LATEST_DEV_TAG" | sed 's/^v//' | sed 's/-dev\..*$//')
            DOCS_VERSION="${BASE_VERSION}.dev0"
            echo "Found latest dev tag: $LATEST_DEV_TAG"
          else
            # Fail if no dev tags found
            echo "ERROR: No dev tags found! Expected tags like v0.0.1-dev.1, v0.0.2-dev.1, etc."
            echo "Available tags:"
            git tag -l | sort -V
            exit 1
          fi

          echo "Using version for docs build: $DOCS_VERSION"
          export SETUPTOOLS_SCM_PRETEND_VERSION="$DOCS_VERSION"

          # Sync dependencies (includes dev dependencies with sphinx)
          uv sync --extra dev

          # Build documentation using uv run
          cd docs
          make clean && make html

          # Create a .nojekyll file to allow files starting with underscore
          touch _build/html/.nojekyll

          # List the generated files for debugging
          echo "Generated documentation files:"
          find _build/html -type f

      - name: Setup Pages
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        uses: actions/configure-pages@v4

      - name: Upload artifact
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/_build/html

  deploy-docs:
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-docs
    permissions:
      pages: write
      id-token: write

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
