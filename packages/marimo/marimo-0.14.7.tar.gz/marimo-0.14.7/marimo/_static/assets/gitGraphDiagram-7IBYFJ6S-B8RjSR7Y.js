import{p as Y}from"./chunk-4BMEZGHF-DLcqo-x9.js";import{I as U}from"./chunk-XZIHB7SX-XW5eSvGR.js";import{_ as d,q as V,p as J,s as X,g as Z,a as Q,b as tt,l as w,c as rt,u as et,D as nt,y as ot,j as C,E as at,F as st,G as ct,H as it}from"./mermaid-BgCxVw2J.js";import{p as ht}from"./radar-MK3ICKWK-FyfW4UKQ.js";import{s as dt}from"./transform-C5148Z0S.js";import"./index-DlQKt39j.js";import"./_baseEach-DtUk7cBy.js";import"./_baseUniq-BuhsH2Gw.js";import"./min-DTkssK90.js";import"./_baseMap-zXgLfXUO.js";import"./clone-Cho8ekmu.js";import"./_createAggregator-CCTzDuxr.js";var p={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},mt=ct.gitGraph,R=d(()=>at({...mt,...st().gitGraph}),"getConfig"),i=new U(()=>{const e=R(),t=e.mainBranchName,n=e.mainBranchOrder;return{mainBranchName:t,commits:new Map,head:null,branchConfig:new Map([[t,{name:t,order:n}]]),branches:new Map([[t,null]]),currBranch:t,direction:"LR",seq:0,options:{}}});function G(){return it({length:7})}function D(e,t){const n=Object.create(null);return e.reduce((a,r)=>{const o=t(r);return n[o]||(n[o]=!0,a.push(r)),a},[])}d(G,"getID"),d(D,"uniqBy");var $t=d(function(e){i.records.direction=e},"setDirection"),lt=d(function(e){w.debug("options str",e),e=e==null?void 0:e.trim(),e=e||"{}";try{i.records.options=JSON.parse(e)}catch(t){w.error("error while parsing gitGraph options",t.message)}},"setOptions"),yt=d(function(){return i.records.options},"getOptions"),gt=d(function(e){let t=e.msg,n=e.id;const a=e.type;let r=e.tags;w.info("commit",t,n,a,r),w.debug("Entering commit:",t,n,a,r);const o=R();n=C.sanitizeText(n,o),t=C.sanitizeText(t,o),r=r==null?void 0:r.map(s=>C.sanitizeText(s,o));const c={id:n||i.records.seq+"-"+G(),message:t,seq:i.records.seq++,type:a??p.NORMAL,tags:r??[],parents:i.records.head==null?[]:[i.records.head.id],branch:i.records.currBranch};i.records.head=c,w.info("main branch",o.mainBranchName),i.records.commits.set(c.id,c),i.records.branches.set(i.records.currBranch,c.id),w.debug("in pushCommit "+c.id)},"commit"),pt=d(function(e){let t=e.name;const n=e.order;if(t=C.sanitizeText(t,R()),i.records.branches.has(t))throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${t}")`);i.records.branches.set(t,i.records.head!=null?i.records.head.id:null),i.records.branchConfig.set(t,{name:t,order:n}),N(t),w.debug("in createBranch")},"branch"),xt=d(e=>{let t=e.branch,n=e.id;const a=e.type,r=e.tags,o=R();t=C.sanitizeText(t,o),n&&(n=C.sanitizeText(n,o));const c=i.records.branches.get(i.records.currBranch),s=i.records.branches.get(t),m=c?i.records.commits.get(c):void 0,y=s?i.records.commits.get(s):void 0;if(m&&y&&m.branch===t)throw new Error(`Cannot merge branch '${t}' into itself.`);if(i.records.currBranch===t){const l=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw l.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["branch abc"]},l}if(m===void 0||!m){const l=new Error(`Incorrect usage of "merge". Current branch (${i.records.currBranch})has no commits`);throw l.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["commit"]},l}if(!i.records.branches.has(t)){const l=new Error('Incorrect usage of "merge". Branch to be merged ('+t+") does not exist");throw l.hash={text:`merge ${t}`,token:`merge ${t}`,expected:[`branch ${t}`]},l}if(y===void 0||!y){const l=new Error('Incorrect usage of "merge". Branch to be merged ('+t+") has no commits");throw l.hash={text:`merge ${t}`,token:`merge ${t}`,expected:['"commit"']},l}if(m===y){const l=new Error('Incorrect usage of "merge". Both branches have same head');throw l.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["branch abc"]},l}if(n&&i.records.commits.has(n)){const l=new Error('Incorrect usage of "merge". Commit with id:'+n+" already exists, use different custom Id");throw l.hash={text:`merge ${t} ${n} ${a} ${r==null?void 0:r.join(" ")}`,token:`merge ${t} ${n} ${a} ${r==null?void 0:r.join(" ")}`,expected:[`merge ${t} ${n}_UNIQUE ${a} ${r==null?void 0:r.join(" ")}`]},l}const $=s||"",h={id:n||`${i.records.seq}-${G()}`,message:`merged branch ${t} into ${i.records.currBranch}`,seq:i.records.seq++,parents:i.records.head==null?[]:[i.records.head.id,$],branch:i.records.currBranch,type:p.MERGE,customType:a,customId:!!n,tags:r??[]};i.records.head=h,i.records.commits.set(h.id,h),i.records.branches.set(i.records.currBranch,h.id),w.debug(i.records.branches),w.debug("in mergeBranch")},"merge"),ft=d(function(e){let t=e.id,n=e.targetId,a=e.tags,r=e.parent;w.debug("Entering cherryPick:",t,n,a);const o=R();if(t=C.sanitizeText(t,o),n=C.sanitizeText(n,o),a=a==null?void 0:a.map(m=>C.sanitizeText(m,o)),r=C.sanitizeText(r,o),!t||!i.records.commits.has(t)){const m=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw m.hash={text:`cherryPick ${t} ${n}`,token:`cherryPick ${t} ${n}`,expected:["cherry-pick abc"]},m}const c=i.records.commits.get(t);if(c===void 0||!c)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(r&&(!Array.isArray(c.parents)||!c.parents.includes(r)))throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");const s=c.branch;if(c.type===p.MERGE&&!r)throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!n||!i.records.commits.has(n)){if(s===i.records.currBranch){const h=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw h.hash={text:`cherryPick ${t} ${n}`,token:`cherryPick ${t} ${n}`,expected:["cherry-pick abc"]},h}const m=i.records.branches.get(i.records.currBranch);if(m===void 0||!m){const h=new Error(`Incorrect usage of "cherry-pick". Current branch (${i.records.currBranch})has no commits`);throw h.hash={text:`cherryPick ${t} ${n}`,token:`cherryPick ${t} ${n}`,expected:["cherry-pick abc"]},h}const y=i.records.commits.get(m);if(y===void 0||!y){const h=new Error(`Incorrect usage of "cherry-pick". Current branch (${i.records.currBranch})has no commits`);throw h.hash={text:`cherryPick ${t} ${n}`,token:`cherryPick ${t} ${n}`,expected:["cherry-pick abc"]},h}const $={id:i.records.seq+"-"+G(),message:`cherry-picked ${c==null?void 0:c.message} into ${i.records.currBranch}`,seq:i.records.seq++,parents:i.records.head==null?[]:[i.records.head.id,c.id],branch:i.records.currBranch,type:p.CHERRY_PICK,tags:a?a.filter(Boolean):[`cherry-pick:${c.id}${c.type===p.MERGE?`|parent:${r}`:""}`]};i.records.head=$,i.records.commits.set($.id,$),i.records.branches.set(i.records.currBranch,$.id),w.debug(i.records.branches),w.debug("in cherryPick")}},"cherryPick"),N=d(function(e){if(e=C.sanitizeText(e,R()),!i.records.branches.has(e)){const t=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${e}")`);throw t.hash={text:`checkout ${e}`,token:`checkout ${e}`,expected:[`branch ${e}`]},t}{i.records.currBranch=e;const t=i.records.branches.get(i.records.currBranch);i.records.head=t!==void 0&&t?i.records.commits.get(t)??null:null}},"checkout");function q(e,t,n){const a=e.indexOf(t);a===-1?e.push(n):e.splice(a,1,n)}function H(e){const t=e.reduce((r,o)=>r.seq>o.seq?r:o,e[0]);let n="";e.forEach(function(r){n+=r===t?"	*":"	|"});const a=[n,t.id,t.seq];for(const r in i.records.branches)i.records.branches.get(r)===t.id&&a.push(r);if(w.debug(a.join(" ")),t.parents&&t.parents.length==2&&t.parents[0]&&t.parents[1]){const r=i.records.commits.get(t.parents[0]);q(e,t,r),t.parents[1]&&e.push(i.records.commits.get(t.parents[1]))}else{if(t.parents.length==0)return;if(t.parents[0]){const r=i.records.commits.get(t.parents[0]);q(e,t,r)}}H(e=D(e,r=>r.id))}d(q,"upsert"),d(H,"prettyPrintCommitHistory");var ut=d(function(){w.debug(i.records.commits),H([W()[0]])},"prettyPrint"),bt=d(function(){i.reset(),ot()},"clear"),wt=d(function(){return[...i.records.branchConfig.values()].map((e,t)=>e.order!==null&&e.order!==void 0?e:{...e,order:parseFloat(`0.${t}`)}).sort((e,t)=>(e.order??0)-(t.order??0)).map(({name:e})=>({name:e}))},"getBranchesAsObjArray"),Bt=d(function(){return i.records.branches},"getBranches"),Et=d(function(){return i.records.commits},"getCommits"),W=d(function(){const e=[...i.records.commits.values()];return e.forEach(function(t){w.debug(t.id)}),e.sort((t,n)=>t.seq-n.seq),e},"getCommitsArray"),j={commitType:p,getConfig:R,setDirection:$t,setOptions:lt,getOptions:yt,commit:gt,branch:pt,merge:xt,cherryPick:ft,checkout:N,prettyPrint:ut,clear:bt,getBranchesAsObjArray:wt,getBranches:Bt,getCommits:Et,getCommitsArray:W,getCurrentBranch:d(function(){return i.records.currBranch},"getCurrentBranch"),getDirection:d(function(){return i.records.direction},"getDirection"),getHead:d(function(){return i.records.head},"getHead"),setAccTitle:tt,getAccTitle:Q,getAccDescription:Z,setAccDescription:X,setDiagramTitle:J,getDiagramTitle:V},kt=d((e,t)=>{Y(e,t),e.dir&&t.setDirection(e.dir);for(const n of e.statements)Ct(n,t)},"populate"),Ct=d((e,t)=>{const n={Commit:d(a=>t.commit(Lt(a)),"Commit"),Branch:d(a=>t.branch(Tt(a)),"Branch"),Merge:d(a=>t.merge(Mt(a)),"Merge"),Checkout:d(a=>t.checkout(vt(a)),"Checkout"),CherryPicking:d(a=>t.cherryPick(Pt(a)),"CherryPicking")}[e.$type];n?n(e):w.error(`Unknown statement type: ${e.$type}`)},"parseStatement"),Lt=d(e=>({id:e.id,msg:e.message??"",type:e.type!==void 0?p[e.type]:p.NORMAL,tags:e.tags??void 0}),"parseCommit"),Tt=d(e=>({name:e.name,order:e.order??0}),"parseBranch"),Mt=d(e=>({branch:e.branch,id:e.id??"",type:e.type!==void 0?p[e.type]:void 0,tags:e.tags??void 0}),"parseMerge"),vt=d(e=>e.branch,"parseCheckout"),Pt=d(e=>{var t;return{id:e.id,targetId:"",tags:((t=e.tags)==null?void 0:t.length)===0?void 0:e.tags,parent:e.parent}},"parseCherryPicking"),Rt={parse:d(async e=>{const t=await ht("gitGraph",e);w.debug(t),kt(t,j)},"parse")},z=rt(),f=z==null?void 0:z.gitGraph,T=10,M=40,E=new Map,k=new Map,I=new Map,O=[],v=0,g="LR",It=d(()=>{E.clear(),k.clear(),I.clear(),v=0,O=[],g="LR"},"clear"),F=d(e=>{const t=document.createElementNS("http://www.w3.org/2000/svg","text");return(typeof e=="string"?e.split(/\\n|\n|<br\s*\/?>/gi):e).forEach(n=>{const a=document.createElementNS("http://www.w3.org/2000/svg","tspan");a.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),a.setAttribute("dy","1em"),a.setAttribute("x","0"),a.setAttribute("class","row"),a.textContent=n.trim(),t.appendChild(a)}),t},"drawText"),_=d(e=>{let t,n,a;return g==="BT"?(n=d((r,o)=>r<=o,"comparisonFunc"),a=1/0):(n=d((r,o)=>r>=o,"comparisonFunc"),a=0),e.forEach(r=>{var c,s;const o=g==="TB"||g=="BT"?(c=k.get(r))==null?void 0:c.y:(s=k.get(r))==null?void 0:s.x;o!==void 0&&n(o,a)&&(t=r,a=o)}),t},"findClosestParent"),At=d(e=>{let t="",n=1/0;return e.forEach(a=>{const r=k.get(a).y;r<=n&&(t=a,n=r)}),t||void 0},"findClosestParentBT"),Gt=d((e,t,n)=>{let a=n,r=n;const o=[];e.forEach(c=>{const s=t.get(c);if(!s)throw new Error(`Commit not found for key ${c}`);s.parents.length?(a=qt(s),r=Math.max(a,r)):o.push(s),Ht(s,a)}),a=r,o.forEach(c=>{zt(c,a,n)}),e.forEach(c=>{const s=t.get(c);if(s!=null&&s.parents.length){const m=At(s.parents);a=k.get(m).y-M,a<=r&&(r=a);const y=E.get(s.branch).pos,$=a-T;k.set(s.id,{x:y,y:$})}})},"setParallelBTPos"),Ot=d(e=>{var a;const t=_(e.parents.filter(r=>r!==null));if(!t)throw new Error(`Closest parent not found for commit ${e.id}`);const n=(a=k.get(t))==null?void 0:a.y;if(n===void 0)throw new Error(`Closest parent position not found for commit ${e.id}`);return n},"findClosestParentPos"),qt=d(e=>Ot(e)+M,"calculateCommitPosition"),Ht=d((e,t)=>{const n=E.get(e.branch);if(!n)throw new Error(`Branch not found for commit ${e.id}`);const a=n.pos,r=t+T;return k.set(e.id,{x:a,y:r}),{x:a,y:r}},"setCommitPosition"),zt=d((e,t,n)=>{const a=E.get(e.branch);if(!a)throw new Error(`Branch not found for commit ${e.id}`);const r=t+n,o=a.pos;k.set(e.id,{x:o,y:r})},"setRootPosition"),St=d((e,t,n,a,r,o)=>{if(o===p.HIGHLIGHT)e.append("rect").attr("x",n.x-10).attr("y",n.y-10).attr("width",20).attr("height",20).attr("class",`commit ${t.id} commit-highlight${r%8} ${a}-outer`),e.append("rect").attr("x",n.x-6).attr("y",n.y-6).attr("width",12).attr("height",12).attr("class",`commit ${t.id} commit${r%8} ${a}-inner`);else if(o===p.CHERRY_PICK)e.append("circle").attr("cx",n.x).attr("cy",n.y).attr("r",10).attr("class",`commit ${t.id} ${a}`),e.append("circle").attr("cx",n.x-3).attr("cy",n.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${t.id} ${a}`),e.append("circle").attr("cx",n.x+3).attr("cy",n.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${t.id} ${a}`),e.append("line").attr("x1",n.x+3).attr("y1",n.y+1).attr("x2",n.x).attr("y2",n.y-5).attr("stroke","#fff").attr("class",`commit ${t.id} ${a}`),e.append("line").attr("x1",n.x-3).attr("y1",n.y+1).attr("x2",n.x).attr("y2",n.y-5).attr("stroke","#fff").attr("class",`commit ${t.id} ${a}`);else{const c=e.append("circle");if(c.attr("cx",n.x),c.attr("cy",n.y),c.attr("r",t.type===p.MERGE?9:10),c.attr("class",`commit ${t.id} commit${r%8}`),o===p.MERGE){const s=e.append("circle");s.attr("cx",n.x),s.attr("cy",n.y),s.attr("r",6),s.attr("class",`commit ${a} ${t.id} commit${r%8}`)}o===p.REVERSE&&e.append("path").attr("d",`M ${n.x-5},${n.y-5}L${n.x+5},${n.y+5}M${n.x-5},${n.y+5}L${n.x+5},${n.y-5}`).attr("class",`commit ${a} ${t.id} commit${r%8}`)}},"drawCommitBullet"),Dt=d((e,t,n,a)=>{var r;if(t.type!==p.CHERRY_PICK&&(t.customId&&t.type===p.MERGE||t.type!==p.MERGE)&&(f!=null&&f.showCommitLabel)){const o=e.append("g"),c=o.insert("rect").attr("class","commit-label-bkg"),s=o.append("text").attr("x",a).attr("y",n.y+25).attr("class","commit-label").text(t.id),m=(r=s.node())==null?void 0:r.getBBox();if(m&&(c.attr("x",n.posWithOffset-m.width/2-2).attr("y",n.y+13.5).attr("width",m.width+4).attr("height",m.height+4),g==="TB"||g==="BT"?(c.attr("x",n.x-(m.width+16+5)).attr("y",n.y-12),s.attr("x",n.x-(m.width+16)).attr("y",n.y+m.height-12)):s.attr("x",n.posWithOffset-m.width/2),f.rotateCommitLabel))if(g==="TB"||g==="BT")s.attr("transform","rotate(-45, "+n.x+", "+n.y+")"),c.attr("transform","rotate(-45, "+n.x+", "+n.y+")");else{const y=-7.5-(m.width+10)/25*9.5,$=10+m.width/25*8.5;o.attr("transform","translate("+y+", "+$+") rotate(-45, "+a+", "+n.y+")")}}},"drawCommitLabel"),Nt=d((e,t,n,a)=>{var r;if(t.tags.length>0){let o=0,c=0,s=0;const m=[];for(const y of t.tags.reverse()){const $=e.insert("polygon"),h=e.append("circle"),l=e.append("text").attr("y",n.y-16-o).attr("class","tag-label").text(y),x=(r=l.node())==null?void 0:r.getBBox();if(!x)throw new Error("Tag bbox not found");c=Math.max(c,x.width),s=Math.max(s,x.height),l.attr("x",n.posWithOffset-x.width/2),m.push({tag:l,hole:h,rect:$,yOffset:o}),o+=20}for(const{tag:y,hole:$,rect:h,yOffset:l}of m){const x=s/2,u=n.y-19.2-l;if(h.attr("class","tag-label-bkg").attr("points",`
      ${a-c/2-2},${u+2}  
      ${a-c/2-2},${u-2}
      ${n.posWithOffset-c/2-4},${u-x-2}
      ${n.posWithOffset+c/2+4},${u-x-2}
      ${n.posWithOffset+c/2+4},${u+x+2}
      ${n.posWithOffset-c/2-4},${u+x+2}`),$.attr("cy",u).attr("cx",a-c/2+2).attr("r",1.5).attr("class","tag-hole"),g==="TB"||g==="BT"){const b=a+l;h.attr("class","tag-label-bkg").attr("points",`
        ${n.x},${b+2}
        ${n.x},${b-2}
        ${n.x+T},${b-x-2}
        ${n.x+T+c+4},${b-x-2}
        ${n.x+T+c+4},${b+x+2}
        ${n.x+T},${b+x+2}`).attr("transform","translate(12,12) rotate(45, "+n.x+","+a+")"),$.attr("cx",n.x+2).attr("cy",b).attr("transform","translate(12,12) rotate(45, "+n.x+","+a+")"),y.attr("x",n.x+5).attr("y",b+3).attr("transform","translate(14,14) rotate(45, "+n.x+","+a+")")}}}},"drawCommitTags"),Wt=d(e=>{switch(e.customType??e.type){case p.NORMAL:return"commit-normal";case p.REVERSE:return"commit-reverse";case p.HIGHLIGHT:return"commit-highlight";case p.MERGE:return"commit-merge";case p.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),jt=d((e,t,n,a)=>{const r={x:0,y:0};if(!(e.parents.length>0))return t==="TB"?30:t==="BT"?(a.get(e.id)??r).y-M:0;{const o=_(e.parents);if(o){const c=a.get(o)??r;return t==="TB"?c.y+M:t==="BT"?(a.get(e.id)??r).y-M:c.x+M}}return 0},"calculatePosition"),Ft=d((e,t,n)=>{var c,s;const a=g==="BT"&&n?t:t+T,r=g==="TB"||g==="BT"?a:(c=E.get(e.branch))==null?void 0:c.pos,o=g==="TB"||g==="BT"?(s=E.get(e.branch))==null?void 0:s.pos:a;if(o===void 0||r===void 0)throw new Error(`Position were undefined for commit ${e.id}`);return{x:o,y:r,posWithOffset:a}},"getCommitPosition"),K=d((e,t,n)=>{if(!f)throw new Error("GitGraph config not found");const a=e.append("g").attr("class","commit-bullets"),r=e.append("g").attr("class","commit-labels");let o=g==="TB"||g==="BT"?30:0;const c=[...t.keys()],s=(f==null?void 0:f.parallelCommits)??!1,m=d(($,h)=>{var u,b;const l=(u=t.get($))==null?void 0:u.seq,x=(b=t.get(h))==null?void 0:b.seq;return l!==void 0&&x!==void 0?l-x:0},"sortKeys");let y=c.sort(m);g==="BT"&&(s&&Gt(y,t,o),y=y.reverse()),y.forEach($=>{var x;const h=t.get($);if(!h)throw new Error(`Commit not found for key ${$}`);s&&(o=jt(h,g,o,k));const l=Ft(h,o,s);if(n){const u=Wt(h),b=h.customType??h.type,P=((x=E.get(h.branch))==null?void 0:x.index)??0;St(a,h,l,u,P,b),Dt(r,h,l,o),Nt(r,h,l,o)}g==="TB"||g==="BT"?k.set(h.id,{x:l.x,y:l.posWithOffset}):k.set(h.id,{x:l.posWithOffset,y:l.y}),o=g==="BT"&&s?o+M:o+M+T,o>v&&(v=o)})},"drawCommits"),_t=d((e,t,n,a,r)=>{const o=(g==="TB"||g==="BT"?n.x<a.x:n.y<a.y)?t.branch:e.branch,c=d(m=>m.branch===o,"isOnBranchToGetCurve"),s=d(m=>m.seq>e.seq&&m.seq<t.seq,"isBetweenCommits");return[...r.values()].some(m=>s(m)&&c(m))},"shouldRerouteArrow"),A=d((e,t,n=0)=>{const a=e+Math.abs(e-t)/2;if(n>5)return a;if(O.every(o=>Math.abs(o-a)>=10))return O.push(a),a;const r=Math.abs(e-t);return A(e,t-r/5,n+1)},"findLane"),Kt=d((e,t,n,a)=>{var x,u,b,P,S;const r=k.get(t.id),o=k.get(n.id);if(r===void 0||o===void 0)throw new Error(`Commit positions not found for commits ${t.id} and ${n.id}`);const c=_t(t,n,r,o,a);let s,m="",y="",$=0,h=0,l=(x=E.get(n.branch))==null?void 0:x.index;if(n.type===p.MERGE&&t.id!==n.parents[0]&&(l=(u=E.get(t.branch))==null?void 0:u.index),c){m="A 10 10, 0, 0, 0,",y="A 10 10, 0, 0, 1,",$=10,h=10;const L=r.y<o.y?A(r.y,o.y):A(o.y,r.y),B=r.x<o.x?A(r.x,o.x):A(o.x,r.x);g==="TB"?r.x<o.x?s=`M ${r.x} ${r.y} L ${B-$} ${r.y} ${y} ${B} ${r.y+h} L ${B} ${o.y-$} ${m} ${B+h} ${o.y} L ${o.x} ${o.y}`:(l=(b=E.get(t.branch))==null?void 0:b.index,s=`M ${r.x} ${r.y} L ${B+$} ${r.y} ${m} ${B} ${r.y+h} L ${B} ${o.y-$} ${y} ${B-h} ${o.y} L ${o.x} ${o.y}`):g==="BT"?r.x<o.x?s=`M ${r.x} ${r.y} L ${B-$} ${r.y} ${m} ${B} ${r.y-h} L ${B} ${o.y+$} ${y} ${B+h} ${o.y} L ${o.x} ${o.y}`:(l=(P=E.get(t.branch))==null?void 0:P.index,s=`M ${r.x} ${r.y} L ${B+$} ${r.y} ${y} ${B} ${r.y-h} L ${B} ${o.y+$} ${m} ${B-h} ${o.y} L ${o.x} ${o.y}`):r.y<o.y?s=`M ${r.x} ${r.y} L ${r.x} ${L-$} ${m} ${r.x+h} ${L} L ${o.x-$} ${L} ${y} ${o.x} ${L+h} L ${o.x} ${o.y}`:(l=(S=E.get(t.branch))==null?void 0:S.index,s=`M ${r.x} ${r.y} L ${r.x} ${L+$} ${y} ${r.x+h} ${L} L ${o.x-$} ${L} ${m} ${o.x} ${L-h} L ${o.x} ${o.y}`)}else m="A 20 20, 0, 0, 0,",y="A 20 20, 0, 0, 1,",$=20,h=20,g==="TB"?(r.x<o.x&&(s=n.type===p.MERGE&&t.id!==n.parents[0]?`M ${r.x} ${r.y} L ${r.x} ${o.y-$} ${m} ${r.x+h} ${o.y} L ${o.x} ${o.y}`:`M ${r.x} ${r.y} L ${o.x-$} ${r.y} ${y} ${o.x} ${r.y+h} L ${o.x} ${o.y}`),r.x>o.x&&(m="A 20 20, 0, 0, 0,",y="A 20 20, 0, 0, 1,",$=20,h=20,s=n.type===p.MERGE&&t.id!==n.parents[0]?`M ${r.x} ${r.y} L ${r.x} ${o.y-$} ${y} ${r.x-h} ${o.y} L ${o.x} ${o.y}`:`M ${r.x} ${r.y} L ${o.x+$} ${r.y} ${m} ${o.x} ${r.y+h} L ${o.x} ${o.y}`),r.x===o.x&&(s=`M ${r.x} ${r.y} L ${o.x} ${o.y}`)):g==="BT"?(r.x<o.x&&(s=n.type===p.MERGE&&t.id!==n.parents[0]?`M ${r.x} ${r.y} L ${r.x} ${o.y+$} ${y} ${r.x+h} ${o.y} L ${o.x} ${o.y}`:`M ${r.x} ${r.y} L ${o.x-$} ${r.y} ${m} ${o.x} ${r.y-h} L ${o.x} ${o.y}`),r.x>o.x&&(m="A 20 20, 0, 0, 0,",y="A 20 20, 0, 0, 1,",$=20,h=20,s=n.type===p.MERGE&&t.id!==n.parents[0]?`M ${r.x} ${r.y} L ${r.x} ${o.y+$} ${m} ${r.x-h} ${o.y} L ${o.x} ${o.y}`:`M ${r.x} ${r.y} L ${o.x-$} ${r.y} ${m} ${o.x} ${r.y-h} L ${o.x} ${o.y}`),r.x===o.x&&(s=`M ${r.x} ${r.y} L ${o.x} ${o.y}`)):(r.y<o.y&&(s=n.type===p.MERGE&&t.id!==n.parents[0]?`M ${r.x} ${r.y} L ${o.x-$} ${r.y} ${y} ${o.x} ${r.y+h} L ${o.x} ${o.y}`:`M ${r.x} ${r.y} L ${r.x} ${o.y-$} ${m} ${r.x+h} ${o.y} L ${o.x} ${o.y}`),r.y>o.y&&(s=n.type===p.MERGE&&t.id!==n.parents[0]?`M ${r.x} ${r.y} L ${o.x-$} ${r.y} ${m} ${o.x} ${r.y-h} L ${o.x} ${o.y}`:`M ${r.x} ${r.y} L ${r.x} ${o.y+$} ${y} ${r.x+h} ${o.y} L ${o.x} ${o.y}`),r.y===o.y&&(s=`M ${r.x} ${r.y} L ${o.x} ${o.y}`));if(s===void 0)throw new Error("Line definition not found");e.append("path").attr("d",s).attr("class","arrow arrow"+l%8)},"drawArrow"),Yt=d((e,t)=>{const n=e.append("g").attr("class","commit-arrows");[...t.keys()].forEach(a=>{const r=t.get(a);r.parents&&r.parents.length>0&&r.parents.forEach(o=>{Kt(n,t.get(o),r,t)})})},"drawArrows"),Ut=d((e,t)=>{const n=e.append("g");t.forEach((a,r)=>{var x;const o=r%8,c=(x=E.get(a.name))==null?void 0:x.pos;if(c===void 0)throw new Error(`Position not found for branch ${a.name}`);const s=n.append("line");s.attr("x1",0),s.attr("y1",c),s.attr("x2",v),s.attr("y2",c),s.attr("class","branch branch"+o),g==="TB"?(s.attr("y1",30),s.attr("x1",c),s.attr("y2",v),s.attr("x2",c)):g==="BT"&&(s.attr("y1",v),s.attr("x1",c),s.attr("y2",30),s.attr("x2",c)),O.push(c);const m=a.name,y=F(m),$=n.insert("rect"),h=n.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+o);h.node().appendChild(y);const l=y.getBBox();$.attr("class","branchLabelBkg label"+o).attr("rx",4).attr("ry",4).attr("x",-l.width-4-((f==null?void 0:f.rotateCommitLabel)===!0?30:0)).attr("y",-l.height/2+8).attr("width",l.width+18).attr("height",l.height+4),h.attr("transform","translate("+(-l.width-14-((f==null?void 0:f.rotateCommitLabel)===!0?30:0))+", "+(c-l.height/2-1)+")"),g==="TB"?($.attr("x",c-l.width/2-10).attr("y",0),h.attr("transform","translate("+(c-l.width/2-5)+", 0)")):g==="BT"?($.attr("x",c-l.width/2-10).attr("y",v),h.attr("transform","translate("+(c-l.width/2-5)+", "+v+")")):$.attr("transform","translate(-19, "+(c-l.height/2)+")")})},"drawBranches"),Vt=d(function(e,t,n,a,r){return E.set(e,{pos:t,index:n}),t+=50+(r?40:0)+(g==="TB"||g==="BT"?a.width/2:0)},"setBranchPosition"),Jt={parser:Rt,db:j,renderer:{draw:d(function(e,t,n,a){if(It(),w.debug("in gitgraph renderer",e+`
`,"id:",t,n),!f)throw new Error("GitGraph config not found");const r=f.rotateCommitLabel??!1,o=a.db;I=o.getCommits();const c=o.getBranchesAsObjArray();g=o.getDirection();const s=dt(`[id="${t}"]`);let m=0;c.forEach((y,$)=>{var P;const h=F(y.name),l=s.append("g"),x=l.insert("g").attr("class","branchLabel"),u=x.insert("g").attr("class","label branch-label");(P=u.node())==null||P.appendChild(h);const b=h.getBBox();m=Vt(y.name,m,$,b,r),u.remove(),x.remove(),l.remove()}),K(s,I,!1),f.showBranches&&Ut(s,c),Yt(s,I),K(s,I,!0),et.insertTitle(s,"gitTitleText",f.titleTopMargin??0,o.getDiagramTitle()),nt(void 0,s,f.diagramPadding,f.useMaxWidth)},"draw")},styles:d(e=>`
  .commit-id,
  .commit-msg,
  .branch-label {
    fill: lightgrey;
    color: lightgrey;
    font-family: 'trebuchet ms', verdana, arial, sans-serif;
    font-family: var(--mermaid-font-family);
  }
  ${[0,1,2,3,4,5,6,7].map(t=>`
        .branch-label${t} { fill: ${e["gitBranchLabel"+t]}; }
        .commit${t} { stroke: ${e["git"+t]}; fill: ${e["git"+t]}; }
        .commit-highlight${t} { stroke: ${e["gitInv"+t]}; fill: ${e["gitInv"+t]}; }
        .label${t}  { fill: ${e["git"+t]}; }
        .arrow${t} { stroke: ${e["git"+t]}; }
        `).join(`
`)}

  .branch {
    stroke-width: 1;
    stroke: ${e.lineColor};
    stroke-dasharray: 2;
  }
  .commit-label { font-size: ${e.commitLabelFontSize}; fill: ${e.commitLabelColor};}
  .commit-label-bkg { font-size: ${e.commitLabelFontSize}; fill: ${e.commitLabelBackground}; opacity: 0.5; }
  .tag-label { font-size: ${e.tagLabelFontSize}; fill: ${e.tagLabelColor};}
  .tag-label-bkg { fill: ${e.tagLabelBackground}; stroke: ${e.tagLabelBorder}; }
  .tag-hole { fill: ${e.textColor}; }

  .commit-merge {
    stroke: ${e.primaryColor};
    fill: ${e.primaryColor};
  }
  .commit-reverse {
    stroke: ${e.primaryColor};
    fill: ${e.primaryColor};
    stroke-width: 3;
  }
  .commit-highlight-outer {
  }
  .commit-highlight-inner {
    stroke: ${e.primaryColor};
    fill: ${e.primaryColor};
  }

  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}
  .gitTitleText {
    text-anchor: middle;
    font-size: 18px;
    fill: ${e.textColor};
  }
`,"getStyles")};export{Jt as diagram};
