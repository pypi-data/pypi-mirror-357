# coding: utf-8

"""
    AristaFlowREST/ResModelManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProcessNodeContext(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instance_id': 'str',
        'instance': 'Instance',
        'node_id': 'int',
        'node_iteration': 'int',
        'param_data_context': 'InputDataContext',
        'user_attributes': 'dict(str, str)'
    }

    attribute_map = {
        'instance_id': 'instanceId',
        'instance': 'instance',
        'node_id': 'nodeId',
        'node_iteration': 'nodeIteration',
        'param_data_context': 'paramDataContext',
        'user_attributes': 'userAttributes'
    }

    def __init__(self, instance_id=None, instance=None, node_id=None, node_iteration=None, param_data_context=None, user_attributes=None):  # noqa: E501
        """ProcessNodeContext - a model defined in Swagger"""  # noqa: E501
        self._instance_id = None
        self._instance = None
        self._node_id = None
        self._node_iteration = None
        self._param_data_context = None
        self._user_attributes = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        self.instance_id = instance_id
        if instance is not None:
            self.instance = instance
        self.node_id = node_id
        if node_iteration is not None:
            self.node_iteration = node_iteration
        if param_data_context is not None:
            self.param_data_context = param_data_context
        if user_attributes is not None:
            self.user_attributes = user_attributes

    @property
    def instance_id(self):
        """Gets the instance_id of this ProcessNodeContext.  # noqa: E501


        :return: The instance_id of this ProcessNodeContext.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this ProcessNodeContext.


        :param instance_id: The instance_id of this ProcessNodeContext.  # noqa: E501
        :type: str
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")  # noqa: E501

        self._instance_id = instance_id

    @property
    def instance(self):
        """Gets the instance of this ProcessNodeContext.  # noqa: E501


        :return: The instance of this ProcessNodeContext.  # noqa: E501
        :rtype: Instance
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this ProcessNodeContext.


        :param instance: The instance of this ProcessNodeContext.  # noqa: E501
        :type: Instance
        """

        self._instance = instance

    @property
    def node_id(self):
        """Gets the node_id of this ProcessNodeContext.  # noqa: E501


        :return: The node_id of this ProcessNodeContext.  # noqa: E501
        :rtype: int
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this ProcessNodeContext.


        :param node_id: The node_id of this ProcessNodeContext.  # noqa: E501
        :type: int
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")  # noqa: E501

        self._node_id = node_id

    @property
    def node_iteration(self):
        """Gets the node_iteration of this ProcessNodeContext.  # noqa: E501


        :return: The node_iteration of this ProcessNodeContext.  # noqa: E501
        :rtype: int
        """
        return self._node_iteration

    @node_iteration.setter
    def node_iteration(self, node_iteration):
        """Sets the node_iteration of this ProcessNodeContext.


        :param node_iteration: The node_iteration of this ProcessNodeContext.  # noqa: E501
        :type: int
        """

        self._node_iteration = node_iteration

    @property
    def param_data_context(self):
        """Gets the param_data_context of this ProcessNodeContext.  # noqa: E501


        :return: The param_data_context of this ProcessNodeContext.  # noqa: E501
        :rtype: InputDataContext
        """
        return self._param_data_context

    @param_data_context.setter
    def param_data_context(self, param_data_context):
        """Sets the param_data_context of this ProcessNodeContext.


        :param param_data_context: The param_data_context of this ProcessNodeContext.  # noqa: E501
        :type: InputDataContext
        """

        self._param_data_context = param_data_context

    @property
    def user_attributes(self):
        """Gets the user_attributes of this ProcessNodeContext.  # noqa: E501


        :return: The user_attributes of this ProcessNodeContext.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._user_attributes

    @user_attributes.setter
    def user_attributes(self, user_attributes):
        """Sets the user_attributes of this ProcessNodeContext.


        :param user_attributes: The user_attributes of this ProcessNodeContext.  # noqa: E501
        :type: dict(str, str)
        """

        self._user_attributes = user_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProcessNodeContext, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProcessNodeContext):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
