name: Create and publish a Docker image - TAG

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  REPO_NAME: ${{ github.event.repository.name }}
  COMPONENT_NAME: sdkServer

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            ${{ github.ref_name }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            GITHUB_TOKEN=${{ secrets.KUBIYA_GITHUB_TOKEN }}

      # - name: Export Docker image
      #   run: |
      #     docker buildx imagetools create -t myimage:${{ github.ref_name }} ${{ steps.meta.outputs.tags }}
      #     docker save myimage:${{ github.ref_name }} -o /tmp/myimage.tar

      # - name: Upload artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: "sdk-py-multi-arch-${{ github.ref_name }}"
      #     path: /tmp/myimage.tar

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::564407622114:role/github-action-role

      - name: Update kubiya_versions.json
        run: |
          aws s3 cp s3://kubiya-cli/stable/kubiya_versions.json kubiya_versions.json || echo "{}" > kubiya_versions.json
          sed -i 's|"'"${{ env.REPO_NAME }}"'": *"[^"]*"|"'"${{ env.REPO_NAME }}"'": "'"${{ env.REGISTRY }}/kubiyabot/${{ env.REPO_NAME }}:${{ github.ref_name }}"'"|' kubiya_versions.json
          aws s3 cp kubiya_versions.json s3://kubiya-cli/stable/kubiya_versions.json --acl public-read

  update-helm-chart:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3


    - name: Extract Component Version
      run: |
        # Extract the new version from the tag
        COMPONENT_NEW_VERSION=${GITHUB_REF#refs/tags/}

        echo "COMPONENT_NEW_VERSION: $COMPONENT_NEW_VERSION"
        echo "COMPONENT_NEW_VERSION=$COMPONENT_NEW_VERSION" >> $GITHUB_ENV

    - name: Checkout Helm Charts repository
      uses: actions/checkout@v3
      with:
        repository: kubiyabot/helm-charts
        ref: main
        token: ${{ secrets.KUBIYA_GITHUB_TOKEN }}

    - name: Get Helm Chart version and bump patch version
      run: |
        HELM_CURRENT_VERSION=$(yq e '.appVersion' charts/kubiya-runner/Chart.yaml)
        HELM_CURRENT_PATCH_VERSION=$(echo $HELM_CURRENT_VERSION | cut -d. -f3)
        HELM_NEW_PATCH_VERSION=$(($HELM_CURRENT_PATCH_VERSION + 1))
        HELM_NEW_VERSION=$(echo $HELM_CURRENT_VERSION | cut -d. -f1-2).$HELM_NEW_PATCH_VERSION

        echo "HELM_NEW_VERSION: $HELM_NEW_VERSION"
        echo "HELM_NEW_VERSION=$HELM_NEW_VERSION" >> $GITHUB_ENV

    - name: Update Helm Chart and push
      run: |
        echo "Updating Helm Chart to version ${{ env.COMPONENT_NEW_VERSION }} for ${{ env.COMPONENT_NAME }}"
        yq e '.toolManager.${{ env.COMPONENT_NAME }}.image.tag = "${{ env.COMPONENT_NEW_VERSION }}"' -i charts/kubiya-runner/values.yaml
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        COMMIT_MSG="Update $GITHUB_REPOSITORY image tag to ${{ env.COMPONENT_NEW_VERSION }} for ${{ env.COMPONENT_NAME }} by $GITHUB_ACTOR"

        # Update Chart.yaml - only first version occurrence and appVersion
        sed -i "0,/version: .*/s//version: $HELM_NEW_VERSION/" charts/kubiya-runner/Chart.yaml
        sed -i "s/appVersion: .*/appVersion: \"$HELM_NEW_VERSION\"/" charts/kubiya-runner/Chart.yaml

        # Check if there are changes
        git add charts/kubiya-runner/values.yaml charts/kubiya-runner/Chart.yaml
        git diff --staged --quiet || HAS_CHANGES=1

        if [ "$HAS_CHANGES" ]; then
            git commit -m "$COMMIT_MSG"
            git push origin main
        else
            echo "No changes to commit."
            echo "NOTHING_TO_COMMIT=1" >> "$GITHUB_ENV"
        fi        