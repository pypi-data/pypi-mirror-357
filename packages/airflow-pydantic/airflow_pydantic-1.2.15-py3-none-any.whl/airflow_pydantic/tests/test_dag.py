from importlib.metadata import version

if version("apache-airflow") >= "3.0.0":
    _AIRFLOW_3 = True
else:
    _AIRFLOW_3 = False

from airflow_pydantic import Dag, DagArgs


class TestDag:
    def test_dag_args(self, dag_args):
        d = dag_args
        # Test roundtrips
        assert d == DagArgs.model_validate(d.model_dump(exclude_unset=True))
        assert d == DagArgs.model_validate_json(d.model_dump_json(exclude_unset=True))

    def test_dag(self):
        d = Dag(
            dag_id="a-dag",
            default_args=None,
            tasks={},
        )

        # Test roundtrips
        assert d == Dag.model_validate(d.model_dump(exclude_unset=True))
        assert d == Dag.model_validate_json(d.model_dump_json(exclude_unset=True))

    def test_dag_none_schedule(self, dag_none_schedule):
        d = dag_none_schedule
        # Test roundtrips
        assert d == Dag.model_validate(d.model_dump(exclude_unset=True))
        assert d == Dag.model_validate_json(d.model_dump_json(exclude_unset=True))

        inst = d.instantiate()
        assert inst.dag_id == "a-dag"

        if _AIRFLOW_3:
            assert inst.schedule is None
        else:
            assert inst.schedule_interval is None

    def test_dag_convert_params(self, bash_sensor_args):
        d = Dag(
            dag_id="a-dag",
            default_args=None,
            params=bash_sensor_args,
        )

        assert "bash_command" in d.params
        assert "env" in d.params
        assert "output_encoding" in d.params
        assert "retry_exit_code" in d.params
        assert (
            d.render()
            == """# Generated by airflow-config
from airflow.models import DAG
from airflow.models.param import Param

with DAG(
    params={
        "bash_command": Param("test", title="Bash Command", description="bash command string, list of strings, or model", type="string"),
        "env": Param(None, title="Env", description=None, type=["null", "object"]),
        "output_encoding": Param(
            None, title="Output Encoding", description="Output encoding for the command, default is 'utf-8'", type=["null", "string"]
        ),
        "retry_exit_code": Param(None, title="Retry Exit Code", description=None, type=["null", "boolean"]),
    },
    dag_id="a-dag",
) as dag:
    ...
"""
        )
