[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "smart-api-integrations"
version = "0.1.0"
description = "Eliminate API integration boilerplate. Define endpoints once, get intelligent client classes with full IDE support."
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
authors = [
    {name = "Ananda Behera", email = "behera.anand1@gmail.com"}
]
maintainers = [
    {name = "Ananda Behera", email = "behera.anand1@gmail.com"}
]
keywords = [
    "api", "integration", "webhook", "client", "rest", "automation", 
    "sdk", "http", "requests", "type-safe", "cli"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Code Generators",
    "Typing :: Typed",
]
dependencies = [
    "httpx>=0.23.0",
    "pyyaml>=6.0",
    "requests>=2.28.0",
    "pydantic>=1.8.0,<3.0.0",
    "click>=8.0.0",
]

[project.optional-dependencies]
# Framework integrations
django = ["django>=3.2.0"]
flask = ["flask>=2.0.0"]
fastapi = ["fastapi>=0.68.0", "uvicorn>=0.15.0"]

# AI-powered endpoint generation
ai = ["openai>=1.0.0"]

# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
    "twine>=4.0.0",
    "build>=0.8.0",
]

# Testing dependencies
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "responses>=0.22.0",
]

# Documentation dependencies
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=8.5.0",
    "mkdocstrings[python]>=0.19.0",
]

# All optional dependencies
all = [
    "smart-api-integrations[django,flask,fastapi,ai]",
]

[project.urls]
Homepage = "https://github.com/behera116/smart-api-integrations"
Documentation = "https://github.com/behera116/smart-api-integrations/tree/main/docs"
Repository = "https://github.com/behera116/smart-api-integrations"
"Bug Tracker" = "https://github.com/behera116/smart-api-integrations/issues"
Changelog = "https://github.com/behera116/smart-api-integrations/blob/main/CHANGELOG.md"

[project.scripts]
smart-api-integrations = "smart_api_integrations.cli.main:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
smart_api_integrations = ["py.typed", "templates/*", "providers/**/*.yaml", "providers/**/*.yml"]

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311", "py312"]
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
show_error_codes = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=src/smart_api_integrations",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--strict-markers",
    "--strict-config",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 