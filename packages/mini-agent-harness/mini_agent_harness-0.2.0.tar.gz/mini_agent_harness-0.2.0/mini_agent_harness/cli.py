from pathlib import Path
import subprocess
import sys
from typing import Optional

import typer

app = typer.Typer(add_completion=False, help="Mini Agent Harness CLI")


@app.command()
def init(agent_name: Optional[str] = typer.Argument("quickstart", help="Name of the example agent to generate")):
    """Generate an example agent YAML stub under the ./agents folder."""
    agents_dir = Path("agents")
    agents_dir.mkdir(exist_ok=True)

    target_path = agents_dir / f"{agent_name}.yaml"
    if target_path.exists():
        typer.echo(f"‚ö†Ô∏è  {target_path} already exists. Skipping generation.")
        raise typer.Exit()

    yaml_stub = (
        "name: Quickstart Agent\n"
        "description: A minimal agent spec example generated by mini-agent init.\n"
        "tools: []\n"
    )
    target_path.write_text(yaml_stub)
    typer.echo(f"‚úÖ Generated {target_path}")


@app.command()
def serve(model: str = typer.Option("gpt-3.5-turbo", "--model", help="Model name or path to serve with")):
    """Serve the agent via FastAPI (placeholder implementation)."""
    try:
        import uvicorn  # type: ignore
    except ModuleNotFoundError as exc:  # pragma: no cover
        typer.echo("Error: 'uvicorn' not installed. Run `poetry add uvicorn fastapi --group main`.")
        raise typer.Exit(1) from exc

    from importlib import import_module

    # Import here to avoid FastAPI requirement unless serve is run
    server_mod = import_module("mini_agent_harness.server")

    typer.echo(f"üöÄ Serving on http://127.0.0.1:8000  (model={model})")
    uvicorn.run(server_mod.app, host="0.0.0.0", port=8000, reload=False)


@app.command()
def test(pytest_args: Optional[str] = typer.Argument(None, help="Additional arguments forwarded to pytest")):
    """Run the project's pytest suite with the built-in harness."""
    cmd = [sys.executable, "-m", "pytest"]
    if pytest_args:
        cmd.extend(pytest_args.split())
    raise SystemExit(subprocess.call(cmd))


if __name__ == "__main__":
    app() 