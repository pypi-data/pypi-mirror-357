#
include:
  - project: 'cta-computing/dpps/aiv/dpps-aiv-toolkit'
    ref: 1e9b640800ac73c215ce59df01330085d05b335e
    file: 'ci-functions.yml'

  - 'aiv-config.yml'

variables:
  CHART_LOCATION: chart
  CHART_NAME: calibpipe
  CHART_EXTRA_VALUES: "--set dev.client_image_tag=${DOCKER_TAG}"
  CONDA_IMAGE: "quay.io/condaforge/miniforge3:24.11.3-0"
  CTAPIPE_VERSION: 'latest'

stages:
    - prepare
    - lint
    - build
    - tests
    - sonarqube
    - report
    - doc
    - publish
    - changelog

default:
    image: harbor.cta-observatory.org/proxy_cache/python:3.12

#
# Anchors definition
#
.env_template: &env_setup
    before_script:
        - apt-get install git
        - pip install pylint pylint-exit anybadge
        - |-
            if [ "$CTAPIPE_VERSION" = "nightly" ]; then
              pip install git+https://github.com/cta-observatory/ctapipe.git
            fi
        - echo -n $RDAMS_TOKEN > rdams_token.txt
        - >
          echo "url: https://cds.climate.copernicus.eu/api" > ~/.cdsapirc
        - >
          echo "key: $CDS_KEY" >> ~/.cdsapirc
        - cp ~/.cdsapirc ./

.unittest_template:
    stage: tests
    needs: []
    <<: *env_setup
    script:
        - pip install .[test]
        - >
          echo "url: https://cds.climate.copernicus.eu/api" > ~/.cdsapirc
        - >
          echo "key: $CDS_KEY" >> ~/.cdsapirc
        - mkdir -p ./src/calibpipe/tests/data/telescope/camera
        - mkdir -p ./src/calibpipe/tests/data/telescope/throughput
        - mkdir -p ./src/calibpipe/tests/data/array
        - curl -o ./src/calibpipe/tests/data/array/cross_calibration_test_dl2.h5 $DL2_PROD5_CTAPIPE_CC
        - curl -o ./src/calibpipe/tests/data/telescope/throughput/lst_muon_table.h5 $DL1_MUON_SIM_LST
        - curl -o ./src/calibpipe/tests/data/telescope/throughput/empty_muon_table.h5 $EMPTY_MUON_TABLE
        - curl -o ./src/calibpipe/tests/data/telescope/camera/flatfield_LST_dark.simtel.gz $CAM_CALIB_TEST_DATA/flasher_LST_dark.simtel.gz
        - curl -o ./src/calibpipe/tests/data/telescope/camera/pedestal_LST_dark.simtel.gz $CAM_CALIB_TEST_DATA/pedestals_LST_dark.simtel.gz
        - |
          for mode in single_chunk same_chunks different_chunks; do
            curl -o ./src/calibpipe/tests/data/telescope/camera/calibpipe_v0.2.0_statsagg_${mode}.dl1.h5 $CAM_CALIB_TEST_DATA/calibpipe_v0.2.0_statsagg_${mode}.dl1.h5
          done
        - pytest -v --cov=calibpipe --junitxml=report.xml -m "not gdas and not db and not integration"
    artifacts:
        when: always
        reports:
            junit: report.xml

#
# Jobs
#
pylint:
    stage: lint
    needs: []
    <<: *env_setup
    script:
        - pip install .[test]
        - mkdir ./pylint
        - pylint --fail-under 5.0 ./src/calibpipe/ --output-format=json2:pylint.json,colorized | tee ./pylint/pylint.log || pylint-exit $?
        - PYLINT_SCORE=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' ./pylint/pylint.log)
        - anybadge --label=Pylint --file=pylint/pylint.svg --value=$PYLINT_SCORE 2=red 4=orange 8=yellow 10=green
        - echo "Pylint score is $PYLINT_SCORE"
    artifacts:
        paths:
            - ./pylint/
            - pylint.json

unittests:
    parallel:
        matrix:
        - PYTHON_VERSION: ["3.10", "3.11", "3.12", latest]
          CTAPIPE_VERSION: [nightly, latest]
    image: harbor.cta-observatory.org/proxy_cache/python:$PYTHON_VERSION
    rules:
        - if: '$PYTHON_VERSION == "latest" && $CTAPIPE_VERSION == "latest"'
          allow_failure: true
        - if: '$CTAPIPE_VERSION == "nightly"'
          allow_failure: true
        - if: '$CTAPIPE_VERSION'
          allow_failure: false
        - if: '$PYTHON_VERSION == "latest"'
          allow_failure: true
        - if: '$PYTHON_VERSION'
          allow_failure: false
    extends: [.unittest_template]

test:
    stage: tests
    <<: *env_setup
    services:
        - name: harbor.cta-observatory.org/proxy_cache/postgres:17
          alias: postgres
    variables:
        POSTGRES_DB: TEST_CALIBPIPE_DB
        POSTGRES_USER: TEST_CALIBPIPE_DB_USER
        POSTGRES_PASSWORD: DUMMY_PSWRD
        POSTGRES_HOST_AUTH_METHOD: trust
    script:
        - pip install -e .[test]
        - pip install coverage-badge
        - mkdir -pv test
        - mkdir -p ./src/calibpipe/tests/data/telescope/camera
        - mkdir -p ./src/calibpipe/tests/data/telescope/throughput
        - mkdir -p ./src/calibpipe/tests/data/array
        - curl -o ./src/calibpipe/tests/data/array/cross_calibration_test_dl2.h5 $DL2_PROD5_CTAPIPE_CC
        - curl -o ./src/calibpipe/tests/data/telescope/throughput/lst_muon_table.h5 $DL1_MUON_SIM_LST
        - curl -o ./src/calibpipe/tests/data/telescope/throughput/empty_muon_table.h5 $EMPTY_MUON_TABLE
        - curl -o ./src/calibpipe/tests/data/telescope/camera/flatfield_LST_dark.simtel.gz $CAM_CALIB_TEST_DATA/flasher_LST_dark.simtel.gz
        - curl -o ./src/calibpipe/tests/data/telescope/camera/pedestal_LST_dark.simtel.gz $CAM_CALIB_TEST_DATA/pedestals_LST_dark.simtel.gz
        - |
          for mode in single_chunk same_chunks different_chunks; do
            curl -o ./src/calibpipe/tests/data/telescope/camera/calibpipe_v0.2.0_statsagg_${mode}.dl1.h5 $CAM_CALIB_TEST_DATA/calibpipe_v0.2.0_statsagg_${mode}.dl1.h5
          done
        - pytest -v --cov=calibpipe --junitxml=test/report.xml  --cov-report=xml:test/coverage.xml
        - coverage-badge
    coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
    artifacts:
        when: always
        reports:
            junit: test/report.xml
        paths:
            - test/coverage.xml
            - test/report.xml
            - "*.ecsv"
            - "*.log"

build-docs:
    before_script:
        - apt-get install -y curl
        - curl -fsSL https://deb.nodesource.com/setup_current.x | bash -
        - apt-get install -y nodejs
        - apt-get install -y --no-install-recommends chromium libnss3
        - npm install -g playwright
        - npm install -g @mermaid-js/mermaid-cli
        - export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
        - export PUPPETEER_EXECUTABLE_PATH=$(which chromium-browser)
        - python --version
        - pip install .[doc]

publish-chart:
  rules:
    - when: never

collect-test-artifacts:
    needs:
    - job: unittests
      artifacts: true
    - job: test
      artifacts: true
    - job: collect-manual-tests
      artifacts: true

k8s-integration-tests:
    rules:
    - when: never
