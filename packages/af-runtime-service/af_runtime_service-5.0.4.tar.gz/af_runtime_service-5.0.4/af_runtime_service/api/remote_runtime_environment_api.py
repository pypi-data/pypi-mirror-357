# coding: utf-8

"""
    AristaFlowREST/RuntimeService

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 5.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from af_runtime_service.api_client import ApiClient


class RemoteRuntimeEnvironmentApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def application_closed(self, body, session_id, **kwargs):  # noqa: E501
        """application_closed  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.application_closed(body, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DataContext body: (required)
        :param str session_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.application_closed_with_http_info(body, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.application_closed_with_http_info(body, session_id, **kwargs)  # noqa: E501
            return data

    def application_closed_with_http_info(self, body, session_id, **kwargs):  # noqa: E501
        """application_closed  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.application_closed_with_http_info(body, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DataContext body: (required)
        :param str session_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method application_closed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `application_closed`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `application_closed`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/RemoteRuntimeEnvironment/{sessionId}/closing', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def application_closed_no_dc(self, session_id, **kwargs):  # noqa: E501
        """application_closed_no_dc  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.application_closed_no_dc(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.application_closed_no_dc_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.application_closed_no_dc_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def application_closed_no_dc_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """application_closed_no_dc  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.application_closed_no_dc_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method application_closed_no_dc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `application_closed_no_dc`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/RemoteRuntimeEnvironment/{sessionId}/closing', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def application_failed(self, body, error_code, session_id, **kwargs):  # noqa: E501
        """application_failed  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.application_failed(body, error_code, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DataContext body: (required)
        :param int error_code: (required)
        :param str session_id: (required)
        :param str error_msg:
        :param str state:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.application_failed_with_http_info(body, error_code, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.application_failed_with_http_info(body, error_code, session_id, **kwargs)  # noqa: E501
            return data

    def application_failed_with_http_info(self, body, error_code, session_id, **kwargs):  # noqa: E501
        """application_failed  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.application_failed_with_http_info(body, error_code, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DataContext body: (required)
        :param int error_code: (required)
        :param str session_id: (required)
        :param str error_msg:
        :param str state:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'error_code', 'session_id', 'error_msg', 'state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method application_failed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `application_failed`")  # noqa: E501
        # verify the required parameter 'error_code' is set
        if ('error_code' not in params or
                params['error_code'] is None):
            raise ValueError("Missing the required parameter `error_code` when calling `application_failed`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `application_failed`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []
        if 'error_code' in params:
            query_params.append(('errorCode', params['error_code']))  # noqa: E501
        if 'error_msg' in params:
            query_params.append(('errorMsg', params['error_msg']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/RemoteRuntimeEnvironment/{sessionId}/failure', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def application_failed_no_dc(self, session_id, error_code, **kwargs):  # noqa: E501
        """application_failed_no_dc  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.application_failed_no_dc(session_id, error_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: (required)
        :param int error_code: (required)
        :param str error_msg:
        :param str state:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.application_failed_no_dc_with_http_info(session_id, error_code, **kwargs)  # noqa: E501
        else:
            (data) = self.application_failed_no_dc_with_http_info(session_id, error_code, **kwargs)  # noqa: E501
            return data

    def application_failed_no_dc_with_http_info(self, session_id, error_code, **kwargs):  # noqa: E501
        """application_failed_no_dc  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.application_failed_no_dc_with_http_info(session_id, error_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: (required)
        :param int error_code: (required)
        :param str error_msg:
        :param str state:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'error_code', 'error_msg', 'state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method application_failed_no_dc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `application_failed_no_dc`")  # noqa: E501
        # verify the required parameter 'error_code' is set
        if ('error_code' not in params or
                params['error_code'] is None):
            raise ValueError("Missing the required parameter `error_code` when calling `application_failed_no_dc`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []
        if 'error_code' in params:
            query_params.append(('errorCode', params['error_code']))  # noqa: E501
        if 'error_msg' in params:
            query_params.append(('errorMsg', params['error_msg']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/RemoteRuntimeEnvironment/{sessionId}/failure', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def application_reset(self, body, session_id, **kwargs):  # noqa: E501
        """application_reset  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.application_reset(body, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DataContext body: (required)
        :param str session_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.application_reset_with_http_info(body, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.application_reset_with_http_info(body, session_id, **kwargs)  # noqa: E501
            return data

    def application_reset_with_http_info(self, body, session_id, **kwargs):  # noqa: E501
        """application_reset  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.application_reset_with_http_info(body, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DataContext body: (required)
        :param str session_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method application_reset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `application_reset`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `application_reset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/RemoteRuntimeEnvironment/{sessionId}/reset', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def application_reset_no_dc(self, session_id, **kwargs):  # noqa: E501
        """application_reset_no_dc  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.application_reset_no_dc(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.application_reset_no_dc_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.application_reset_no_dc_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def application_reset_no_dc_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """application_reset_no_dc  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.application_reset_no_dc_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method application_reset_no_dc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `application_reset_no_dc`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/RemoteRuntimeEnvironment/{sessionId}/reset', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def application_reset_to(self, body, session_id, **kwargs):  # noqa: E501
        """application_reset_to  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.application_reset_to(body, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DataContext body: (required)
        :param str session_id: (required)
        :param str savepoint_id:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.application_reset_to_with_http_info(body, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.application_reset_to_with_http_info(body, session_id, **kwargs)  # noqa: E501
            return data

    def application_reset_to_with_http_info(self, body, session_id, **kwargs):  # noqa: E501
        """application_reset_to  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.application_reset_to_with_http_info(body, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DataContext body: (required)
        :param str session_id: (required)
        :param str savepoint_id:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'session_id', 'savepoint_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method application_reset_to" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `application_reset_to`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `application_reset_to`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []
        if 'savepoint_id' in params:
            query_params.append(('savepointId', params['savepoint_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/RemoteRuntimeEnvironment/{sessionId}/reset-to', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def application_reset_to_no_dc(self, session_id, **kwargs):  # noqa: E501
        """application_reset_to_no_dc  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.application_reset_to_no_dc(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: (required)
        :param str savepoint_id:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.application_reset_to_no_dc_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.application_reset_to_no_dc_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def application_reset_to_no_dc_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """application_reset_to_no_dc  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.application_reset_to_no_dc_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: (required)
        :param str savepoint_id:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'savepoint_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method application_reset_to_no_dc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `application_reset_to_no_dc`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []
        if 'savepoint_id' in params:
            query_params.append(('savepointId', params['savepoint_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/RemoteRuntimeEnvironment/{sessionId}/reset-to', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def application_reset_to_previous_savepoint(self, body, session_id, **kwargs):  # noqa: E501
        """application_reset_to_previous_savepoint  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.application_reset_to_previous_savepoint(body, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DataContext body: (required)
        :param str session_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.application_reset_to_previous_savepoint_with_http_info(body, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.application_reset_to_previous_savepoint_with_http_info(body, session_id, **kwargs)  # noqa: E501
            return data

    def application_reset_to_previous_savepoint_with_http_info(self, body, session_id, **kwargs):  # noqa: E501
        """application_reset_to_previous_savepoint  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.application_reset_to_previous_savepoint_with_http_info(body, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DataContext body: (required)
        :param str session_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method application_reset_to_previous_savepoint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `application_reset_to_previous_savepoint`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `application_reset_to_previous_savepoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/RemoteRuntimeEnvironment/{sessionId}/reset-to-prev-sp', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def application_reset_to_previous_savepoint_no_dc(self, session_id, **kwargs):  # noqa: E501
        """application_reset_to_previous_savepoint_no_dc  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.application_reset_to_previous_savepoint_no_dc(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.application_reset_to_previous_savepoint_no_dc_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.application_reset_to_previous_savepoint_no_dc_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def application_reset_to_previous_savepoint_no_dc_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """application_reset_to_previous_savepoint_no_dc  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.application_reset_to_previous_savepoint_no_dc_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method application_reset_to_previous_savepoint_no_dc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `application_reset_to_previous_savepoint_no_dc`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/RemoteRuntimeEnvironment/{sessionId}/reset-to-prev-sp', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def application_suspended(self, body, session_id, **kwargs):  # noqa: E501
        """application_suspended  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.application_suspended(body, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DataContext body: (required)
        :param str session_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.application_suspended_with_http_info(body, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.application_suspended_with_http_info(body, session_id, **kwargs)  # noqa: E501
            return data

    def application_suspended_with_http_info(self, body, session_id, **kwargs):  # noqa: E501
        """application_suspended  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.application_suspended_with_http_info(body, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DataContext body: (required)
        :param str session_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method application_suspended" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `application_suspended`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `application_suspended`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/RemoteRuntimeEnvironment/{sessionId}/suspension', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def application_suspended_no_dc(self, session_id, **kwargs):  # noqa: E501
        """application_suspended_no_dc  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.application_suspended_no_dc(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.application_suspended_no_dc_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.application_suspended_no_dc_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def application_suspended_no_dc_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """application_suspended_no_dc  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.application_suspended_no_dc_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method application_suspended_no_dc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `application_suspended_no_dc`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/RemoteRuntimeEnvironment/{sessionId}/suspension', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_application_state(self, session_id, **kwargs):  # noqa: E501
        """get_application_state  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_state(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: (required)
        :param str savepoint_id:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_application_state_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_application_state_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def get_application_state_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """get_application_state  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_state_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: (required)
        :param str savepoint_id:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'savepoint_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `get_application_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []
        if 'savepoint_id' in params:
            query_params.append(('savepointId', params['savepoint_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/RemoteRuntimeEnvironment/{sessionId}/application-state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_last_savepoint(self, session_id, **kwargs):  # noqa: E501
        """get_last_savepoint  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_last_savepoint(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_last_savepoint_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_last_savepoint_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def get_last_savepoint_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """get_last_savepoint  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_last_savepoint_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_last_savepoint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `get_last_savepoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/RemoteRuntimeEnvironment/{sessionId}/savepoint', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_localised_activity_instance(self, session_id, **kwargs):  # noqa: E501
        """get_localised_activity_instance  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_localised_activity_instance(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: (required)
        :return: ActivityInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_localised_activity_instance_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_localised_activity_instance_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def get_localised_activity_instance_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """get_localised_activity_instance  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_localised_activity_instance_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: (required)
        :return: ActivityInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_localised_activity_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `get_localised_activity_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/RemoteRuntimeEnvironment/{sessionId}/activity-instance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ActivityInstance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_unreplied_requests(self, session_id, **kwargs):  # noqa: E501
        """get_unreplied_requests  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_unreplied_requests(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: (required)
        :return: list[ConcreteExecutionMessage]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_unreplied_requests_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_unreplied_requests_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def get_unreplied_requests_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """get_unreplied_requests  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_unreplied_requests_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: (required)
        :return: list[ConcreteExecutionMessage]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_unreplied_requests" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `get_unreplied_requests`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/RemoteRuntimeEnvironment/{sessionId}/unreplied-requests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ConcreteExecutionMessage]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reply_message(self, body, **kwargs):  # noqa: E501
        """reply_message  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reply_message(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConcreteReplyMessage body: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reply_message_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.reply_message_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def reply_message_with_http_info(self, body, **kwargs):  # noqa: E501
        """reply_message  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reply_message_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConcreteReplyMessage body: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reply_message" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `reply_message`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/RemoteRuntimeEnvironment/reply', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_application_state(self, body, session_id, **kwargs):  # noqa: E501
        """set_application_state  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_application_state(body, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: (required)
        :param str session_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_application_state_with_http_info(body, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_application_state_with_http_info(body, session_id, **kwargs)  # noqa: E501
            return data

    def set_application_state_with_http_info(self, body, session_id, **kwargs):  # noqa: E501
        """set_application_state  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_application_state_with_http_info(body, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: (required)
        :param str session_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_application_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_application_state`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `set_application_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/RemoteRuntimeEnvironment/{sessionId}/application-state', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_null_application_state(self, session_id, **kwargs):  # noqa: E501
        """set_null_application_state  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_null_application_state(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_null_application_state_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_null_application_state_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def set_null_application_state_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """set_null_application_state  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_null_application_state_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_null_application_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `set_null_application_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/RemoteRuntimeEnvironment/{sessionId}/application-state', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_null_savepoint(self, session_id, savepoint_id, **kwargs):  # noqa: E501
        """set_null_savepoint  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_null_savepoint(session_id, savepoint_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: (required)
        :param str savepoint_id: (required)
        :param bool flush:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_null_savepoint_with_http_info(session_id, savepoint_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_null_savepoint_with_http_info(session_id, savepoint_id, **kwargs)  # noqa: E501
            return data

    def set_null_savepoint_with_http_info(self, session_id, savepoint_id, **kwargs):  # noqa: E501
        """set_null_savepoint  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_null_savepoint_with_http_info(session_id, savepoint_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: (required)
        :param str savepoint_id: (required)
        :param bool flush:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'savepoint_id', 'flush']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_null_savepoint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `set_null_savepoint`")  # noqa: E501
        # verify the required parameter 'savepoint_id' is set
        if ('savepoint_id' not in params or
                params['savepoint_id'] is None):
            raise ValueError("Missing the required parameter `savepoint_id` when calling `set_null_savepoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []
        if 'savepoint_id' in params:
            query_params.append(('savepointId', params['savepoint_id']))  # noqa: E501
        if 'flush' in params:
            query_params.append(('flush', params['flush']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/RemoteRuntimeEnvironment/{sessionId}/savepoint', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_savepoint(self, body, savepoint_id, session_id, **kwargs):  # noqa: E501
        """set_savepoint  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_savepoint(body, savepoint_id, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DataContext body: (required)
        :param str savepoint_id: (required)
        :param str session_id: (required)
        :param bool flush:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_savepoint_with_http_info(body, savepoint_id, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_savepoint_with_http_info(body, savepoint_id, session_id, **kwargs)  # noqa: E501
            return data

    def set_savepoint_with_http_info(self, body, savepoint_id, session_id, **kwargs):  # noqa: E501
        """set_savepoint  # noqa: E501

        This operation has additional header data: x-AF-Accept-Version (optional), x-AF-Caller-URI (required, may be a cookie), x-AF-Security-Token (required, may be a cookie), x-AF-Add-UrlEnc-Attr (optional). See operation /header-data for the corresponding data structures.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_savepoint_with_http_info(body, savepoint_id, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DataContext body: (required)
        :param str savepoint_id: (required)
        :param str session_id: (required)
        :param bool flush:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'savepoint_id', 'session_id', 'flush']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_savepoint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_savepoint`")  # noqa: E501
        # verify the required parameter 'savepoint_id' is set
        if ('savepoint_id' not in params or
                params['savepoint_id'] is None):
            raise ValueError("Missing the required parameter `savepoint_id` when calling `set_savepoint`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `set_savepoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []
        if 'savepoint_id' in params:
            query_params.append(('savepointId', params['savepoint_id']))  # noqa: E501
        if 'flush' in params:
            query_params.append(('flush', params['flush']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/RemoteRuntimeEnvironment/{sessionId}/savepoint', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
