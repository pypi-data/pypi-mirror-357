"use strict";(self.webpackChunkjupyterlab_chat_extension=self.webpackChunkjupyterlab_chat_extension||[]).push([[515],{5515:(e,t,a)=>{a.r(t),a.d(t,{default:()=>A});var n=a(5063),o=a(9674),r=a(9389),i=a(3549),c=a(9560),s=a(3993),d=a(1689),l=a(6313),h=a(8607),m=a(2088),g=a(1767),u=a(1542),p=a(4918),y=a(484),C=a(7262),v=a(2375);const f={id:"jupyterlab-chat-extension:chatCommandRegistry",description:"The chat command registry used by the jupyterlab-chat-extension.",autoStart:!0,provides:o.IChatCommandRegistry,activate:e=>new o.ChatCommandRegistry};class I{constructor(){this.id="jupyter-chat:emoji-commands",this._slash_commands=[{name:":heart:",replaceWith:"❤",providerId:this.id,description:"Emoji",icon:"❤"},{name:":smile:",replaceWith:"🙂",providerId:this.id,description:"Emoji",icon:"🙂"},{name:":thinking:",replaceWith:"🤔",providerId:this.id,description:"Emoji",icon:"🤔"},{name:":cool:",replaceWith:"😎",providerId:this.id,description:"Emoji",icon:"😎"}],this._regex=/^:\w*:?/}async listCommandCompletions(e){var t,a;const n=null===(a=null===(t=e.currentWord)||void 0===t?void 0:t.match(this._regex))||void 0===a?void 0:a[0];return n?this._slash_commands.filter((e=>e.name.startsWith(n))):[]}async onSubmit(e){}}const b={id:"jupyterlab-chat-extension:emojiCommandsPlugin",description:"Plugin which adds emoji commands to the chat.",autoStart:!0,requires:[o.IChatCommandRegistry],activate:(e,t)=>{t.addProvider(new I)}};var w=a(3345),M=a.n(w);const T={id:"jupyterlab-chat-extension:mentionCommandsPlugin",description:"Plugin which adds user mention commands.",autoStart:!0,requires:[o.IChatCommandRegistry],activate:(e,t)=>{t.addProvider(new R)}};class R{constructor(){this.id="jupyter-chat:mention-commands",this._regex=/@[\w-]*/g}async listCommandCompletions(e){var t,a,n;const o=null===(a=null===(t=e.currentWord)||void 0===t?void 0:t.match(this._regex))||void 0===a?void 0:a[0];if(!o)return[];const r=new Set(null===(n=e.value)||void 0===n?void 0:n.match(this._regex));return Array.from(this._getUsers(e)).filter((e=>e[0].toLowerCase().startsWith(o.toLowerCase()))).filter((e=>!r.has(e[0]))).map((e=>({name:e[0],providerId:this.id,icon:e[1].icon,spaceOnAccept:!0})))}async onSubmit(e){var t,a;const n=null!==(t=e.value.match(this._regex))&&void 0!==t?t:[];for(const t of n){const n=this._getUsers(e).get(t);n&&(null===(a=e.addMention)||void 0===a||a.call(e,n.user))}}_getUsers(e){const t=new Map;return e.chatContext.users.forEach((e=>{let a=e.mention_name;a||(a=x.getMentionName(e),e.mention_name=a),t.set(a,{user:e,icon:M().createElement(o.Avatar,{user:e})})})),t}}var x;!function(e){e.getMentionName=function(e){var t,a;return`@${(null!==(a=null!==(t=e.display_name)&&void 0!==t?t:e.name)&&void 0!==a?a:e.username).replace(/ /g,"-")}`}}(x||(x={}));const W="Chat",F="jupyterlab-chat-extension:factory",D={id:"jupyterlab-chat-extension:attachmentOpener",description:"The attachment opener registry.",autoStart:!0,provides:o.IAttachmentOpenerRegistry,activate:e=>{const t=new o.AttachmentOpenerRegistry;return t.set("file",(t=>{e.commands.execute("docmanager:open",{path:t.value})})),t}},S={id:F,description:"Document factories for chat.",autoStart:!0,requires:[g.IRenderMimeRegistry],optional:[v.IActiveCellManagerToken,o.IAttachmentOpenerRegistry,o.IChatCommandRegistry,r.ICollaborativeContentProvider,l.IDefaultFileBrowser,v.IInputToolbarRegistryFactory,i.ILayoutRestorer,o.IMessageFooterRegistry,v.ISelectionWatcherToken,u.ISettingRegistry,c.IThemeManager,c.IToolbarWidgetRegistry,p.ITranslator,v.IWelcomeMessage],provides:v.IChatFactory,activate:(e,t,a,n,r,i,s,d,l,h,m,g,u,y,f,I)=>{const b=null!=f?f:p.nullTranslator;let w;const M=new v.WidgetConfig({});function T(t){const a=M.config.defaultDirectory,n=t.get("defaultDirectory").composite;i&&a&&a!==n&&e.serviceManager.contents.get(a).then((t=>{0===t.content.length&&e.serviceManager.contents.delete(a).catch((e=>{}))})).catch((()=>{}));let o=Promise.resolve(null);i&&n&&a!==n&&(o=e.serviceManager.contents.get(n,{content:!1}).catch((async()=>e.serviceManager.contents.newUntitled({type:"directory"}).then((async t=>e.serviceManager.contents.rename(t.path,n).catch((a=>{throw e.serviceManager.contents.delete(t.path),new Error(a)})))).catch((e=>{throw new Error(e)}))))),o.then((()=>{M.config={sendWithShiftEnter:t.get("sendWithShiftEnter").composite,stackMessages:t.get("stackMessages").composite,unreadNotifications:t.get("unreadNotifications").composite,enableCodeToolbar:t.get("enableCodeToolbar").composite,sendTypingNotification:t.get("sendTypingNotification").composite,defaultDirectory:n}}))}g&&(y&&(w=(0,c.createToolbarFactory)(y,g,W,F,b)),Promise.all([e.restored,g.load(F)]).then((([,e])=>{T(e),e.changed.connect(T)})).catch((e=>{console.error(`Something went wrong when reading the settings.\n${e}`)})));const R=new c.WidgetTracker({namespace:"chat"});if(e.docRegistry.addFileType(v.chatFileType),i){const e=()=>v.YChat.create();i.sharedModelFactory.registerDocumentFactory("chat",e)}e.serviceManager.ready.then((()=>{const t=e.serviceManager.user.identity,n=new v.LabChatModelFactory({user:t,widgetConfig:M,commands:e.commands,activeCellManager:a,selectionWatcher:m,documentManager:null==s?void 0:s.model.manager});e.docRegistry.addModelFactory(n)})).catch((e=>console.error("The jupyterlab chat model factory is not initialized",e)));const x=new v.ChatWidgetFactory({name:W,label:"Chat",modelName:"chat",fileTypes:["chat"],defaultFor:["chat"],themeManager:u,rmRegistry:t,toolbarFactory:w,translator:b,chatCommandRegistry:r,attachmentOpenerRegistry:n,inputToolbarFactory:d,messageFooterRegistry:h,welcomeMessage:I});if(x.widgetCreated.connect(((t,a)=>{a.context.pathChanged.connect((()=>{R.save(a)})),R.add(a),a.model.unreadChanged.connect((()=>e.commands.notifyCommandChanged(v.CommandIDs.markAsRead)))})),e.docRegistry.addWidgetFactory(x),l){const t=new C.PromiseDelegate,a=()=>{e.commands.hasCommand(v.CommandIDs.openChat)&&(t.resolve(),e.commands.commandChanged.disconnect(a))};e.commands.commandChanged.connect(a),l.restore(R,{command:v.CommandIDs.openChat,args:e=>{var t;return{filepath:null!==(t=e.model.name)&&void 0!==t?t:"",inSidePanel:e instanceof o.ChatWidget}},name:e=>e.model.name,when:t.promise})}return{widgetConfig:M,tracker:R}}},j={id:"jupyterlab-chat-extension:commands",description:"The commands to create or open a chat.",autoStart:!0,requires:[r.ICollaborativeContentProvider,v.IChatFactory],optional:[v.IActiveCellManagerToken,v.IChatPanel,c.ICommandPalette,l.IDefaultFileBrowser,h.ILauncher,v.ISelectionWatcherToken],activate:(e,t,a,r,i,s,l,h,m)=>{const{commands:g}=e,{tracker:u,widgetConfig:p}=a;g.addCommand(v.CommandIDs.createChat,{label:e=>e.isPalette?"Create a new chat":"Chat",caption:"Create a chat",icon:e=>e.isPalette?void 0:o.chatIcon,execute:async t=>{var a,n;const o=null!==(a=t.inSidePanel)&&void 0!==a&&a;let r=null!==(n=t.name)&&void 0!==n?n:null,i="";if(r||(r=(await c.InputDialog.getText({label:"Name",placeholder:"untitled",title:"Create a new chat"})).value),null===r)return;r&&(i=r.endsWith(v.chatFileType.extensions[0])?r:`${r}${v.chatFileType.extensions[0]}`,i=d.PathExt.join(p.config.defaultDirectory||"",i));let s=!0;if(i?await e.serviceManager.contents.get(i,{content:!1}).catch((()=>{s=!1})):s=!1,!s){let t=await e.serviceManager.contents.newUntitled({type:"file",ext:v.chatFileType.extensions[0]});if(i&&(t=await e.serviceManager.contents.rename(t.path,i)),!t)return(0,c.showErrorMessage)("Error creating a chat","An error occurred while creating the chat"),"";i=t.path}if(g.hasCommand(v.CommandIDs.openChat))return g.execute(v.CommandIDs.openChat,{filepath:i,inSidePanel:o});g.execute("docmanager:open",{path:`${i}`,factory:W})}}),s&&s.addItem({category:"Chat",command:v.CommandIDs.createChat,args:{isPalette:!0}}),h&&h.add({command:v.CommandIDs.createChat,category:"Other"}),g.addCommand(v.CommandIDs.markAsRead,{caption:"Mark chat as read",icon:o.readIcon,isEnabled:()=>null!==u.currentWidget&&u.currentWidget===e.shell.currentWidget&&u.currentWidget.model.unreadMessages.length>0,execute:async t=>{const a=e.shell.currentWidget;a&&a instanceof v.LabChatPanel&&Array.from(e.shell.widgets("main")).includes(a)?a.model.unreadMessages=[]:console.error(`The command '${v.CommandIDs.markAsRead}' should be executed from the toolbar button only`)}}),u.currentChanged.connect((()=>{g.notifyCommandChanged(v.CommandIDs.markAsRead)})),e.serviceManager.ready.then((()=>{const o=e.serviceManager.user.identity;g.addCommand(v.CommandIDs.openChat,{label:"Open a chat",execute:async s=>{var d,h,u,y;const C=null!==(d=s.inSidePanel)&&void 0!==d&&d;let f=null!==(h=s.filepath)&&void 0!==h?h:null;if(null===f&&(f=(await c.InputDialog.getText({label:"File path",placeholder:"/path/to/the/chat/file",title:"Path of the chat"})).value),!f)return;let I=!0;if(await e.serviceManager.contents.get(f,{content:!1}).catch((()=>{I=!1})),I)if(C&&i){if(e.shell instanceof n.NotebookShell){const t=e.shell;(null===(y=null===(u=t.leftHandler)||void 0===u?void 0:u.currentWidget)||void 0===y?void 0:y.id)===i.id&&t.leftHandler.isVisible||t.activateById(i.id)}else e.shell.activateById(i.id);if(i.openIfExists(f))return;const c=await e.serviceManager.contents.get(f),s=t.sharedModelFactory.createNew({path:c.path,format:c.format,contentType:v.chatFileType.contentType,collaborative:!0}),d=new v.LabChatModel({user:o,sharedModel:s,widgetConfig:p,commands:g,activeCellManager:r,selectionWatcher:m,documentManager:null==l?void 0:l.model.manager});d.name=c.path;const h=i.addChat(d);a.tracker.add(h)}else g.execute("docmanager:open",{path:`${f}`,factory:W});else(0,c.showErrorMessage)("Error opening chat",`'${f}' is not a valid path`)}}),s&&s.addItem({category:"Chat",command:v.CommandIDs.openChat})})).catch((e=>console.error("The command to open a chat is not initialized\n",e))),g.addCommand(v.CommandIDs.focusInput,{caption:"Focus the input of the current chat widget",isEnabled:()=>null!==u.currentWidget,execute:()=>{const t=u.currentWidget;t&&(t instanceof o.ChatWidget&&i?(e.shell.activateById(i.id),i.openIfExists(t.model.name)):e.shell.activateById(t.id),t.model.input.focus())}})}},P={id:"jupyterlab-chat-extension:chat-panel",description:"The chat panel widget.",autoStart:!0,provides:v.IChatPanel,requires:[v.IChatFactory,r.ICollaborativeContentProvider,g.IRenderMimeRegistry],optional:[o.IAttachmentOpenerRegistry,o.IChatCommandRegistry,v.IInputToolbarRegistryFactory,i.ILayoutRestorer,o.IMessageFooterRegistry,c.IThemeManager,v.IWelcomeMessage],activate:(e,t,a,n,r,i,c,s,d,l,h)=>{const{commands:m}=e,g=t.widgetConfig.config.defaultDirectory||"",u=new v.ChatPanel({commands:m,contentsManager:e.serviceManager.contents,rmRegistry:n,themeManager:l,defaultDirectory:g,chatCommandRegistry:i,attachmentOpenerRegistry:r,inputToolbarFactory:c,messageFooterRegistry:d,welcomeMessage:h});u.id="JupyterlabChat:sidepanel",u.title.icon=o.chatIcon,u.title.caption="Jupyter Chat",t.widgetConfig.configChanged.connect(((e,t)=>{void 0!==t.defaultDirectory&&(u.defaultDirectory=t.defaultDirectory)})),e.shell.add(u,"left",{rank:2e3}),s&&s.add(u,"jupyter-chat");const p=["create","delete","rename"];return e.serviceManager.events.stream.connect(((e,t)=>{if("https://events.jupyter.org/jupyter_server/contents_service/v1"===t.schema_id){const e=t.action;p.includes(e)&&t.path.endsWith(v.chatFileType.extensions[0])&&u.updateChatList()}})),m.addCommand(v.CommandIDs.moveToSide,{label:"Move the chat to the side panel",caption:"Move the chat to the side panel",icon:y.launchIcon,isEnabled:()=>m.hasCommand(v.CommandIDs.openChat),execute:async()=>{const t=e.shell.currentWidget;if(!(t&&t instanceof v.LabChatPanel&&Array.from(e.shell.widgets("main")).includes(t)))return void console.error(`The command '${v.CommandIDs.moveToSide}' should be executed from the toolbar button only`);const a=t.context.path.split(":").pop();m.execute(v.CommandIDs.openChat,{filepath:a,inSidePanel:!0}),t.dispose()}}),u}},k={id:"jupyterlab-chat-extension:activeCellManager",description:"The active cell manager plugin.",autoStart:!0,requires:[m.INotebookTracker],provides:v.IActiveCellManagerToken,activate:(e,t)=>new o.ActiveCellManager({tracker:t,shell:e.shell})},_={id:"jupyterlab-chat-extension:selectionWatcher",description:"The selection watcher plugin.",autoStart:!0,provides:v.ISelectionWatcherToken,optional:[s.IEditorLanguageRegistry],activate:(e,t)=>new o.SelectionWatcher({shell:e.shell,languages:t})},E={id:"jupyterlab-chat-extension:inputToolbarFactory",description:"The input toolbar registry plugin.",autoStart:!0,provides:v.IInputToolbarRegistryFactory,activate:e=>({create:()=>o.InputToolbarRegistry.defaultToolbarRegistry()})},A=[k,D,j,f,P,S,{id:"jupyterlab-chat/footerRegistry",description:"The footer registry plugin.",autoStart:!0,provides:o.IMessageFooterRegistry,activate:e=>new o.MessageFooterRegistry},E,_,b,T]}}]);