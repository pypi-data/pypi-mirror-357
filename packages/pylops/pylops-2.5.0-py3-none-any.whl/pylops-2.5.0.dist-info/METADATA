Metadata-Version: 2.4
Name: pylops
Version: 2.5.0
Summary: Python library implementing linear operators to allow solving large-scale optimization problems
Author-email: Matteo Ravasi <matteoravasi@gmail.com>
License:                    GNU LESSER GENERAL PUBLIC LICENSE
                               Version 3, 29 June 2007
        
         Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
         Everyone is permitted to copy and distribute verbatim copies
         of this license document, but changing it is not allowed.
        
        
          This version of the GNU Lesser General Public License incorporates
        the terms and conditions of version 3 of the GNU General Public
        License, supplemented by the additional permissions listed below.
        
          0. Additional Definitions.
        
          As used herein, "this License" refers to version 3 of the GNU Lesser
        General Public License, and the "GNU GPL" refers to version 3 of the GNU
        General Public License.
        
          "The Library" refers to a covered work governed by this License,
        other than an Application or a Combined Work as defined below.
        
          An "Application" is any work that makes use of an interface provided
        by the Library, but which is not otherwise based on the Library.
        Defining a subclass of a class defined by the Library is deemed a mode
        of using an interface provided by the Library.
        
          A "Combined Work" is a work produced by combining or linking an
        Application with the Library.  The particular version of the Library
        with which the Combined Work was made is also called the "Linked
        Version".
        
          The "Minimal Corresponding Source" for a Combined Work means the
        Corresponding Source for the Combined Work, excluding any source code
        for portions of the Combined Work that, considered in isolation, are
        based on the Application, and not on the Linked Version.
        
          The "Corresponding Application Code" for a Combined Work means the
        object code and/or source code for the Application, including any data
        and utility programs needed for reproducing the Combined Work from the
        Application, but excluding the System Libraries of the Combined Work.
        
          1. Exception to Section 3 of the GNU GPL.
        
          You may convey a covered work under sections 3 and 4 of this License
        without being bound by section 3 of the GNU GPL.
        
          2. Conveying Modified Versions.
        
          If you modify a copy of the Library, and, in your modifications, a
        facility refers to a function or data to be supplied by an Application
        that uses the facility (other than as an argument passed when the
        facility is invoked), then you may convey a copy of the modified
        version:
        
           a) under this License, provided that you make a good faith effort to
           ensure that, in the event an Application does not supply the
           function or data, the facility still operates, and performs
           whatever part of its purpose remains meaningful, or
        
           b) under the GNU GPL, with none of the additional permissions of
           this License applicable to that copy.
        
          3. Object Code Incorporating Material from Library Header Files.
        
          The object code form of an Application may incorporate material from
        a header file that is part of the Library.  You may convey such object
        code under terms of your choice, provided that, if the incorporated
        material is not limited to numerical parameters, data structure
        layouts and accessors, or small macros, inline functions and templates
        (ten or fewer lines in length), you do both of the following:
        
           a) Give prominent notice with each copy of the object code that the
           Library is used in it and that the Library and its use are
           covered by this License.
        
           b) Accompany the object code with a copy of the GNU GPL and this license
           document.
        
          4. Combined Works.
        
          You may convey a Combined Work under terms of your choice that,
        taken together, effectively do not restrict modification of the
        portions of the Library contained in the Combined Work and reverse
        engineering for debugging such modifications, if you also do each of
        the following:
        
           a) Give prominent notice with each copy of the Combined Work that
           the Library is used in it and that the Library and its use are
           covered by this License.
        
           b) Accompany the Combined Work with a copy of the GNU GPL and this license
           document.
        
           c) For a Combined Work that displays copyright notices during
           execution, include the copyright notice for the Library among
           these notices, as well as a reference directing the user to the
           copies of the GNU GPL and this license document.
        
           d) Do one of the following:
        
               0) Convey the Minimal Corresponding Source under the terms of this
               License, and the Corresponding Application Code in a form
               suitable for, and under terms that permit, the user to
               recombine or relink the Application with a modified version of
               the Linked Version to produce a modified Combined Work, in the
               manner specified by section 6 of the GNU GPL for conveying
               Corresponding Source.
        
               1) Use a suitable shared library mechanism for linking with the
               Library.  A suitable mechanism is one that (a) uses at run time
               a copy of the Library already present on the user's computer
               system, and (b) will operate properly with a modified version
               of the Library that is interface-compatible with the Linked
               Version.
        
           e) Provide Installation Information, but only if you would otherwise
           be required to provide such information under section 6 of the
           GNU GPL, and only to the extent that such information is
           necessary to install and execute a modified version of the
           Combined Work produced by recombining or relinking the
           Application with a modified version of the Linked Version. (If
           you use option 4d0, the Installation Information must accompany
           the Minimal Corresponding Source and Corresponding Application
           Code. If you use option 4d1, you must provide the Installation
           Information in the manner specified by section 6 of the GNU GPL
           for conveying Corresponding Source.)
        
          5. Combined Libraries.
        
          You may place library facilities that are a work based on the
        Library side by side in a single library together with other library
        facilities that are not Applications and are not covered by this
        License, and convey such a combined library under terms of your
        choice, if you do both of the following:
        
           a) Accompany the combined library with a copy of the same work based
           on the Library, uncombined with any other library facilities,
           conveyed under the terms of this License.
        
           b) Give prominent notice with the combined library that part of it
           is a work based on the Library, and explaining where to find the
           accompanying uncombined form of the same work.
        
          6. Revised Versions of the GNU Lesser General Public License.
        
          The Free Software Foundation may publish revised and/or new versions
        of the GNU Lesser General Public License from time to time. Such new
        versions will be similar in spirit to the present version, but may
        differ in detail to address new problems or concerns.
        
          Each version is given a distinguishing version number. If the
        Library as you received it specifies that a certain numbered version
        of the GNU Lesser General Public License "or any later version"
        applies to it, you have the option of following the terms and
        conditions either of that published version or of any later version
        published by the Free Software Foundation. If the Library as you
        received it does not specify a version number of the GNU Lesser
        General Public License, you may choose any version of the GNU Lesser
        General Public License ever published by the Free Software Foundation.
        
          If the Library as you received it specifies that a proxy can decide
        whether future versions of the GNU Lesser General Public License shall
        apply, that proxy's public statement of acceptance of any version is
        permanent authorization for you to choose that version for the
        Library.
        
Keywords: algebra,inverse problems,large-scale optimization
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: Intended Audience :: Education
Classifier: License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Topic :: Scientific/Engineering :: Mathematics
Description-Content-Type: text/markdown
License-File: LICENSE.md
Requires-Dist: numpy>=1.21.0
Requires-Dist: scipy>=1.11.0
Provides-Extra: advanced
Requires-Dist: llvmlite; extra == "advanced"
Requires-Dist: numba; extra == "advanced"
Requires-Dist: pyfftw; extra == "advanced"
Requires-Dist: PyWavelets; extra == "advanced"
Requires-Dist: scikit-fmm; extra == "advanced"
Requires-Dist: spgl1; extra == "advanced"
Requires-Dist: dtcwt; extra == "advanced"
Dynamic: license-file

![PyLops](https://github.com/PyLops/pylops/blob/master/docs/source/_static/pylops_b.png)

[![NUMFOCUS](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](https://numfocus.org/sponsored-projects/affiliated-projects)
[![PyPI version](https://badge.fury.io/py/pylops.svg)](https://badge.fury.io/py/pylops)
[![Anaconda-Server Badge](https://anaconda.org/conda-forge/pylops/badges/version.svg)](https://anaconda.org/conda-forge/pylops)
[![AzureDevOps Status](https://dev.azure.com/matteoravasi/PyLops/_apis/build/status/PyLops.pylops?branchName=dev)](https://dev.azure.com/matteoravasi/PyLops/_build/latest?definitionId=9&branchName=dev)
[![GithubAction Status](https://github.com/PyLops/pylops/actions/workflows/build.yaml/badge.svg?branch=dev)](https://github.com/PyLops/pylops/actions/workflows/build.yaml)
[![Documentation Status](https://readthedocs.org/projects/pylops/badge/?version=stable)](https://pylops.readthedocs.io/en/stable/?badge=stable)
[![Codacy Badge](https://app.codacy.com/project/badge/Grade/17fd60b4266347d8890dd6b64f2c0807)](https://www.codacy.com/gh/PyLops/pylops/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=PyLops/pylops&amp;utm_campaign=Badge_Grade)
[![Codacy Badge](https://app.codacy.com/project/badge/Coverage/17fd60b4266347d8890dd6b64f2c0807)](https://www.codacy.com/gh/PyLops/pylops/dashboard?utm_source=github.com&utm_medium=referral&utm_content=PyLops/pylops&utm_campaign=Badge_Coverage)
![OS-support](https://img.shields.io/badge/OS-linux,win,osx-850A8B.svg)
[![Slack Status](https://img.shields.io/badge/chat-slack-green.svg)](https://pylops.slack.com)
![PyPI downloads](https://img.shields.io/pypi/dm/pylops.svg?label=Pypi%20downloads)
![Conda downloads](https://img.shields.io/conda/dn/conda-forge/pylops.svg?label=Conda%20downloads)


# A Linear Operator Library for Python
PyLops is an open-source Python library focused on providing a backend-agnostic, idiomatic, matrix-free library of linear operators and related computations.
It is inspired by the iconic MATLAB [Spot – A Linear-Operator Toolbox](http://www.cs.ubc.ca/labs/scl/spot/) project.


## Installation
To get the most out of PyLops straight out of the box, we recommend `conda` to install PyLops:
```bash
conda install -c conda-forge pylops
```
You can also install with `pip`:
```bash
pip install pylops
```

See the docs ([Installation](https://pylops.readthedocs.io/en/stable/installation.html)) for more information about dependencies and performance.

## Why PyLops?
Linear operators and inverse problems are at the core of many of the most used algorithms in signal processing, image processing, and remote sensing.
For small-scale problems, matrices can be explicitly computed and manipulated with Python numerical scientific libraries such as [NumPy](http://www.numpy.org) and [SciPy](https://www.scipy.org/scipylib/index.html).

On the other hand, large-scale problems often feature matrices that are prohibitive in size—but whose operations can be described by simple functions.
PyLops exploits this to represent linear operators not as array of numbers, but by *functions which describe matrix-vector products*.

Indeed, many iterative methods (e.g. cg, lsqr) were designed to not rely on the elements of the matrix, only on the result of matrix-vector products.
PyLops offers many linear operators (derivatives, convolutions, FFTs and manyh more) as well as solvers for a variety of problems (e.g., least-squares and sparse inversion).
With these two ingredients, PyLops can describe and solve a variety of linear inverse problems which appear in many different areas.

## Example: A finite-difference operator

A first-order, central finite-difference derivative operator denoted D can be described either as a matrix (array of numbers), or as weighed stencil summation:

```python
import numpy as np

# Setup
nx = 7
x = np.arange(nx) - (nx-1)/2

# Matrix
D_mat = 0.5 * (np.diag(np.ones(nx-1), k=1) - np.diag(np.ones(nx-1), k=-1))
D_mat[0] = D_mat[-1] = 0 # remove edge effects

# Function: Stencil summation
def central_diff(x):
    y = np.zeros_like(x)
    y[1:-1] = 0.5 * (x[2:] - x[:-2])
    return y

# y = Dx
y = D_mat @ x
y_fun = central_diff(x)
print(np.allclose(y, y_fun)) # True
```

The matrix formulation can easily be paired with a SciPy least-squares solver to approximately invert the matrix, but this requires us to have an explicit representation for D (in this case, ``D_mat``):
```python
from scipy.linalg import lstsq

# xinv = D^-1 y
xinv = lstsq(D_mat, y)[0]
```
Relying on the functional approach, PyLops wraps a function similar to ``central_diff`` into the [``FirstDerivative``](https://pylops.readthedocs.io/en/stable/api/generated/pylops.FirstDerivative.html#pylops.FirstDerivative) operator, defining not only the forward mode (Dx) but also the transpose mode (Dᵀy).
In fact, it goes even further as the forward slash operator applies least-squares inversion!
```python
from pylops import FirstDerivative

D_op = FirstDerivative(nx, dtype='float64')

# y = Dx
y = D_op @ x
# xinv = D^-1 y
xinv_op = D_op / y

print(np.allclose(xinv, xinv_op)) # True
```

Note how the code becomes even more compact and expressive than in the previous case letting the user focus on the formulation of equations of the forward problem to be solved by inversion.
PyLops offers many other linear operators, as well as the ability to implement your own in a way that seamlessly interfaces with the rest of the ecosystem.


## Contributing

*Feel like contributing to the project? Adding new operators or tutorial?*

Follow the instructions detailed in the [CONTRIBUTING](CONTRIBUTING.md) file before getting started.

## Documentation
The official documentation of PyLops is available [here](https://pylops.readthedocs.io/).

Visit this page to get started learning about different operators and their applications as well as how to
create new operators yourself and make it to the ``Contributors`` list.

## History
PyLops was initially written by [Equinor](https://www.equinor.com).
It is a flexible and scalable python library for large-scale optimization with linear
operators that can be tailored to our needs, and as contribution to the free software community.
Since June 2021, PyLops is a [NUMFOCUS](https://numfocus.org/sponsored-projects/affiliated-projects)
Affiliated Project.

## Citing
When using PyLops in scientific publications, please cite the following paper:


- Ravasi, M., and I. Vasconcelos, 2020, *<b>PyLops—A linear-operator Python library for scalable algebra and optimization</b>*,
  SoftwareX, 11, 100361. doi: 10.1016/j.softx.2019.100361 [(link)](https://www.sciencedirect.com/science/article/pii/S2352711019301086)

## Tutorials
A list of video tutorials to learn more about PyLops:

- Transform 2022: Youtube video [links](https://www.youtube.com/watch?v=RIeVkuY_ivQ).
- Transform 2021: Youtube video [links](https://www.youtube.com/watch?v=4GaVtE1ciLw).
- Swung Rendezvous 2021: Youtube video [links](https://www.youtube.com/watch?v=rot1K1xr5H4).
- PyDataGlobal 2020: Youtube video [links](https://github.com/PyLops/pylops_pydata2020).

## Contributors
* Matteo Ravasi, mrava87
* Carlos da Costa, cako
* Dieter Werthmüller, prisae
* Tristan van Leeuwen, TristanvanLeeuwen
* Leonardo Uieda, leouieda
* Filippo Broggini, filippo82
* Tyler Hughes, twhughes
* Lyubov Skopintseva, lskopintseva
* Francesco Picetti, fpicetti
* Alan Richardson, ar4
* BurningKarl, BurningKarl
* Nick Luiken, NickLuiken
* BurningKarl, BurningKarl
* Muhammad Izzatullah, izzatum
* Juan Daniel Romero, jdromerom
* Aniket Singh Rawat, dikwickley
* Rohan Babbar, rohanbabbar04
* Wei Zhang, ZhangWeiGeo
* Fedor Goncharov, fedor-goncharov
* Alex Rakowski, alex-rakowski
* David Sollberger, solldavid
* Gustavo Coelho, guaacoelho
