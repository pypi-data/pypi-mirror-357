import ultrasound_rawdata_exchange.bindings
from _typeshed import Incomplete
from typing import ClassVar, Iterable, Iterator, overload

UAC_VERSION_MAJOR: int
UAC_VERSION_MINOR: int
UAC_VERSION_PATCH: int

class Acquisition:
    authors: str
    country_code: str
    description: str
    excitations: VecExcitationPtr
    groups: VecGroupPtr
    hw_config: UacHwConfig
    initial_group: UacIGroup
    local_time: str
    probes: VecProbePtr
    super_groups: VecSuperGroupPtr
    system: str
    time_offset: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    timestamp: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    trigger_in: UacTriggerIn | None
    trigger_out: UacTriggerOut | None
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: UacAcquisition) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: str, arg4: str, arg5: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg6: VecProbePtr, arg7: VecExcitationPtr, arg8: VecGroupPtr, arg9: VecSuperGroupPtr, arg10: UacIGroup, arg11: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg12: UacTriggerIn, arg13: UacTriggerOut, arg14: UacHwConfig) -> None: ...
    def __eq__(self, arg0: UacAcquisition) -> bool: ...
    def __ne__(self, arg0: UacAcquisition) -> bool: ...

class Dataset:
    acquisition: UacAcquisition
    version: UacVersion
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: UacDataset) -> None: ...
    @overload
    def __init__(self, arg0: UacAcquisition, arg1: UacVersion) -> None: ...
    def __eq__(self, arg0: UacDataset) -> bool: ...
    def __ne__(self, arg0: UacDataset) -> bool: ...

class DestinationLink:
    destination: UacIGroup
    trigger: UacTriggerIn | None
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: UacDestinationLink) -> None: ...
    @overload
    def __init__(self, arg0: UacTriggerIn, arg1: UacIGroup) -> None: ...
    def __eq__(self, arg0: UacDestinationLink) -> bool: ...
    def __ne__(self, arg0: UacDestinationLink) -> bool: ...

class Edge:
    __members__: ClassVar[dict] = ...  # read-only
    FALLING: ClassVar[UacEdge] = ...
    HIGH: ClassVar[UacEdge] = ...
    LOW: ClassVar[UacEdge] = ...
    RISING: ClassVar[UacEdge] = ...
    UNDEFINED: ClassVar[UacEdge] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Event:
    hw_config: UacHwConfig
    receive_setup: UacReceiveSetup
    time_offset: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    transmit_setup: UacTransmitSetup
    trigger_in: UacTriggerIn | None
    trigger_out: UacTriggerOut | None
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: UacEvent) -> None: ...
    @overload
    def __init__(self, arg0: UacTransmitSetup, arg1: UacReceiveSetup, arg2: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg3: UacTriggerIn, arg4: UacTriggerOut, arg5: UacHwConfig) -> None: ...
    def __eq__(self, arg0: UacEvent) -> bool: ...
    def __ne__(self, arg0: UacEvent) -> bool: ...

class Excitation:
    hw_config: UacHwConfig
    pulse_shape: str
    sampling_frequency: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    transmit_frequency: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    waveform: VecFloat64
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: UacExcitation) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg2: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg3: VecFloat64, arg4: UacHwConfig) -> None: ...
    def __eq__(self, arg0: UacExcitation) -> bool: ...
    def __ne__(self, arg0: UacExcitation) -> bool: ...

class Group(UacIGroup):
    data_type: ultrasound_rawdata_exchange.bindings.UrxDataType
    description: str
    destinations: list[UacDestinationLink]
    hw_config: UacHwConfig
    period: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    repetition_count: int
    sampling_type: ultrasound_rawdata_exchange.bindings.UrxSamplingType
    sequence: VecEvent
    sound_speed: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    time_offset: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    trigger_in: UacTriggerIn | None
    trigger_out: UacTriggerOut | None
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: UacGroup) -> None: ...
    @overload
    def __init__(self, arg0: ultrasound_rawdata_exchange.bindings.UrxSamplingType, arg1: ultrasound_rawdata_exchange.bindings.UrxDataType, arg2: str, arg3: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg4: VecEvent, arg5: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg6: UacTriggerIn, arg7: UacTriggerOut, arg8: int, arg9: list[UacDestinationLink], arg10: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg11: UacHwConfig) -> None: ...
    def __eq__(self, arg0: UacGroup) -> bool: ...
    def __ne__(self, arg0: UacGroup) -> bool: ...

class HwConfig:
    values: object
    def __init__(self) -> None: ...
    def __eq__(self, arg0: UacHwConfig) -> bool: ...
    def __ne__(self, arg0: UacHwConfig) -> bool: ...

class IGroup:
    destinations: Incomplete
    hw_config: UacHwConfig
    period: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    repetition_count: int
    time_offset: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    trigger_in: UacTriggerIn | None
    trigger_out: UacTriggerOut | None
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, arg0: UacIGroup) -> bool: ...
    def __ne__(self, arg0: UacIGroup) -> bool: ...

class ItemsView:
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...

class KeysView:
    def __init__(self, *args, **kwargs) -> None: ...
    def __contains__(self, arg0: object) -> bool: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...

class MapHwConfig:
    def __init__(self) -> None: ...
    def items(self) -> ItemsView: ...
    def keys(self) -> KeysView: ...
    def values(self) -> ValuesView: ...
    def __bool__(self) -> bool: ...
    @overload
    def __contains__(self, arg0: str) -> bool: ...
    @overload
    def __contains__(self, arg0: object) -> bool: ...
    def __delitem__(self, arg0: str) -> None: ...
    def __getitem__(self, arg0: str) -> int | int | int | int | int | int | int | int | float | float | str | UacHwConfig | VecInt8 | VecInt16 | VecInt32 | VecInt64 | VecUInt8 | VecUInt16 | VecUInt32 | VecUInt64 | VecFloat32 | VecFloat64 | VecString | VecHwConfig: ...
    def __iter__(self) -> Iterator[str]: ...
    def __len__(self) -> int: ...
    def __setitem__(self, arg0: str, arg1: int | int | int | int | int | int | int | int | float | float | str | UacHwConfig | VecInt8 | VecInt16 | VecInt32 | VecInt64 | VecUInt8 | VecUInt16 | VecUInt32 | VecUInt64 | VecFloat32 | VecFloat64 | VecString | VecHwConfig) -> None: ...

class Polarity:
    __members__: ClassVar[dict] = ...  # read-only
    NEGATIVE: ClassVar[UacPolarity] = ...
    POSITIVE: ClassVar[UacPolarity] = ...
    UNDEFINED: ClassVar[UacPolarity] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class ReadFileException(RuntimeError): ...

class ReceiveSetup:
    active_elements: VecVecUInt32
    hw_config: UacHwConfig
    modulation_frequency: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    number_samples: int
    probe: ultrasound_rawdata_exchange.bindings.UrxProbe
    probe_transform: ultrasound_rawdata_exchange.bindings.UrxTransform
    sampling_frequency: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    tgc_profile: VecFloat64
    tgc_sampling_frequency: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    time_offset: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: UacReceiveSetup) -> None: ...
    @overload
    def __init__(self, arg0: ultrasound_rawdata_exchange.bindings.UrxProbe, arg1: ultrasound_rawdata_exchange.bindings.UrxTransform, arg2: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg3: int, arg4: VecVecUInt32, arg5: VecFloat64, arg6: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg7: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg8: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg9: UacHwConfig) -> None: ...
    def __eq__(self, arg0: UacReceiveSetup) -> bool: ...
    def __ne__(self, arg0: UacReceiveSetup) -> bool: ...

class SuperGroup(UacIGroup):
    description: str
    destinations: list[UacDestinationLink]
    hw_config: UacHwConfig
    initial_group: UacIGroup
    period: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    repetition_count: int
    time_offset: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    trigger_in: UacTriggerIn | None
    trigger_out: UacTriggerOut | None
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: UacSuperGroup) -> None: ...
    @overload
    def __init__(self, arg0: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg1: UacTriggerIn, arg2: UacTriggerOut, arg3: int, arg4: list[UacDestinationLink], arg5: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg6: UacHwConfig, arg7: UacIGroup, arg8: str) -> None: ...
    def __eq__(self, arg0: UacSuperGroup) -> bool: ...
    def __ne__(self, arg0: UacSuperGroup) -> bool: ...

class TransmitSetup:
    active_elements: VecVecUInt32
    delays: VecFloat64
    excitations: VecExcitationPtr
    hw_config: UacHwConfig
    probe: ultrasound_rawdata_exchange.bindings.UrxProbe
    probe_transform: ultrasound_rawdata_exchange.bindings.UrxTransform
    time_offset: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    wave: ultrasound_rawdata_exchange.bindings.UrxWave
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: UacTransmitSetup) -> None: ...
    @overload
    def __init__(self, arg0: ultrasound_rawdata_exchange.bindings.UrxProbe, arg1: ultrasound_rawdata_exchange.bindings.UrxWave, arg2: VecVecUInt32, arg3: VecExcitationPtr, arg4: VecFloat64, arg5: ultrasound_rawdata_exchange.bindings.UrxTransform, arg6: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg7: UacHwConfig) -> None: ...
    def __eq__(self, arg0: UacTransmitSetup) -> bool: ...
    def __ne__(self, arg0: UacTransmitSetup) -> bool: ...

class TriggerIn:
    channel: str
    edge: UacEdge
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: UacTriggerIn) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: UacEdge) -> None: ...
    def __eq__(self, arg0: UacTriggerIn) -> bool: ...
    def __ne__(self, arg0: UacTriggerIn) -> bool: ...

class TriggerOut:
    channel: str
    polarity: UacPolarity
    pulse_duration: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    time_offset: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: UacTriggerOut) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg2: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg3: UacPolarity) -> None: ...
    def __eq__(self, arg0: UacTriggerOut) -> bool: ...
    def __ne__(self, arg0: UacTriggerOut) -> bool: ...

class UacAcquisition:
    authors: str
    country_code: str
    description: str
    excitations: VecExcitationPtr
    groups: VecGroupPtr
    hw_config: UacHwConfig
    initial_group: UacIGroup
    local_time: str
    probes: VecProbePtr
    super_groups: VecSuperGroupPtr
    system: str
    time_offset: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    timestamp: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    trigger_in: UacTriggerIn | None
    trigger_out: UacTriggerOut | None
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: UacAcquisition) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: str, arg4: str, arg5: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg6: VecProbePtr, arg7: VecExcitationPtr, arg8: VecGroupPtr, arg9: VecSuperGroupPtr, arg10: UacIGroup, arg11: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg12: UacTriggerIn, arg13: UacTriggerOut, arg14: UacHwConfig) -> None: ...
    def __eq__(self, arg0: UacAcquisition) -> bool: ...
    def __ne__(self, arg0: UacAcquisition) -> bool: ...

class UacDataset:
    acquisition: UacAcquisition
    version: UacVersion
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: UacDataset) -> None: ...
    @overload
    def __init__(self, arg0: UacAcquisition, arg1: UacVersion) -> None: ...
    def __eq__(self, arg0: UacDataset) -> bool: ...
    def __ne__(self, arg0: UacDataset) -> bool: ...

class UacDestinationLink:
    destination: UacIGroup
    trigger: UacTriggerIn | None
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: UacDestinationLink) -> None: ...
    @overload
    def __init__(self, arg0: UacTriggerIn, arg1: UacIGroup) -> None: ...
    def __eq__(self, arg0: UacDestinationLink) -> bool: ...
    def __ne__(self, arg0: UacDestinationLink) -> bool: ...

class UacEdge:
    __members__: ClassVar[dict] = ...  # read-only
    FALLING: ClassVar[UacEdge] = ...
    HIGH: ClassVar[UacEdge] = ...
    LOW: ClassVar[UacEdge] = ...
    RISING: ClassVar[UacEdge] = ...
    UNDEFINED: ClassVar[UacEdge] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class UacEvent:
    hw_config: UacHwConfig
    receive_setup: UacReceiveSetup
    time_offset: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    transmit_setup: UacTransmitSetup
    trigger_in: UacTriggerIn | None
    trigger_out: UacTriggerOut | None
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: UacEvent) -> None: ...
    @overload
    def __init__(self, arg0: UacTransmitSetup, arg1: UacReceiveSetup, arg2: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg3: UacTriggerIn, arg4: UacTriggerOut, arg5: UacHwConfig) -> None: ...
    def __eq__(self, arg0: UacEvent) -> bool: ...
    def __ne__(self, arg0: UacEvent) -> bool: ...

class UacExcitation:
    hw_config: UacHwConfig
    pulse_shape: str
    sampling_frequency: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    transmit_frequency: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    waveform: VecFloat64
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: UacExcitation) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg2: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg3: VecFloat64, arg4: UacHwConfig) -> None: ...
    def __eq__(self, arg0: UacExcitation) -> bool: ...
    def __ne__(self, arg0: UacExcitation) -> bool: ...

class UacGroup(UacIGroup):
    data_type: ultrasound_rawdata_exchange.bindings.UrxDataType
    description: str
    destinations: list[UacDestinationLink]
    hw_config: UacHwConfig
    period: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    repetition_count: int
    sampling_type: ultrasound_rawdata_exchange.bindings.UrxSamplingType
    sequence: VecEvent
    sound_speed: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    time_offset: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    trigger_in: UacTriggerIn | None
    trigger_out: UacTriggerOut | None
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: UacGroup) -> None: ...
    @overload
    def __init__(self, arg0: ultrasound_rawdata_exchange.bindings.UrxSamplingType, arg1: ultrasound_rawdata_exchange.bindings.UrxDataType, arg2: str, arg3: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg4: VecEvent, arg5: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg6: UacTriggerIn, arg7: UacTriggerOut, arg8: int, arg9: list[UacDestinationLink], arg10: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg11: UacHwConfig) -> None: ...
    def __eq__(self, arg0: UacGroup) -> bool: ...
    def __ne__(self, arg0: UacGroup) -> bool: ...

class UacHwConfig:
    values: object
    def __init__(self) -> None: ...
    def __eq__(self, arg0: UacHwConfig) -> bool: ...
    def __ne__(self, arg0: UacHwConfig) -> bool: ...

class UacIGroup:
    destinations: Incomplete
    hw_config: UacHwConfig
    period: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    repetition_count: int
    time_offset: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    trigger_in: UacTriggerIn | None
    trigger_out: UacTriggerOut | None
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, arg0: UacIGroup) -> bool: ...
    def __ne__(self, arg0: UacIGroup) -> bool: ...

class UacPolarity:
    __members__: ClassVar[dict] = ...  # read-only
    NEGATIVE: ClassVar[UacPolarity] = ...
    POSITIVE: ClassVar[UacPolarity] = ...
    UNDEFINED: ClassVar[UacPolarity] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class UacReceiveSetup:
    active_elements: VecVecUInt32
    hw_config: UacHwConfig
    modulation_frequency: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    number_samples: int
    probe: ultrasound_rawdata_exchange.bindings.UrxProbe
    probe_transform: ultrasound_rawdata_exchange.bindings.UrxTransform
    sampling_frequency: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    tgc_profile: VecFloat64
    tgc_sampling_frequency: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    time_offset: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: UacReceiveSetup) -> None: ...
    @overload
    def __init__(self, arg0: ultrasound_rawdata_exchange.bindings.UrxProbe, arg1: ultrasound_rawdata_exchange.bindings.UrxTransform, arg2: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg3: int, arg4: VecVecUInt32, arg5: VecFloat64, arg6: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg7: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg8: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg9: UacHwConfig) -> None: ...
    def __eq__(self, arg0: UacReceiveSetup) -> bool: ...
    def __ne__(self, arg0: UacReceiveSetup) -> bool: ...

class UacSuperGroup(UacIGroup):
    description: str
    destinations: list[UacDestinationLink]
    hw_config: UacHwConfig
    initial_group: UacIGroup
    period: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    repetition_count: int
    time_offset: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    trigger_in: UacTriggerIn | None
    trigger_out: UacTriggerOut | None
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: UacSuperGroup) -> None: ...
    @overload
    def __init__(self, arg0: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg1: UacTriggerIn, arg2: UacTriggerOut, arg3: int, arg4: list[UacDestinationLink], arg5: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg6: UacHwConfig, arg7: UacIGroup, arg8: str) -> None: ...
    def __eq__(self, arg0: UacSuperGroup) -> bool: ...
    def __ne__(self, arg0: UacSuperGroup) -> bool: ...

class UacTransmitSetup:
    active_elements: VecVecUInt32
    delays: VecFloat64
    excitations: VecExcitationPtr
    hw_config: UacHwConfig
    probe: ultrasound_rawdata_exchange.bindings.UrxProbe
    probe_transform: ultrasound_rawdata_exchange.bindings.UrxTransform
    time_offset: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    wave: ultrasound_rawdata_exchange.bindings.UrxWave
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: UacTransmitSetup) -> None: ...
    @overload
    def __init__(self, arg0: ultrasound_rawdata_exchange.bindings.UrxProbe, arg1: ultrasound_rawdata_exchange.bindings.UrxWave, arg2: VecVecUInt32, arg3: VecExcitationPtr, arg4: VecFloat64, arg5: ultrasound_rawdata_exchange.bindings.UrxTransform, arg6: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg7: UacHwConfig) -> None: ...
    def __eq__(self, arg0: UacTransmitSetup) -> bool: ...
    def __ne__(self, arg0: UacTransmitSetup) -> bool: ...

class UacTriggerIn:
    channel: str
    edge: UacEdge
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: UacTriggerIn) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: UacEdge) -> None: ...
    def __eq__(self, arg0: UacTriggerIn) -> bool: ...
    def __ne__(self, arg0: UacTriggerIn) -> bool: ...

class UacTriggerOut:
    channel: str
    polarity: UacPolarity
    pulse_duration: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    time_offset: ultrasound_rawdata_exchange.bindings.UrxDoubleNan
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: UacTriggerOut) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg2: ultrasound_rawdata_exchange.bindings.UrxDoubleNan, arg3: UacPolarity) -> None: ...
    def __eq__(self, arg0: UacTriggerOut) -> bool: ...
    def __ne__(self, arg0: UacTriggerOut) -> bool: ...

class UacVersion:
    major: int
    minor: int
    patch: int
    @overload
    def __init__(self, arg0: int, arg1: int, arg2: int) -> None: ...
    @overload
    def __init__(self, arg0: UacVersion) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def __eq__(self, arg0: UacVersion) -> bool: ...
    def __ne__(self, arg0: UacVersion) -> bool: ...

class ValuesView:
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...

class VecDestinationLink:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecDestinationLink) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: UacDestinationLink) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: UacDestinationLink) -> int: ...
    @overload
    def extend(self, L: VecDestinationLink) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: UacDestinationLink) -> None: ...
    @overload
    def pop(self) -> UacDestinationLink: ...
    @overload
    def pop(self, i: int) -> UacDestinationLink: ...
    def remove(self, x: UacDestinationLink) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: UacDestinationLink) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecDestinationLink) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecDestinationLink: ...
    @overload
    def __getitem__(self, arg0: int) -> UacDestinationLink: ...
    def __iter__(self) -> Iterator[UacDestinationLink]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecDestinationLink) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: UacDestinationLink) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecDestinationLink) -> None: ...

class VecElementGeometryPtr:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecElementGeometryPtr) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: ultrasound_rawdata_exchange.bindings.UrxElementGeometry) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: ultrasound_rawdata_exchange.bindings.UrxElementGeometry) -> int: ...
    @overload
    def extend(self, L: VecElementGeometryPtr) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: ultrasound_rawdata_exchange.bindings.UrxElementGeometry) -> None: ...
    @overload
    def pop(self) -> ultrasound_rawdata_exchange.bindings.UrxElementGeometry: ...
    @overload
    def pop(self, i: int) -> ultrasound_rawdata_exchange.bindings.UrxElementGeometry: ...
    def remove(self, x: ultrasound_rawdata_exchange.bindings.UrxElementGeometry) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: ultrasound_rawdata_exchange.bindings.UrxElementGeometry) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecElementGeometryPtr) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecElementGeometryPtr: ...
    @overload
    def __getitem__(self, arg0: int) -> ultrasound_rawdata_exchange.bindings.UrxElementGeometry: ...
    def __iter__(self) -> Iterator[ultrasound_rawdata_exchange.bindings.UrxElementGeometry]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecElementGeometryPtr) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: ultrasound_rawdata_exchange.bindings.UrxElementGeometry) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecElementGeometryPtr) -> None: ...

class VecEvent:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecEvent) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: UacEvent) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: UacEvent) -> int: ...
    @overload
    def extend(self, L: VecEvent) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: UacEvent) -> None: ...
    @overload
    def pop(self) -> UacEvent: ...
    @overload
    def pop(self, i: int) -> UacEvent: ...
    def remove(self, x: UacEvent) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: UacEvent) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecEvent) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecEvent: ...
    @overload
    def __getitem__(self, arg0: int) -> UacEvent: ...
    def __iter__(self) -> Iterator[UacEvent]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecEvent) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: UacEvent) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecEvent) -> None: ...

class VecExcitationPtr:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecExcitationPtr) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: UacExcitation) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: UacExcitation) -> int: ...
    @overload
    def extend(self, L: VecExcitationPtr) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: UacExcitation) -> None: ...
    @overload
    def pop(self) -> UacExcitation: ...
    @overload
    def pop(self, i: int) -> UacExcitation: ...
    def remove(self, x: UacExcitation) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: UacExcitation) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecExcitationPtr) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecExcitationPtr: ...
    @overload
    def __getitem__(self, arg0: int) -> UacExcitation: ...
    def __iter__(self) -> Iterator[UacExcitation]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecExcitationPtr) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: UacExcitation) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecExcitationPtr) -> None: ...

class VecFloat32:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecFloat32) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: float) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: float) -> int: ...
    @overload
    def extend(self, L: VecFloat32) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: float) -> None: ...
    @overload
    def pop(self) -> float: ...
    @overload
    def pop(self, i: int) -> float: ...
    def remove(self, x: float) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: float) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecFloat32) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecFloat32: ...
    @overload
    def __getitem__(self, arg0: int) -> float: ...
    def __iter__(self) -> Iterator[float]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecFloat32) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: float) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecFloat32) -> None: ...

class VecFloat64:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecFloat64) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: float) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: float) -> int: ...
    @overload
    def extend(self, L: VecFloat64) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: float) -> None: ...
    @overload
    def pop(self) -> float: ...
    @overload
    def pop(self, i: int) -> float: ...
    def remove(self, x: float) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: float) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecFloat64) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecFloat64: ...
    @overload
    def __getitem__(self, arg0: int) -> float: ...
    def __iter__(self) -> Iterator[float]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecFloat64) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: float) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecFloat64) -> None: ...

class VecGroupPtr:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecGroupPtr) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: UacGroup) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: UacGroup) -> int: ...
    @overload
    def extend(self, L: VecGroupPtr) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: UacGroup) -> None: ...
    @overload
    def pop(self) -> UacGroup: ...
    @overload
    def pop(self, i: int) -> UacGroup: ...
    def remove(self, x: UacGroup) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: UacGroup) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecGroupPtr) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecGroupPtr: ...
    @overload
    def __getitem__(self, arg0: int) -> UacGroup: ...
    def __iter__(self) -> Iterator[UacGroup]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecGroupPtr) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: UacGroup) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecGroupPtr) -> None: ...

class VecHwConfig:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecHwConfig) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: UacHwConfig) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: UacHwConfig) -> int: ...
    @overload
    def extend(self, L: VecHwConfig) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: UacHwConfig) -> None: ...
    @overload
    def pop(self) -> UacHwConfig: ...
    @overload
    def pop(self, i: int) -> UacHwConfig: ...
    def remove(self, x: UacHwConfig) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: UacHwConfig) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecHwConfig) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecHwConfig: ...
    @overload
    def __getitem__(self, arg0: int) -> UacHwConfig: ...
    def __iter__(self) -> Iterator[UacHwConfig]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecHwConfig) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: UacHwConfig) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecHwConfig) -> None: ...

class VecImpulseResponsePtr:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecImpulseResponsePtr) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: ultrasound_rawdata_exchange.bindings.UrxImpulseResponse) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: ultrasound_rawdata_exchange.bindings.UrxImpulseResponse) -> int: ...
    @overload
    def extend(self, L: VecImpulseResponsePtr) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: ultrasound_rawdata_exchange.bindings.UrxImpulseResponse) -> None: ...
    @overload
    def pop(self) -> ultrasound_rawdata_exchange.bindings.UrxImpulseResponse: ...
    @overload
    def pop(self, i: int) -> ultrasound_rawdata_exchange.bindings.UrxImpulseResponse: ...
    def remove(self, x: ultrasound_rawdata_exchange.bindings.UrxImpulseResponse) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: ultrasound_rawdata_exchange.bindings.UrxImpulseResponse) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecImpulseResponsePtr) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecImpulseResponsePtr: ...
    @overload
    def __getitem__(self, arg0: int) -> ultrasound_rawdata_exchange.bindings.UrxImpulseResponse: ...
    def __iter__(self) -> Iterator[ultrasound_rawdata_exchange.bindings.UrxImpulseResponse]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecImpulseResponsePtr) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: ultrasound_rawdata_exchange.bindings.UrxImpulseResponse) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecImpulseResponsePtr) -> None: ...

class VecInt16:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecInt16) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: int) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: int) -> int: ...
    @overload
    def extend(self, L: VecInt16) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: int) -> None: ...
    @overload
    def pop(self) -> int: ...
    @overload
    def pop(self, i: int) -> int: ...
    def remove(self, x: int) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: int) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecInt16) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecInt16: ...
    @overload
    def __getitem__(self, arg0: int) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecInt16) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecInt16) -> None: ...

class VecInt32:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecInt32) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: int) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: int) -> int: ...
    @overload
    def extend(self, L: VecInt32) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: int) -> None: ...
    @overload
    def pop(self) -> int: ...
    @overload
    def pop(self, i: int) -> int: ...
    def remove(self, x: int) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: int) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecInt32) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecInt32: ...
    @overload
    def __getitem__(self, arg0: int) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecInt32) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecInt32) -> None: ...

class VecInt64:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecInt64) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: int) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: int) -> int: ...
    @overload
    def extend(self, L: VecInt64) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: int) -> None: ...
    @overload
    def pop(self) -> int: ...
    @overload
    def pop(self, i: int) -> int: ...
    def remove(self, x: int) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: int) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecInt64) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecInt64: ...
    @overload
    def __getitem__(self, arg0: int) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecInt64) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecInt64) -> None: ...

class VecInt8:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecInt8) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: int) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: int) -> int: ...
    @overload
    def extend(self, L: VecInt8) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: int) -> None: ...
    @overload
    def pop(self) -> int: ...
    @overload
    def pop(self, i: int) -> int: ...
    def remove(self, x: int) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: int) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecInt8) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecInt8: ...
    @overload
    def __getitem__(self, arg0: int) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecInt8) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecInt8) -> None: ...

class VecProbePtr:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecProbePtr) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: ultrasound_rawdata_exchange.bindings.UrxProbe) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: ultrasound_rawdata_exchange.bindings.UrxProbe) -> int: ...
    @overload
    def extend(self, L: VecProbePtr) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: ultrasound_rawdata_exchange.bindings.UrxProbe) -> None: ...
    @overload
    def pop(self) -> ultrasound_rawdata_exchange.bindings.UrxProbe: ...
    @overload
    def pop(self, i: int) -> ultrasound_rawdata_exchange.bindings.UrxProbe: ...
    def remove(self, x: ultrasound_rawdata_exchange.bindings.UrxProbe) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: ultrasound_rawdata_exchange.bindings.UrxProbe) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecProbePtr) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecProbePtr: ...
    @overload
    def __getitem__(self, arg0: int) -> ultrasound_rawdata_exchange.bindings.UrxProbe: ...
    def __iter__(self) -> Iterator[ultrasound_rawdata_exchange.bindings.UrxProbe]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecProbePtr) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: ultrasound_rawdata_exchange.bindings.UrxProbe) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecProbePtr) -> None: ...

class VecString:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecString) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: str) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: str) -> int: ...
    @overload
    def extend(self, L: VecString) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: str) -> None: ...
    @overload
    def pop(self) -> str: ...
    @overload
    def pop(self, i: int) -> str: ...
    def remove(self, x: str) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: str) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecString) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecString: ...
    @overload
    def __getitem__(self, arg0: int) -> str: ...
    def __iter__(self) -> Iterator[str]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecString) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: str) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecString) -> None: ...

class VecSuperGroupPtr:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecSuperGroupPtr) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: UacSuperGroup) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: UacSuperGroup) -> int: ...
    @overload
    def extend(self, L: VecSuperGroupPtr) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: UacSuperGroup) -> None: ...
    @overload
    def pop(self) -> UacSuperGroup: ...
    @overload
    def pop(self, i: int) -> UacSuperGroup: ...
    def remove(self, x: UacSuperGroup) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: UacSuperGroup) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecSuperGroupPtr) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecSuperGroupPtr: ...
    @overload
    def __getitem__(self, arg0: int) -> UacSuperGroup: ...
    def __iter__(self) -> Iterator[UacSuperGroup]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecSuperGroupPtr) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: UacSuperGroup) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecSuperGroupPtr) -> None: ...

class VecUInt16:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecUInt16) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: int) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: int) -> int: ...
    @overload
    def extend(self, L: VecUInt16) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: int) -> None: ...
    @overload
    def pop(self) -> int: ...
    @overload
    def pop(self, i: int) -> int: ...
    def remove(self, x: int) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: int) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecUInt16) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecUInt16: ...
    @overload
    def __getitem__(self, arg0: int) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecUInt16) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecUInt16) -> None: ...

class VecUInt32:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecUInt32) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: int) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: int) -> int: ...
    @overload
    def extend(self, L: VecUInt32) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: int) -> None: ...
    @overload
    def pop(self) -> int: ...
    @overload
    def pop(self, i: int) -> int: ...
    def remove(self, x: int) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: int) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecUInt32) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecUInt32: ...
    @overload
    def __getitem__(self, arg0: int) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecUInt32) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecUInt32) -> None: ...

class VecUInt64:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecUInt64) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: int) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: int) -> int: ...
    @overload
    def extend(self, L: VecUInt64) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: int) -> None: ...
    @overload
    def pop(self) -> int: ...
    @overload
    def pop(self, i: int) -> int: ...
    def remove(self, x: int) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: int) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecUInt64) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecUInt64: ...
    @overload
    def __getitem__(self, arg0: int) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecUInt64) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecUInt64) -> None: ...

class VecUInt8:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecUInt8) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: int) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: int) -> int: ...
    @overload
    def extend(self, L: VecUInt8) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: int) -> None: ...
    @overload
    def pop(self) -> int: ...
    @overload
    def pop(self, i: int) -> int: ...
    def remove(self, x: int) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: int) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecUInt8) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecUInt8: ...
    @overload
    def __getitem__(self, arg0: int) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecUInt8) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecUInt8) -> None: ...

class VecVecFloat32:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecFloat32) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecFloat32) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecFloat32) -> int: ...
    @overload
    def extend(self, L: VecVecFloat32) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecFloat32) -> None: ...
    @overload
    def pop(self) -> VecFloat32: ...
    @overload
    def pop(self, i: int) -> VecFloat32: ...
    def remove(self, x: VecFloat32) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecFloat32) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecFloat32) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecFloat32: ...
    @overload
    def __getitem__(self, arg0: int) -> VecFloat32: ...
    def __iter__(self) -> Iterator[VecFloat32]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecFloat32) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecFloat32) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecFloat32) -> None: ...

class VecVecFloat64:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecFloat64) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecFloat64) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecFloat64) -> int: ...
    @overload
    def extend(self, L: VecVecFloat64) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecFloat64) -> None: ...
    @overload
    def pop(self) -> VecFloat64: ...
    @overload
    def pop(self, i: int) -> VecFloat64: ...
    def remove(self, x: VecFloat64) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecFloat64) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecFloat64) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecFloat64: ...
    @overload
    def __getitem__(self, arg0: int) -> VecFloat64: ...
    def __iter__(self) -> Iterator[VecFloat64]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecFloat64) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecFloat64) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecFloat64) -> None: ...

class VecVecInt16:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecInt16) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecInt16) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecInt16) -> int: ...
    @overload
    def extend(self, L: VecVecInt16) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecInt16) -> None: ...
    @overload
    def pop(self) -> VecInt16: ...
    @overload
    def pop(self, i: int) -> VecInt16: ...
    def remove(self, x: VecInt16) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecInt16) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecInt16) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecInt16: ...
    @overload
    def __getitem__(self, arg0: int) -> VecInt16: ...
    def __iter__(self) -> Iterator[VecInt16]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecInt16) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecInt16) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecInt16) -> None: ...

class VecVecInt32:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecInt32) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecInt32) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecInt32) -> int: ...
    @overload
    def extend(self, L: VecVecInt32) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecInt32) -> None: ...
    @overload
    def pop(self) -> VecInt32: ...
    @overload
    def pop(self, i: int) -> VecInt32: ...
    def remove(self, x: VecInt32) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecInt32) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecInt32) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecInt32: ...
    @overload
    def __getitem__(self, arg0: int) -> VecInt32: ...
    def __iter__(self) -> Iterator[VecInt32]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecInt32) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecInt32) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecInt32) -> None: ...

class VecVecInt64:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecInt64) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecInt64) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecInt64) -> int: ...
    @overload
    def extend(self, L: VecVecInt64) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecInt64) -> None: ...
    @overload
    def pop(self) -> VecInt64: ...
    @overload
    def pop(self, i: int) -> VecInt64: ...
    def remove(self, x: VecInt64) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecInt64) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecInt64) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecInt64: ...
    @overload
    def __getitem__(self, arg0: int) -> VecInt64: ...
    def __iter__(self) -> Iterator[VecInt64]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecInt64) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecInt64) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecInt64) -> None: ...

class VecVecInt8:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecInt8) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecInt8) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecInt8) -> int: ...
    @overload
    def extend(self, L: VecVecInt8) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecInt8) -> None: ...
    @overload
    def pop(self) -> VecInt8: ...
    @overload
    def pop(self, i: int) -> VecInt8: ...
    def remove(self, x: VecInt8) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecInt8) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecInt8) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecInt8: ...
    @overload
    def __getitem__(self, arg0: int) -> VecInt8: ...
    def __iter__(self) -> Iterator[VecInt8]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecInt8) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecInt8) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecInt8) -> None: ...

class VecVecString:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecString) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecString) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecString) -> int: ...
    @overload
    def extend(self, L: VecVecString) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecString) -> None: ...
    @overload
    def pop(self) -> VecString: ...
    @overload
    def pop(self, i: int) -> VecString: ...
    def remove(self, x: VecString) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecString) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecString) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecString: ...
    @overload
    def __getitem__(self, arg0: int) -> VecString: ...
    def __iter__(self) -> Iterator[VecString]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecString) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecString) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecString) -> None: ...

class VecVecUInt16:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecUInt16) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecUInt16) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecUInt16) -> int: ...
    @overload
    def extend(self, L: VecVecUInt16) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecUInt16) -> None: ...
    @overload
    def pop(self) -> VecUInt16: ...
    @overload
    def pop(self, i: int) -> VecUInt16: ...
    def remove(self, x: VecUInt16) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecUInt16) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecUInt16) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecUInt16: ...
    @overload
    def __getitem__(self, arg0: int) -> VecUInt16: ...
    def __iter__(self) -> Iterator[VecUInt16]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecUInt16) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecUInt16) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecUInt16) -> None: ...

class VecVecUInt32:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecUInt32) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecUInt32) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecUInt32) -> int: ...
    @overload
    def extend(self, L: VecVecUInt32) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecUInt32) -> None: ...
    @overload
    def pop(self) -> VecUInt32: ...
    @overload
    def pop(self, i: int) -> VecUInt32: ...
    def remove(self, x: VecUInt32) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecUInt32) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecUInt32) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecUInt32: ...
    @overload
    def __getitem__(self, arg0: int) -> VecUInt32: ...
    def __iter__(self) -> Iterator[VecUInt32]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecUInt32) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecUInt32) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecUInt32) -> None: ...

class VecVecUInt64:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecUInt64) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecUInt64) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecUInt64) -> int: ...
    @overload
    def extend(self, L: VecVecUInt64) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecUInt64) -> None: ...
    @overload
    def pop(self) -> VecUInt64: ...
    @overload
    def pop(self, i: int) -> VecUInt64: ...
    def remove(self, x: VecUInt64) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecUInt64) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecUInt64) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecUInt64: ...
    @overload
    def __getitem__(self, arg0: int) -> VecUInt64: ...
    def __iter__(self) -> Iterator[VecUInt64]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecUInt64) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecUInt64) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecUInt64) -> None: ...

class VecVecUInt8:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecUInt8) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecUInt8) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecUInt8) -> int: ...
    @overload
    def extend(self, L: VecVecUInt8) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecUInt8) -> None: ...
    @overload
    def pop(self) -> VecUInt8: ...
    @overload
    def pop(self, i: int) -> VecUInt8: ...
    def remove(self, x: VecUInt8) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecUInt8) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecUInt8) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecUInt8: ...
    @overload
    def __getitem__(self, arg0: int) -> VecUInt8: ...
    def __iter__(self) -> Iterator[VecUInt8]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecUInt8) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecUInt8) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecUInt8) -> None: ...

class Version:
    major: int
    minor: int
    patch: int
    @overload
    def __init__(self, arg0: int, arg1: int, arg2: int) -> None: ...
    @overload
    def __init__(self, arg0: UacVersion) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def __eq__(self, arg0: UacVersion) -> bool: ...
    def __ne__(self, arg0: UacVersion) -> bool: ...

class WriteFileException(RuntimeError): ...

def loadFromFile(arg0: str) -> UacDataset: ...
def saveToFile(arg0: str, arg1: UacDataset) -> None: ...
def toUrx(arg0: UacDataset) -> ultrasound_rawdata_exchange.bindings.UrxDataset: ...
