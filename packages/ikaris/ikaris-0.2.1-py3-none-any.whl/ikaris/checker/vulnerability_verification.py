import requests
import json
from ikaris.helpers.logging import get_logger
from colorama import Fore, Style

logging = get_logger("ThirdLayer")


def check_osv_vulnerabilities(package_name, version=None):
    """
    Checks vulnerabilities of a PyPI package using the OSV API.

    Args:
        package_name (str): The name of the package.
        version (str, optional): Specific version to check. If None, latest is assumed.

    Returns:
        dict: Vulnerability messages categorized under 'Info', 'Warning', or 'Critical'.
    """
    url = "https://api.osv.dev/v1/query"
    payload = {
        "package": {
            "name": package_name,
            "ecosystem": "PyPI"
        }
    }
    if version:
        payload["version"] = version

    headers = {"Content-Type": "application/json"}
    list_info = {
        'Critical': [],
        'Warning': [],
        'Info': []
    }

    try:
        response = requests.post(url, headers=headers, data=json.dumps(payload))
        response.raise_for_status()
        data = response.json()

        label_version = version if version else 'latest'

        if data.get("vulns"):
            for vuln in data["vulns"]:
                summary = vuln.get("summary", "No description available")
                severity = "Critical" if any(a.get("severity") == "CRITICAL" for a in vuln.get("affected", [])) else "Warning"
                list_info[severity].append(
                    f"Vulnerability in '{package_name}=={label_version}': {summary}"
                )
        else:
            list_info['Info'].append(
                f"No known vulnerabilities found in '{package_name}=={label_version}'."
            )

    except requests.RequestException as e:
        list_info['Warning'].append(f"Failed to query OSV API for '{package_name}': {str(e)}")

    return list_info


def vulnerability_verification(package_name, info_count=0, warning_count=0, critical_count=0):
    """
    Logs OSV vulnerability information and updates severity counters.

    Args:
        package_name (str): Package name with optional version (e.g. 'requests==2.31.0').
        info_count (int): Current info count.
        warning_count (int): Current warning count.
        critical_count (int): Current critical count.

    Returns:
        tuple: (vulnerability_info_dict, updated_info_count, warning_count, critical_count)
    """
    print(Fore.CYAN + "-" * 40 + Style.RESET_ALL)
    print("OSV Vulnerability Check")
    print(Fore.CYAN + "-" * 40 + Style.RESET_ALL)

    if '==' in package_name:
        package_name, version = package_name.split('==', 1)
        print(package_name, version)
    else:
        version = None

    info = check_osv_vulnerabilities(package_name, version)

    for level, messages in info.items():
        for message in messages:
            if level == "Critical":
                critical_count += 1
                logging.critical(message)
            elif level == "Warning":
                warning_count += 1
                logging.warning(message)
            else:
                info_count += 1
                logging.info(message)

    return info, info_count, warning_count, critical_count
