#!/usr/bin/env python3
"""
Demo script showing how external providers work (with mock responses for demonstration)
"""

import asyncio
import sys
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from les_audits_affaires_eval.clients.external_providers import create_client

# Test question
TEST_QUESTION = "Quelles sont les obligations l√©gales pour cr√©er une SARL en France?"


def demo_factory():
    """Demonstrate the factory function"""
    print("üè≠ Factory Function Demo")
    print("=" * 40)

    try:
        # Show available providers
        providers = ["openai", "mistral", "claude", "gemini"]

        print("‚úÖ Available providers:")
        for provider in providers:
            try:
                # This will fail due to missing API keys, but shows the factory works
                client_class = create_client(provider, model="test-model")
                print(f"  üì¶ {provider.capitalize()}: {type(client_class).__name__}")
            except ValueError as e:
                if "API key required" in str(e):
                    print(f"  üì¶ {provider.capitalize()}: Client class available (needs API key)")
                else:
                    print(f"  ‚ùå {provider.capitalize()}: {e}")

        # Test invalid provider
        try:
            invalid_client = create_client("invalid")
            print("‚ùå Should have failed for invalid provider")
        except ValueError as e:
            print(f"‚úÖ Correctly rejected invalid provider: {e}")

    except Exception as e:
        print(f"‚ùå Factory demo failed: {e}")


def demo_client_interfaces():
    """Demonstrate client interfaces"""
    print("\nüîå Client Interface Demo")
    print("=" * 40)

    # Show what the clients look like
    from les_audits_affaires_eval.clients.external_providers import (
        ClaudeClient,
        GeminiClient,
        MistralClient,
        OpenAIClient,
    )

    clients_info = [
        ("OpenAI GPT-4", OpenAIClient, "gpt-4o", "OpenAI API"),
        ("Mistral Large", MistralClient, "mistral-large-latest", "Mistral AI API"),
        ("Claude 3.5 Sonnet", ClaudeClient, "claude-3-5-sonnet-20241022", "Anthropic API"),
        ("Gemini 1.5 Pro", GeminiClient, "gemini-1.5-pro", "Google AI API"),
    ]

    for name, client_class, model, api_name in clients_info:
        print(f"\nüìã {name}")
        print(f"   Class: {client_class.__name__}")
        print(f"   Model: {model}")
        print(f"   API: {api_name}")
        print(f"   Methods: generate_response(), generate_response_sync()")
        print(f"   Context: async with {client_class.__name__}() as client:")


def demo_legal_prompt_format():
    """Show how legal prompts are formatted"""
    print("\nüìù Legal Prompt Format Demo")
    print("=" * 40)

    from les_audits_affaires_eval.clients.external_providers import OpenAIClient

    try:
        # Create client without API key just to show prompt formatting
        client = OpenAIClient.__new__(OpenAIClient)
        client.api_key = "demo-key"  # Fake key for demo

        # Show formatted prompt
        messages = client._format_legal_prompt(TEST_QUESTION)

        print("üéØ System Prompt:")
        print(f"   {messages[0]['content'][:100]}...")

        print("\nüéØ User Question:")
        print(f"   {messages[1]['content']}")

        print("\n‚úÖ Required Format Elements:")
        required_sections = [
            "‚Ä¢ Action Requise: [action] parce que [r√©f√©rence l√©gale]",
            "‚Ä¢ D√©lai Legal: [d√©lai] parce que [r√©f√©rence l√©gale]",
            "‚Ä¢ Documents Obligatoires: [documents] parce que [r√©f√©rence l√©gale]",
            "‚Ä¢ Impact Financier: [co√ªts] parce que [r√©f√©rence l√©gale]",
            "‚Ä¢ Cons√©quences Non-Conformit√©: [risques] parce que [r√©f√©rence l√©gale]",
        ]

        for section in required_sections:
            print(f"   {section}")

    except Exception as e:
        print(f"‚ùå Prompt format demo failed: {e}")


def demo_expected_response():
    """Show what a proper response should look like"""
    print("\nüìÑ Expected Response Format Demo")
    print("=" * 40)

    sample_response = """Pour cr√©er une SARL en France, plusieurs obligations l√©gales doivent √™tre respect√©es selon le Code de commerce et les r√©glementations en vigueur.

La cr√©ation d'une SARL n√©cessite le respect de formalit√©s pr√©cises concernant la constitution, l'immatriculation et les d√©clarations obligatoires. Le capital social minimum, les statuts, et l'enregistrement aupr√®s des autorit√©s comp√©tentes sont des √©tapes incontournables.

‚Ä¢ Action Requise: R√©diger et signer les statuts de la SARL devant notaire parce que l'article L. 223-2 du Code de commerce exige un acte authentique pour la constitution

‚Ä¢ D√©lai Legal: Immatriculer la soci√©t√© dans les 15 jours suivant la signature des statuts parce que l'article R. 123-5 du Code de commerce impose ce d√©lai pour l'inscription au RCS  

‚Ä¢ Documents Obligatoires: Fournir un justificatif de domiciliation et une d√©claration de non-condamnation parce que l'article R. 123-54 du Code de commerce liste ces pi√®ces obligatoires

‚Ä¢ Impact Financier: Constituer un capital social minimum de 1 euro et payer les frais d'immatriculation de 37,45 euros parce que l'article L. 223-2 fixe le capital minimum et l'arr√™t√© du 28 f√©vrier 2020 les tarifs

‚Ä¢ Cons√©quences Non-Conformit√©: Risque de nullit√© de la soci√©t√© et responsabilit√© personnelle des associ√©s parce que l'article L. 223-1 du Code de commerce sanctionne les irr√©gularit√©s de constitution"""

    print("‚úÖ Sample Response:")
    print(sample_response)

    print("\nüîç Analysis:")
    sections = [
        "Action Requise",
        "D√©lai Legal",
        "Documents Obligatoires",
        "Impact Financier",
        "Cons√©quences Non-Conformit√©",
    ]
    found_sections = [s for s in sections if s in sample_response]

    print(f"   üìä Format compliance: {len(found_sections)}/5 sections found")
    print(f"   üìè Response length: {len(sample_response)} characters")
    print(f"   ‚öñÔ∏è  Legal references: Contains specific Code de commerce articles")
    print(f"   üéØ Structure: Proper bullet points with 'parce que' justifications")


def main():
    """Run all demos"""
    print("üèõÔ∏è Les Audits-Affaires - External Providers Demo")
    print("=" * 60)

    print("This demo shows how the external provider clients work.")
    print("In real usage, you would set API keys as environment variables.\n")

    # Run demos
    demo_factory()
    demo_client_interfaces()
    demo_legal_prompt_format()
    demo_expected_response()

    print("\n" + "=" * 60)
    print("üöÄ Getting Started")
    print("=" * 60)

    print("1. Set your API keys:")
    print("   export OPENAI_API_KEY='sk-...'")
    print("   export MISTRAL_API_KEY='...'")
    print("   export ANTHROPIC_API_KEY='sk-ant-...'")
    print("   export GOOGLE_API_KEY='...'")

    print("\n2. Test connections:")
    print("   lae-eval test-providers")

    print("\n3. Run full test:")
    print("   python scripts/test_external_providers.py")

    print("\n4. Use in your code:")
    print(
        """
   from les_audits_affaires_eval.clients import create_client
   
   async with create_client("openai", model="gpt-4o") as client:
       response = await client.generate_response("Votre question juridique...")
       print(response)
    """
    )


if __name__ == "__main__":
    main()
