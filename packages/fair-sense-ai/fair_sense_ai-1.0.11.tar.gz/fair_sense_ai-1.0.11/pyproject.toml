[tool.poetry]
name = "fair-sense-ai"
version = "1.0.11"  # Update this version with each new release
description = ""
authors = ["Shaina Raza, PhD <shaina.raza@torontomu.ca>"]
license = "Creative Commons BY-NC 4.0"
readme = "README.md"
repository = "https://github.com/VectorInstitute/fair-sense-ai"
documentation = "https://vectorinstitute.github.io/FairSense-AI/"
packages = [
    { include = "fairsenseai" },
]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: Other/Proprietary License",
    "Operating System :: OS Independent",
]

[tool.poetry.dependencies]
python = "^3.10"
ollama = "^0.4.5"
transformers = ">=4.47.1, <4.51"
pillow = "^10.4"
pandas = "^2.2.2"
gradio = "^5"
plotly = "^5.24.1"
pytesseract = "^0.3.13"
opencv-python = "^4.10.0.84"
numpy = "^1.26"
torch = "^2.2.2"
sentence-transformers = "^3.4.1"
faiss-cpu = "^1.10.0"
torchvision = "^0.17.2"
codecarbon = "^3.0.1"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
numpydoc = "^1.2"
sphinx = "^7.2.5"
sphinxcontrib-apidoc = "^0.4.0"
sphinx-autodoc-typehints = "^1.24.0"
myst-parser = "^2.0.0"
sphinx-design = "^0.5.0"
sphinx-copybutton = "^0.5.0"
sphinx-autoapi = "^2.0.0"
nbsphinx = "^0.9.3"
ipython = "^8.8.0"
ipykernel = "^6.23.0"
furo = "^2024.01.29"


[[tool.poetry.source]]
name = "pytorch"
url = "https://download.pytorch.org/whl/torch_stable.html"
priority = "explicit"

[tool.mypy]
ignore_missing_imports = true
install_types = true
pretty = true
namespace_packages = true
explicit_package_bases = true
non_interactive = true
warn_unused_configs = true
allow_any_generics = false
allow_subclassing_any = false
allow_untyped_calls = false
allow_untyped_defs = false
allow_incomplete_defs = false
check_untyped_defs = true
allow_untyped_decorators = false
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
implicit_reexport = false
strict_equality = true
extra_checks = true

[tool.ruff]
include = ["*.py", "pyproject.toml", "*.ipynb"]
line-length = 88

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true

[tool.ruff.lint]
select = [
    "A", # flake8-builtins
    "B", # flake8-bugbear
    "COM", # flake8-commas
    "C4", # flake8-comprehensions
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "ICN", # flake8-import-conventions
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "D", # pydocstyle
    "E", # pycodestyle
    "F", # pyflakes
    "I", # isort
    "W", # pycodestyle
    "N", # pep8-naming
    "ERA", # eradicate
    "PL", # pylint
]
fixable = ["A", "B", "COM", "C4", "RET", "SIM", "ICN", "Q", "RSE", "D", "E", "F", "I", "W", "N", "ERA", "PL"]
ignore = [
    "B905", # `zip()` without an explicit `strict=` parameter
    "E501", # line too long
    "D203", # 1 blank line required before class docstring
    "D213", # Multi-line docstring summary should start at the second line
    "PLR2004", # Replace magic number with named constant
    "PLR0913", # Too many arguments
    "COM812", # Missing trailing comma
]

# Ignore import violations in all `__init__.py` files.
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401", "F403", "F811"]

[tool.ruff.lint.pep8-naming]
ignore-names = ["X*", "setUp"]

[tool.ruff.lint.isort]
lines-after-imports = 2

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.pytest.ini_options]
markers = [
    "integration_test: marks tests as integration tests",
]

[tool.coverage]
    [tool.coverage.run]
    source=["aieng_template"]
    omit=["tests/*", "*__init__.py"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"