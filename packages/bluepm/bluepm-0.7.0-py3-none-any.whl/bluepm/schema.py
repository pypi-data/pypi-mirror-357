import sgqlc.types
import sgqlc.types.datetime
import sgqlc.types.relay


schema = sgqlc.types.Schema()


# Unexport Node/PageInfo, let schema re-declare them
schema -= sgqlc.types.relay.Node
schema -= sgqlc.types.relay.PageInfo



########################################################################
# Scalars and Enumerations
########################################################################
class ActivityCategory(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ACCEPT_INVITATION', 'ADD_USER_TO_PROJECT', 'ARCHIVE_PROJECT', 'CANCEL_INVITATION', 'COPY_TODO', 'CREATE_COMMENT', 'CREATE_CUSTOM_FIELD', 'CREATE_DISCUSSION', 'CREATE_INVITATION', 'CREATE_QUESTION', 'CREATE_STATUS_UPDATE', 'CREATE_TODO', 'CREATE_TODO_LIST', 'EDIT_JOB_TITLE', 'EDIT_NAME', 'LEAVE_COMPANY', 'LEAVE_PROJECT', 'MARK_TODO_AS_COMPLETE', 'MOVE_TODO', 'RECEIVE_FORM', 'REJECT_INVITATION', 'REMOVE_TODO', 'REMOVE_TODO_LIST', 'REMOVE_USER_FROM_COMPANY', 'REMOVE_USER_FROM_PROJECT', 'REPEAT_TODO', 'UNARCHIVE_PROJECT', 'UPDATE_COMPANY_ACCESS_LEVEL', 'UPDATE_PROJECT_ACCESS_LEVEL')


class ActivityOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('category_ASC', 'category_DESC', 'createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'inviteeEmail_ASC', 'inviteeEmail_DESC', 'metadata_ASC', 'metadata_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC', 'userAccessLevel_ASC', 'userAccessLevel_DESC')


class ApplicationType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('APPLICATION', 'DOCUMENTATION', 'FILES', 'FORMS')


class AutomationActionAssigneeOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class AutomationActionOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'duedIn_ASC', 'duedIn_DESC', 'id_ASC', 'id_DESC', 'metadata_ASC', 'metadata_DESC', 'type_ASC', 'type_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class AutomationActionTagOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class AutomationActionType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ADD_ASSIGNEE', 'ADD_ASSIGNEE_TRIGGERER', 'ADD_COLOR', 'ADD_CUSTOM_FIELD', 'ADD_TAG', 'CHANGE_DUE_DATE', 'CHANGE_TODO_LIST', 'COPY_TODO', 'CREATE_CHECKLIST', 'GENERATE_PDF', 'MAKE_HTTP_REQUEST', 'MARK_AS_COMPLETE', 'MARK_AS_INCOMPLETE', 'MARK_CHECKLIST_ITEM_AS_DONE', 'MARK_CHECKLIST_ITEM_AS_UNDONE', 'REMOVE_ASSIGNEE', 'REMOVE_COLOR', 'REMOVE_CUSTOM_FIELD', 'REMOVE_DUE_DATE', 'REMOVE_TAG', 'SEND_EMAIL')


class AutomationOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'isActive_ASC', 'isActive_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class AutomationTriggerAssigneeOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class AutomationTriggerOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'metadata_ASC', 'metadata_DESC', 'type_ASC', 'type_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class AutomationTriggerTagOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class AutomationTriggerType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ASSIGNEE_ADDED', 'ASSIGNEE_REMOVED', 'CHECKLIST_ITEM_MARKED_AS_DONE', 'CHECKLIST_ITEM_MARKED_AS_UNDONE', 'COLOR_ADDED', 'COLOR_REMOVED', 'CUSTOM_FIELD_ADDED', 'CUSTOM_FIELD_BUTTON_CLICKED', 'CUSTOM_FIELD_REMOVED', 'DUE_DATE_CHANGED', 'DUE_DATE_EXPIRED', 'DUE_DATE_REMOVED', 'TAG_ADDED', 'TAG_REMOVED', 'TODO_COPIED_OR_MOVED_FROM_OTHER_PROJECT', 'TODO_CREATED', 'TODO_LIST_CHANGED', 'TODO_MARKED_AS_COMPLETE', 'TODO_MARKED_AS_INCOMPLETE')


class BarChartXAxisInterval(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('DAY', 'MONTH', 'QUARTER', 'WEEK', 'YEAR')


class BarChartXAxisType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ASSIGNEE', 'CUSTOM_FIELD', 'PROJECT', 'TAG', 'TODO_CREATED_AT', 'TODO_DUE_DATE', 'TODO_LIST', 'TODO_STATUS', 'TODO_UPDATED_AT')


class BillingInterval(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('MONTHLY', 'YEARLY')


Boolean = sgqlc.types.Boolean

class ChartFunction(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('AVERAGE', 'AVERAGEA', 'COUNT', 'COUNTA', 'MAX', 'MIN', 'SUM')


class ChartSegmentValueFunctions(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('AVERAGE', 'AVERAGEA', 'COUNT', 'COUNTA', 'MAX', 'MIN', 'SUM')


class ChartSort(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdBy_ASC', 'createdBy_DESC', 'position_ASC', 'position_DESC', 'title_ASC', 'title_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class ChartType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('BAR', 'PIE', 'STAT')


class ChatSort(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdBy_ASC', 'createdBy_DESC', 'title_ASC', 'title_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class ChatType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FILE_QA', 'GENERAL', 'PROJECT_ASSISTANT')


class ChecklistItemOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'done_ASC', 'done_DESC', 'duedAt_ASC', 'duedAt_DESC', 'id_ASC', 'id_DESC', 'position_ASC', 'position_DESC', 'startedAt_ASC', 'startedAt_DESC', 'title_ASC', 'title_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class ChecklistItemUserOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class ChecklistOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'position_ASC', 'position_DESC', 'title_ASC', 'title_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class CommentCategory(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('DISCUSSION', 'STATUS_UPDATE', 'TODO')


class CommentOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('category_ASC', 'category_DESC', 'createdAt_ASC', 'createdAt_DESC', 'html_ASC', 'html_DESC', 'id_ASC', 'id_DESC', 'text_ASC', 'text_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class CommentTypingSubscriptionName(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('DISCUSSION', 'STATUS_UPDATE', 'TODO')


class CompanyFilterStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ACTIVE', 'CANCELED', 'EXPIRED', 'PAST_DUE', 'TRIALING', 'UNKNOWN')


class CompanyLicenseOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('activationEmail_ASC', 'activationEmail_DESC', 'createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'invoiceId_ASC', 'invoiceId_DESC', 'licenseId_ASC', 'licenseId_DESC', 'planId_ASC', 'planId_DESC', 'source_ASC', 'source_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class CompanyOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'description_ASC', 'description_DESC', 'freeTrialExpiredAt_ASC', 'freeTrialExpiredAt_DESC', 'freeTrialExtendedAt_ASC', 'freeTrialExtendedAt_DESC', 'freeTrialStartedAt_ASC', 'freeTrialStartedAt_DESC', 'id_ASC', 'id_DESC', 'name_ASC', 'name_DESC', 'slug_ASC', 'slug_DESC', 'subscribedAt_ASC', 'subscribedAt_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class CompanySort(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'freeTrialExpiredAt_ASC', 'freeTrialExpiredAt_DESC', 'freeTrialStartedAt_ASC', 'freeTrialStartedAt_DESC', 'id_ASC', 'id_DESC', 'name_ASC', 'name_DESC', 'slug_ASC', 'slug_DESC')


class CompanySubscriptionPlanCardOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('brand_ASC', 'brand_DESC', 'country_ASC', 'country_DESC', 'cvcCheck_ASC', 'cvcCheck_DESC', 'expMonth_ASC', 'expMonth_DESC', 'expYear_ASC', 'expYear_DESC', 'funding_ASC', 'funding_DESC', 'id_ASC', 'id_DESC', 'identifier_ASC', 'identifier_DESC', 'last4_ASC', 'last4_DESC', 'name_ASC', 'name_DESC')


class CompanySubscriptionPlanOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('cancelAtPeriodEnd_ASC', 'cancelAtPeriodEnd_DESC', 'cancelAt_ASC', 'cancelAt_DESC', 'canceledAt_ASC', 'canceledAt_DESC', 'createdAt_ASC', 'createdAt_DESC', 'currentPeriodEnd_ASC', 'currentPeriodEnd_DESC', 'currentPeriodStart_ASC', 'currentPeriodStart_DESC', 'cusId_ASC', 'cusId_DESC', 'endedAt_ASC', 'endedAt_DESC', 'id_ASC', 'id_DESC', 'isPaid_ASC', 'isPaid_DESC', 'paymentIntentClientSecret_ASC', 'paymentIntentClientSecret_DESC', 'paymentIntentId_ASC', 'paymentIntentId_DESC', 'paymentIntentStatus_ASC', 'paymentIntentStatus_DESC', 'planId_ASC', 'planId_DESC', 'planName_ASC', 'planName_DESC', 'status_ASC', 'status_DESC', 'subId_ASC', 'subId_DESC', 'trialEnd_ASC', 'trialEnd_DESC', 'trialStart_ASC', 'trialStart_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class CompanyUserFolderOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('id_ASC', 'id_DESC', 'position_ASC', 'position_DESC', 'uid_ASC', 'uid_DESC')


class CompanyUserNotificationOptionOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('allowEmail_ASC', 'allowEmail_DESC', 'allowPush_ASC', 'allowPush_DESC', 'createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class CompanyUserOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('allowNotification_ASC', 'allowNotification_DESC', 'createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'lastAccessedAt_ASC', 'lastAccessedAt_DESC', 'level_ASC', 'level_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class CopyTodoOption(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ASSIGNEES', 'CHECKLISTS', 'COMMENTS', 'CUSTOM_FIELDS', 'DESCRIPTION', 'DUE_DATE', 'TAGS')


class CreateStatusUpdateInputDate(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('BEFORE_YESTERDAY', 'TODAY', 'YESTERDAY')


class CreateTodoInputPlacement(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('BOTTOM', 'TOP')


class CustomFieldLookupType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('TODO_ASSIGNEE', 'TODO_CREATED_AT', 'TODO_CUSTOM_FIELD', 'TODO_DESCRIPTION', 'TODO_DUE_DATE', 'TODO_LIST', 'TODO_TAG', 'TODO_UPDATED_AT')


class CustomFieldOptionOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('color_ASC', 'color_DESC', 'createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'position_ASC', 'position_DESC', 'title_ASC', 'title_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class CustomFieldOptionSort(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('position_ASC', 'position_DESC')


class CustomFieldOptionsFilterDistinct(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('color', 'title')


class CustomFieldOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'currency_ASC', 'currency_DESC', 'description_ASC', 'description_DESC', 'id_ASC', 'id_DESC', 'max_ASC', 'max_DESC', 'min_ASC', 'min_DESC', 'name_ASC', 'name_DESC', 'position_ASC', 'position_DESC', 'prefix_ASC', 'prefix_DESC', 'type_ASC', 'type_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class CustomFieldSort(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'name_ASC', 'name_DESC', 'position_ASC', 'position_DESC')


class CustomFieldTimeDurationCondition(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FIRST', 'LAST')


class CustomFieldTimeDurationDisplayType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FULL_DATE', 'FULL_DATE_STRING', 'FULL_DATE_SUBSTRING')


class CustomFieldTimeDurationType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('TODO_ASSIGNEE_ADDED', 'TODO_CREATED_AT', 'TODO_CUSTOM_FIELD', 'TODO_DUE_DATE', 'TODO_MARKED_AS_COMPLETE', 'TODO_MOVED', 'TODO_TAG_ADDED')


class CustomFieldType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('BUTTON', 'CHECKBOX', 'COUNTRY', 'CURRENCY', 'CURRENCY_CONVERSION', 'DATE', 'EMAIL', 'FILE', 'FORMULA', 'LOCATION', 'LOOKUP', 'NUMBER', 'PERCENT', 'PHONE', 'RATING', 'REFERENCE', 'SELECT_MULTI', 'SELECT_SINGLE', 'TEXT_MULTI', 'TEXT_SINGLE', 'TIME_DURATION', 'UNIQUE_ID', 'URL')


class CustomFieldsFilterDistinct(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('name', 'referenceProjectId', 'type')


class DashboardRole(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('EDITOR', 'VIEWER')


class DashboardSort(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdBy_ASC', 'createdBy_DESC', 'title_ASC', 'title_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


DateTime = sgqlc.types.datetime.DateTime

class DiscussionOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'html_ASC', 'html_DESC', 'id_ASC', 'id_DESC', 'text_ASC', 'text_DESC', 'title_ASC', 'title_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class DiscussionSort(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('lastCommentedAt_ASC', 'lastCommentedAt_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class DocumentOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('contentBase64_ASC', 'contentBase64_DESC', 'content_ASC', 'content_DESC', 'createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'title_ASC', 'title_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC', 'wiki_ASC', 'wiki_DESC')


class DocumentSort(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdBy_ASC', 'createdBy_DESC', 'title_ASC', 'title_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class EmailTemplateType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVITATION',)


class FileOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'extension_ASC', 'extension_DESC', 'id_ASC', 'id_DESC', 'name_ASC', 'name_DESC', 'shared_ASC', 'shared_DESC', 'size_ASC', 'size_DESC', 'type_ASC', 'type_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class FileSort(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'createdBy_ASC', 'createdBy_DESC', 'name_ASC', 'name_DESC', 'size_ASC', 'size_DESC', 'type_ASC', 'type_DESC')


class FileStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CONFIRMED', 'PENDING')


class FilterComparisonOperator(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CONTAINS', 'EQ', 'GT', 'GTE', 'IN', 'IS', 'LT', 'LTE', 'NE', 'NIN', 'NOT')


class FilterLogicalOperator(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('AND', 'OR')


Float = sgqlc.types.Float

class FolderOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('color_ASC', 'color_DESC', 'createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'metadata_ASC', 'metadata_DESC', 'title_ASC', 'title_DESC', 'type_ASC', 'type_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class FolderSort(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'position_ASC', 'position_DESC', 'size_ASC', 'size_DESC', 'title_ASC', 'title_DESC')


class FolderType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FILE', 'PROJECT')


class FormFieldOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('addToDescription_ASC', 'addToDescription_DESC', 'createdAt_ASC', 'createdAt_DESC', 'extraInfo_ASC', 'extraInfo_DESC', 'field_ASC', 'field_DESC', 'hidden_ASC', 'hidden_DESC', 'id_ASC', 'id_DESC', 'name_ASC', 'name_DESC', 'placeholder_ASC', 'placeholder_DESC', 'position_ASC', 'position_DESC', 'required_ASC', 'required_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class FormFieldsField(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('custom', 'description', 'duedAt', 'startedAt', 'title')


class FormOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'description_ASC', 'description_DESC', 'hideBranding_ASC', 'hideBranding_DESC', 'id_ASC', 'id_DESC', 'imageURL_ASC', 'imageURL_DESC', 'isActive_ASC', 'isActive_DESC', 'primaryColor_ASC', 'primaryColor_DESC', 'redirectURL_ASC', 'redirectURL_DESC', 'responseText_ASC', 'responseText_DESC', 'snapshotURL_ASC', 'snapshotURL_DESC', 'submitText_ASC', 'submitText_DESC', 'theme_ASC', 'theme_DESC', 'title_ASC', 'title_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class FormSort(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('title_ASC', 'updatedAt_DESC')


class FormTagOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class FormUserOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class FormulaDisplayType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CURRENCY', 'NUMBER', 'PERCENTAGE')


class HttpAuthorizationApiKeyPassBy(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('HEADER', 'QUERY')


class HttpAuthorizationType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('API_KEY', 'BASIC_AUTH', 'BEARER', 'OAUTH2')


class HttpContentType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('JSON', 'TEXT')


class HttpMethod(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('DELETE', 'GET', 'PATCH', 'POST', 'PUT')


ID = sgqlc.types.ID

class ImageOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'large_ASC', 'large_DESC', 'medium_ASC', 'medium_DESC', 'original_ASC', 'original_DESC', 'small_ASC', 'small_DESC', 'thumbnail_ASC', 'thumbnail_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class ImageType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('COMPANY', 'DOCUMENT', 'PROFILE', 'PROJECT')


Int = sgqlc.types.Int

class InvitationOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('accessLevel_ASC', 'accessLevel_DESC', 'createdAt_ASC', 'createdAt_DESC', 'email_ASC', 'email_DESC', 'expiredAt_ASC', 'expiredAt_DESC', 'id_ASC', 'id_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class JSON(sgqlc.types.Scalar):
    __schema__ = schema


class JSONObject(sgqlc.types.Scalar):
    __schema__ = schema


class LinkOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'description_ASC', 'description_DESC', 'id_ASC', 'id_DESC', 'membersOnly_ASC', 'membersOnly_DESC', 'position_ASC', 'position_DESC', 'title_ASC', 'title_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC', 'url_ASC', 'url_DESC')


class Locale(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('BN', 'CZ', 'DE', 'EN', 'ES', 'FR', 'HI', 'HU', 'ID', 'IT', 'JA', 'KA', 'KM', 'KO', 'LV', 'NB', 'NL', 'PL', 'PT', 'RO', 'RU', 'SE', 'SW', 'TA', 'TH', 'TL', 'TR', 'VI', 'ZH')


class Long(sgqlc.types.Scalar):
    __schema__ = schema


class MentionSort(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC')


class MentionType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('COMMENT', 'DISCUSSION', 'STATUS_UPDATE', 'TODO')


class MutationType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CREATED', 'DELETED', 'UPDATED')


class NotificationOptionName(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('COMMENT_CREATED', 'DISCUSSION_CREATED', 'PROJECT_USER_ADDED', 'STATUS_UPDATE_CREATED', 'TODO_CREATED', 'TODO_DUE_DATE_CHANGED', 'TODO_MARKED_AS_DONE', 'TODO_OVERDUED', 'TODO_REMINDER', 'YOU_GET_ADDED_TO_PROJECT', 'YOU_GET_MENTIONED', 'YOU_GET_TODO_ASSIGNED')


class NotificationOptionOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'description_ASC', 'description_DESC', 'id_ASC', 'id_DESC', 'name_ASC', 'name_DESC', 'position_ASC', 'position_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class OAuthConnectionSort(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('name_ASC', 'updatedAt_DESC')


class OAuthProvider(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('GITHUB', 'INUIT_QUICKBOOKS')


class OrderBy(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ASC', 'DESC')


class PersonalAccessTokenOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'expiredAt_ASC', 'expiredAt_DESC', 'id_ASC', 'id_DESC', 'lastUsedAt_ASC', 'lastUsedAt_DESC', 'name_ASC', 'name_DESC', 'scopes_ASC', 'scopes_DESC', 'secret_ASC', 'secret_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class ProjectCategory(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CRM', 'CROSS_FUNCTIONAL', 'CUSTOMER_SUCCESS', 'DESIGN', 'ENGINEERING', 'GENERAL', 'HR', 'IT', 'MARKETING', 'OPERATIONS', 'PRODUCT', 'SALES')


class ProjectOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('archived_ASC', 'archived_DESC', 'category_ASC', 'category_DESC', 'createdAt_ASC', 'createdAt_DESC', 'description_ASC', 'description_DESC', 'hideEmailFromRoles_ASC', 'hideEmailFromRoles_DESC', 'id_ASC', 'id_DESC', 'isOfficialTemplate_ASC', 'isOfficialTemplate_DESC', 'isTemplate_ASC', 'isTemplate_DESC', 'name_ASC', 'name_DESC', 'slug_ASC', 'slug_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class ProjectSort(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'name_ASC', 'name_DESC', 'position_ASC', 'position_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class ProjectUserFolderOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('id_ASC', 'id_DESC', 'position_ASC', 'position_DESC', 'uid_ASC', 'uid_DESC')


class ProjectUserOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('allowNotification_ASC', 'allowNotification_DESC', 'createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'lastAccessedAt_ASC', 'lastAccessedAt_DESC', 'level_ASC', 'level_DESC', 'position_ASC', 'position_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class QuestionFrequency(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('EVERY_OTHER_WEEK', 'EVERY_WEEK', 'ONCE_A_MONTH')


class QuestionOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'days_ASC', 'days_DESC', 'frequency_ASC', 'frequency_DESC', 'id_ASC', 'id_DESC', 'status_ASC', 'status_DESC', 'time_ASC', 'time_DESC', 'title_ASC', 'title_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class QuestionUserOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class RepeatingTodoAllowedField(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ASSIGNEES', 'CHECKLISTS', 'COMMENTS', 'CUSTOM_FIELDS', 'DESCRIPTION', 'TAGS')


class RepeatingTodoDayType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('Fri', 'Mon', 'Sat', 'Sun', 'Thu', 'Tue', 'Wed')


class RepeatingTodoEndType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('AFTER', 'NEVER', 'ON')


class RepeatingTodoIntervalType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('DAYS', 'MONTHS', 'WEEKS', 'YEARS')


class RepeatingTodoMonthType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('BY_DD', 'BY_DDDD')


class RepeatingTodoRepeatType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CUSTOM', 'DAILY', 'MONTHLY', 'WEEKDAYS', 'WEEKLY', 'YEARLY')


class Role(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ADMIN', 'CUSTOMER', 'USER')


class SecurityCodeCategory(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('DELETE_COMPANY', 'SIGN_IN', 'SIGN_UP', 'UPDATE_EMAIL')


class SecurityCodeOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('categoryRef_ASC', 'categoryRef_DESC', 'category_ASC', 'category_DESC', 'code_ASC', 'code_DESC', 'createdAt_ASC', 'createdAt_DESC', 'email_ASC', 'email_DESC', 'expiredAt_ASC', 'expiredAt_DESC', 'id_ASC', 'id_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class StatusUpdateCategory(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('GREEN', 'ORANGE', 'RED')


class StatusUpdateOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('category_ASC', 'category_DESC', 'createdAt_ASC', 'createdAt_DESC', 'date_ASC', 'date_DESC', 'html_ASC', 'html_DESC', 'id_ASC', 'id_DESC', 'text_ASC', 'text_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


String = sgqlc.types.String

class TagListFilterDistinct(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('color', 'title')


class TagOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('color_ASC', 'color_DESC', 'createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'title_ASC', 'title_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class TodoActionOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('automated_ASC', 'automated_DESC', 'createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'newValue_ASC', 'newValue_DESC', 'oldValue_ASC', 'oldValue_DESC', 'type_ASC', 'type_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class TodoActionType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ADD_TAG', 'ASSIGN_AN_ASSIGNEE', 'ASSIGN_CHECKLIST_ITEM', 'CHANGE_DUE_DATE', 'CHANGE_TODO_LIST', 'COPY_TODO', 'CREATE_CHECKLIST', 'CREATE_CHECKLIST_ITEM', 'CREATE_DEPENDENCY', 'DELETE_CHECKLIST', 'DELETE_CHECKLIST_ITEM', 'DELETE_DEPENDENCY', 'DELETE_TAG', 'MARK_AS_COMPLETE', 'MARK_AS_INCOMPLETE', 'MARK_CHECKLIST_ITEM_AS_DONE', 'MARK_CHECKLIST_ITEM_AS_UNDONE', 'MOVE_TODO', 'REMOVE_DUE_DATE', 'REMOVE_TAG', 'REPEAT_TODO', 'SEND_EMAIL', 'SET_CHECKLIST_ITEM_DUE_DATE', 'SET_CUSTOM_FIELD', 'SET_DUE_DATE', 'UNASSIGN_AN_ASSIGNEE', 'UNASSIGN_CHECKLIST_ITEM', 'UPDATE_CHECKLIST', 'UPDATE_CHECKLIST_ITEM', 'UPDATE_DEPENDENCY', 'UPDATE_DESCRIPTION', 'UPDATE_TAG', 'UPDATE_TITLE')


class TodoActivityFilterType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('activities', 'comments', 'everything')


class TodoCustomFieldFileOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'position_ASC', 'position_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class TodoCustomFieldOptionOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class TodoCustomFieldOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('checked_ASC', 'checked_DESC', 'countryCodes_ASC', 'countryCodes_DESC', 'createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'latitude_ASC', 'latitude_DESC', 'longitude_ASC', 'longitude_DESC', 'number_ASC', 'number_DESC', 'regionCode_ASC', 'regionCode_DESC', 'text_ASC', 'text_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class TodoDependencyType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('BLOCKED_BY', 'BLOCKING')


class TodoFieldType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ASSIGNEE', 'CHECKLIST', 'CUSTOM_FIELD', 'CUSTOM_FIELD_GROUP', 'DEPENDENCY', 'DESCRIPTION', 'DUE_DATE', 'REFERENCED_BY', 'TAG', 'TIME_TRACKING')


class TodoFilterFieldType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CUSTOM_FIELD', 'DESCRIPTION', 'DUEDATE', 'TAGS', 'TITLE')


class TodoGroupType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ASSIGNEES', 'DUE_DATE', 'TAGS', 'TODO_LIST')


class TodoListOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'position_ASC', 'position_DESC', 'title_ASC', 'title_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class TodoListsFilterDistinct(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('title',)


class TodoListsSort(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'position_ASC', 'position_DESC', 'title_ASC', 'title_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class TodoOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('archived_ASC', 'archived_DESC', 'createdAt_ASC', 'createdAt_DESC', 'createdByFirstName_ASC', 'createdByFirstName_DESC', 'done_ASC', 'done_DESC', 'duedAt_ASC', 'duedAt_DESC', 'html_ASC', 'html_DESC', 'id_ASC', 'id_DESC', 'position_ASC', 'position_DESC', 'projectName_ASC', 'projectName_DESC', 'startedAt_ASC', 'startedAt_DESC', 'text_ASC', 'text_DESC', 'timezone_ASC', 'timezone_DESC', 'title_ASC', 'title_DESC', 'todoListTitle_ASC', 'todoListTitle_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class TodoTagOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class TodoUserOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class TodosSort(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('assignees_ASC', 'assignees_DESC', 'checklistItemTitle_ASC', 'checklistItemTitle_DESC', 'checklistTitle_ASC', 'checklistTitle_DESC', 'createdAt_ASC', 'createdAt_DESC', 'createdBy_ASC', 'createdBy_DESC', 'duedAt_ASC', 'duedAt_DESC', 'position_ASC', 'position_DESC', 'projectName_ASC', 'projectName_DESC', 'startedAt_ASC', 'startedAt_DESC', 'title_ASC', 'title_DESC', 'todoCustomFieldDate_ASC', 'todoCustomFieldDate_DESC', 'todoCustomFieldSelectMulti_ASC', 'todoCustomFieldSelectMulti_DESC', 'todoCustomFieldSelectSingle_ASC', 'todoCustomFieldSelectSingle_DESC', 'todoListPosition_ASC', 'todoListPosition_DESC', 'todoListTitle_ASC', 'todoListTitle_DESC', 'todoTags_ASC', 'todoTags_DESC')


class Upload(sgqlc.types.Scalar):
    __schema__ = schema


class UserAccessLevel(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ADMIN', 'CLIENT', 'COMMENT_ONLY', 'MEMBER', 'OWNER', 'VIEW_ONLY')


class UserActivityOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'isRead_ASC', 'isRead_DESC', 'isSeen_ASC', 'isSeen_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class UserOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'dateOfBirth_ASC', 'dateOfBirth_DESC', 'email_ASC', 'email_DESC', 'firstName_ASC', 'firstName_DESC', 'id_ASC', 'id_DESC', 'isEmailVerified_ASC', 'isEmailVerified_DESC', 'isWelcomeGuideCompleted_ASC', 'isWelcomeGuideCompleted_DESC', 'jobTitle_ASC', 'jobTitle_DESC', 'lastActiveAt_ASC', 'lastActiveAt_DESC', 'lastName_ASC', 'lastName_DESC', 'locale_ASC', 'locale_DESC', 'phoneNumber_ASC', 'phoneNumber_DESC', 'role_ASC', 'role_DESC', 'theme_ASC', 'theme_DESC', 'timezone_ASC', 'timezone_DESC', 'uid_ASC', 'uid_DESC', 'updatedAt_ASC', 'updatedAt_DESC', 'username_ASC', 'username_DESC')


class UserPushTokenOrderByInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('createdAt_ASC', 'createdAt_DESC', 'id_ASC', 'id_DESC', 'token_ASC', 'token_DESC', 'updatedAt_ASC', 'updatedAt_DESC')


class WebhookEvent(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('COMMENT_CREATED', 'COMMENT_DELETED', 'COMMENT_UPDATED', 'CUSTOM_FIELD_CREATED', 'CUSTOM_FIELD_DELETED', 'CUSTOM_FIELD_UPDATED', 'TAG_CREATED', 'TAG_DELETED', 'TAG_UPDATED', 'TODO_ASSIGNEE_ADDED', 'TODO_ASSIGNEE_REMOVED', 'TODO_CHECKLIST_CREATED', 'TODO_CHECKLIST_DELETED', 'TODO_CHECKLIST_ITEM_ASSIGNEE_ADDED', 'TODO_CHECKLIST_ITEM_ASSIGNEE_REMOVED', 'TODO_CHECKLIST_ITEM_CREATED', 'TODO_CHECKLIST_ITEM_DELETED', 'TODO_CHECKLIST_ITEM_DONE_STATUS_UPDATED', 'TODO_CHECKLIST_ITEM_DUE_DATE_ADDED', 'TODO_CHECKLIST_ITEM_DUE_DATE_REMOVED', 'TODO_CHECKLIST_ITEM_DUE_DATE_UPDATED', 'TODO_CHECKLIST_ITEM_NAME_CHANGED', 'TODO_CHECKLIST_NAME_CHANGED', 'TODO_CREATED', 'TODO_CUSTOM_FIELD_UPDATED', 'TODO_DELETED', 'TODO_DONE_STATUS_UPDATED', 'TODO_DUE_DATE_ADDED', 'TODO_DUE_DATE_REMOVED', 'TODO_DUE_DATE_UPDATED', 'TODO_LIST_CREATED', 'TODO_LIST_DELETED', 'TODO_LIST_NAME_CHANGED', 'TODO_MOVED', 'TODO_NAME_CHANGED', 'TODO_TAG_ADDED', 'TODO_TAG_REMOVED')


class WebhookStatusType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('HEALTHY', 'UNHEALTHY')



########################################################################
# Input Objects
########################################################################
class AITagInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('todo_ids', 'project_id', 'todo_list_id')
    todo_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='todoIds')
    project_id = sgqlc.types.Field(String, graphql_name='projectId')
    todo_list_id = sgqlc.types.Field(String, graphql_name='todoListId')


class ActivateCompanyLicenseInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id',)
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')


class ActivityCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'category', 'invitee_email', 'metadata', 'company', 'project', 'comment', 'discussion', 'status_update', 'todo', 'todo_list', 'custom_field', 'user_activities', 'created_by', 'affected_by', 'user_access_level', 'question')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    category = sgqlc.types.Field(sgqlc.types.non_null(ActivityCategory), graphql_name='category')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    company = sgqlc.types.Field('CompanyCreateOneWithoutActivitiesInput', graphql_name='company')
    project = sgqlc.types.Field('ProjectCreateOneWithoutActivitiesInput', graphql_name='project')
    comment = sgqlc.types.Field('CommentCreateOneWithoutActivityInput', graphql_name='comment')
    discussion = sgqlc.types.Field('DiscussionCreateOneWithoutActivityInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateCreateOneWithoutActivityInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoCreateOneWithoutActivityInput', graphql_name='todo')
    todo_list = sgqlc.types.Field('TodoListCreateOneWithoutActivityInput', graphql_name='todoList')
    custom_field = sgqlc.types.Field('CustomFieldCreateOneWithoutActivityInput', graphql_name='customField')
    user_activities = sgqlc.types.Field('UserActivityCreateManyWithoutActivityInput', graphql_name='userActivities')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutCreatedActivitiesInput'), graphql_name='createdBy')
    affected_by = sgqlc.types.Field('UserCreateOneWithoutAffectedActivitiesInput', graphql_name='affectedBy')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')
    question = sgqlc.types.Field('QuestionCreateOneWithoutActivityInput', graphql_name='question')


class ActivityCreateManyWithoutAffectedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityCreateWithoutAffectedByInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityWhereUniqueInput')), graphql_name='connect')


class ActivityCreateManyWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityCreateWithoutCompanyInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityWhereUniqueInput')), graphql_name='connect')


class ActivityCreateManyWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityCreateWithoutCreatedByInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityWhereUniqueInput')), graphql_name='connect')


class ActivityCreateManyWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityCreateWithoutProjectInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityWhereUniqueInput')), graphql_name='connect')


class ActivityCreateOneInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(ActivityCreateInput, graphql_name='create')
    connect = sgqlc.types.Field('ActivityWhereUniqueInput', graphql_name='connect')


class ActivityCreateOneWithoutCommentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('ActivityCreateWithoutCommentInput', graphql_name='create')
    connect = sgqlc.types.Field('ActivityWhereUniqueInput', graphql_name='connect')


class ActivityCreateOneWithoutCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('ActivityCreateWithoutCustomFieldInput', graphql_name='create')
    connect = sgqlc.types.Field('ActivityWhereUniqueInput', graphql_name='connect')


class ActivityCreateOneWithoutDiscussionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('ActivityCreateWithoutDiscussionInput', graphql_name='create')
    connect = sgqlc.types.Field('ActivityWhereUniqueInput', graphql_name='connect')


class ActivityCreateOneWithoutQuestionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('ActivityCreateWithoutQuestionInput', graphql_name='create')
    connect = sgqlc.types.Field('ActivityWhereUniqueInput', graphql_name='connect')


class ActivityCreateOneWithoutStatusUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('ActivityCreateWithoutStatusUpdateInput', graphql_name='create')
    connect = sgqlc.types.Field('ActivityWhereUniqueInput', graphql_name='connect')


class ActivityCreateOneWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('ActivityCreateWithoutTodoInput', graphql_name='create')
    connect = sgqlc.types.Field('ActivityWhereUniqueInput', graphql_name='connect')


class ActivityCreateOneWithoutTodoListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('ActivityCreateWithoutTodoListInput', graphql_name='create')
    connect = sgqlc.types.Field('ActivityWhereUniqueInput', graphql_name='connect')


class ActivityCreateOneWithoutUserActivitiesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('ActivityCreateWithoutUserActivitiesInput', graphql_name='create')
    connect = sgqlc.types.Field('ActivityWhereUniqueInput', graphql_name='connect')


class ActivityCreateWithoutAffectedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'category', 'invitee_email', 'metadata', 'company', 'project', 'comment', 'discussion', 'status_update', 'todo', 'todo_list', 'custom_field', 'user_activities', 'created_by', 'user_access_level', 'question')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    category = sgqlc.types.Field(sgqlc.types.non_null(ActivityCategory), graphql_name='category')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    company = sgqlc.types.Field('CompanyCreateOneWithoutActivitiesInput', graphql_name='company')
    project = sgqlc.types.Field('ProjectCreateOneWithoutActivitiesInput', graphql_name='project')
    comment = sgqlc.types.Field('CommentCreateOneWithoutActivityInput', graphql_name='comment')
    discussion = sgqlc.types.Field('DiscussionCreateOneWithoutActivityInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateCreateOneWithoutActivityInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoCreateOneWithoutActivityInput', graphql_name='todo')
    todo_list = sgqlc.types.Field('TodoListCreateOneWithoutActivityInput', graphql_name='todoList')
    custom_field = sgqlc.types.Field('CustomFieldCreateOneWithoutActivityInput', graphql_name='customField')
    user_activities = sgqlc.types.Field('UserActivityCreateManyWithoutActivityInput', graphql_name='userActivities')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutCreatedActivitiesInput'), graphql_name='createdBy')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')
    question = sgqlc.types.Field('QuestionCreateOneWithoutActivityInput', graphql_name='question')


class ActivityCreateWithoutCommentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'category', 'invitee_email', 'metadata', 'company', 'project', 'discussion', 'status_update', 'todo', 'todo_list', 'custom_field', 'user_activities', 'created_by', 'affected_by', 'user_access_level', 'question')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    category = sgqlc.types.Field(sgqlc.types.non_null(ActivityCategory), graphql_name='category')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    company = sgqlc.types.Field('CompanyCreateOneWithoutActivitiesInput', graphql_name='company')
    project = sgqlc.types.Field('ProjectCreateOneWithoutActivitiesInput', graphql_name='project')
    discussion = sgqlc.types.Field('DiscussionCreateOneWithoutActivityInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateCreateOneWithoutActivityInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoCreateOneWithoutActivityInput', graphql_name='todo')
    todo_list = sgqlc.types.Field('TodoListCreateOneWithoutActivityInput', graphql_name='todoList')
    custom_field = sgqlc.types.Field('CustomFieldCreateOneWithoutActivityInput', graphql_name='customField')
    user_activities = sgqlc.types.Field('UserActivityCreateManyWithoutActivityInput', graphql_name='userActivities')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutCreatedActivitiesInput'), graphql_name='createdBy')
    affected_by = sgqlc.types.Field('UserCreateOneWithoutAffectedActivitiesInput', graphql_name='affectedBy')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')
    question = sgqlc.types.Field('QuestionCreateOneWithoutActivityInput', graphql_name='question')


class ActivityCreateWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'category', 'invitee_email', 'metadata', 'project', 'comment', 'discussion', 'status_update', 'todo', 'todo_list', 'custom_field', 'user_activities', 'created_by', 'affected_by', 'user_access_level', 'question')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    category = sgqlc.types.Field(sgqlc.types.non_null(ActivityCategory), graphql_name='category')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    project = sgqlc.types.Field('ProjectCreateOneWithoutActivitiesInput', graphql_name='project')
    comment = sgqlc.types.Field('CommentCreateOneWithoutActivityInput', graphql_name='comment')
    discussion = sgqlc.types.Field('DiscussionCreateOneWithoutActivityInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateCreateOneWithoutActivityInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoCreateOneWithoutActivityInput', graphql_name='todo')
    todo_list = sgqlc.types.Field('TodoListCreateOneWithoutActivityInput', graphql_name='todoList')
    custom_field = sgqlc.types.Field('CustomFieldCreateOneWithoutActivityInput', graphql_name='customField')
    user_activities = sgqlc.types.Field('UserActivityCreateManyWithoutActivityInput', graphql_name='userActivities')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutCreatedActivitiesInput'), graphql_name='createdBy')
    affected_by = sgqlc.types.Field('UserCreateOneWithoutAffectedActivitiesInput', graphql_name='affectedBy')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')
    question = sgqlc.types.Field('QuestionCreateOneWithoutActivityInput', graphql_name='question')


class ActivityCreateWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'category', 'invitee_email', 'metadata', 'company', 'project', 'comment', 'discussion', 'status_update', 'todo', 'todo_list', 'custom_field', 'user_activities', 'affected_by', 'user_access_level', 'question')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    category = sgqlc.types.Field(sgqlc.types.non_null(ActivityCategory), graphql_name='category')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    company = sgqlc.types.Field('CompanyCreateOneWithoutActivitiesInput', graphql_name='company')
    project = sgqlc.types.Field('ProjectCreateOneWithoutActivitiesInput', graphql_name='project')
    comment = sgqlc.types.Field('CommentCreateOneWithoutActivityInput', graphql_name='comment')
    discussion = sgqlc.types.Field('DiscussionCreateOneWithoutActivityInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateCreateOneWithoutActivityInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoCreateOneWithoutActivityInput', graphql_name='todo')
    todo_list = sgqlc.types.Field('TodoListCreateOneWithoutActivityInput', graphql_name='todoList')
    custom_field = sgqlc.types.Field('CustomFieldCreateOneWithoutActivityInput', graphql_name='customField')
    user_activities = sgqlc.types.Field('UserActivityCreateManyWithoutActivityInput', graphql_name='userActivities')
    affected_by = sgqlc.types.Field('UserCreateOneWithoutAffectedActivitiesInput', graphql_name='affectedBy')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')
    question = sgqlc.types.Field('QuestionCreateOneWithoutActivityInput', graphql_name='question')


class ActivityCreateWithoutCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'category', 'invitee_email', 'metadata', 'company', 'project', 'comment', 'discussion', 'status_update', 'todo', 'todo_list', 'user_activities', 'created_by', 'affected_by', 'user_access_level', 'question')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    category = sgqlc.types.Field(sgqlc.types.non_null(ActivityCategory), graphql_name='category')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    company = sgqlc.types.Field('CompanyCreateOneWithoutActivitiesInput', graphql_name='company')
    project = sgqlc.types.Field('ProjectCreateOneWithoutActivitiesInput', graphql_name='project')
    comment = sgqlc.types.Field('CommentCreateOneWithoutActivityInput', graphql_name='comment')
    discussion = sgqlc.types.Field('DiscussionCreateOneWithoutActivityInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateCreateOneWithoutActivityInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoCreateOneWithoutActivityInput', graphql_name='todo')
    todo_list = sgqlc.types.Field('TodoListCreateOneWithoutActivityInput', graphql_name='todoList')
    user_activities = sgqlc.types.Field('UserActivityCreateManyWithoutActivityInput', graphql_name='userActivities')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutCreatedActivitiesInput'), graphql_name='createdBy')
    affected_by = sgqlc.types.Field('UserCreateOneWithoutAffectedActivitiesInput', graphql_name='affectedBy')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')
    question = sgqlc.types.Field('QuestionCreateOneWithoutActivityInput', graphql_name='question')


class ActivityCreateWithoutDiscussionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'category', 'invitee_email', 'metadata', 'company', 'project', 'comment', 'status_update', 'todo', 'todo_list', 'custom_field', 'user_activities', 'created_by', 'affected_by', 'user_access_level', 'question')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    category = sgqlc.types.Field(sgqlc.types.non_null(ActivityCategory), graphql_name='category')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    company = sgqlc.types.Field('CompanyCreateOneWithoutActivitiesInput', graphql_name='company')
    project = sgqlc.types.Field('ProjectCreateOneWithoutActivitiesInput', graphql_name='project')
    comment = sgqlc.types.Field('CommentCreateOneWithoutActivityInput', graphql_name='comment')
    status_update = sgqlc.types.Field('StatusUpdateCreateOneWithoutActivityInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoCreateOneWithoutActivityInput', graphql_name='todo')
    todo_list = sgqlc.types.Field('TodoListCreateOneWithoutActivityInput', graphql_name='todoList')
    custom_field = sgqlc.types.Field('CustomFieldCreateOneWithoutActivityInput', graphql_name='customField')
    user_activities = sgqlc.types.Field('UserActivityCreateManyWithoutActivityInput', graphql_name='userActivities')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutCreatedActivitiesInput'), graphql_name='createdBy')
    affected_by = sgqlc.types.Field('UserCreateOneWithoutAffectedActivitiesInput', graphql_name='affectedBy')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')
    question = sgqlc.types.Field('QuestionCreateOneWithoutActivityInput', graphql_name='question')


class ActivityCreateWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'category', 'invitee_email', 'metadata', 'company', 'comment', 'discussion', 'status_update', 'todo', 'todo_list', 'custom_field', 'user_activities', 'created_by', 'affected_by', 'user_access_level', 'question')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    category = sgqlc.types.Field(sgqlc.types.non_null(ActivityCategory), graphql_name='category')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    company = sgqlc.types.Field('CompanyCreateOneWithoutActivitiesInput', graphql_name='company')
    comment = sgqlc.types.Field('CommentCreateOneWithoutActivityInput', graphql_name='comment')
    discussion = sgqlc.types.Field('DiscussionCreateOneWithoutActivityInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateCreateOneWithoutActivityInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoCreateOneWithoutActivityInput', graphql_name='todo')
    todo_list = sgqlc.types.Field('TodoListCreateOneWithoutActivityInput', graphql_name='todoList')
    custom_field = sgqlc.types.Field('CustomFieldCreateOneWithoutActivityInput', graphql_name='customField')
    user_activities = sgqlc.types.Field('UserActivityCreateManyWithoutActivityInput', graphql_name='userActivities')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutCreatedActivitiesInput'), graphql_name='createdBy')
    affected_by = sgqlc.types.Field('UserCreateOneWithoutAffectedActivitiesInput', graphql_name='affectedBy')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')
    question = sgqlc.types.Field('QuestionCreateOneWithoutActivityInput', graphql_name='question')


class ActivityCreateWithoutQuestionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'category', 'invitee_email', 'metadata', 'company', 'project', 'comment', 'discussion', 'status_update', 'todo', 'todo_list', 'custom_field', 'user_activities', 'created_by', 'affected_by', 'user_access_level')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    category = sgqlc.types.Field(sgqlc.types.non_null(ActivityCategory), graphql_name='category')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    company = sgqlc.types.Field('CompanyCreateOneWithoutActivitiesInput', graphql_name='company')
    project = sgqlc.types.Field('ProjectCreateOneWithoutActivitiesInput', graphql_name='project')
    comment = sgqlc.types.Field('CommentCreateOneWithoutActivityInput', graphql_name='comment')
    discussion = sgqlc.types.Field('DiscussionCreateOneWithoutActivityInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateCreateOneWithoutActivityInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoCreateOneWithoutActivityInput', graphql_name='todo')
    todo_list = sgqlc.types.Field('TodoListCreateOneWithoutActivityInput', graphql_name='todoList')
    custom_field = sgqlc.types.Field('CustomFieldCreateOneWithoutActivityInput', graphql_name='customField')
    user_activities = sgqlc.types.Field('UserActivityCreateManyWithoutActivityInput', graphql_name='userActivities')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutCreatedActivitiesInput'), graphql_name='createdBy')
    affected_by = sgqlc.types.Field('UserCreateOneWithoutAffectedActivitiesInput', graphql_name='affectedBy')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')


class ActivityCreateWithoutStatusUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'category', 'invitee_email', 'metadata', 'company', 'project', 'comment', 'discussion', 'todo', 'todo_list', 'custom_field', 'user_activities', 'created_by', 'affected_by', 'user_access_level', 'question')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    category = sgqlc.types.Field(sgqlc.types.non_null(ActivityCategory), graphql_name='category')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    company = sgqlc.types.Field('CompanyCreateOneWithoutActivitiesInput', graphql_name='company')
    project = sgqlc.types.Field('ProjectCreateOneWithoutActivitiesInput', graphql_name='project')
    comment = sgqlc.types.Field('CommentCreateOneWithoutActivityInput', graphql_name='comment')
    discussion = sgqlc.types.Field('DiscussionCreateOneWithoutActivityInput', graphql_name='discussion')
    todo = sgqlc.types.Field('TodoCreateOneWithoutActivityInput', graphql_name='todo')
    todo_list = sgqlc.types.Field('TodoListCreateOneWithoutActivityInput', graphql_name='todoList')
    custom_field = sgqlc.types.Field('CustomFieldCreateOneWithoutActivityInput', graphql_name='customField')
    user_activities = sgqlc.types.Field('UserActivityCreateManyWithoutActivityInput', graphql_name='userActivities')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutCreatedActivitiesInput'), graphql_name='createdBy')
    affected_by = sgqlc.types.Field('UserCreateOneWithoutAffectedActivitiesInput', graphql_name='affectedBy')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')
    question = sgqlc.types.Field('QuestionCreateOneWithoutActivityInput', graphql_name='question')


class ActivityCreateWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'category', 'invitee_email', 'metadata', 'company', 'project', 'comment', 'discussion', 'status_update', 'todo_list', 'custom_field', 'user_activities', 'created_by', 'affected_by', 'user_access_level', 'question')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    category = sgqlc.types.Field(sgqlc.types.non_null(ActivityCategory), graphql_name='category')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    company = sgqlc.types.Field('CompanyCreateOneWithoutActivitiesInput', graphql_name='company')
    project = sgqlc.types.Field('ProjectCreateOneWithoutActivitiesInput', graphql_name='project')
    comment = sgqlc.types.Field('CommentCreateOneWithoutActivityInput', graphql_name='comment')
    discussion = sgqlc.types.Field('DiscussionCreateOneWithoutActivityInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateCreateOneWithoutActivityInput', graphql_name='statusUpdate')
    todo_list = sgqlc.types.Field('TodoListCreateOneWithoutActivityInput', graphql_name='todoList')
    custom_field = sgqlc.types.Field('CustomFieldCreateOneWithoutActivityInput', graphql_name='customField')
    user_activities = sgqlc.types.Field('UserActivityCreateManyWithoutActivityInput', graphql_name='userActivities')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutCreatedActivitiesInput'), graphql_name='createdBy')
    affected_by = sgqlc.types.Field('UserCreateOneWithoutAffectedActivitiesInput', graphql_name='affectedBy')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')
    question = sgqlc.types.Field('QuestionCreateOneWithoutActivityInput', graphql_name='question')


class ActivityCreateWithoutTodoListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'category', 'invitee_email', 'metadata', 'company', 'project', 'comment', 'discussion', 'status_update', 'todo', 'custom_field', 'user_activities', 'created_by', 'affected_by', 'user_access_level', 'question')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    category = sgqlc.types.Field(sgqlc.types.non_null(ActivityCategory), graphql_name='category')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    company = sgqlc.types.Field('CompanyCreateOneWithoutActivitiesInput', graphql_name='company')
    project = sgqlc.types.Field('ProjectCreateOneWithoutActivitiesInput', graphql_name='project')
    comment = sgqlc.types.Field('CommentCreateOneWithoutActivityInput', graphql_name='comment')
    discussion = sgqlc.types.Field('DiscussionCreateOneWithoutActivityInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateCreateOneWithoutActivityInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoCreateOneWithoutActivityInput', graphql_name='todo')
    custom_field = sgqlc.types.Field('CustomFieldCreateOneWithoutActivityInput', graphql_name='customField')
    user_activities = sgqlc.types.Field('UserActivityCreateManyWithoutActivityInput', graphql_name='userActivities')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutCreatedActivitiesInput'), graphql_name='createdBy')
    affected_by = sgqlc.types.Field('UserCreateOneWithoutAffectedActivitiesInput', graphql_name='affectedBy')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')
    question = sgqlc.types.Field('QuestionCreateOneWithoutActivityInput', graphql_name='question')


class ActivityCreateWithoutUserActivitiesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'category', 'invitee_email', 'metadata', 'company', 'project', 'comment', 'discussion', 'status_update', 'todo', 'todo_list', 'custom_field', 'created_by', 'affected_by', 'user_access_level', 'question')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    category = sgqlc.types.Field(sgqlc.types.non_null(ActivityCategory), graphql_name='category')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    company = sgqlc.types.Field('CompanyCreateOneWithoutActivitiesInput', graphql_name='company')
    project = sgqlc.types.Field('ProjectCreateOneWithoutActivitiesInput', graphql_name='project')
    comment = sgqlc.types.Field('CommentCreateOneWithoutActivityInput', graphql_name='comment')
    discussion = sgqlc.types.Field('DiscussionCreateOneWithoutActivityInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateCreateOneWithoutActivityInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoCreateOneWithoutActivityInput', graphql_name='todo')
    todo_list = sgqlc.types.Field('TodoListCreateOneWithoutActivityInput', graphql_name='todoList')
    custom_field = sgqlc.types.Field('CustomFieldCreateOneWithoutActivityInput', graphql_name='customField')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutCreatedActivitiesInput'), graphql_name='createdBy')
    affected_by = sgqlc.types.Field('UserCreateOneWithoutAffectedActivitiesInput', graphql_name='affectedBy')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')
    question = sgqlc.types.Field('QuestionCreateOneWithoutActivityInput', graphql_name='question')


class ActivityScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'category', 'category_not', 'category_in', 'category_not_in', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'invitee_email', 'invitee_email_not', 'invitee_email_in', 'invitee_email_not_in', 'invitee_email_lt', 'invitee_email_lte', 'invitee_email_gt', 'invitee_email_gte', 'invitee_email_contains', 'invitee_email_not_contains', 'invitee_email_starts_with', 'invitee_email_not_starts_with', 'invitee_email_ends_with', 'invitee_email_not_ends_with', 'metadata', 'metadata_not', 'metadata_in', 'metadata_not_in', 'metadata_lt', 'metadata_lte', 'metadata_gt', 'metadata_gte', 'metadata_contains', 'metadata_not_contains', 'metadata_starts_with', 'metadata_not_starts_with', 'metadata_ends_with', 'metadata_not_ends_with', 'user_access_level', 'user_access_level_not', 'user_access_level_in', 'user_access_level_not_in', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    category = sgqlc.types.Field(ActivityCategory, graphql_name='category')
    category_not = sgqlc.types.Field(ActivityCategory, graphql_name='category_not')
    category_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ActivityCategory)), graphql_name='category_in')
    category_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ActivityCategory)), graphql_name='category_not_in')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    invitee_email_not = sgqlc.types.Field(String, graphql_name='inviteeEmail_not')
    invitee_email_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='inviteeEmail_in')
    invitee_email_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='inviteeEmail_not_in')
    invitee_email_lt = sgqlc.types.Field(String, graphql_name='inviteeEmail_lt')
    invitee_email_lte = sgqlc.types.Field(String, graphql_name='inviteeEmail_lte')
    invitee_email_gt = sgqlc.types.Field(String, graphql_name='inviteeEmail_gt')
    invitee_email_gte = sgqlc.types.Field(String, graphql_name='inviteeEmail_gte')
    invitee_email_contains = sgqlc.types.Field(String, graphql_name='inviteeEmail_contains')
    invitee_email_not_contains = sgqlc.types.Field(String, graphql_name='inviteeEmail_not_contains')
    invitee_email_starts_with = sgqlc.types.Field(String, graphql_name='inviteeEmail_starts_with')
    invitee_email_not_starts_with = sgqlc.types.Field(String, graphql_name='inviteeEmail_not_starts_with')
    invitee_email_ends_with = sgqlc.types.Field(String, graphql_name='inviteeEmail_ends_with')
    invitee_email_not_ends_with = sgqlc.types.Field(String, graphql_name='inviteeEmail_not_ends_with')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    metadata_not = sgqlc.types.Field(String, graphql_name='metadata_not')
    metadata_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='metadata_in')
    metadata_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='metadata_not_in')
    metadata_lt = sgqlc.types.Field(String, graphql_name='metadata_lt')
    metadata_lte = sgqlc.types.Field(String, graphql_name='metadata_lte')
    metadata_gt = sgqlc.types.Field(String, graphql_name='metadata_gt')
    metadata_gte = sgqlc.types.Field(String, graphql_name='metadata_gte')
    metadata_contains = sgqlc.types.Field(String, graphql_name='metadata_contains')
    metadata_not_contains = sgqlc.types.Field(String, graphql_name='metadata_not_contains')
    metadata_starts_with = sgqlc.types.Field(String, graphql_name='metadata_starts_with')
    metadata_not_starts_with = sgqlc.types.Field(String, graphql_name='metadata_not_starts_with')
    metadata_ends_with = sgqlc.types.Field(String, graphql_name='metadata_ends_with')
    metadata_not_ends_with = sgqlc.types.Field(String, graphql_name='metadata_not_ends_with')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')
    user_access_level_not = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel_not')
    user_access_level_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(UserAccessLevel)), graphql_name='userAccessLevel_in')
    user_access_level_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(UserAccessLevel)), graphql_name='userAccessLevel_not_in')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityScalarWhereInput')), graphql_name='NOT')


class ActivitySubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('ActivityWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivitySubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivitySubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivitySubscriptionWhereInput')), graphql_name='NOT')


class ActivityUpdateDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'category', 'invitee_email', 'metadata', 'company', 'project', 'comment', 'discussion', 'status_update', 'todo', 'todo_list', 'custom_field', 'user_activities', 'created_by', 'affected_by', 'user_access_level', 'question')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    category = sgqlc.types.Field(ActivityCategory, graphql_name='category')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    company = sgqlc.types.Field('CompanyUpdateOneWithoutActivitiesInput', graphql_name='company')
    project = sgqlc.types.Field('ProjectUpdateOneWithoutActivitiesInput', graphql_name='project')
    comment = sgqlc.types.Field('CommentUpdateOneWithoutActivityInput', graphql_name='comment')
    discussion = sgqlc.types.Field('DiscussionUpdateOneWithoutActivityInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateUpdateOneWithoutActivityInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoUpdateOneWithoutActivityInput', graphql_name='todo')
    todo_list = sgqlc.types.Field('TodoListUpdateOneWithoutActivityInput', graphql_name='todoList')
    custom_field = sgqlc.types.Field('CustomFieldUpdateOneWithoutActivityInput', graphql_name='customField')
    user_activities = sgqlc.types.Field('UserActivityUpdateManyWithoutActivityInput', graphql_name='userActivities')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutCreatedActivitiesInput', graphql_name='createdBy')
    affected_by = sgqlc.types.Field('UserUpdateOneWithoutAffectedActivitiesInput', graphql_name='affectedBy')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')
    question = sgqlc.types.Field('QuestionUpdateOneWithoutActivityInput', graphql_name='question')


class ActivityUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'category', 'invitee_email', 'metadata', 'company', 'project', 'comment', 'discussion', 'status_update', 'todo', 'todo_list', 'custom_field', 'user_activities', 'created_by', 'affected_by', 'user_access_level', 'question')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    category = sgqlc.types.Field(ActivityCategory, graphql_name='category')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    company = sgqlc.types.Field('CompanyUpdateOneWithoutActivitiesInput', graphql_name='company')
    project = sgqlc.types.Field('ProjectUpdateOneWithoutActivitiesInput', graphql_name='project')
    comment = sgqlc.types.Field('CommentUpdateOneWithoutActivityInput', graphql_name='comment')
    discussion = sgqlc.types.Field('DiscussionUpdateOneWithoutActivityInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateUpdateOneWithoutActivityInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoUpdateOneWithoutActivityInput', graphql_name='todo')
    todo_list = sgqlc.types.Field('TodoListUpdateOneWithoutActivityInput', graphql_name='todoList')
    custom_field = sgqlc.types.Field('CustomFieldUpdateOneWithoutActivityInput', graphql_name='customField')
    user_activities = sgqlc.types.Field('UserActivityUpdateManyWithoutActivityInput', graphql_name='userActivities')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutCreatedActivitiesInput', graphql_name='createdBy')
    affected_by = sgqlc.types.Field('UserUpdateOneWithoutAffectedActivitiesInput', graphql_name='affectedBy')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')
    question = sgqlc.types.Field('QuestionUpdateOneWithoutActivityInput', graphql_name='question')


class ActivityUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'category', 'invitee_email', 'metadata', 'user_access_level')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    category = sgqlc.types.Field(ActivityCategory, graphql_name='category')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')


class ActivityUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'category', 'invitee_email', 'metadata', 'user_access_level')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    category = sgqlc.types.Field(ActivityCategory, graphql_name='category')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')


class ActivityUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(ActivityScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(ActivityUpdateManyDataInput), graphql_name='data')


class ActivityUpdateManyWithoutAffectedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ActivityCreateWithoutAffectedByInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityUpdateWithWhereUniqueWithoutAffectedByInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityUpsertWithWhereUniqueWithoutAffectedByInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ActivityScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ActivityUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class ActivityUpdateManyWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ActivityCreateWithoutCompanyInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityUpdateWithWhereUniqueWithoutCompanyInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityUpsertWithWhereUniqueWithoutCompanyInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ActivityScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ActivityUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class ActivityUpdateManyWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ActivityCreateWithoutCreatedByInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityUpdateWithWhereUniqueWithoutCreatedByInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityUpsertWithWhereUniqueWithoutCreatedByInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ActivityScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ActivityUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class ActivityUpdateManyWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ActivityCreateWithoutProjectInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityUpdateWithWhereUniqueWithoutProjectInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityUpsertWithWhereUniqueWithoutProjectInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ActivityScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ActivityUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class ActivityUpdateOneInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(ActivityCreateInput, graphql_name='create')
    update = sgqlc.types.Field(ActivityUpdateDataInput, graphql_name='update')
    upsert = sgqlc.types.Field('ActivityUpsertNestedInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('ActivityWhereUniqueInput', graphql_name='connect')


class ActivityUpdateOneRequiredWithoutUserActivitiesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(ActivityCreateWithoutUserActivitiesInput, graphql_name='create')
    update = sgqlc.types.Field('ActivityUpdateWithoutUserActivitiesDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('ActivityUpsertWithoutUserActivitiesInput', graphql_name='upsert')
    connect = sgqlc.types.Field('ActivityWhereUniqueInput', graphql_name='connect')


class ActivityUpdateOneWithoutCommentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(ActivityCreateWithoutCommentInput, graphql_name='create')
    update = sgqlc.types.Field('ActivityUpdateWithoutCommentDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('ActivityUpsertWithoutCommentInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('ActivityWhereUniqueInput', graphql_name='connect')


class ActivityUpdateOneWithoutCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(ActivityCreateWithoutCustomFieldInput, graphql_name='create')
    update = sgqlc.types.Field('ActivityUpdateWithoutCustomFieldDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('ActivityUpsertWithoutCustomFieldInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('ActivityWhereUniqueInput', graphql_name='connect')


class ActivityUpdateOneWithoutDiscussionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(ActivityCreateWithoutDiscussionInput, graphql_name='create')
    update = sgqlc.types.Field('ActivityUpdateWithoutDiscussionDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('ActivityUpsertWithoutDiscussionInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('ActivityWhereUniqueInput', graphql_name='connect')


class ActivityUpdateOneWithoutQuestionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(ActivityCreateWithoutQuestionInput, graphql_name='create')
    update = sgqlc.types.Field('ActivityUpdateWithoutQuestionDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('ActivityUpsertWithoutQuestionInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('ActivityWhereUniqueInput', graphql_name='connect')


class ActivityUpdateOneWithoutStatusUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(ActivityCreateWithoutStatusUpdateInput, graphql_name='create')
    update = sgqlc.types.Field('ActivityUpdateWithoutStatusUpdateDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('ActivityUpsertWithoutStatusUpdateInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('ActivityWhereUniqueInput', graphql_name='connect')


class ActivityUpdateOneWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(ActivityCreateWithoutTodoInput, graphql_name='create')
    update = sgqlc.types.Field('ActivityUpdateWithoutTodoDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('ActivityUpsertWithoutTodoInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('ActivityWhereUniqueInput', graphql_name='connect')


class ActivityUpdateOneWithoutTodoListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(ActivityCreateWithoutTodoListInput, graphql_name='create')
    update = sgqlc.types.Field('ActivityUpdateWithoutTodoListDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('ActivityUpsertWithoutTodoListInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('ActivityWhereUniqueInput', graphql_name='connect')


class ActivityUpdateWithWhereUniqueWithoutAffectedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('ActivityWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('ActivityUpdateWithoutAffectedByDataInput'), graphql_name='data')


class ActivityUpdateWithWhereUniqueWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('ActivityWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('ActivityUpdateWithoutCompanyDataInput'), graphql_name='data')


class ActivityUpdateWithWhereUniqueWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('ActivityWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('ActivityUpdateWithoutCreatedByDataInput'), graphql_name='data')


class ActivityUpdateWithWhereUniqueWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('ActivityWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('ActivityUpdateWithoutProjectDataInput'), graphql_name='data')


class ActivityUpdateWithoutAffectedByDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'category', 'invitee_email', 'metadata', 'company', 'project', 'comment', 'discussion', 'status_update', 'todo', 'todo_list', 'custom_field', 'user_activities', 'created_by', 'user_access_level', 'question')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    category = sgqlc.types.Field(ActivityCategory, graphql_name='category')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    company = sgqlc.types.Field('CompanyUpdateOneWithoutActivitiesInput', graphql_name='company')
    project = sgqlc.types.Field('ProjectUpdateOneWithoutActivitiesInput', graphql_name='project')
    comment = sgqlc.types.Field('CommentUpdateOneWithoutActivityInput', graphql_name='comment')
    discussion = sgqlc.types.Field('DiscussionUpdateOneWithoutActivityInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateUpdateOneWithoutActivityInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoUpdateOneWithoutActivityInput', graphql_name='todo')
    todo_list = sgqlc.types.Field('TodoListUpdateOneWithoutActivityInput', graphql_name='todoList')
    custom_field = sgqlc.types.Field('CustomFieldUpdateOneWithoutActivityInput', graphql_name='customField')
    user_activities = sgqlc.types.Field('UserActivityUpdateManyWithoutActivityInput', graphql_name='userActivities')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutCreatedActivitiesInput', graphql_name='createdBy')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')
    question = sgqlc.types.Field('QuestionUpdateOneWithoutActivityInput', graphql_name='question')


class ActivityUpdateWithoutCommentDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'category', 'invitee_email', 'metadata', 'company', 'project', 'discussion', 'status_update', 'todo', 'todo_list', 'custom_field', 'user_activities', 'created_by', 'affected_by', 'user_access_level', 'question')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    category = sgqlc.types.Field(ActivityCategory, graphql_name='category')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    company = sgqlc.types.Field('CompanyUpdateOneWithoutActivitiesInput', graphql_name='company')
    project = sgqlc.types.Field('ProjectUpdateOneWithoutActivitiesInput', graphql_name='project')
    discussion = sgqlc.types.Field('DiscussionUpdateOneWithoutActivityInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateUpdateOneWithoutActivityInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoUpdateOneWithoutActivityInput', graphql_name='todo')
    todo_list = sgqlc.types.Field('TodoListUpdateOneWithoutActivityInput', graphql_name='todoList')
    custom_field = sgqlc.types.Field('CustomFieldUpdateOneWithoutActivityInput', graphql_name='customField')
    user_activities = sgqlc.types.Field('UserActivityUpdateManyWithoutActivityInput', graphql_name='userActivities')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutCreatedActivitiesInput', graphql_name='createdBy')
    affected_by = sgqlc.types.Field('UserUpdateOneWithoutAffectedActivitiesInput', graphql_name='affectedBy')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')
    question = sgqlc.types.Field('QuestionUpdateOneWithoutActivityInput', graphql_name='question')


class ActivityUpdateWithoutCompanyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'category', 'invitee_email', 'metadata', 'project', 'comment', 'discussion', 'status_update', 'todo', 'todo_list', 'custom_field', 'user_activities', 'created_by', 'affected_by', 'user_access_level', 'question')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    category = sgqlc.types.Field(ActivityCategory, graphql_name='category')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    project = sgqlc.types.Field('ProjectUpdateOneWithoutActivitiesInput', graphql_name='project')
    comment = sgqlc.types.Field('CommentUpdateOneWithoutActivityInput', graphql_name='comment')
    discussion = sgqlc.types.Field('DiscussionUpdateOneWithoutActivityInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateUpdateOneWithoutActivityInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoUpdateOneWithoutActivityInput', graphql_name='todo')
    todo_list = sgqlc.types.Field('TodoListUpdateOneWithoutActivityInput', graphql_name='todoList')
    custom_field = sgqlc.types.Field('CustomFieldUpdateOneWithoutActivityInput', graphql_name='customField')
    user_activities = sgqlc.types.Field('UserActivityUpdateManyWithoutActivityInput', graphql_name='userActivities')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutCreatedActivitiesInput', graphql_name='createdBy')
    affected_by = sgqlc.types.Field('UserUpdateOneWithoutAffectedActivitiesInput', graphql_name='affectedBy')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')
    question = sgqlc.types.Field('QuestionUpdateOneWithoutActivityInput', graphql_name='question')


class ActivityUpdateWithoutCreatedByDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'category', 'invitee_email', 'metadata', 'company', 'project', 'comment', 'discussion', 'status_update', 'todo', 'todo_list', 'custom_field', 'user_activities', 'affected_by', 'user_access_level', 'question')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    category = sgqlc.types.Field(ActivityCategory, graphql_name='category')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    company = sgqlc.types.Field('CompanyUpdateOneWithoutActivitiesInput', graphql_name='company')
    project = sgqlc.types.Field('ProjectUpdateOneWithoutActivitiesInput', graphql_name='project')
    comment = sgqlc.types.Field('CommentUpdateOneWithoutActivityInput', graphql_name='comment')
    discussion = sgqlc.types.Field('DiscussionUpdateOneWithoutActivityInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateUpdateOneWithoutActivityInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoUpdateOneWithoutActivityInput', graphql_name='todo')
    todo_list = sgqlc.types.Field('TodoListUpdateOneWithoutActivityInput', graphql_name='todoList')
    custom_field = sgqlc.types.Field('CustomFieldUpdateOneWithoutActivityInput', graphql_name='customField')
    user_activities = sgqlc.types.Field('UserActivityUpdateManyWithoutActivityInput', graphql_name='userActivities')
    affected_by = sgqlc.types.Field('UserUpdateOneWithoutAffectedActivitiesInput', graphql_name='affectedBy')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')
    question = sgqlc.types.Field('QuestionUpdateOneWithoutActivityInput', graphql_name='question')


class ActivityUpdateWithoutCustomFieldDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'category', 'invitee_email', 'metadata', 'company', 'project', 'comment', 'discussion', 'status_update', 'todo', 'todo_list', 'user_activities', 'created_by', 'affected_by', 'user_access_level', 'question')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    category = sgqlc.types.Field(ActivityCategory, graphql_name='category')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    company = sgqlc.types.Field('CompanyUpdateOneWithoutActivitiesInput', graphql_name='company')
    project = sgqlc.types.Field('ProjectUpdateOneWithoutActivitiesInput', graphql_name='project')
    comment = sgqlc.types.Field('CommentUpdateOneWithoutActivityInput', graphql_name='comment')
    discussion = sgqlc.types.Field('DiscussionUpdateOneWithoutActivityInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateUpdateOneWithoutActivityInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoUpdateOneWithoutActivityInput', graphql_name='todo')
    todo_list = sgqlc.types.Field('TodoListUpdateOneWithoutActivityInput', graphql_name='todoList')
    user_activities = sgqlc.types.Field('UserActivityUpdateManyWithoutActivityInput', graphql_name='userActivities')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutCreatedActivitiesInput', graphql_name='createdBy')
    affected_by = sgqlc.types.Field('UserUpdateOneWithoutAffectedActivitiesInput', graphql_name='affectedBy')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')
    question = sgqlc.types.Field('QuestionUpdateOneWithoutActivityInput', graphql_name='question')


class ActivityUpdateWithoutDiscussionDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'category', 'invitee_email', 'metadata', 'company', 'project', 'comment', 'status_update', 'todo', 'todo_list', 'custom_field', 'user_activities', 'created_by', 'affected_by', 'user_access_level', 'question')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    category = sgqlc.types.Field(ActivityCategory, graphql_name='category')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    company = sgqlc.types.Field('CompanyUpdateOneWithoutActivitiesInput', graphql_name='company')
    project = sgqlc.types.Field('ProjectUpdateOneWithoutActivitiesInput', graphql_name='project')
    comment = sgqlc.types.Field('CommentUpdateOneWithoutActivityInput', graphql_name='comment')
    status_update = sgqlc.types.Field('StatusUpdateUpdateOneWithoutActivityInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoUpdateOneWithoutActivityInput', graphql_name='todo')
    todo_list = sgqlc.types.Field('TodoListUpdateOneWithoutActivityInput', graphql_name='todoList')
    custom_field = sgqlc.types.Field('CustomFieldUpdateOneWithoutActivityInput', graphql_name='customField')
    user_activities = sgqlc.types.Field('UserActivityUpdateManyWithoutActivityInput', graphql_name='userActivities')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutCreatedActivitiesInput', graphql_name='createdBy')
    affected_by = sgqlc.types.Field('UserUpdateOneWithoutAffectedActivitiesInput', graphql_name='affectedBy')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')
    question = sgqlc.types.Field('QuestionUpdateOneWithoutActivityInput', graphql_name='question')


class ActivityUpdateWithoutProjectDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'category', 'invitee_email', 'metadata', 'company', 'comment', 'discussion', 'status_update', 'todo', 'todo_list', 'custom_field', 'user_activities', 'created_by', 'affected_by', 'user_access_level', 'question')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    category = sgqlc.types.Field(ActivityCategory, graphql_name='category')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    company = sgqlc.types.Field('CompanyUpdateOneWithoutActivitiesInput', graphql_name='company')
    comment = sgqlc.types.Field('CommentUpdateOneWithoutActivityInput', graphql_name='comment')
    discussion = sgqlc.types.Field('DiscussionUpdateOneWithoutActivityInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateUpdateOneWithoutActivityInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoUpdateOneWithoutActivityInput', graphql_name='todo')
    todo_list = sgqlc.types.Field('TodoListUpdateOneWithoutActivityInput', graphql_name='todoList')
    custom_field = sgqlc.types.Field('CustomFieldUpdateOneWithoutActivityInput', graphql_name='customField')
    user_activities = sgqlc.types.Field('UserActivityUpdateManyWithoutActivityInput', graphql_name='userActivities')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutCreatedActivitiesInput', graphql_name='createdBy')
    affected_by = sgqlc.types.Field('UserUpdateOneWithoutAffectedActivitiesInput', graphql_name='affectedBy')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')
    question = sgqlc.types.Field('QuestionUpdateOneWithoutActivityInput', graphql_name='question')


class ActivityUpdateWithoutQuestionDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'category', 'invitee_email', 'metadata', 'company', 'project', 'comment', 'discussion', 'status_update', 'todo', 'todo_list', 'custom_field', 'user_activities', 'created_by', 'affected_by', 'user_access_level')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    category = sgqlc.types.Field(ActivityCategory, graphql_name='category')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    company = sgqlc.types.Field('CompanyUpdateOneWithoutActivitiesInput', graphql_name='company')
    project = sgqlc.types.Field('ProjectUpdateOneWithoutActivitiesInput', graphql_name='project')
    comment = sgqlc.types.Field('CommentUpdateOneWithoutActivityInput', graphql_name='comment')
    discussion = sgqlc.types.Field('DiscussionUpdateOneWithoutActivityInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateUpdateOneWithoutActivityInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoUpdateOneWithoutActivityInput', graphql_name='todo')
    todo_list = sgqlc.types.Field('TodoListUpdateOneWithoutActivityInput', graphql_name='todoList')
    custom_field = sgqlc.types.Field('CustomFieldUpdateOneWithoutActivityInput', graphql_name='customField')
    user_activities = sgqlc.types.Field('UserActivityUpdateManyWithoutActivityInput', graphql_name='userActivities')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutCreatedActivitiesInput', graphql_name='createdBy')
    affected_by = sgqlc.types.Field('UserUpdateOneWithoutAffectedActivitiesInput', graphql_name='affectedBy')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')


class ActivityUpdateWithoutStatusUpdateDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'category', 'invitee_email', 'metadata', 'company', 'project', 'comment', 'discussion', 'todo', 'todo_list', 'custom_field', 'user_activities', 'created_by', 'affected_by', 'user_access_level', 'question')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    category = sgqlc.types.Field(ActivityCategory, graphql_name='category')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    company = sgqlc.types.Field('CompanyUpdateOneWithoutActivitiesInput', graphql_name='company')
    project = sgqlc.types.Field('ProjectUpdateOneWithoutActivitiesInput', graphql_name='project')
    comment = sgqlc.types.Field('CommentUpdateOneWithoutActivityInput', graphql_name='comment')
    discussion = sgqlc.types.Field('DiscussionUpdateOneWithoutActivityInput', graphql_name='discussion')
    todo = sgqlc.types.Field('TodoUpdateOneWithoutActivityInput', graphql_name='todo')
    todo_list = sgqlc.types.Field('TodoListUpdateOneWithoutActivityInput', graphql_name='todoList')
    custom_field = sgqlc.types.Field('CustomFieldUpdateOneWithoutActivityInput', graphql_name='customField')
    user_activities = sgqlc.types.Field('UserActivityUpdateManyWithoutActivityInput', graphql_name='userActivities')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutCreatedActivitiesInput', graphql_name='createdBy')
    affected_by = sgqlc.types.Field('UserUpdateOneWithoutAffectedActivitiesInput', graphql_name='affectedBy')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')
    question = sgqlc.types.Field('QuestionUpdateOneWithoutActivityInput', graphql_name='question')


class ActivityUpdateWithoutTodoDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'category', 'invitee_email', 'metadata', 'company', 'project', 'comment', 'discussion', 'status_update', 'todo_list', 'custom_field', 'user_activities', 'created_by', 'affected_by', 'user_access_level', 'question')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    category = sgqlc.types.Field(ActivityCategory, graphql_name='category')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    company = sgqlc.types.Field('CompanyUpdateOneWithoutActivitiesInput', graphql_name='company')
    project = sgqlc.types.Field('ProjectUpdateOneWithoutActivitiesInput', graphql_name='project')
    comment = sgqlc.types.Field('CommentUpdateOneWithoutActivityInput', graphql_name='comment')
    discussion = sgqlc.types.Field('DiscussionUpdateOneWithoutActivityInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateUpdateOneWithoutActivityInput', graphql_name='statusUpdate')
    todo_list = sgqlc.types.Field('TodoListUpdateOneWithoutActivityInput', graphql_name='todoList')
    custom_field = sgqlc.types.Field('CustomFieldUpdateOneWithoutActivityInput', graphql_name='customField')
    user_activities = sgqlc.types.Field('UserActivityUpdateManyWithoutActivityInput', graphql_name='userActivities')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutCreatedActivitiesInput', graphql_name='createdBy')
    affected_by = sgqlc.types.Field('UserUpdateOneWithoutAffectedActivitiesInput', graphql_name='affectedBy')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')
    question = sgqlc.types.Field('QuestionUpdateOneWithoutActivityInput', graphql_name='question')


class ActivityUpdateWithoutTodoListDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'category', 'invitee_email', 'metadata', 'company', 'project', 'comment', 'discussion', 'status_update', 'todo', 'custom_field', 'user_activities', 'created_by', 'affected_by', 'user_access_level', 'question')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    category = sgqlc.types.Field(ActivityCategory, graphql_name='category')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    company = sgqlc.types.Field('CompanyUpdateOneWithoutActivitiesInput', graphql_name='company')
    project = sgqlc.types.Field('ProjectUpdateOneWithoutActivitiesInput', graphql_name='project')
    comment = sgqlc.types.Field('CommentUpdateOneWithoutActivityInput', graphql_name='comment')
    discussion = sgqlc.types.Field('DiscussionUpdateOneWithoutActivityInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateUpdateOneWithoutActivityInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoUpdateOneWithoutActivityInput', graphql_name='todo')
    custom_field = sgqlc.types.Field('CustomFieldUpdateOneWithoutActivityInput', graphql_name='customField')
    user_activities = sgqlc.types.Field('UserActivityUpdateManyWithoutActivityInput', graphql_name='userActivities')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutCreatedActivitiesInput', graphql_name='createdBy')
    affected_by = sgqlc.types.Field('UserUpdateOneWithoutAffectedActivitiesInput', graphql_name='affectedBy')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')
    question = sgqlc.types.Field('QuestionUpdateOneWithoutActivityInput', graphql_name='question')


class ActivityUpdateWithoutUserActivitiesDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'category', 'invitee_email', 'metadata', 'company', 'project', 'comment', 'discussion', 'status_update', 'todo', 'todo_list', 'custom_field', 'created_by', 'affected_by', 'user_access_level', 'question')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    category = sgqlc.types.Field(ActivityCategory, graphql_name='category')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    company = sgqlc.types.Field('CompanyUpdateOneWithoutActivitiesInput', graphql_name='company')
    project = sgqlc.types.Field('ProjectUpdateOneWithoutActivitiesInput', graphql_name='project')
    comment = sgqlc.types.Field('CommentUpdateOneWithoutActivityInput', graphql_name='comment')
    discussion = sgqlc.types.Field('DiscussionUpdateOneWithoutActivityInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateUpdateOneWithoutActivityInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoUpdateOneWithoutActivityInput', graphql_name='todo')
    todo_list = sgqlc.types.Field('TodoListUpdateOneWithoutActivityInput', graphql_name='todoList')
    custom_field = sgqlc.types.Field('CustomFieldUpdateOneWithoutActivityInput', graphql_name='customField')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutCreatedActivitiesInput', graphql_name='createdBy')
    affected_by = sgqlc.types.Field('UserUpdateOneWithoutAffectedActivitiesInput', graphql_name='affectedBy')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')
    question = sgqlc.types.Field('QuestionUpdateOneWithoutActivityInput', graphql_name='question')


class ActivityUpsertNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(ActivityUpdateDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ActivityCreateInput), graphql_name='create')


class ActivityUpsertWithWhereUniqueWithoutAffectedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('ActivityWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(ActivityUpdateWithoutAffectedByDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ActivityCreateWithoutAffectedByInput), graphql_name='create')


class ActivityUpsertWithWhereUniqueWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('ActivityWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(ActivityUpdateWithoutCompanyDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ActivityCreateWithoutCompanyInput), graphql_name='create')


class ActivityUpsertWithWhereUniqueWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('ActivityWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(ActivityUpdateWithoutCreatedByDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ActivityCreateWithoutCreatedByInput), graphql_name='create')


class ActivityUpsertWithWhereUniqueWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('ActivityWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(ActivityUpdateWithoutProjectDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ActivityCreateWithoutProjectInput), graphql_name='create')


class ActivityUpsertWithoutCommentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(ActivityUpdateWithoutCommentDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ActivityCreateWithoutCommentInput), graphql_name='create')


class ActivityUpsertWithoutCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(ActivityUpdateWithoutCustomFieldDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ActivityCreateWithoutCustomFieldInput), graphql_name='create')


class ActivityUpsertWithoutDiscussionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(ActivityUpdateWithoutDiscussionDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ActivityCreateWithoutDiscussionInput), graphql_name='create')


class ActivityUpsertWithoutQuestionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(ActivityUpdateWithoutQuestionDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ActivityCreateWithoutQuestionInput), graphql_name='create')


class ActivityUpsertWithoutStatusUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(ActivityUpdateWithoutStatusUpdateDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ActivityCreateWithoutStatusUpdateInput), graphql_name='create')


class ActivityUpsertWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(ActivityUpdateWithoutTodoDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ActivityCreateWithoutTodoInput), graphql_name='create')


class ActivityUpsertWithoutTodoListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(ActivityUpdateWithoutTodoListDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ActivityCreateWithoutTodoListInput), graphql_name='create')


class ActivityUpsertWithoutUserActivitiesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(ActivityUpdateWithoutUserActivitiesDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ActivityCreateWithoutUserActivitiesInput), graphql_name='create')


class ActivityWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'category', 'category_not', 'category_in', 'category_not_in', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'invitee_email', 'invitee_email_not', 'invitee_email_in', 'invitee_email_not_in', 'invitee_email_lt', 'invitee_email_lte', 'invitee_email_gt', 'invitee_email_gte', 'invitee_email_contains', 'invitee_email_not_contains', 'invitee_email_starts_with', 'invitee_email_not_starts_with', 'invitee_email_ends_with', 'invitee_email_not_ends_with', 'metadata', 'metadata_not', 'metadata_in', 'metadata_not_in', 'metadata_lt', 'metadata_lte', 'metadata_gt', 'metadata_gte', 'metadata_contains', 'metadata_not_contains', 'metadata_starts_with', 'metadata_not_starts_with', 'metadata_ends_with', 'metadata_not_ends_with', 'company', 'project', 'comment', 'discussion', 'status_update', 'todo', 'todo_list', 'custom_field', 'user_activities_every', 'user_activities_some', 'user_activities_none', 'created_by', 'affected_by', 'user_access_level', 'user_access_level_not', 'user_access_level_in', 'user_access_level_not_in', 'question', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    category = sgqlc.types.Field(ActivityCategory, graphql_name='category')
    category_not = sgqlc.types.Field(ActivityCategory, graphql_name='category_not')
    category_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ActivityCategory)), graphql_name='category_in')
    category_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ActivityCategory)), graphql_name='category_not_in')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    invitee_email_not = sgqlc.types.Field(String, graphql_name='inviteeEmail_not')
    invitee_email_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='inviteeEmail_in')
    invitee_email_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='inviteeEmail_not_in')
    invitee_email_lt = sgqlc.types.Field(String, graphql_name='inviteeEmail_lt')
    invitee_email_lte = sgqlc.types.Field(String, graphql_name='inviteeEmail_lte')
    invitee_email_gt = sgqlc.types.Field(String, graphql_name='inviteeEmail_gt')
    invitee_email_gte = sgqlc.types.Field(String, graphql_name='inviteeEmail_gte')
    invitee_email_contains = sgqlc.types.Field(String, graphql_name='inviteeEmail_contains')
    invitee_email_not_contains = sgqlc.types.Field(String, graphql_name='inviteeEmail_not_contains')
    invitee_email_starts_with = sgqlc.types.Field(String, graphql_name='inviteeEmail_starts_with')
    invitee_email_not_starts_with = sgqlc.types.Field(String, graphql_name='inviteeEmail_not_starts_with')
    invitee_email_ends_with = sgqlc.types.Field(String, graphql_name='inviteeEmail_ends_with')
    invitee_email_not_ends_with = sgqlc.types.Field(String, graphql_name='inviteeEmail_not_ends_with')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    metadata_not = sgqlc.types.Field(String, graphql_name='metadata_not')
    metadata_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='metadata_in')
    metadata_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='metadata_not_in')
    metadata_lt = sgqlc.types.Field(String, graphql_name='metadata_lt')
    metadata_lte = sgqlc.types.Field(String, graphql_name='metadata_lte')
    metadata_gt = sgqlc.types.Field(String, graphql_name='metadata_gt')
    metadata_gte = sgqlc.types.Field(String, graphql_name='metadata_gte')
    metadata_contains = sgqlc.types.Field(String, graphql_name='metadata_contains')
    metadata_not_contains = sgqlc.types.Field(String, graphql_name='metadata_not_contains')
    metadata_starts_with = sgqlc.types.Field(String, graphql_name='metadata_starts_with')
    metadata_not_starts_with = sgqlc.types.Field(String, graphql_name='metadata_not_starts_with')
    metadata_ends_with = sgqlc.types.Field(String, graphql_name='metadata_ends_with')
    metadata_not_ends_with = sgqlc.types.Field(String, graphql_name='metadata_not_ends_with')
    company = sgqlc.types.Field('CompanyWhereInput', graphql_name='company')
    project = sgqlc.types.Field('ProjectWhereInput', graphql_name='project')
    comment = sgqlc.types.Field('CommentWhereInput', graphql_name='comment')
    discussion = sgqlc.types.Field('DiscussionWhereInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateWhereInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoWhereInput', graphql_name='todo')
    todo_list = sgqlc.types.Field('TodoListWhereInput', graphql_name='todoList')
    custom_field = sgqlc.types.Field('CustomFieldWhereInput', graphql_name='customField')
    user_activities_every = sgqlc.types.Field('UserActivityWhereInput', graphql_name='userActivities_every')
    user_activities_some = sgqlc.types.Field('UserActivityWhereInput', graphql_name='userActivities_some')
    user_activities_none = sgqlc.types.Field('UserActivityWhereInput', graphql_name='userActivities_none')
    created_by = sgqlc.types.Field('UserWhereInput', graphql_name='createdBy')
    affected_by = sgqlc.types.Field('UserWhereInput', graphql_name='affectedBy')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')
    user_access_level_not = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel_not')
    user_access_level_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(UserAccessLevel)), graphql_name='userAccessLevel_in')
    user_access_level_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(UserAccessLevel)), graphql_name='userAccessLevel_not_in')
    question = sgqlc.types.Field('QuestionWhereInput', graphql_name='question')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ActivityWhereInput')), graphql_name='NOT')


class ActivityWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class AddTodoAssigneesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('todo_id', 'assignee_ids')
    todo_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoId')
    assignee_ids = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='assigneeIds')


class ApplyCompanyLicenseInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id',)
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')


class AssigneesFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id', 'search')
    project_id = sgqlc.types.Field(String, graphql_name='projectId')
    search = sgqlc.types.Field(String, graphql_name='search')


class AutomationActionAssigneeCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'automation_action', 'assignee')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    automation_action = sgqlc.types.Field(sgqlc.types.non_null('AutomationActionCreateOneWithoutAutomationActionAssigneesInput'), graphql_name='automationAction')
    assignee = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutAutomationActionAssigneesInput'), graphql_name='assignee')


class AutomationActionAssigneeCreateManyWithoutAssigneeInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionAssigneeCreateWithoutAssigneeInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionAssigneeWhereUniqueInput')), graphql_name='connect')


class AutomationActionAssigneeCreateManyWithoutAutomationActionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionAssigneeCreateWithoutAutomationActionInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionAssigneeWhereUniqueInput')), graphql_name='connect')


class AutomationActionAssigneeCreateWithoutAssigneeInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'automation_action')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    automation_action = sgqlc.types.Field(sgqlc.types.non_null('AutomationActionCreateOneWithoutAutomationActionAssigneesInput'), graphql_name='automationAction')


class AutomationActionAssigneeCreateWithoutAutomationActionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'assignee')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    assignee = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutAutomationActionAssigneesInput'), graphql_name='assignee')


class AutomationActionAssigneeScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionAssigneeScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionAssigneeScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionAssigneeScalarWhereInput')), graphql_name='NOT')


class AutomationActionAssigneeSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('AutomationActionAssigneeWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionAssigneeSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionAssigneeSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionAssigneeSubscriptionWhereInput')), graphql_name='NOT')


class AutomationActionAssigneeUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'automation_action', 'assignee')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    automation_action = sgqlc.types.Field('AutomationActionUpdateOneRequiredWithoutAutomationActionAssigneesInput', graphql_name='automationAction')
    assignee = sgqlc.types.Field('UserUpdateOneRequiredWithoutAutomationActionAssigneesInput', graphql_name='assignee')


class AutomationActionAssigneeUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid',)
    uid = sgqlc.types.Field(String, graphql_name='uid')


class AutomationActionAssigneeUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid',)
    uid = sgqlc.types.Field(String, graphql_name='uid')


class AutomationActionAssigneeUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionAssigneeScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionAssigneeUpdateManyDataInput), graphql_name='data')


class AutomationActionAssigneeUpdateManyWithoutAssigneeInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationActionAssigneeCreateWithoutAssigneeInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionAssigneeWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionAssigneeWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionAssigneeWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionAssigneeWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionAssigneeUpdateWithWhereUniqueWithoutAssigneeInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionAssigneeUpsertWithWhereUniqueWithoutAssigneeInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationActionAssigneeScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationActionAssigneeUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class AutomationActionAssigneeUpdateManyWithoutAutomationActionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationActionAssigneeCreateWithoutAutomationActionInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionAssigneeWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionAssigneeWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionAssigneeWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionAssigneeWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionAssigneeUpdateWithWhereUniqueWithoutAutomationActionInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionAssigneeUpsertWithWhereUniqueWithoutAutomationActionInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationActionAssigneeScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationActionAssigneeUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class AutomationActionAssigneeUpdateWithWhereUniqueWithoutAssigneeInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('AutomationActionAssigneeWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('AutomationActionAssigneeUpdateWithoutAssigneeDataInput'), graphql_name='data')


class AutomationActionAssigneeUpdateWithWhereUniqueWithoutAutomationActionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('AutomationActionAssigneeWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('AutomationActionAssigneeUpdateWithoutAutomationActionDataInput'), graphql_name='data')


class AutomationActionAssigneeUpdateWithoutAssigneeDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'automation_action')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    automation_action = sgqlc.types.Field('AutomationActionUpdateOneRequiredWithoutAutomationActionAssigneesInput', graphql_name='automationAction')


class AutomationActionAssigneeUpdateWithoutAutomationActionDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'assignee')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    assignee = sgqlc.types.Field('UserUpdateOneRequiredWithoutAutomationActionAssigneesInput', graphql_name='assignee')


class AutomationActionAssigneeUpsertWithWhereUniqueWithoutAssigneeInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('AutomationActionAssigneeWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionAssigneeUpdateWithoutAssigneeDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionAssigneeCreateWithoutAssigneeInput), graphql_name='create')


class AutomationActionAssigneeUpsertWithWhereUniqueWithoutAutomationActionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('AutomationActionAssigneeWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionAssigneeUpdateWithoutAutomationActionDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionAssigneeCreateWithoutAutomationActionInput), graphql_name='create')


class AutomationActionAssigneeWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'automation_action', 'assignee', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    automation_action = sgqlc.types.Field('AutomationActionWhereInput', graphql_name='automationAction')
    assignee = sgqlc.types.Field('UserWhereInput', graphql_name='assignee')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionAssigneeWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionAssigneeWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionAssigneeWhereInput')), graphql_name='NOT')


class AutomationActionAssigneeWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class AutomationActionCreateChecklistInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('title', 'position', 'checklist_items')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    checklist_items = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionCreateChecklistItemInput')), graphql_name='checklistItems')


class AutomationActionCreateChecklistItemInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('title', 'position', 'assignee_ids', 'dued_in')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    assignee_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='assigneeIds')
    dued_in = sgqlc.types.Field(Int, graphql_name='duedIn')


class AutomationActionCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'type', 'dued_in', 'todo_list', 'automation_action_tags', 'automation_action_assignees', 'automation', 'metadata')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    type = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionType), graphql_name='type')
    dued_in = sgqlc.types.Field(Int, graphql_name='duedIn')
    todo_list = sgqlc.types.Field('TodoListCreateOneWithoutAutomationActionsInput', graphql_name='todoList')
    automation_action_tags = sgqlc.types.Field('AutomationActionTagCreateManyWithoutAutomationActionInput', graphql_name='automationActionTags')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeCreateManyWithoutAutomationActionInput, graphql_name='automationActionAssignees')
    automation = sgqlc.types.Field(sgqlc.types.non_null('AutomationCreateOneWithoutActionsInput'), graphql_name='automation')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class AutomationActionCreateManyWithoutAutomationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionCreateWithoutAutomationInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionWhereUniqueInput')), graphql_name='connect')


class AutomationActionCreateManyWithoutTodoListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionCreateWithoutTodoListInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionWhereUniqueInput')), graphql_name='connect')


class AutomationActionCreateOneWithoutAutomationActionAssigneesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('AutomationActionCreateWithoutAutomationActionAssigneesInput', graphql_name='create')
    connect = sgqlc.types.Field('AutomationActionWhereUniqueInput', graphql_name='connect')


class AutomationActionCreateOneWithoutAutomationActionTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('AutomationActionCreateWithoutAutomationActionTagsInput', graphql_name='create')
    connect = sgqlc.types.Field('AutomationActionWhereUniqueInput', graphql_name='connect')


class AutomationActionCreateWithoutAutomationActionAssigneesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'type', 'dued_in', 'todo_list', 'automation_action_tags', 'automation', 'metadata')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    type = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionType), graphql_name='type')
    dued_in = sgqlc.types.Field(Int, graphql_name='duedIn')
    todo_list = sgqlc.types.Field('TodoListCreateOneWithoutAutomationActionsInput', graphql_name='todoList')
    automation_action_tags = sgqlc.types.Field('AutomationActionTagCreateManyWithoutAutomationActionInput', graphql_name='automationActionTags')
    automation = sgqlc.types.Field(sgqlc.types.non_null('AutomationCreateOneWithoutActionsInput'), graphql_name='automation')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class AutomationActionCreateWithoutAutomationActionTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'type', 'dued_in', 'todo_list', 'automation_action_assignees', 'automation', 'metadata')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    type = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionType), graphql_name='type')
    dued_in = sgqlc.types.Field(Int, graphql_name='duedIn')
    todo_list = sgqlc.types.Field('TodoListCreateOneWithoutAutomationActionsInput', graphql_name='todoList')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeCreateManyWithoutAutomationActionInput, graphql_name='automationActionAssignees')
    automation = sgqlc.types.Field(sgqlc.types.non_null('AutomationCreateOneWithoutActionsInput'), graphql_name='automation')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class AutomationActionCreateWithoutAutomationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'type', 'dued_in', 'todo_list', 'automation_action_tags', 'automation_action_assignees', 'metadata')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    type = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionType), graphql_name='type')
    dued_in = sgqlc.types.Field(Int, graphql_name='duedIn')
    todo_list = sgqlc.types.Field('TodoListCreateOneWithoutAutomationActionsInput', graphql_name='todoList')
    automation_action_tags = sgqlc.types.Field('AutomationActionTagCreateManyWithoutAutomationActionInput', graphql_name='automationActionTags')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeCreateManyWithoutAutomationActionInput, graphql_name='automationActionAssignees')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class AutomationActionCreateWithoutTodoListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'type', 'dued_in', 'automation_action_tags', 'automation_action_assignees', 'automation', 'metadata')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    type = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionType), graphql_name='type')
    dued_in = sgqlc.types.Field(Int, graphql_name='duedIn')
    automation_action_tags = sgqlc.types.Field('AutomationActionTagCreateManyWithoutAutomationActionInput', graphql_name='automationActionTags')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeCreateManyWithoutAutomationActionInput, graphql_name='automationActionAssignees')
    automation = sgqlc.types.Field(sgqlc.types.non_null('AutomationCreateOneWithoutActionsInput'), graphql_name='automation')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class AutomationActionHttpOptionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('url', 'method', 'headers', 'parameters', 'content_type', 'body', 'authorization_type', 'authorization_basic_auth', 'authorization_bearer_token', 'authorization_api_key', 'oauth_connection_id')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')
    method = sgqlc.types.Field(sgqlc.types.non_null(HttpMethod), graphql_name='method')
    headers = sgqlc.types.Field(sgqlc.types.list_of('HttpHeaderInput'), graphql_name='headers')
    parameters = sgqlc.types.Field(sgqlc.types.list_of('HttpParameterInput'), graphql_name='parameters')
    content_type = sgqlc.types.Field(HttpContentType, graphql_name='contentType')
    body = sgqlc.types.Field(String, graphql_name='body')
    authorization_type = sgqlc.types.Field(HttpAuthorizationType, graphql_name='authorizationType')
    authorization_basic_auth = sgqlc.types.Field('HttpAuthorizationBasicAuthInput', graphql_name='authorizationBasicAuth')
    authorization_bearer_token = sgqlc.types.Field(String, graphql_name='authorizationBearerToken')
    authorization_api_key = sgqlc.types.Field('HttpAuthorizationApiKeyInput', graphql_name='authorizationApiKey')
    oauth_connection_id = sgqlc.types.Field(String, graphql_name='oauthConnectionId')


class AutomationActionMetadataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('checklists', 'copy_todo_options', 'email')
    checklists = sgqlc.types.Field(sgqlc.types.list_of(AutomationActionCreateChecklistInput), graphql_name='checklists')
    copy_todo_options = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CopyTodoOption)), graphql_name='copyTodoOptions')
    email = sgqlc.types.Field('AutomationActionSendEmailInput', graphql_name='email')


class AutomationActionScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'type', 'type_not', 'type_in', 'type_not_in', 'dued_in', 'dued_in_not', 'dued_in_in', 'dued_in_not_in', 'dued_in_lt', 'dued_in_lte', 'dued_in_gt', 'dued_in_gte', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'metadata', 'metadata_not', 'metadata_in', 'metadata_not_in', 'metadata_lt', 'metadata_lte', 'metadata_gt', 'metadata_gte', 'metadata_contains', 'metadata_not_contains', 'metadata_starts_with', 'metadata_not_starts_with', 'metadata_ends_with', 'metadata_not_ends_with', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    type = sgqlc.types.Field(AutomationActionType, graphql_name='type')
    type_not = sgqlc.types.Field(AutomationActionType, graphql_name='type_not')
    type_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationActionType)), graphql_name='type_in')
    type_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationActionType)), graphql_name='type_not_in')
    dued_in = sgqlc.types.Field(Int, graphql_name='duedIn')
    dued_in_not = sgqlc.types.Field(Int, graphql_name='duedIn_not')
    dued_in_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Int)), graphql_name='duedIn_in')
    dued_in_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Int)), graphql_name='duedIn_not_in')
    dued_in_lt = sgqlc.types.Field(Int, graphql_name='duedIn_lt')
    dued_in_lte = sgqlc.types.Field(Int, graphql_name='duedIn_lte')
    dued_in_gt = sgqlc.types.Field(Int, graphql_name='duedIn_gt')
    dued_in_gte = sgqlc.types.Field(Int, graphql_name='duedIn_gte')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    metadata_not = sgqlc.types.Field(String, graphql_name='metadata_not')
    metadata_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='metadata_in')
    metadata_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='metadata_not_in')
    metadata_lt = sgqlc.types.Field(String, graphql_name='metadata_lt')
    metadata_lte = sgqlc.types.Field(String, graphql_name='metadata_lte')
    metadata_gt = sgqlc.types.Field(String, graphql_name='metadata_gt')
    metadata_gte = sgqlc.types.Field(String, graphql_name='metadata_gte')
    metadata_contains = sgqlc.types.Field(String, graphql_name='metadata_contains')
    metadata_not_contains = sgqlc.types.Field(String, graphql_name='metadata_not_contains')
    metadata_starts_with = sgqlc.types.Field(String, graphql_name='metadata_starts_with')
    metadata_not_starts_with = sgqlc.types.Field(String, graphql_name='metadata_not_starts_with')
    metadata_ends_with = sgqlc.types.Field(String, graphql_name='metadata_ends_with')
    metadata_not_ends_with = sgqlc.types.Field(String, graphql_name='metadata_not_ends_with')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionScalarWhereInput')), graphql_name='NOT')


class AutomationActionSendEmailAttachmentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'size', 'type', 'extension')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    size = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='size')
    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='type')
    extension = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='extension')


class AutomationActionSendEmailInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('from_', 'to', 'bcc', 'cc', 'content', 'attachments', 'subject', 'reply_to')
    from_ = sgqlc.types.Field(String, graphql_name='from')
    to = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='to')
    bcc = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='bcc')
    cc = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='cc')
    content = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='content')
    attachments = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationActionSendEmailAttachmentInput)), graphql_name='attachments')
    subject = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='subject')
    reply_to = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='replyTo')


class AutomationActionSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('AutomationActionWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionSubscriptionWhereInput')), graphql_name='NOT')


class AutomationActionTagCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'automation_action', 'tag')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    automation_action = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionCreateOneWithoutAutomationActionTagsInput), graphql_name='automationAction')
    tag = sgqlc.types.Field(sgqlc.types.non_null('TagCreateOneWithoutAutomationActionTagsInput'), graphql_name='tag')


class AutomationActionTagCreateManyWithoutAutomationActionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionTagCreateWithoutAutomationActionInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionTagWhereUniqueInput')), graphql_name='connect')


class AutomationActionTagCreateManyWithoutTagInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionTagCreateWithoutTagInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionTagWhereUniqueInput')), graphql_name='connect')


class AutomationActionTagCreateWithoutAutomationActionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'tag')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    tag = sgqlc.types.Field(sgqlc.types.non_null('TagCreateOneWithoutAutomationActionTagsInput'), graphql_name='tag')


class AutomationActionTagCreateWithoutTagInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'automation_action')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    automation_action = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionCreateOneWithoutAutomationActionTagsInput), graphql_name='automationAction')


class AutomationActionTagScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionTagScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionTagScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionTagScalarWhereInput')), graphql_name='NOT')


class AutomationActionTagSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('AutomationActionTagWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionTagSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionTagSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionTagSubscriptionWhereInput')), graphql_name='NOT')


class AutomationActionTagUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'automation_action', 'tag')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    automation_action = sgqlc.types.Field('AutomationActionUpdateOneRequiredWithoutAutomationActionTagsInput', graphql_name='automationAction')
    tag = sgqlc.types.Field('TagUpdateOneRequiredWithoutAutomationActionTagsInput', graphql_name='tag')


class AutomationActionTagUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid',)
    uid = sgqlc.types.Field(String, graphql_name='uid')


class AutomationActionTagUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid',)
    uid = sgqlc.types.Field(String, graphql_name='uid')


class AutomationActionTagUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionTagScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionTagUpdateManyDataInput), graphql_name='data')


class AutomationActionTagUpdateManyWithoutAutomationActionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationActionTagCreateWithoutAutomationActionInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionTagWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionTagWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionTagWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionTagWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionTagUpdateWithWhereUniqueWithoutAutomationActionInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionTagUpsertWithWhereUniqueWithoutAutomationActionInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationActionTagScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationActionTagUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class AutomationActionTagUpdateManyWithoutTagInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationActionTagCreateWithoutTagInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionTagWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionTagWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionTagWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionTagWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionTagUpdateWithWhereUniqueWithoutTagInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionTagUpsertWithWhereUniqueWithoutTagInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationActionTagScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationActionTagUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class AutomationActionTagUpdateWithWhereUniqueWithoutAutomationActionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('AutomationActionTagWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('AutomationActionTagUpdateWithoutAutomationActionDataInput'), graphql_name='data')


class AutomationActionTagUpdateWithWhereUniqueWithoutTagInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('AutomationActionTagWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('AutomationActionTagUpdateWithoutTagDataInput'), graphql_name='data')


class AutomationActionTagUpdateWithoutAutomationActionDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'tag')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    tag = sgqlc.types.Field('TagUpdateOneRequiredWithoutAutomationActionTagsInput', graphql_name='tag')


class AutomationActionTagUpdateWithoutTagDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'automation_action')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    automation_action = sgqlc.types.Field('AutomationActionUpdateOneRequiredWithoutAutomationActionTagsInput', graphql_name='automationAction')


class AutomationActionTagUpsertWithWhereUniqueWithoutAutomationActionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('AutomationActionTagWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionTagUpdateWithoutAutomationActionDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionTagCreateWithoutAutomationActionInput), graphql_name='create')


class AutomationActionTagUpsertWithWhereUniqueWithoutTagInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('AutomationActionTagWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionTagUpdateWithoutTagDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionTagCreateWithoutTagInput), graphql_name='create')


class AutomationActionTagWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'automation_action', 'tag', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    automation_action = sgqlc.types.Field('AutomationActionWhereInput', graphql_name='automationAction')
    tag = sgqlc.types.Field('TagWhereInput', graphql_name='tag')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionTagWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionTagWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionTagWhereInput')), graphql_name='NOT')


class AutomationActionTagWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class AutomationActionUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'type', 'dued_in', 'todo_list', 'automation_action_tags', 'automation_action_assignees', 'automation', 'metadata')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    type = sgqlc.types.Field(AutomationActionType, graphql_name='type')
    dued_in = sgqlc.types.Field(Int, graphql_name='duedIn')
    todo_list = sgqlc.types.Field('TodoListUpdateOneWithoutAutomationActionsInput', graphql_name='todoList')
    automation_action_tags = sgqlc.types.Field(AutomationActionTagUpdateManyWithoutAutomationActionInput, graphql_name='automationActionTags')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAutomationActionInput, graphql_name='automationActionAssignees')
    automation = sgqlc.types.Field('AutomationUpdateOneRequiredWithoutActionsInput', graphql_name='automation')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class AutomationActionUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'type', 'dued_in', 'metadata')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    type = sgqlc.types.Field(AutomationActionType, graphql_name='type')
    dued_in = sgqlc.types.Field(Int, graphql_name='duedIn')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class AutomationActionUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'type', 'dued_in', 'metadata')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    type = sgqlc.types.Field(AutomationActionType, graphql_name='type')
    dued_in = sgqlc.types.Field(Int, graphql_name='duedIn')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class AutomationActionUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionUpdateManyDataInput), graphql_name='data')


class AutomationActionUpdateManyWithoutAutomationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationActionCreateWithoutAutomationInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionUpdateWithWhereUniqueWithoutAutomationInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionUpsertWithWhereUniqueWithoutAutomationInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationActionScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationActionUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class AutomationActionUpdateManyWithoutTodoListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationActionCreateWithoutTodoListInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionUpdateWithWhereUniqueWithoutTodoListInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionUpsertWithWhereUniqueWithoutTodoListInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationActionScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationActionUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class AutomationActionUpdateOneRequiredWithoutAutomationActionAssigneesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(AutomationActionCreateWithoutAutomationActionAssigneesInput, graphql_name='create')
    update = sgqlc.types.Field('AutomationActionUpdateWithoutAutomationActionAssigneesDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('AutomationActionUpsertWithoutAutomationActionAssigneesInput', graphql_name='upsert')
    connect = sgqlc.types.Field('AutomationActionWhereUniqueInput', graphql_name='connect')


class AutomationActionUpdateOneRequiredWithoutAutomationActionTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(AutomationActionCreateWithoutAutomationActionTagsInput, graphql_name='create')
    update = sgqlc.types.Field('AutomationActionUpdateWithoutAutomationActionTagsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('AutomationActionUpsertWithoutAutomationActionTagsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('AutomationActionWhereUniqueInput', graphql_name='connect')


class AutomationActionUpdateWithWhereUniqueWithoutAutomationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('AutomationActionWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('AutomationActionUpdateWithoutAutomationDataInput'), graphql_name='data')


class AutomationActionUpdateWithWhereUniqueWithoutTodoListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('AutomationActionWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('AutomationActionUpdateWithoutTodoListDataInput'), graphql_name='data')


class AutomationActionUpdateWithoutAutomationActionAssigneesDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'type', 'dued_in', 'todo_list', 'automation_action_tags', 'automation', 'metadata')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    type = sgqlc.types.Field(AutomationActionType, graphql_name='type')
    dued_in = sgqlc.types.Field(Int, graphql_name='duedIn')
    todo_list = sgqlc.types.Field('TodoListUpdateOneWithoutAutomationActionsInput', graphql_name='todoList')
    automation_action_tags = sgqlc.types.Field(AutomationActionTagUpdateManyWithoutAutomationActionInput, graphql_name='automationActionTags')
    automation = sgqlc.types.Field('AutomationUpdateOneRequiredWithoutActionsInput', graphql_name='automation')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class AutomationActionUpdateWithoutAutomationActionTagsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'type', 'dued_in', 'todo_list', 'automation_action_assignees', 'automation', 'metadata')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    type = sgqlc.types.Field(AutomationActionType, graphql_name='type')
    dued_in = sgqlc.types.Field(Int, graphql_name='duedIn')
    todo_list = sgqlc.types.Field('TodoListUpdateOneWithoutAutomationActionsInput', graphql_name='todoList')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAutomationActionInput, graphql_name='automationActionAssignees')
    automation = sgqlc.types.Field('AutomationUpdateOneRequiredWithoutActionsInput', graphql_name='automation')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class AutomationActionUpdateWithoutAutomationDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'type', 'dued_in', 'todo_list', 'automation_action_tags', 'automation_action_assignees', 'metadata')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    type = sgqlc.types.Field(AutomationActionType, graphql_name='type')
    dued_in = sgqlc.types.Field(Int, graphql_name='duedIn')
    todo_list = sgqlc.types.Field('TodoListUpdateOneWithoutAutomationActionsInput', graphql_name='todoList')
    automation_action_tags = sgqlc.types.Field(AutomationActionTagUpdateManyWithoutAutomationActionInput, graphql_name='automationActionTags')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAutomationActionInput, graphql_name='automationActionAssignees')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class AutomationActionUpdateWithoutTodoListDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'type', 'dued_in', 'automation_action_tags', 'automation_action_assignees', 'automation', 'metadata')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    type = sgqlc.types.Field(AutomationActionType, graphql_name='type')
    dued_in = sgqlc.types.Field(Int, graphql_name='duedIn')
    automation_action_tags = sgqlc.types.Field(AutomationActionTagUpdateManyWithoutAutomationActionInput, graphql_name='automationActionTags')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAutomationActionInput, graphql_name='automationActionAssignees')
    automation = sgqlc.types.Field('AutomationUpdateOneRequiredWithoutActionsInput', graphql_name='automation')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class AutomationActionUpsertWithWhereUniqueWithoutAutomationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('AutomationActionWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionUpdateWithoutAutomationDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionCreateWithoutAutomationInput), graphql_name='create')


class AutomationActionUpsertWithWhereUniqueWithoutTodoListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('AutomationActionWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionUpdateWithoutTodoListDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionCreateWithoutTodoListInput), graphql_name='create')


class AutomationActionUpsertWithoutAutomationActionAssigneesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionUpdateWithoutAutomationActionAssigneesDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionCreateWithoutAutomationActionAssigneesInput), graphql_name='create')


class AutomationActionUpsertWithoutAutomationActionTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionUpdateWithoutAutomationActionTagsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionCreateWithoutAutomationActionTagsInput), graphql_name='create')


class AutomationActionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'type', 'type_not', 'type_in', 'type_not_in', 'dued_in', 'dued_in_not', 'dued_in_in', 'dued_in_not_in', 'dued_in_lt', 'dued_in_lte', 'dued_in_gt', 'dued_in_gte', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'todo_list', 'automation_action_tags_every', 'automation_action_tags_some', 'automation_action_tags_none', 'automation_action_assignees_every', 'automation_action_assignees_some', 'automation_action_assignees_none', 'automation', 'metadata', 'metadata_not', 'metadata_in', 'metadata_not_in', 'metadata_lt', 'metadata_lte', 'metadata_gt', 'metadata_gte', 'metadata_contains', 'metadata_not_contains', 'metadata_starts_with', 'metadata_not_starts_with', 'metadata_ends_with', 'metadata_not_ends_with', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    type = sgqlc.types.Field(AutomationActionType, graphql_name='type')
    type_not = sgqlc.types.Field(AutomationActionType, graphql_name='type_not')
    type_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationActionType)), graphql_name='type_in')
    type_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationActionType)), graphql_name='type_not_in')
    dued_in = sgqlc.types.Field(Int, graphql_name='duedIn')
    dued_in_not = sgqlc.types.Field(Int, graphql_name='duedIn_not')
    dued_in_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Int)), graphql_name='duedIn_in')
    dued_in_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Int)), graphql_name='duedIn_not_in')
    dued_in_lt = sgqlc.types.Field(Int, graphql_name='duedIn_lt')
    dued_in_lte = sgqlc.types.Field(Int, graphql_name='duedIn_lte')
    dued_in_gt = sgqlc.types.Field(Int, graphql_name='duedIn_gt')
    dued_in_gte = sgqlc.types.Field(Int, graphql_name='duedIn_gte')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    todo_list = sgqlc.types.Field('TodoListWhereInput', graphql_name='todoList')
    automation_action_tags_every = sgqlc.types.Field(AutomationActionTagWhereInput, graphql_name='automationActionTags_every')
    automation_action_tags_some = sgqlc.types.Field(AutomationActionTagWhereInput, graphql_name='automationActionTags_some')
    automation_action_tags_none = sgqlc.types.Field(AutomationActionTagWhereInput, graphql_name='automationActionTags_none')
    automation_action_assignees_every = sgqlc.types.Field(AutomationActionAssigneeWhereInput, graphql_name='automationActionAssignees_every')
    automation_action_assignees_some = sgqlc.types.Field(AutomationActionAssigneeWhereInput, graphql_name='automationActionAssignees_some')
    automation_action_assignees_none = sgqlc.types.Field(AutomationActionAssigneeWhereInput, graphql_name='automationActionAssignees_none')
    automation = sgqlc.types.Field('AutomationWhereInput', graphql_name='automation')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    metadata_not = sgqlc.types.Field(String, graphql_name='metadata_not')
    metadata_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='metadata_in')
    metadata_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='metadata_not_in')
    metadata_lt = sgqlc.types.Field(String, graphql_name='metadata_lt')
    metadata_lte = sgqlc.types.Field(String, graphql_name='metadata_lte')
    metadata_gt = sgqlc.types.Field(String, graphql_name='metadata_gt')
    metadata_gte = sgqlc.types.Field(String, graphql_name='metadata_gte')
    metadata_contains = sgqlc.types.Field(String, graphql_name='metadata_contains')
    metadata_not_contains = sgqlc.types.Field(String, graphql_name='metadata_not_contains')
    metadata_starts_with = sgqlc.types.Field(String, graphql_name='metadata_starts_with')
    metadata_not_starts_with = sgqlc.types.Field(String, graphql_name='metadata_not_starts_with')
    metadata_ends_with = sgqlc.types.Field(String, graphql_name='metadata_ends_with')
    metadata_not_ends_with = sgqlc.types.Field(String, graphql_name='metadata_not_ends_with')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionWhereInput')), graphql_name='NOT')


class AutomationActionWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class AutomationCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'trigger', 'actions', 'is_active', 'project', 'created_by')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    trigger = sgqlc.types.Field(sgqlc.types.non_null('AutomationTriggerCreateOneWithoutAutomationInput'), graphql_name='trigger')
    actions = sgqlc.types.Field(AutomationActionCreateManyWithoutAutomationInput, graphql_name='actions')
    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutAutomationsInput'), graphql_name='project')
    created_by = sgqlc.types.Field('UserCreateOneWithoutAutomationsInput', graphql_name='createdBy')


class AutomationCreateManyWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationCreateWithoutCreatedByInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationWhereUniqueInput')), graphql_name='connect')


class AutomationCreateManyWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationCreateWithoutProjectInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationWhereUniqueInput')), graphql_name='connect')


class AutomationCreateOneWithoutActionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('AutomationCreateWithoutActionsInput', graphql_name='create')
    connect = sgqlc.types.Field('AutomationWhereUniqueInput', graphql_name='connect')


class AutomationCreateOneWithoutTriggerInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('AutomationCreateWithoutTriggerInput', graphql_name='create')
    connect = sgqlc.types.Field('AutomationWhereUniqueInput', graphql_name='connect')


class AutomationCreateWithoutActionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'trigger', 'is_active', 'project', 'created_by')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    trigger = sgqlc.types.Field(sgqlc.types.non_null('AutomationTriggerCreateOneWithoutAutomationInput'), graphql_name='trigger')
    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutAutomationsInput'), graphql_name='project')
    created_by = sgqlc.types.Field('UserCreateOneWithoutAutomationsInput', graphql_name='createdBy')


class AutomationCreateWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'trigger', 'actions', 'is_active', 'project')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    trigger = sgqlc.types.Field(sgqlc.types.non_null('AutomationTriggerCreateOneWithoutAutomationInput'), graphql_name='trigger')
    actions = sgqlc.types.Field(AutomationActionCreateManyWithoutAutomationInput, graphql_name='actions')
    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutAutomationsInput'), graphql_name='project')


class AutomationCreateWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'trigger', 'actions', 'is_active', 'created_by')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    trigger = sgqlc.types.Field(sgqlc.types.non_null('AutomationTriggerCreateOneWithoutAutomationInput'), graphql_name='trigger')
    actions = sgqlc.types.Field(AutomationActionCreateManyWithoutAutomationInput, graphql_name='actions')
    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    created_by = sgqlc.types.Field('UserCreateOneWithoutAutomationsInput', graphql_name='createdBy')


class AutomationCreateWithoutTriggerInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'actions', 'is_active', 'project', 'created_by')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    actions = sgqlc.types.Field(AutomationActionCreateManyWithoutAutomationInput, graphql_name='actions')
    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutAutomationsInput'), graphql_name='project')
    created_by = sgqlc.types.Field('UserCreateOneWithoutAutomationsInput', graphql_name='createdBy')


class AutomationFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('custom_field_ids',)
    custom_field_ids = sgqlc.types.Field(sgqlc.types.list_of(String), graphql_name='customFieldIds')


class AutomationScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'is_active', 'is_active_not', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    is_active_not = sgqlc.types.Field(Boolean, graphql_name='isActive_not')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationScalarWhereInput')), graphql_name='NOT')


class AutomationSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('AutomationWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationSubscriptionWhereInput')), graphql_name='NOT')


class AutomationTriggerAssigneeCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'automation_trigger', 'assignee')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    automation_trigger = sgqlc.types.Field(sgqlc.types.non_null('AutomationTriggerCreateOneWithoutAutomationTriggerAssigneesInput'), graphql_name='automationTrigger')
    assignee = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutAutomationTriggerAssigneesInput'), graphql_name='assignee')


class AutomationTriggerAssigneeCreateManyWithoutAssigneeInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerAssigneeCreateWithoutAssigneeInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerAssigneeWhereUniqueInput')), graphql_name='connect')


class AutomationTriggerAssigneeCreateManyWithoutAutomationTriggerInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerAssigneeCreateWithoutAutomationTriggerInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerAssigneeWhereUniqueInput')), graphql_name='connect')


class AutomationTriggerAssigneeCreateWithoutAssigneeInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'automation_trigger')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    automation_trigger = sgqlc.types.Field(sgqlc.types.non_null('AutomationTriggerCreateOneWithoutAutomationTriggerAssigneesInput'), graphql_name='automationTrigger')


class AutomationTriggerAssigneeCreateWithoutAutomationTriggerInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'assignee')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    assignee = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutAutomationTriggerAssigneesInput'), graphql_name='assignee')


class AutomationTriggerAssigneeScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerAssigneeScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerAssigneeScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerAssigneeScalarWhereInput')), graphql_name='NOT')


class AutomationTriggerAssigneeSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('AutomationTriggerAssigneeWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerAssigneeSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerAssigneeSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerAssigneeSubscriptionWhereInput')), graphql_name='NOT')


class AutomationTriggerAssigneeUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'automation_trigger', 'assignee')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    automation_trigger = sgqlc.types.Field('AutomationTriggerUpdateOneRequiredWithoutAutomationTriggerAssigneesInput', graphql_name='automationTrigger')
    assignee = sgqlc.types.Field('UserUpdateOneRequiredWithoutAutomationTriggerAssigneesInput', graphql_name='assignee')


class AutomationTriggerAssigneeUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid',)
    uid = sgqlc.types.Field(String, graphql_name='uid')


class AutomationTriggerAssigneeUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid',)
    uid = sgqlc.types.Field(String, graphql_name='uid')


class AutomationTriggerAssigneeUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerAssigneeScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerAssigneeUpdateManyDataInput), graphql_name='data')


class AutomationTriggerAssigneeUpdateManyWithoutAssigneeInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationTriggerAssigneeCreateWithoutAssigneeInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerAssigneeWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerAssigneeWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerAssigneeWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerAssigneeWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerAssigneeUpdateWithWhereUniqueWithoutAssigneeInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerAssigneeUpsertWithWhereUniqueWithoutAssigneeInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationTriggerAssigneeScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationTriggerAssigneeUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class AutomationTriggerAssigneeUpdateManyWithoutAutomationTriggerInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationTriggerAssigneeCreateWithoutAutomationTriggerInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerAssigneeWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerAssigneeWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerAssigneeWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerAssigneeWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerAssigneeUpdateWithWhereUniqueWithoutAutomationTriggerInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerAssigneeUpsertWithWhereUniqueWithoutAutomationTriggerInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationTriggerAssigneeScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationTriggerAssigneeUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class AutomationTriggerAssigneeUpdateWithWhereUniqueWithoutAssigneeInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('AutomationTriggerAssigneeWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('AutomationTriggerAssigneeUpdateWithoutAssigneeDataInput'), graphql_name='data')


class AutomationTriggerAssigneeUpdateWithWhereUniqueWithoutAutomationTriggerInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('AutomationTriggerAssigneeWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('AutomationTriggerAssigneeUpdateWithoutAutomationTriggerDataInput'), graphql_name='data')


class AutomationTriggerAssigneeUpdateWithoutAssigneeDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'automation_trigger')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    automation_trigger = sgqlc.types.Field('AutomationTriggerUpdateOneRequiredWithoutAutomationTriggerAssigneesInput', graphql_name='automationTrigger')


class AutomationTriggerAssigneeUpdateWithoutAutomationTriggerDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'assignee')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    assignee = sgqlc.types.Field('UserUpdateOneRequiredWithoutAutomationTriggerAssigneesInput', graphql_name='assignee')


class AutomationTriggerAssigneeUpsertWithWhereUniqueWithoutAssigneeInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('AutomationTriggerAssigneeWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerAssigneeUpdateWithoutAssigneeDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerAssigneeCreateWithoutAssigneeInput), graphql_name='create')


class AutomationTriggerAssigneeUpsertWithWhereUniqueWithoutAutomationTriggerInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('AutomationTriggerAssigneeWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerAssigneeUpdateWithoutAutomationTriggerDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerAssigneeCreateWithoutAutomationTriggerInput), graphql_name='create')


class AutomationTriggerAssigneeWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'automation_trigger', 'assignee', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    automation_trigger = sgqlc.types.Field('AutomationTriggerWhereInput', graphql_name='automationTrigger')
    assignee = sgqlc.types.Field('UserWhereInput', graphql_name='assignee')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerAssigneeWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerAssigneeWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerAssigneeWhereInput')), graphql_name='NOT')


class AutomationTriggerAssigneeWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class AutomationTriggerCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'type', 'todo_list', 'automation_trigger_tags', 'automation_trigger_assignees', 'automation', 'metadata')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    type = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerType), graphql_name='type')
    todo_list = sgqlc.types.Field('TodoListCreateOneWithoutAutomationTriggersInput', graphql_name='todoList')
    automation_trigger_tags = sgqlc.types.Field('AutomationTriggerTagCreateManyWithoutAutomationTriggerInput', graphql_name='automationTriggerTags')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeCreateManyWithoutAutomationTriggerInput, graphql_name='automationTriggerAssignees')
    automation = sgqlc.types.Field(sgqlc.types.non_null(AutomationCreateOneWithoutTriggerInput), graphql_name='automation')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class AutomationTriggerCreateManyWithoutTodoListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerCreateWithoutTodoListInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerWhereUniqueInput')), graphql_name='connect')


class AutomationTriggerCreateOneWithoutAutomationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('AutomationTriggerCreateWithoutAutomationInput', graphql_name='create')
    connect = sgqlc.types.Field('AutomationTriggerWhereUniqueInput', graphql_name='connect')


class AutomationTriggerCreateOneWithoutAutomationTriggerAssigneesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('AutomationTriggerCreateWithoutAutomationTriggerAssigneesInput', graphql_name='create')
    connect = sgqlc.types.Field('AutomationTriggerWhereUniqueInput', graphql_name='connect')


class AutomationTriggerCreateOneWithoutAutomationTriggerTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('AutomationTriggerCreateWithoutAutomationTriggerTagsInput', graphql_name='create')
    connect = sgqlc.types.Field('AutomationTriggerWhereUniqueInput', graphql_name='connect')


class AutomationTriggerCreateWithoutAutomationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'type', 'todo_list', 'automation_trigger_tags', 'automation_trigger_assignees', 'metadata')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    type = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerType), graphql_name='type')
    todo_list = sgqlc.types.Field('TodoListCreateOneWithoutAutomationTriggersInput', graphql_name='todoList')
    automation_trigger_tags = sgqlc.types.Field('AutomationTriggerTagCreateManyWithoutAutomationTriggerInput', graphql_name='automationTriggerTags')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeCreateManyWithoutAutomationTriggerInput, graphql_name='automationTriggerAssignees')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class AutomationTriggerCreateWithoutAutomationTriggerAssigneesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'type', 'todo_list', 'automation_trigger_tags', 'automation', 'metadata')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    type = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerType), graphql_name='type')
    todo_list = sgqlc.types.Field('TodoListCreateOneWithoutAutomationTriggersInput', graphql_name='todoList')
    automation_trigger_tags = sgqlc.types.Field('AutomationTriggerTagCreateManyWithoutAutomationTriggerInput', graphql_name='automationTriggerTags')
    automation = sgqlc.types.Field(sgqlc.types.non_null(AutomationCreateOneWithoutTriggerInput), graphql_name='automation')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class AutomationTriggerCreateWithoutAutomationTriggerTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'type', 'todo_list', 'automation_trigger_assignees', 'automation', 'metadata')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    type = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerType), graphql_name='type')
    todo_list = sgqlc.types.Field('TodoListCreateOneWithoutAutomationTriggersInput', graphql_name='todoList')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeCreateManyWithoutAutomationTriggerInput, graphql_name='automationTriggerAssignees')
    automation = sgqlc.types.Field(sgqlc.types.non_null(AutomationCreateOneWithoutTriggerInput), graphql_name='automation')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class AutomationTriggerCreateWithoutTodoListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'type', 'automation_trigger_tags', 'automation_trigger_assignees', 'automation', 'metadata')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    type = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerType), graphql_name='type')
    automation_trigger_tags = sgqlc.types.Field('AutomationTriggerTagCreateManyWithoutAutomationTriggerInput', graphql_name='automationTriggerTags')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeCreateManyWithoutAutomationTriggerInput, graphql_name='automationTriggerAssignees')
    automation = sgqlc.types.Field(sgqlc.types.non_null(AutomationCreateOneWithoutTriggerInput), graphql_name='automation')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class AutomationTriggerMetadataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('incomplete_only',)
    incomplete_only = sgqlc.types.Field(Boolean, graphql_name='incompleteOnly')


class AutomationTriggerScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'type', 'type_not', 'type_in', 'type_not_in', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'metadata', 'metadata_not', 'metadata_in', 'metadata_not_in', 'metadata_lt', 'metadata_lte', 'metadata_gt', 'metadata_gte', 'metadata_contains', 'metadata_not_contains', 'metadata_starts_with', 'metadata_not_starts_with', 'metadata_ends_with', 'metadata_not_ends_with', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    type = sgqlc.types.Field(AutomationTriggerType, graphql_name='type')
    type_not = sgqlc.types.Field(AutomationTriggerType, graphql_name='type_not')
    type_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationTriggerType)), graphql_name='type_in')
    type_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationTriggerType)), graphql_name='type_not_in')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    metadata_not = sgqlc.types.Field(String, graphql_name='metadata_not')
    metadata_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='metadata_in')
    metadata_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='metadata_not_in')
    metadata_lt = sgqlc.types.Field(String, graphql_name='metadata_lt')
    metadata_lte = sgqlc.types.Field(String, graphql_name='metadata_lte')
    metadata_gt = sgqlc.types.Field(String, graphql_name='metadata_gt')
    metadata_gte = sgqlc.types.Field(String, graphql_name='metadata_gte')
    metadata_contains = sgqlc.types.Field(String, graphql_name='metadata_contains')
    metadata_not_contains = sgqlc.types.Field(String, graphql_name='metadata_not_contains')
    metadata_starts_with = sgqlc.types.Field(String, graphql_name='metadata_starts_with')
    metadata_not_starts_with = sgqlc.types.Field(String, graphql_name='metadata_not_starts_with')
    metadata_ends_with = sgqlc.types.Field(String, graphql_name='metadata_ends_with')
    metadata_not_ends_with = sgqlc.types.Field(String, graphql_name='metadata_not_ends_with')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerScalarWhereInput')), graphql_name='NOT')


class AutomationTriggerSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('AutomationTriggerWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerSubscriptionWhereInput')), graphql_name='NOT')


class AutomationTriggerTagCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'automation_trigger', 'tag')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    automation_trigger = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerCreateOneWithoutAutomationTriggerTagsInput), graphql_name='automationTrigger')
    tag = sgqlc.types.Field(sgqlc.types.non_null('TagCreateOneWithoutAutomationTriggerTagsInput'), graphql_name='tag')


class AutomationTriggerTagCreateManyWithoutAutomationTriggerInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerTagCreateWithoutAutomationTriggerInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerTagWhereUniqueInput')), graphql_name='connect')


class AutomationTriggerTagCreateManyWithoutTagInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerTagCreateWithoutTagInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerTagWhereUniqueInput')), graphql_name='connect')


class AutomationTriggerTagCreateWithoutAutomationTriggerInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'tag')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    tag = sgqlc.types.Field(sgqlc.types.non_null('TagCreateOneWithoutAutomationTriggerTagsInput'), graphql_name='tag')


class AutomationTriggerTagCreateWithoutTagInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'automation_trigger')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    automation_trigger = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerCreateOneWithoutAutomationTriggerTagsInput), graphql_name='automationTrigger')


class AutomationTriggerTagScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerTagScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerTagScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerTagScalarWhereInput')), graphql_name='NOT')


class AutomationTriggerTagSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('AutomationTriggerTagWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerTagSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerTagSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerTagSubscriptionWhereInput')), graphql_name='NOT')


class AutomationTriggerTagUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'automation_trigger', 'tag')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    automation_trigger = sgqlc.types.Field('AutomationTriggerUpdateOneRequiredWithoutAutomationTriggerTagsInput', graphql_name='automationTrigger')
    tag = sgqlc.types.Field('TagUpdateOneRequiredWithoutAutomationTriggerTagsInput', graphql_name='tag')


class AutomationTriggerTagUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid',)
    uid = sgqlc.types.Field(String, graphql_name='uid')


class AutomationTriggerTagUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid',)
    uid = sgqlc.types.Field(String, graphql_name='uid')


class AutomationTriggerTagUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerTagScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerTagUpdateManyDataInput), graphql_name='data')


class AutomationTriggerTagUpdateManyWithoutAutomationTriggerInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationTriggerTagCreateWithoutAutomationTriggerInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerTagWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerTagWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerTagWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerTagWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerTagUpdateWithWhereUniqueWithoutAutomationTriggerInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerTagUpsertWithWhereUniqueWithoutAutomationTriggerInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationTriggerTagScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationTriggerTagUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class AutomationTriggerTagUpdateManyWithoutTagInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationTriggerTagCreateWithoutTagInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerTagWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerTagWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerTagWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerTagWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerTagUpdateWithWhereUniqueWithoutTagInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerTagUpsertWithWhereUniqueWithoutTagInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationTriggerTagScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationTriggerTagUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class AutomationTriggerTagUpdateWithWhereUniqueWithoutAutomationTriggerInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('AutomationTriggerTagWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('AutomationTriggerTagUpdateWithoutAutomationTriggerDataInput'), graphql_name='data')


class AutomationTriggerTagUpdateWithWhereUniqueWithoutTagInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('AutomationTriggerTagWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('AutomationTriggerTagUpdateWithoutTagDataInput'), graphql_name='data')


class AutomationTriggerTagUpdateWithoutAutomationTriggerDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'tag')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    tag = sgqlc.types.Field('TagUpdateOneRequiredWithoutAutomationTriggerTagsInput', graphql_name='tag')


class AutomationTriggerTagUpdateWithoutTagDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'automation_trigger')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    automation_trigger = sgqlc.types.Field('AutomationTriggerUpdateOneRequiredWithoutAutomationTriggerTagsInput', graphql_name='automationTrigger')


class AutomationTriggerTagUpsertWithWhereUniqueWithoutAutomationTriggerInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('AutomationTriggerTagWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerTagUpdateWithoutAutomationTriggerDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerTagCreateWithoutAutomationTriggerInput), graphql_name='create')


class AutomationTriggerTagUpsertWithWhereUniqueWithoutTagInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('AutomationTriggerTagWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerTagUpdateWithoutTagDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerTagCreateWithoutTagInput), graphql_name='create')


class AutomationTriggerTagWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'automation_trigger', 'tag', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    automation_trigger = sgqlc.types.Field('AutomationTriggerWhereInput', graphql_name='automationTrigger')
    tag = sgqlc.types.Field('TagWhereInput', graphql_name='tag')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerTagWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerTagWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerTagWhereInput')), graphql_name='NOT')


class AutomationTriggerTagWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class AutomationTriggerUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'type', 'todo_list', 'automation_trigger_tags', 'automation_trigger_assignees', 'automation', 'metadata')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    type = sgqlc.types.Field(AutomationTriggerType, graphql_name='type')
    todo_list = sgqlc.types.Field('TodoListUpdateOneWithoutAutomationTriggersInput', graphql_name='todoList')
    automation_trigger_tags = sgqlc.types.Field(AutomationTriggerTagUpdateManyWithoutAutomationTriggerInput, graphql_name='automationTriggerTags')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAutomationTriggerInput, graphql_name='automationTriggerAssignees')
    automation = sgqlc.types.Field('AutomationUpdateOneRequiredWithoutTriggerInput', graphql_name='automation')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class AutomationTriggerUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'type', 'metadata')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    type = sgqlc.types.Field(AutomationTriggerType, graphql_name='type')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class AutomationTriggerUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'type', 'metadata')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    type = sgqlc.types.Field(AutomationTriggerType, graphql_name='type')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class AutomationTriggerUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerUpdateManyDataInput), graphql_name='data')


class AutomationTriggerUpdateManyWithoutTodoListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationTriggerCreateWithoutTodoListInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerUpdateWithWhereUniqueWithoutTodoListInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerUpsertWithWhereUniqueWithoutTodoListInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationTriggerScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationTriggerUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class AutomationTriggerUpdateOneRequiredWithoutAutomationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(AutomationTriggerCreateWithoutAutomationInput, graphql_name='create')
    update = sgqlc.types.Field('AutomationTriggerUpdateWithoutAutomationDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('AutomationTriggerUpsertWithoutAutomationInput', graphql_name='upsert')
    connect = sgqlc.types.Field('AutomationTriggerWhereUniqueInput', graphql_name='connect')


class AutomationTriggerUpdateOneRequiredWithoutAutomationTriggerAssigneesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(AutomationTriggerCreateWithoutAutomationTriggerAssigneesInput, graphql_name='create')
    update = sgqlc.types.Field('AutomationTriggerUpdateWithoutAutomationTriggerAssigneesDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('AutomationTriggerUpsertWithoutAutomationTriggerAssigneesInput', graphql_name='upsert')
    connect = sgqlc.types.Field('AutomationTriggerWhereUniqueInput', graphql_name='connect')


class AutomationTriggerUpdateOneRequiredWithoutAutomationTriggerTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(AutomationTriggerCreateWithoutAutomationTriggerTagsInput, graphql_name='create')
    update = sgqlc.types.Field('AutomationTriggerUpdateWithoutAutomationTriggerTagsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('AutomationTriggerUpsertWithoutAutomationTriggerTagsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('AutomationTriggerWhereUniqueInput', graphql_name='connect')


class AutomationTriggerUpdateWithWhereUniqueWithoutTodoListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('AutomationTriggerWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('AutomationTriggerUpdateWithoutTodoListDataInput'), graphql_name='data')


class AutomationTriggerUpdateWithoutAutomationDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'type', 'todo_list', 'automation_trigger_tags', 'automation_trigger_assignees', 'metadata')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    type = sgqlc.types.Field(AutomationTriggerType, graphql_name='type')
    todo_list = sgqlc.types.Field('TodoListUpdateOneWithoutAutomationTriggersInput', graphql_name='todoList')
    automation_trigger_tags = sgqlc.types.Field(AutomationTriggerTagUpdateManyWithoutAutomationTriggerInput, graphql_name='automationTriggerTags')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAutomationTriggerInput, graphql_name='automationTriggerAssignees')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class AutomationTriggerUpdateWithoutAutomationTriggerAssigneesDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'type', 'todo_list', 'automation_trigger_tags', 'automation', 'metadata')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    type = sgqlc.types.Field(AutomationTriggerType, graphql_name='type')
    todo_list = sgqlc.types.Field('TodoListUpdateOneWithoutAutomationTriggersInput', graphql_name='todoList')
    automation_trigger_tags = sgqlc.types.Field(AutomationTriggerTagUpdateManyWithoutAutomationTriggerInput, graphql_name='automationTriggerTags')
    automation = sgqlc.types.Field('AutomationUpdateOneRequiredWithoutTriggerInput', graphql_name='automation')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class AutomationTriggerUpdateWithoutAutomationTriggerTagsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'type', 'todo_list', 'automation_trigger_assignees', 'automation', 'metadata')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    type = sgqlc.types.Field(AutomationTriggerType, graphql_name='type')
    todo_list = sgqlc.types.Field('TodoListUpdateOneWithoutAutomationTriggersInput', graphql_name='todoList')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAutomationTriggerInput, graphql_name='automationTriggerAssignees')
    automation = sgqlc.types.Field('AutomationUpdateOneRequiredWithoutTriggerInput', graphql_name='automation')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class AutomationTriggerUpdateWithoutTodoListDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'type', 'automation_trigger_tags', 'automation_trigger_assignees', 'automation', 'metadata')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    type = sgqlc.types.Field(AutomationTriggerType, graphql_name='type')
    automation_trigger_tags = sgqlc.types.Field(AutomationTriggerTagUpdateManyWithoutAutomationTriggerInput, graphql_name='automationTriggerTags')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAutomationTriggerInput, graphql_name='automationTriggerAssignees')
    automation = sgqlc.types.Field('AutomationUpdateOneRequiredWithoutTriggerInput', graphql_name='automation')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class AutomationTriggerUpsertWithWhereUniqueWithoutTodoListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('AutomationTriggerWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerUpdateWithoutTodoListDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerCreateWithoutTodoListInput), graphql_name='create')


class AutomationTriggerUpsertWithoutAutomationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerUpdateWithoutAutomationDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerCreateWithoutAutomationInput), graphql_name='create')


class AutomationTriggerUpsertWithoutAutomationTriggerAssigneesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerUpdateWithoutAutomationTriggerAssigneesDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerCreateWithoutAutomationTriggerAssigneesInput), graphql_name='create')


class AutomationTriggerUpsertWithoutAutomationTriggerTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerUpdateWithoutAutomationTriggerTagsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerCreateWithoutAutomationTriggerTagsInput), graphql_name='create')


class AutomationTriggerWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'type', 'type_not', 'type_in', 'type_not_in', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'todo_list', 'automation_trigger_tags_every', 'automation_trigger_tags_some', 'automation_trigger_tags_none', 'automation_trigger_assignees_every', 'automation_trigger_assignees_some', 'automation_trigger_assignees_none', 'automation', 'metadata', 'metadata_not', 'metadata_in', 'metadata_not_in', 'metadata_lt', 'metadata_lte', 'metadata_gt', 'metadata_gte', 'metadata_contains', 'metadata_not_contains', 'metadata_starts_with', 'metadata_not_starts_with', 'metadata_ends_with', 'metadata_not_ends_with', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    type = sgqlc.types.Field(AutomationTriggerType, graphql_name='type')
    type_not = sgqlc.types.Field(AutomationTriggerType, graphql_name='type_not')
    type_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationTriggerType)), graphql_name='type_in')
    type_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationTriggerType)), graphql_name='type_not_in')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    todo_list = sgqlc.types.Field('TodoListWhereInput', graphql_name='todoList')
    automation_trigger_tags_every = sgqlc.types.Field(AutomationTriggerTagWhereInput, graphql_name='automationTriggerTags_every')
    automation_trigger_tags_some = sgqlc.types.Field(AutomationTriggerTagWhereInput, graphql_name='automationTriggerTags_some')
    automation_trigger_tags_none = sgqlc.types.Field(AutomationTriggerTagWhereInput, graphql_name='automationTriggerTags_none')
    automation_trigger_assignees_every = sgqlc.types.Field(AutomationTriggerAssigneeWhereInput, graphql_name='automationTriggerAssignees_every')
    automation_trigger_assignees_some = sgqlc.types.Field(AutomationTriggerAssigneeWhereInput, graphql_name='automationTriggerAssignees_some')
    automation_trigger_assignees_none = sgqlc.types.Field(AutomationTriggerAssigneeWhereInput, graphql_name='automationTriggerAssignees_none')
    automation = sgqlc.types.Field('AutomationWhereInput', graphql_name='automation')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    metadata_not = sgqlc.types.Field(String, graphql_name='metadata_not')
    metadata_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='metadata_in')
    metadata_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='metadata_not_in')
    metadata_lt = sgqlc.types.Field(String, graphql_name='metadata_lt')
    metadata_lte = sgqlc.types.Field(String, graphql_name='metadata_lte')
    metadata_gt = sgqlc.types.Field(String, graphql_name='metadata_gt')
    metadata_gte = sgqlc.types.Field(String, graphql_name='metadata_gte')
    metadata_contains = sgqlc.types.Field(String, graphql_name='metadata_contains')
    metadata_not_contains = sgqlc.types.Field(String, graphql_name='metadata_not_contains')
    metadata_starts_with = sgqlc.types.Field(String, graphql_name='metadata_starts_with')
    metadata_not_starts_with = sgqlc.types.Field(String, graphql_name='metadata_not_starts_with')
    metadata_ends_with = sgqlc.types.Field(String, graphql_name='metadata_ends_with')
    metadata_not_ends_with = sgqlc.types.Field(String, graphql_name='metadata_not_ends_with')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerWhereInput')), graphql_name='NOT')


class AutomationTriggerWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class AutomationUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'trigger', 'actions', 'is_active', 'project', 'created_by')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    trigger = sgqlc.types.Field(AutomationTriggerUpdateOneRequiredWithoutAutomationInput, graphql_name='trigger')
    actions = sgqlc.types.Field(AutomationActionUpdateManyWithoutAutomationInput, graphql_name='actions')
    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutAutomationsInput', graphql_name='project')
    created_by = sgqlc.types.Field('UserUpdateOneWithoutAutomationsInput', graphql_name='createdBy')


class AutomationUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'is_active')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')


class AutomationUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'is_active')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')


class AutomationUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(AutomationScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(AutomationUpdateManyDataInput), graphql_name='data')


class AutomationUpdateManyWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationCreateWithoutCreatedByInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationUpdateWithWhereUniqueWithoutCreatedByInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationUpsertWithWhereUniqueWithoutCreatedByInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class AutomationUpdateManyWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationCreateWithoutProjectInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationUpdateWithWhereUniqueWithoutProjectInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationUpsertWithWhereUniqueWithoutProjectInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class AutomationUpdateOneRequiredWithoutActionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(AutomationCreateWithoutActionsInput, graphql_name='create')
    update = sgqlc.types.Field('AutomationUpdateWithoutActionsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('AutomationUpsertWithoutActionsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('AutomationWhereUniqueInput', graphql_name='connect')


class AutomationUpdateOneRequiredWithoutTriggerInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(AutomationCreateWithoutTriggerInput, graphql_name='create')
    update = sgqlc.types.Field('AutomationUpdateWithoutTriggerDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('AutomationUpsertWithoutTriggerInput', graphql_name='upsert')
    connect = sgqlc.types.Field('AutomationWhereUniqueInput', graphql_name='connect')


class AutomationUpdateWithWhereUniqueWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('AutomationWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('AutomationUpdateWithoutCreatedByDataInput'), graphql_name='data')


class AutomationUpdateWithWhereUniqueWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('AutomationWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('AutomationUpdateWithoutProjectDataInput'), graphql_name='data')


class AutomationUpdateWithoutActionsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'trigger', 'is_active', 'project', 'created_by')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    trigger = sgqlc.types.Field(AutomationTriggerUpdateOneRequiredWithoutAutomationInput, graphql_name='trigger')
    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutAutomationsInput', graphql_name='project')
    created_by = sgqlc.types.Field('UserUpdateOneWithoutAutomationsInput', graphql_name='createdBy')


class AutomationUpdateWithoutCreatedByDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'trigger', 'actions', 'is_active', 'project')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    trigger = sgqlc.types.Field(AutomationTriggerUpdateOneRequiredWithoutAutomationInput, graphql_name='trigger')
    actions = sgqlc.types.Field(AutomationActionUpdateManyWithoutAutomationInput, graphql_name='actions')
    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutAutomationsInput', graphql_name='project')


class AutomationUpdateWithoutProjectDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'trigger', 'actions', 'is_active', 'created_by')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    trigger = sgqlc.types.Field(AutomationTriggerUpdateOneRequiredWithoutAutomationInput, graphql_name='trigger')
    actions = sgqlc.types.Field(AutomationActionUpdateManyWithoutAutomationInput, graphql_name='actions')
    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    created_by = sgqlc.types.Field('UserUpdateOneWithoutAutomationsInput', graphql_name='createdBy')


class AutomationUpdateWithoutTriggerDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'actions', 'is_active', 'project', 'created_by')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    actions = sgqlc.types.Field(AutomationActionUpdateManyWithoutAutomationInput, graphql_name='actions')
    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutAutomationsInput', graphql_name='project')
    created_by = sgqlc.types.Field('UserUpdateOneWithoutAutomationsInput', graphql_name='createdBy')


class AutomationUpsertWithWhereUniqueWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('AutomationWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(AutomationUpdateWithoutCreatedByDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(AutomationCreateWithoutCreatedByInput), graphql_name='create')


class AutomationUpsertWithWhereUniqueWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('AutomationWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(AutomationUpdateWithoutProjectDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(AutomationCreateWithoutProjectInput), graphql_name='create')


class AutomationUpsertWithoutActionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(AutomationUpdateWithoutActionsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(AutomationCreateWithoutActionsInput), graphql_name='create')


class AutomationUpsertWithoutTriggerInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(AutomationUpdateWithoutTriggerDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(AutomationCreateWithoutTriggerInput), graphql_name='create')


class AutomationWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'trigger', 'actions_every', 'actions_some', 'actions_none', 'is_active', 'is_active_not', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'project', 'created_by', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    trigger = sgqlc.types.Field(AutomationTriggerWhereInput, graphql_name='trigger')
    actions_every = sgqlc.types.Field(AutomationActionWhereInput, graphql_name='actions_every')
    actions_some = sgqlc.types.Field(AutomationActionWhereInput, graphql_name='actions_some')
    actions_none = sgqlc.types.Field(AutomationActionWhereInput, graphql_name='actions_none')
    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    is_active_not = sgqlc.types.Field(Boolean, graphql_name='isActive_not')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    project = sgqlc.types.Field('ProjectWhereInput', graphql_name='project')
    created_by = sgqlc.types.Field('UserWhereInput', graphql_name='createdBy')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationWhereInput')), graphql_name='NOT')


class AutomationWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class BarChartMetadataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('x_axis', 'y_axis')
    x_axis = sgqlc.types.Field(sgqlc.types.non_null('BarChartXAxisInput'), graphql_name='xAxis')
    y_axis = sgqlc.types.Field(sgqlc.types.non_null('BarChartYAxisInput'), graphql_name='yAxis')


class BarChartXAxisInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('title', 'type', 'interval', 'custom_field_name', 'custom_field_type', 'custom_field_reference_project_id')
    title = sgqlc.types.Field(String, graphql_name='title')
    type = sgqlc.types.Field(sgqlc.types.non_null(BarChartXAxisType), graphql_name='type')
    interval = sgqlc.types.Field(BarChartXAxisInterval, graphql_name='interval')
    custom_field_name = sgqlc.types.Field(String, graphql_name='customFieldName')
    custom_field_type = sgqlc.types.Field(CustomFieldType, graphql_name='customFieldType')
    custom_field_reference_project_id = sgqlc.types.Field(String, graphql_name='customFieldReferenceProjectId')


class BarChartYAxisInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('title', 'filter', 'function', 'custom_field_name', 'custom_field_type', 'custom_field_reference_project_id')
    title = sgqlc.types.Field(String, graphql_name='title')
    filter = sgqlc.types.Field('TodoFilterInput', graphql_name='filter')
    function = sgqlc.types.Field(ChartSegmentValueFunctions, graphql_name='function')
    custom_field_name = sgqlc.types.Field(String, graphql_name='customFieldName')
    custom_field_type = sgqlc.types.Field(CustomFieldType, graphql_name='customFieldType')
    custom_field_reference_project_id = sgqlc.types.Field(String, graphql_name='customFieldReferenceProjectId')


class CancelCompanySubscriptionPlanInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id',)
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')


class ChangeCompanySubscriptionPlanInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id', 'plan')
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')
    plan = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='plan')


class ChartFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('dashboard_id', 'todo_filter')
    dashboard_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='dashboardId')
    todo_filter = sgqlc.types.Field('TodoFilterInput', graphql_name='todoFilter')


class ChartMetadataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('bar_chart',)
    bar_chart = sgqlc.types.Field(BarChartMetadataInput, graphql_name='barChart')


class ChartSegmentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('title', 'color', 'uid', 'chart_segment_values', 'formula')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(String, graphql_name='color')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    chart_segment_values = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ChartSegmentValueInput'))), graphql_name='chartSegmentValues')
    formula = sgqlc.types.Field(sgqlc.types.non_null('FormulaInput'), graphql_name='formula')


class ChartSegmentValueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'project_id', 'custom_field_id', 'function', 'filter')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    custom_field_id = sgqlc.types.Field(String, graphql_name='customFieldId')
    function = sgqlc.types.Field(ChartSegmentValueFunctions, graphql_name='function')
    filter = sgqlc.types.Field('TodoFilterInput', graphql_name='filter')


class ChatFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id',)
    project_id = sgqlc.types.Field(String, graphql_name='projectId')


class ChecklistCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'position', 'todo', 'created_by', 'checklist_items')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    todo = sgqlc.types.Field(sgqlc.types.non_null('TodoCreateOneWithoutChecklistsInput'), graphql_name='todo')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutChecklistsInput'), graphql_name='createdBy')
    checklist_items = sgqlc.types.Field('ChecklistItemCreateManyWithoutChecklistInput', graphql_name='checklistItems')


class ChecklistCreateManyWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistCreateWithoutCreatedByInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistWhereUniqueInput')), graphql_name='connect')


class ChecklistCreateManyWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistCreateWithoutTodoInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistWhereUniqueInput')), graphql_name='connect')


class ChecklistCreateOneWithoutChecklistItemsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('ChecklistCreateWithoutChecklistItemsInput', graphql_name='create')
    connect = sgqlc.types.Field('ChecklistWhereUniqueInput', graphql_name='connect')


class ChecklistCreateWithoutChecklistItemsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'position', 'todo', 'created_by')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    todo = sgqlc.types.Field(sgqlc.types.non_null('TodoCreateOneWithoutChecklistsInput'), graphql_name='todo')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutChecklistsInput'), graphql_name='createdBy')


class ChecklistCreateWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'position', 'todo', 'checklist_items')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    todo = sgqlc.types.Field(sgqlc.types.non_null('TodoCreateOneWithoutChecklistsInput'), graphql_name='todo')
    checklist_items = sgqlc.types.Field('ChecklistItemCreateManyWithoutChecklistInput', graphql_name='checklistItems')


class ChecklistCreateWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'position', 'created_by', 'checklist_items')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutChecklistsInput'), graphql_name='createdBy')
    checklist_items = sgqlc.types.Field('ChecklistItemCreateManyWithoutChecklistInput', graphql_name='checklistItems')


class ChecklistItemCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'done', 'position', 'started_at', 'dued_at', 'created_by', 'checklist', 'checklist_item_users')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutChecklistItemsInput'), graphql_name='createdBy')
    checklist = sgqlc.types.Field(sgqlc.types.non_null(ChecklistCreateOneWithoutChecklistItemsInput), graphql_name='checklist')
    checklist_item_users = sgqlc.types.Field('ChecklistItemUserCreateManyWithoutChecklistItemInput', graphql_name='checklistItemUsers')


class ChecklistItemCreateManyWithoutChecklistInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemCreateWithoutChecklistInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemWhereUniqueInput')), graphql_name='connect')


class ChecklistItemCreateManyWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemCreateWithoutCreatedByInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemWhereUniqueInput')), graphql_name='connect')


class ChecklistItemCreateOneWithoutChecklistItemUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('ChecklistItemCreateWithoutChecklistItemUsersInput', graphql_name='create')
    connect = sgqlc.types.Field('ChecklistItemWhereUniqueInput', graphql_name='connect')


class ChecklistItemCreateWithoutChecklistInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'done', 'position', 'started_at', 'dued_at', 'created_by', 'checklist_item_users')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutChecklistItemsInput'), graphql_name='createdBy')
    checklist_item_users = sgqlc.types.Field('ChecklistItemUserCreateManyWithoutChecklistItemInput', graphql_name='checklistItemUsers')


class ChecklistItemCreateWithoutChecklistItemUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'done', 'position', 'started_at', 'dued_at', 'created_by', 'checklist')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutChecklistItemsInput'), graphql_name='createdBy')
    checklist = sgqlc.types.Field(sgqlc.types.non_null(ChecklistCreateOneWithoutChecklistItemsInput), graphql_name='checklist')


class ChecklistItemCreateWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'done', 'position', 'started_at', 'dued_at', 'checklist', 'checklist_item_users')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    checklist = sgqlc.types.Field(sgqlc.types.non_null(ChecklistCreateOneWithoutChecklistItemsInput), graphql_name='checklist')
    checklist_item_users = sgqlc.types.Field('ChecklistItemUserCreateManyWithoutChecklistItemInput', graphql_name='checklistItemUsers')


class ChecklistItemFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('q', 'done', 'todo_done', 'exclude_archived_projects', 'assignee_ids')
    q = sgqlc.types.Field(String, graphql_name='q')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    todo_done = sgqlc.types.Field(Boolean, graphql_name='todoDone')
    exclude_archived_projects = sgqlc.types.Field(Boolean, graphql_name='excludeArchivedProjects')
    assignee_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='assigneeIds')


class ChecklistItemScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'title', 'title_not', 'title_in', 'title_not_in', 'title_lt', 'title_lte', 'title_gt', 'title_gte', 'title_contains', 'title_not_contains', 'title_starts_with', 'title_not_starts_with', 'title_ends_with', 'title_not_ends_with', 'done', 'done_not', 'position', 'position_not', 'position_in', 'position_not_in', 'position_lt', 'position_lte', 'position_gt', 'position_gte', 'started_at', 'started_at_not', 'started_at_in', 'started_at_not_in', 'started_at_lt', 'started_at_lte', 'started_at_gt', 'started_at_gte', 'dued_at', 'dued_at_not', 'dued_at_in', 'dued_at_not_in', 'dued_at_lt', 'dued_at_lte', 'dued_at_gt', 'dued_at_gte', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    title = sgqlc.types.Field(String, graphql_name='title')
    title_not = sgqlc.types.Field(String, graphql_name='title_not')
    title_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_in')
    title_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_not_in')
    title_lt = sgqlc.types.Field(String, graphql_name='title_lt')
    title_lte = sgqlc.types.Field(String, graphql_name='title_lte')
    title_gt = sgqlc.types.Field(String, graphql_name='title_gt')
    title_gte = sgqlc.types.Field(String, graphql_name='title_gte')
    title_contains = sgqlc.types.Field(String, graphql_name='title_contains')
    title_not_contains = sgqlc.types.Field(String, graphql_name='title_not_contains')
    title_starts_with = sgqlc.types.Field(String, graphql_name='title_starts_with')
    title_not_starts_with = sgqlc.types.Field(String, graphql_name='title_not_starts_with')
    title_ends_with = sgqlc.types.Field(String, graphql_name='title_ends_with')
    title_not_ends_with = sgqlc.types.Field(String, graphql_name='title_not_ends_with')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    done_not = sgqlc.types.Field(Boolean, graphql_name='done_not')
    position = sgqlc.types.Field(Float, graphql_name='position')
    position_not = sgqlc.types.Field(Float, graphql_name='position_not')
    position_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_in')
    position_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_not_in')
    position_lt = sgqlc.types.Field(Float, graphql_name='position_lt')
    position_lte = sgqlc.types.Field(Float, graphql_name='position_lte')
    position_gt = sgqlc.types.Field(Float, graphql_name='position_gt')
    position_gte = sgqlc.types.Field(Float, graphql_name='position_gte')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    started_at_not = sgqlc.types.Field(DateTime, graphql_name='startedAt_not')
    started_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='startedAt_in')
    started_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='startedAt_not_in')
    started_at_lt = sgqlc.types.Field(DateTime, graphql_name='startedAt_lt')
    started_at_lte = sgqlc.types.Field(DateTime, graphql_name='startedAt_lte')
    started_at_gt = sgqlc.types.Field(DateTime, graphql_name='startedAt_gt')
    started_at_gte = sgqlc.types.Field(DateTime, graphql_name='startedAt_gte')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    dued_at_not = sgqlc.types.Field(DateTime, graphql_name='duedAt_not')
    dued_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='duedAt_in')
    dued_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='duedAt_not_in')
    dued_at_lt = sgqlc.types.Field(DateTime, graphql_name='duedAt_lt')
    dued_at_lte = sgqlc.types.Field(DateTime, graphql_name='duedAt_lte')
    dued_at_gt = sgqlc.types.Field(DateTime, graphql_name='duedAt_gt')
    dued_at_gte = sgqlc.types.Field(DateTime, graphql_name='duedAt_gte')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemScalarWhereInput')), graphql_name='NOT')


class ChecklistItemSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('ChecklistItemWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemSubscriptionWhereInput')), graphql_name='NOT')


class ChecklistItemUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'done', 'position', 'started_at', 'dued_at', 'created_by', 'checklist', 'checklist_item_users')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    position = sgqlc.types.Field(Float, graphql_name='position')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutChecklistItemsInput', graphql_name='createdBy')
    checklist = sgqlc.types.Field('ChecklistUpdateOneRequiredWithoutChecklistItemsInput', graphql_name='checklist')
    checklist_item_users = sgqlc.types.Field('ChecklistItemUserUpdateManyWithoutChecklistItemInput', graphql_name='checklistItemUsers')


class ChecklistItemUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'done', 'position', 'started_at', 'dued_at')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    position = sgqlc.types.Field(Float, graphql_name='position')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')


class ChecklistItemUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'done', 'position', 'started_at', 'dued_at')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    position = sgqlc.types.Field(Float, graphql_name='position')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')


class ChecklistItemUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(ChecklistItemScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(ChecklistItemUpdateManyDataInput), graphql_name='data')


class ChecklistItemUpdateManyWithoutChecklistInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ChecklistItemCreateWithoutChecklistInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemUpdateWithWhereUniqueWithoutChecklistInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemUpsertWithWhereUniqueWithoutChecklistInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ChecklistItemScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ChecklistItemUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class ChecklistItemUpdateManyWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ChecklistItemCreateWithoutCreatedByInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemUpdateWithWhereUniqueWithoutCreatedByInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemUpsertWithWhereUniqueWithoutCreatedByInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ChecklistItemScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ChecklistItemUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class ChecklistItemUpdateOneRequiredWithoutChecklistItemUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(ChecklistItemCreateWithoutChecklistItemUsersInput, graphql_name='create')
    update = sgqlc.types.Field('ChecklistItemUpdateWithoutChecklistItemUsersDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('ChecklistItemUpsertWithoutChecklistItemUsersInput', graphql_name='upsert')
    connect = sgqlc.types.Field('ChecklistItemWhereUniqueInput', graphql_name='connect')


class ChecklistItemUpdateWithWhereUniqueWithoutChecklistInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('ChecklistItemWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('ChecklistItemUpdateWithoutChecklistDataInput'), graphql_name='data')


class ChecklistItemUpdateWithWhereUniqueWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('ChecklistItemWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('ChecklistItemUpdateWithoutCreatedByDataInput'), graphql_name='data')


class ChecklistItemUpdateWithoutChecklistDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'done', 'position', 'started_at', 'dued_at', 'created_by', 'checklist_item_users')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    position = sgqlc.types.Field(Float, graphql_name='position')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutChecklistItemsInput', graphql_name='createdBy')
    checklist_item_users = sgqlc.types.Field('ChecklistItemUserUpdateManyWithoutChecklistItemInput', graphql_name='checklistItemUsers')


class ChecklistItemUpdateWithoutChecklistItemUsersDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'done', 'position', 'started_at', 'dued_at', 'created_by', 'checklist')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    position = sgqlc.types.Field(Float, graphql_name='position')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutChecklistItemsInput', graphql_name='createdBy')
    checklist = sgqlc.types.Field('ChecklistUpdateOneRequiredWithoutChecklistItemsInput', graphql_name='checklist')


class ChecklistItemUpdateWithoutCreatedByDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'done', 'position', 'started_at', 'dued_at', 'checklist', 'checklist_item_users')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    position = sgqlc.types.Field(Float, graphql_name='position')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    checklist = sgqlc.types.Field('ChecklistUpdateOneRequiredWithoutChecklistItemsInput', graphql_name='checklist')
    checklist_item_users = sgqlc.types.Field('ChecklistItemUserUpdateManyWithoutChecklistItemInput', graphql_name='checklistItemUsers')


class ChecklistItemUpsertWithWhereUniqueWithoutChecklistInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('ChecklistItemWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(ChecklistItemUpdateWithoutChecklistDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ChecklistItemCreateWithoutChecklistInput), graphql_name='create')


class ChecklistItemUpsertWithWhereUniqueWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('ChecklistItemWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(ChecklistItemUpdateWithoutCreatedByDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ChecklistItemCreateWithoutCreatedByInput), graphql_name='create')


class ChecklistItemUpsertWithoutChecklistItemUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(ChecklistItemUpdateWithoutChecklistItemUsersDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ChecklistItemCreateWithoutChecklistItemUsersInput), graphql_name='create')


class ChecklistItemUserCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'checklist_item', 'user')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    checklist_item = sgqlc.types.Field(sgqlc.types.non_null(ChecklistItemCreateOneWithoutChecklistItemUsersInput), graphql_name='checklistItem')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutChecklistItemUsersInput'), graphql_name='user')


class ChecklistItemUserCreateManyWithoutChecklistItemInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemUserCreateWithoutChecklistItemInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemUserWhereUniqueInput')), graphql_name='connect')


class ChecklistItemUserCreateManyWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemUserCreateWithoutUserInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemUserWhereUniqueInput')), graphql_name='connect')


class ChecklistItemUserCreateWithoutChecklistItemInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'user')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutChecklistItemUsersInput'), graphql_name='user')


class ChecklistItemUserCreateWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'checklist_item')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    checklist_item = sgqlc.types.Field(sgqlc.types.non_null(ChecklistItemCreateOneWithoutChecklistItemUsersInput), graphql_name='checklistItem')


class ChecklistItemUserScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemUserScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemUserScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemUserScalarWhereInput')), graphql_name='NOT')


class ChecklistItemUserSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('ChecklistItemUserWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemUserSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemUserSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemUserSubscriptionWhereInput')), graphql_name='NOT')


class ChecklistItemUserUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'checklist_item', 'user')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    checklist_item = sgqlc.types.Field(ChecklistItemUpdateOneRequiredWithoutChecklistItemUsersInput, graphql_name='checklistItem')
    user = sgqlc.types.Field('UserUpdateOneRequiredWithoutChecklistItemUsersInput', graphql_name='user')


class ChecklistItemUserUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid',)
    uid = sgqlc.types.Field(String, graphql_name='uid')


class ChecklistItemUserUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid',)
    uid = sgqlc.types.Field(String, graphql_name='uid')


class ChecklistItemUserUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(ChecklistItemUserScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(ChecklistItemUserUpdateManyDataInput), graphql_name='data')


class ChecklistItemUserUpdateManyWithoutChecklistItemInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ChecklistItemUserCreateWithoutChecklistItemInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemUserWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemUserWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemUserWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemUserWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemUserUpdateWithWhereUniqueWithoutChecklistItemInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemUserUpsertWithWhereUniqueWithoutChecklistItemInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ChecklistItemUserScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ChecklistItemUserUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class ChecklistItemUserUpdateManyWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ChecklistItemUserCreateWithoutUserInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemUserWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemUserWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemUserWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemUserWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemUserUpdateWithWhereUniqueWithoutUserInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemUserUpsertWithWhereUniqueWithoutUserInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ChecklistItemUserScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ChecklistItemUserUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class ChecklistItemUserUpdateWithWhereUniqueWithoutChecklistItemInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('ChecklistItemUserWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('ChecklistItemUserUpdateWithoutChecklistItemDataInput'), graphql_name='data')


class ChecklistItemUserUpdateWithWhereUniqueWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('ChecklistItemUserWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('ChecklistItemUserUpdateWithoutUserDataInput'), graphql_name='data')


class ChecklistItemUserUpdateWithoutChecklistItemDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'user')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    user = sgqlc.types.Field('UserUpdateOneRequiredWithoutChecklistItemUsersInput', graphql_name='user')


class ChecklistItemUserUpdateWithoutUserDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'checklist_item')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    checklist_item = sgqlc.types.Field(ChecklistItemUpdateOneRequiredWithoutChecklistItemUsersInput, graphql_name='checklistItem')


class ChecklistItemUserUpsertWithWhereUniqueWithoutChecklistItemInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('ChecklistItemUserWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(ChecklistItemUserUpdateWithoutChecklistItemDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ChecklistItemUserCreateWithoutChecklistItemInput), graphql_name='create')


class ChecklistItemUserUpsertWithWhereUniqueWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('ChecklistItemUserWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(ChecklistItemUserUpdateWithoutUserDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ChecklistItemUserCreateWithoutUserInput), graphql_name='create')


class ChecklistItemUserWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'checklist_item', 'user', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    checklist_item = sgqlc.types.Field('ChecklistItemWhereInput', graphql_name='checklistItem')
    user = sgqlc.types.Field('UserWhereInput', graphql_name='user')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemUserWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemUserWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemUserWhereInput')), graphql_name='NOT')


class ChecklistItemUserWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class ChecklistItemWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'title', 'title_not', 'title_in', 'title_not_in', 'title_lt', 'title_lte', 'title_gt', 'title_gte', 'title_contains', 'title_not_contains', 'title_starts_with', 'title_not_starts_with', 'title_ends_with', 'title_not_ends_with', 'done', 'done_not', 'position', 'position_not', 'position_in', 'position_not_in', 'position_lt', 'position_lte', 'position_gt', 'position_gte', 'started_at', 'started_at_not', 'started_at_in', 'started_at_not_in', 'started_at_lt', 'started_at_lte', 'started_at_gt', 'started_at_gte', 'dued_at', 'dued_at_not', 'dued_at_in', 'dued_at_not_in', 'dued_at_lt', 'dued_at_lte', 'dued_at_gt', 'dued_at_gte', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'created_by', 'checklist', 'checklist_item_users_every', 'checklist_item_users_some', 'checklist_item_users_none', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    title = sgqlc.types.Field(String, graphql_name='title')
    title_not = sgqlc.types.Field(String, graphql_name='title_not')
    title_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_in')
    title_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_not_in')
    title_lt = sgqlc.types.Field(String, graphql_name='title_lt')
    title_lte = sgqlc.types.Field(String, graphql_name='title_lte')
    title_gt = sgqlc.types.Field(String, graphql_name='title_gt')
    title_gte = sgqlc.types.Field(String, graphql_name='title_gte')
    title_contains = sgqlc.types.Field(String, graphql_name='title_contains')
    title_not_contains = sgqlc.types.Field(String, graphql_name='title_not_contains')
    title_starts_with = sgqlc.types.Field(String, graphql_name='title_starts_with')
    title_not_starts_with = sgqlc.types.Field(String, graphql_name='title_not_starts_with')
    title_ends_with = sgqlc.types.Field(String, graphql_name='title_ends_with')
    title_not_ends_with = sgqlc.types.Field(String, graphql_name='title_not_ends_with')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    done_not = sgqlc.types.Field(Boolean, graphql_name='done_not')
    position = sgqlc.types.Field(Float, graphql_name='position')
    position_not = sgqlc.types.Field(Float, graphql_name='position_not')
    position_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_in')
    position_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_not_in')
    position_lt = sgqlc.types.Field(Float, graphql_name='position_lt')
    position_lte = sgqlc.types.Field(Float, graphql_name='position_lte')
    position_gt = sgqlc.types.Field(Float, graphql_name='position_gt')
    position_gte = sgqlc.types.Field(Float, graphql_name='position_gte')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    started_at_not = sgqlc.types.Field(DateTime, graphql_name='startedAt_not')
    started_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='startedAt_in')
    started_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='startedAt_not_in')
    started_at_lt = sgqlc.types.Field(DateTime, graphql_name='startedAt_lt')
    started_at_lte = sgqlc.types.Field(DateTime, graphql_name='startedAt_lte')
    started_at_gt = sgqlc.types.Field(DateTime, graphql_name='startedAt_gt')
    started_at_gte = sgqlc.types.Field(DateTime, graphql_name='startedAt_gte')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    dued_at_not = sgqlc.types.Field(DateTime, graphql_name='duedAt_not')
    dued_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='duedAt_in')
    dued_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='duedAt_not_in')
    dued_at_lt = sgqlc.types.Field(DateTime, graphql_name='duedAt_lt')
    dued_at_lte = sgqlc.types.Field(DateTime, graphql_name='duedAt_lte')
    dued_at_gt = sgqlc.types.Field(DateTime, graphql_name='duedAt_gt')
    dued_at_gte = sgqlc.types.Field(DateTime, graphql_name='duedAt_gte')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    created_by = sgqlc.types.Field('UserWhereInput', graphql_name='createdBy')
    checklist = sgqlc.types.Field('ChecklistWhereInput', graphql_name='checklist')
    checklist_item_users_every = sgqlc.types.Field(ChecklistItemUserWhereInput, graphql_name='checklistItemUsers_every')
    checklist_item_users_some = sgqlc.types.Field(ChecklistItemUserWhereInput, graphql_name='checklistItemUsers_some')
    checklist_item_users_none = sgqlc.types.Field(ChecklistItemUserWhereInput, graphql_name='checklistItemUsers_none')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemWhereInput')), graphql_name='NOT')


class ChecklistItemWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class ChecklistScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'title', 'title_not', 'title_in', 'title_not_in', 'title_lt', 'title_lte', 'title_gt', 'title_gte', 'title_contains', 'title_not_contains', 'title_starts_with', 'title_not_starts_with', 'title_ends_with', 'title_not_ends_with', 'position', 'position_not', 'position_in', 'position_not_in', 'position_lt', 'position_lte', 'position_gt', 'position_gte', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    title = sgqlc.types.Field(String, graphql_name='title')
    title_not = sgqlc.types.Field(String, graphql_name='title_not')
    title_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_in')
    title_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_not_in')
    title_lt = sgqlc.types.Field(String, graphql_name='title_lt')
    title_lte = sgqlc.types.Field(String, graphql_name='title_lte')
    title_gt = sgqlc.types.Field(String, graphql_name='title_gt')
    title_gte = sgqlc.types.Field(String, graphql_name='title_gte')
    title_contains = sgqlc.types.Field(String, graphql_name='title_contains')
    title_not_contains = sgqlc.types.Field(String, graphql_name='title_not_contains')
    title_starts_with = sgqlc.types.Field(String, graphql_name='title_starts_with')
    title_not_starts_with = sgqlc.types.Field(String, graphql_name='title_not_starts_with')
    title_ends_with = sgqlc.types.Field(String, graphql_name='title_ends_with')
    title_not_ends_with = sgqlc.types.Field(String, graphql_name='title_not_ends_with')
    position = sgqlc.types.Field(Float, graphql_name='position')
    position_not = sgqlc.types.Field(Float, graphql_name='position_not')
    position_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_in')
    position_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_not_in')
    position_lt = sgqlc.types.Field(Float, graphql_name='position_lt')
    position_lte = sgqlc.types.Field(Float, graphql_name='position_lte')
    position_gt = sgqlc.types.Field(Float, graphql_name='position_gt')
    position_gte = sgqlc.types.Field(Float, graphql_name='position_gte')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistScalarWhereInput')), graphql_name='NOT')


class ChecklistSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('ChecklistWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistSubscriptionWhereInput')), graphql_name='NOT')


class ChecklistUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'position', 'todo', 'created_by', 'checklist_items')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    position = sgqlc.types.Field(Float, graphql_name='position')
    todo = sgqlc.types.Field('TodoUpdateOneRequiredWithoutChecklistsInput', graphql_name='todo')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutChecklistsInput', graphql_name='createdBy')
    checklist_items = sgqlc.types.Field(ChecklistItemUpdateManyWithoutChecklistInput, graphql_name='checklistItems')


class ChecklistUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'position')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    position = sgqlc.types.Field(Float, graphql_name='position')


class ChecklistUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'position')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    position = sgqlc.types.Field(Float, graphql_name='position')


class ChecklistUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(ChecklistScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(ChecklistUpdateManyDataInput), graphql_name='data')


class ChecklistUpdateManyWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ChecklistCreateWithoutCreatedByInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistUpdateWithWhereUniqueWithoutCreatedByInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistUpsertWithWhereUniqueWithoutCreatedByInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ChecklistScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ChecklistUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class ChecklistUpdateManyWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ChecklistCreateWithoutTodoInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistUpdateWithWhereUniqueWithoutTodoInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistUpsertWithWhereUniqueWithoutTodoInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ChecklistScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ChecklistUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class ChecklistUpdateOneRequiredWithoutChecklistItemsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(ChecklistCreateWithoutChecklistItemsInput, graphql_name='create')
    update = sgqlc.types.Field('ChecklistUpdateWithoutChecklistItemsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('ChecklistUpsertWithoutChecklistItemsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('ChecklistWhereUniqueInput', graphql_name='connect')


class ChecklistUpdateWithWhereUniqueWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('ChecklistWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('ChecklistUpdateWithoutCreatedByDataInput'), graphql_name='data')


class ChecklistUpdateWithWhereUniqueWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('ChecklistWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('ChecklistUpdateWithoutTodoDataInput'), graphql_name='data')


class ChecklistUpdateWithoutChecklistItemsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'position', 'todo', 'created_by')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    position = sgqlc.types.Field(Float, graphql_name='position')
    todo = sgqlc.types.Field('TodoUpdateOneRequiredWithoutChecklistsInput', graphql_name='todo')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutChecklistsInput', graphql_name='createdBy')


class ChecklistUpdateWithoutCreatedByDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'position', 'todo', 'checklist_items')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    position = sgqlc.types.Field(Float, graphql_name='position')
    todo = sgqlc.types.Field('TodoUpdateOneRequiredWithoutChecklistsInput', graphql_name='todo')
    checklist_items = sgqlc.types.Field(ChecklistItemUpdateManyWithoutChecklistInput, graphql_name='checklistItems')


class ChecklistUpdateWithoutTodoDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'position', 'created_by', 'checklist_items')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    position = sgqlc.types.Field(Float, graphql_name='position')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutChecklistsInput', graphql_name='createdBy')
    checklist_items = sgqlc.types.Field(ChecklistItemUpdateManyWithoutChecklistInput, graphql_name='checklistItems')


class ChecklistUpsertWithWhereUniqueWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('ChecklistWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(ChecklistUpdateWithoutCreatedByDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ChecklistCreateWithoutCreatedByInput), graphql_name='create')


class ChecklistUpsertWithWhereUniqueWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('ChecklistWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(ChecklistUpdateWithoutTodoDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ChecklistCreateWithoutTodoInput), graphql_name='create')


class ChecklistUpsertWithoutChecklistItemsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(ChecklistUpdateWithoutChecklistItemsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ChecklistCreateWithoutChecklistItemsInput), graphql_name='create')


class ChecklistWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'title', 'title_not', 'title_in', 'title_not_in', 'title_lt', 'title_lte', 'title_gt', 'title_gte', 'title_contains', 'title_not_contains', 'title_starts_with', 'title_not_starts_with', 'title_ends_with', 'title_not_ends_with', 'position', 'position_not', 'position_in', 'position_not_in', 'position_lt', 'position_lte', 'position_gt', 'position_gte', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'todo', 'created_by', 'checklist_items_every', 'checklist_items_some', 'checklist_items_none', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    title = sgqlc.types.Field(String, graphql_name='title')
    title_not = sgqlc.types.Field(String, graphql_name='title_not')
    title_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_in')
    title_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_not_in')
    title_lt = sgqlc.types.Field(String, graphql_name='title_lt')
    title_lte = sgqlc.types.Field(String, graphql_name='title_lte')
    title_gt = sgqlc.types.Field(String, graphql_name='title_gt')
    title_gte = sgqlc.types.Field(String, graphql_name='title_gte')
    title_contains = sgqlc.types.Field(String, graphql_name='title_contains')
    title_not_contains = sgqlc.types.Field(String, graphql_name='title_not_contains')
    title_starts_with = sgqlc.types.Field(String, graphql_name='title_starts_with')
    title_not_starts_with = sgqlc.types.Field(String, graphql_name='title_not_starts_with')
    title_ends_with = sgqlc.types.Field(String, graphql_name='title_ends_with')
    title_not_ends_with = sgqlc.types.Field(String, graphql_name='title_not_ends_with')
    position = sgqlc.types.Field(Float, graphql_name='position')
    position_not = sgqlc.types.Field(Float, graphql_name='position_not')
    position_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_in')
    position_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_not_in')
    position_lt = sgqlc.types.Field(Float, graphql_name='position_lt')
    position_lte = sgqlc.types.Field(Float, graphql_name='position_lte')
    position_gt = sgqlc.types.Field(Float, graphql_name='position_gt')
    position_gte = sgqlc.types.Field(Float, graphql_name='position_gte')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    todo = sgqlc.types.Field('TodoWhereInput', graphql_name='todo')
    created_by = sgqlc.types.Field('UserWhereInput', graphql_name='createdBy')
    checklist_items_every = sgqlc.types.Field(ChecklistItemWhereInput, graphql_name='checklistItems_every')
    checklist_items_some = sgqlc.types.Field(ChecklistItemWhereInput, graphql_name='checklistItems_some')
    checklist_items_none = sgqlc.types.Field(ChecklistItemWhereInput, graphql_name='checklistItems_none')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistWhereInput')), graphql_name='NOT')


class ChecklistWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class CommentCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'html', 'text', 'category', 'activity', 'user', 'discussion', 'status_update', 'todo', 'files')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    category = sgqlc.types.Field(sgqlc.types.non_null(CommentCategory), graphql_name='category')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutCommentInput, graphql_name='activity')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutCommentsInput'), graphql_name='user')
    discussion = sgqlc.types.Field('DiscussionCreateOneWithoutCommentsInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateCreateOneWithoutCommentsInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoCreateOneWithoutCommentsInput', graphql_name='todo')
    files = sgqlc.types.Field('FileCreateManyWithoutCommentInput', graphql_name='files')


class CommentCreateManyWithoutDiscussionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentCreateWithoutDiscussionInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentWhereUniqueInput')), graphql_name='connect')


class CommentCreateManyWithoutStatusUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentCreateWithoutStatusUpdateInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentWhereUniqueInput')), graphql_name='connect')


class CommentCreateManyWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentCreateWithoutTodoInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentWhereUniqueInput')), graphql_name='connect')


class CommentCreateManyWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentCreateWithoutUserInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentWhereUniqueInput')), graphql_name='connect')


class CommentCreateOneWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('CommentCreateWithoutActivityInput', graphql_name='create')
    connect = sgqlc.types.Field('CommentWhereUniqueInput', graphql_name='connect')


class CommentCreateOneWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('CommentCreateWithoutFilesInput', graphql_name='create')
    connect = sgqlc.types.Field('CommentWhereUniqueInput', graphql_name='connect')


class CommentCreateWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'html', 'text', 'category', 'user', 'discussion', 'status_update', 'todo', 'files')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    category = sgqlc.types.Field(sgqlc.types.non_null(CommentCategory), graphql_name='category')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutCommentsInput'), graphql_name='user')
    discussion = sgqlc.types.Field('DiscussionCreateOneWithoutCommentsInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateCreateOneWithoutCommentsInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoCreateOneWithoutCommentsInput', graphql_name='todo')
    files = sgqlc.types.Field('FileCreateManyWithoutCommentInput', graphql_name='files')


class CommentCreateWithoutDiscussionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'html', 'text', 'category', 'activity', 'user', 'status_update', 'todo', 'files')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    category = sgqlc.types.Field(sgqlc.types.non_null(CommentCategory), graphql_name='category')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutCommentInput, graphql_name='activity')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutCommentsInput'), graphql_name='user')
    status_update = sgqlc.types.Field('StatusUpdateCreateOneWithoutCommentsInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoCreateOneWithoutCommentsInput', graphql_name='todo')
    files = sgqlc.types.Field('FileCreateManyWithoutCommentInput', graphql_name='files')


class CommentCreateWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'html', 'text', 'category', 'activity', 'user', 'discussion', 'status_update', 'todo')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    category = sgqlc.types.Field(sgqlc.types.non_null(CommentCategory), graphql_name='category')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutCommentInput, graphql_name='activity')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutCommentsInput'), graphql_name='user')
    discussion = sgqlc.types.Field('DiscussionCreateOneWithoutCommentsInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateCreateOneWithoutCommentsInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoCreateOneWithoutCommentsInput', graphql_name='todo')


class CommentCreateWithoutStatusUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'html', 'text', 'category', 'activity', 'user', 'discussion', 'todo', 'files')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    category = sgqlc.types.Field(sgqlc.types.non_null(CommentCategory), graphql_name='category')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutCommentInput, graphql_name='activity')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutCommentsInput'), graphql_name='user')
    discussion = sgqlc.types.Field('DiscussionCreateOneWithoutCommentsInput', graphql_name='discussion')
    todo = sgqlc.types.Field('TodoCreateOneWithoutCommentsInput', graphql_name='todo')
    files = sgqlc.types.Field('FileCreateManyWithoutCommentInput', graphql_name='files')


class CommentCreateWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'html', 'text', 'category', 'activity', 'user', 'discussion', 'status_update', 'files')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    category = sgqlc.types.Field(sgqlc.types.non_null(CommentCategory), graphql_name='category')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutCommentInput, graphql_name='activity')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutCommentsInput'), graphql_name='user')
    discussion = sgqlc.types.Field('DiscussionCreateOneWithoutCommentsInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateCreateOneWithoutCommentsInput', graphql_name='statusUpdate')
    files = sgqlc.types.Field('FileCreateManyWithoutCommentInput', graphql_name='files')


class CommentCreateWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'html', 'text', 'category', 'activity', 'discussion', 'status_update', 'todo', 'files')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    category = sgqlc.types.Field(sgqlc.types.non_null(CommentCategory), graphql_name='category')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutCommentInput, graphql_name='activity')
    discussion = sgqlc.types.Field('DiscussionCreateOneWithoutCommentsInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateCreateOneWithoutCommentsInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoCreateOneWithoutCommentsInput', graphql_name='todo')
    files = sgqlc.types.Field('FileCreateManyWithoutCommentInput', graphql_name='files')


class CommentScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'html', 'html_not', 'html_in', 'html_not_in', 'html_lt', 'html_lte', 'html_gt', 'html_gte', 'html_contains', 'html_not_contains', 'html_starts_with', 'html_not_starts_with', 'html_ends_with', 'html_not_ends_with', 'text', 'text_not', 'text_in', 'text_not_in', 'text_lt', 'text_lte', 'text_gt', 'text_gte', 'text_contains', 'text_not_contains', 'text_starts_with', 'text_not_starts_with', 'text_ends_with', 'text_not_ends_with', 'category', 'category_not', 'category_in', 'category_not_in', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    html = sgqlc.types.Field(String, graphql_name='html')
    html_not = sgqlc.types.Field(String, graphql_name='html_not')
    html_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='html_in')
    html_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='html_not_in')
    html_lt = sgqlc.types.Field(String, graphql_name='html_lt')
    html_lte = sgqlc.types.Field(String, graphql_name='html_lte')
    html_gt = sgqlc.types.Field(String, graphql_name='html_gt')
    html_gte = sgqlc.types.Field(String, graphql_name='html_gte')
    html_contains = sgqlc.types.Field(String, graphql_name='html_contains')
    html_not_contains = sgqlc.types.Field(String, graphql_name='html_not_contains')
    html_starts_with = sgqlc.types.Field(String, graphql_name='html_starts_with')
    html_not_starts_with = sgqlc.types.Field(String, graphql_name='html_not_starts_with')
    html_ends_with = sgqlc.types.Field(String, graphql_name='html_ends_with')
    html_not_ends_with = sgqlc.types.Field(String, graphql_name='html_not_ends_with')
    text = sgqlc.types.Field(String, graphql_name='text')
    text_not = sgqlc.types.Field(String, graphql_name='text_not')
    text_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='text_in')
    text_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='text_not_in')
    text_lt = sgqlc.types.Field(String, graphql_name='text_lt')
    text_lte = sgqlc.types.Field(String, graphql_name='text_lte')
    text_gt = sgqlc.types.Field(String, graphql_name='text_gt')
    text_gte = sgqlc.types.Field(String, graphql_name='text_gte')
    text_contains = sgqlc.types.Field(String, graphql_name='text_contains')
    text_not_contains = sgqlc.types.Field(String, graphql_name='text_not_contains')
    text_starts_with = sgqlc.types.Field(String, graphql_name='text_starts_with')
    text_not_starts_with = sgqlc.types.Field(String, graphql_name='text_not_starts_with')
    text_ends_with = sgqlc.types.Field(String, graphql_name='text_ends_with')
    text_not_ends_with = sgqlc.types.Field(String, graphql_name='text_not_ends_with')
    category = sgqlc.types.Field(CommentCategory, graphql_name='category')
    category_not = sgqlc.types.Field(CommentCategory, graphql_name='category_not')
    category_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CommentCategory)), graphql_name='category_in')
    category_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CommentCategory)), graphql_name='category_not_in')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentScalarWhereInput')), graphql_name='NOT')


class CommentSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('CommentWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentSubscriptionWhereInput')), graphql_name='NOT')


class CommentUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'html', 'text', 'category', 'activity', 'user', 'discussion', 'status_update', 'todo', 'files')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    html = sgqlc.types.Field(String, graphql_name='html')
    text = sgqlc.types.Field(String, graphql_name='text')
    category = sgqlc.types.Field(CommentCategory, graphql_name='category')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutCommentInput, graphql_name='activity')
    user = sgqlc.types.Field('UserUpdateOneRequiredWithoutCommentsInput', graphql_name='user')
    discussion = sgqlc.types.Field('DiscussionUpdateOneWithoutCommentsInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateUpdateOneWithoutCommentsInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoUpdateOneWithoutCommentsInput', graphql_name='todo')
    files = sgqlc.types.Field('FileUpdateManyWithoutCommentInput', graphql_name='files')


class CommentUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'html', 'text', 'category')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    html = sgqlc.types.Field(String, graphql_name='html')
    text = sgqlc.types.Field(String, graphql_name='text')
    category = sgqlc.types.Field(CommentCategory, graphql_name='category')


class CommentUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'html', 'text', 'category')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    html = sgqlc.types.Field(String, graphql_name='html')
    text = sgqlc.types.Field(String, graphql_name='text')
    category = sgqlc.types.Field(CommentCategory, graphql_name='category')


class CommentUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(CommentScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(CommentUpdateManyDataInput), graphql_name='data')


class CommentUpdateManyWithoutDiscussionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CommentCreateWithoutDiscussionInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentUpdateWithWhereUniqueWithoutDiscussionInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentUpsertWithWhereUniqueWithoutDiscussionInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CommentScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CommentUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class CommentUpdateManyWithoutStatusUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CommentCreateWithoutStatusUpdateInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentUpdateWithWhereUniqueWithoutStatusUpdateInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentUpsertWithWhereUniqueWithoutStatusUpdateInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CommentScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CommentUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class CommentUpdateManyWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CommentCreateWithoutTodoInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentUpdateWithWhereUniqueWithoutTodoInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentUpsertWithWhereUniqueWithoutTodoInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CommentScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CommentUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class CommentUpdateManyWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CommentCreateWithoutUserInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentUpdateWithWhereUniqueWithoutUserInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentUpsertWithWhereUniqueWithoutUserInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CommentScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CommentUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class CommentUpdateOneWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(CommentCreateWithoutActivityInput, graphql_name='create')
    update = sgqlc.types.Field('CommentUpdateWithoutActivityDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('CommentUpsertWithoutActivityInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('CommentWhereUniqueInput', graphql_name='connect')


class CommentUpdateOneWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(CommentCreateWithoutFilesInput, graphql_name='create')
    update = sgqlc.types.Field('CommentUpdateWithoutFilesDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('CommentUpsertWithoutFilesInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('CommentWhereUniqueInput', graphql_name='connect')


class CommentUpdateWithWhereUniqueWithoutDiscussionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('CommentWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('CommentUpdateWithoutDiscussionDataInput'), graphql_name='data')


class CommentUpdateWithWhereUniqueWithoutStatusUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('CommentWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('CommentUpdateWithoutStatusUpdateDataInput'), graphql_name='data')


class CommentUpdateWithWhereUniqueWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('CommentWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('CommentUpdateWithoutTodoDataInput'), graphql_name='data')


class CommentUpdateWithWhereUniqueWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('CommentWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('CommentUpdateWithoutUserDataInput'), graphql_name='data')


class CommentUpdateWithoutActivityDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'html', 'text', 'category', 'user', 'discussion', 'status_update', 'todo', 'files')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    html = sgqlc.types.Field(String, graphql_name='html')
    text = sgqlc.types.Field(String, graphql_name='text')
    category = sgqlc.types.Field(CommentCategory, graphql_name='category')
    user = sgqlc.types.Field('UserUpdateOneRequiredWithoutCommentsInput', graphql_name='user')
    discussion = sgqlc.types.Field('DiscussionUpdateOneWithoutCommentsInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateUpdateOneWithoutCommentsInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoUpdateOneWithoutCommentsInput', graphql_name='todo')
    files = sgqlc.types.Field('FileUpdateManyWithoutCommentInput', graphql_name='files')


class CommentUpdateWithoutDiscussionDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'html', 'text', 'category', 'activity', 'user', 'status_update', 'todo', 'files')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    html = sgqlc.types.Field(String, graphql_name='html')
    text = sgqlc.types.Field(String, graphql_name='text')
    category = sgqlc.types.Field(CommentCategory, graphql_name='category')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutCommentInput, graphql_name='activity')
    user = sgqlc.types.Field('UserUpdateOneRequiredWithoutCommentsInput', graphql_name='user')
    status_update = sgqlc.types.Field('StatusUpdateUpdateOneWithoutCommentsInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoUpdateOneWithoutCommentsInput', graphql_name='todo')
    files = sgqlc.types.Field('FileUpdateManyWithoutCommentInput', graphql_name='files')


class CommentUpdateWithoutFilesDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'html', 'text', 'category', 'activity', 'user', 'discussion', 'status_update', 'todo')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    html = sgqlc.types.Field(String, graphql_name='html')
    text = sgqlc.types.Field(String, graphql_name='text')
    category = sgqlc.types.Field(CommentCategory, graphql_name='category')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutCommentInput, graphql_name='activity')
    user = sgqlc.types.Field('UserUpdateOneRequiredWithoutCommentsInput', graphql_name='user')
    discussion = sgqlc.types.Field('DiscussionUpdateOneWithoutCommentsInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateUpdateOneWithoutCommentsInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoUpdateOneWithoutCommentsInput', graphql_name='todo')


class CommentUpdateWithoutStatusUpdateDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'html', 'text', 'category', 'activity', 'user', 'discussion', 'todo', 'files')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    html = sgqlc.types.Field(String, graphql_name='html')
    text = sgqlc.types.Field(String, graphql_name='text')
    category = sgqlc.types.Field(CommentCategory, graphql_name='category')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutCommentInput, graphql_name='activity')
    user = sgqlc.types.Field('UserUpdateOneRequiredWithoutCommentsInput', graphql_name='user')
    discussion = sgqlc.types.Field('DiscussionUpdateOneWithoutCommentsInput', graphql_name='discussion')
    todo = sgqlc.types.Field('TodoUpdateOneWithoutCommentsInput', graphql_name='todo')
    files = sgqlc.types.Field('FileUpdateManyWithoutCommentInput', graphql_name='files')


class CommentUpdateWithoutTodoDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'html', 'text', 'category', 'activity', 'user', 'discussion', 'status_update', 'files')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    html = sgqlc.types.Field(String, graphql_name='html')
    text = sgqlc.types.Field(String, graphql_name='text')
    category = sgqlc.types.Field(CommentCategory, graphql_name='category')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutCommentInput, graphql_name='activity')
    user = sgqlc.types.Field('UserUpdateOneRequiredWithoutCommentsInput', graphql_name='user')
    discussion = sgqlc.types.Field('DiscussionUpdateOneWithoutCommentsInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateUpdateOneWithoutCommentsInput', graphql_name='statusUpdate')
    files = sgqlc.types.Field('FileUpdateManyWithoutCommentInput', graphql_name='files')


class CommentUpdateWithoutUserDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'html', 'text', 'category', 'activity', 'discussion', 'status_update', 'todo', 'files')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    html = sgqlc.types.Field(String, graphql_name='html')
    text = sgqlc.types.Field(String, graphql_name='text')
    category = sgqlc.types.Field(CommentCategory, graphql_name='category')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutCommentInput, graphql_name='activity')
    discussion = sgqlc.types.Field('DiscussionUpdateOneWithoutCommentsInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateUpdateOneWithoutCommentsInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoUpdateOneWithoutCommentsInput', graphql_name='todo')
    files = sgqlc.types.Field('FileUpdateManyWithoutCommentInput', graphql_name='files')


class CommentUpsertWithWhereUniqueWithoutDiscussionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('CommentWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(CommentUpdateWithoutDiscussionDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CommentCreateWithoutDiscussionInput), graphql_name='create')


class CommentUpsertWithWhereUniqueWithoutStatusUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('CommentWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(CommentUpdateWithoutStatusUpdateDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CommentCreateWithoutStatusUpdateInput), graphql_name='create')


class CommentUpsertWithWhereUniqueWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('CommentWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(CommentUpdateWithoutTodoDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CommentCreateWithoutTodoInput), graphql_name='create')


class CommentUpsertWithWhereUniqueWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('CommentWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(CommentUpdateWithoutUserDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CommentCreateWithoutUserInput), graphql_name='create')


class CommentUpsertWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(CommentUpdateWithoutActivityDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CommentCreateWithoutActivityInput), graphql_name='create')


class CommentUpsertWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(CommentUpdateWithoutFilesDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CommentCreateWithoutFilesInput), graphql_name='create')


class CommentWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'html', 'html_not', 'html_in', 'html_not_in', 'html_lt', 'html_lte', 'html_gt', 'html_gte', 'html_contains', 'html_not_contains', 'html_starts_with', 'html_not_starts_with', 'html_ends_with', 'html_not_ends_with', 'text', 'text_not', 'text_in', 'text_not_in', 'text_lt', 'text_lte', 'text_gt', 'text_gte', 'text_contains', 'text_not_contains', 'text_starts_with', 'text_not_starts_with', 'text_ends_with', 'text_not_ends_with', 'category', 'category_not', 'category_in', 'category_not_in', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'activity', 'user', 'discussion', 'status_update', 'todo', 'files_every', 'files_some', 'files_none', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    html = sgqlc.types.Field(String, graphql_name='html')
    html_not = sgqlc.types.Field(String, graphql_name='html_not')
    html_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='html_in')
    html_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='html_not_in')
    html_lt = sgqlc.types.Field(String, graphql_name='html_lt')
    html_lte = sgqlc.types.Field(String, graphql_name='html_lte')
    html_gt = sgqlc.types.Field(String, graphql_name='html_gt')
    html_gte = sgqlc.types.Field(String, graphql_name='html_gte')
    html_contains = sgqlc.types.Field(String, graphql_name='html_contains')
    html_not_contains = sgqlc.types.Field(String, graphql_name='html_not_contains')
    html_starts_with = sgqlc.types.Field(String, graphql_name='html_starts_with')
    html_not_starts_with = sgqlc.types.Field(String, graphql_name='html_not_starts_with')
    html_ends_with = sgqlc.types.Field(String, graphql_name='html_ends_with')
    html_not_ends_with = sgqlc.types.Field(String, graphql_name='html_not_ends_with')
    text = sgqlc.types.Field(String, graphql_name='text')
    text_not = sgqlc.types.Field(String, graphql_name='text_not')
    text_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='text_in')
    text_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='text_not_in')
    text_lt = sgqlc.types.Field(String, graphql_name='text_lt')
    text_lte = sgqlc.types.Field(String, graphql_name='text_lte')
    text_gt = sgqlc.types.Field(String, graphql_name='text_gt')
    text_gte = sgqlc.types.Field(String, graphql_name='text_gte')
    text_contains = sgqlc.types.Field(String, graphql_name='text_contains')
    text_not_contains = sgqlc.types.Field(String, graphql_name='text_not_contains')
    text_starts_with = sgqlc.types.Field(String, graphql_name='text_starts_with')
    text_not_starts_with = sgqlc.types.Field(String, graphql_name='text_not_starts_with')
    text_ends_with = sgqlc.types.Field(String, graphql_name='text_ends_with')
    text_not_ends_with = sgqlc.types.Field(String, graphql_name='text_not_ends_with')
    category = sgqlc.types.Field(CommentCategory, graphql_name='category')
    category_not = sgqlc.types.Field(CommentCategory, graphql_name='category_not')
    category_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CommentCategory)), graphql_name='category_in')
    category_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CommentCategory)), graphql_name='category_not_in')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    activity = sgqlc.types.Field(ActivityWhereInput, graphql_name='activity')
    user = sgqlc.types.Field('UserWhereInput', graphql_name='user')
    discussion = sgqlc.types.Field('DiscussionWhereInput', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateWhereInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoWhereInput', graphql_name='todo')
    files_every = sgqlc.types.Field('FileWhereInput', graphql_name='files_every')
    files_some = sgqlc.types.Field('FileWhereInput', graphql_name='files_some')
    files_none = sgqlc.types.Field('FileWhereInput', graphql_name='files_none')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommentWhereInput')), graphql_name='NOT')


class CommentWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class CompanyCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'slug', 'description', 'free_trial_started_at', 'free_trial_expired_at', 'subscribed_at', 'free_trial_extended_at', 'free_trial_extended_by', 'activities', 'company_users', 'files', 'image', 'license', 'projects', 'subscription_plan', 'links')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')
    description = sgqlc.types.Field(String, graphql_name='description')
    free_trial_started_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialStartedAt')
    free_trial_expired_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExpiredAt')
    subscribed_at = sgqlc.types.Field(DateTime, graphql_name='subscribedAt')
    free_trial_extended_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExtendedAt')
    free_trial_extended_by = sgqlc.types.Field('UserCreateOneInput', graphql_name='freeTrialExtendedBy')
    activities = sgqlc.types.Field(ActivityCreateManyWithoutCompanyInput, graphql_name='activities')
    company_users = sgqlc.types.Field('CompanyUserCreateManyWithoutCompanyInput', graphql_name='companyUsers')
    files = sgqlc.types.Field('FileCreateManyWithoutCompanyInput', graphql_name='files')
    image = sgqlc.types.Field('ImageCreateOneInput', graphql_name='image')
    license = sgqlc.types.Field('CompanyLicenseCreateOneWithoutCompanyInput', graphql_name='license')
    projects = sgqlc.types.Field('ProjectCreateManyWithoutCompanyInput', graphql_name='projects')
    subscription_plan = sgqlc.types.Field('CompanySubscriptionPlanCreateOneWithoutCompanyInput', graphql_name='subscriptionPlan')
    links = sgqlc.types.Field('LinkCreateManyWithoutCompanyInput', graphql_name='links')


class CompanyCreateOneWithoutActivitiesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('CompanyCreateWithoutActivitiesInput', graphql_name='create')
    connect = sgqlc.types.Field('CompanyWhereUniqueInput', graphql_name='connect')


class CompanyCreateOneWithoutCompanyUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('CompanyCreateWithoutCompanyUsersInput', graphql_name='create')
    connect = sgqlc.types.Field('CompanyWhereUniqueInput', graphql_name='connect')


class CompanyCreateOneWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('CompanyCreateWithoutFilesInput', graphql_name='create')
    connect = sgqlc.types.Field('CompanyWhereUniqueInput', graphql_name='connect')


class CompanyCreateOneWithoutLicenseInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('CompanyCreateWithoutLicenseInput', graphql_name='create')
    connect = sgqlc.types.Field('CompanyWhereUniqueInput', graphql_name='connect')


class CompanyCreateOneWithoutLinksInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('CompanyCreateWithoutLinksInput', graphql_name='create')
    connect = sgqlc.types.Field('CompanyWhereUniqueInput', graphql_name='connect')


class CompanyCreateOneWithoutProjectsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('CompanyCreateWithoutProjectsInput', graphql_name='create')
    connect = sgqlc.types.Field('CompanyWhereUniqueInput', graphql_name='connect')


class CompanyCreateOneWithoutSubscriptionPlanInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('CompanyCreateWithoutSubscriptionPlanInput', graphql_name='create')
    connect = sgqlc.types.Field('CompanyWhereUniqueInput', graphql_name='connect')


class CompanyCreateWithoutActivitiesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'slug', 'description', 'free_trial_started_at', 'free_trial_expired_at', 'subscribed_at', 'free_trial_extended_at', 'free_trial_extended_by', 'company_users', 'files', 'image', 'license', 'projects', 'subscription_plan', 'links')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')
    description = sgqlc.types.Field(String, graphql_name='description')
    free_trial_started_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialStartedAt')
    free_trial_expired_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExpiredAt')
    subscribed_at = sgqlc.types.Field(DateTime, graphql_name='subscribedAt')
    free_trial_extended_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExtendedAt')
    free_trial_extended_by = sgqlc.types.Field('UserCreateOneInput', graphql_name='freeTrialExtendedBy')
    company_users = sgqlc.types.Field('CompanyUserCreateManyWithoutCompanyInput', graphql_name='companyUsers')
    files = sgqlc.types.Field('FileCreateManyWithoutCompanyInput', graphql_name='files')
    image = sgqlc.types.Field('ImageCreateOneInput', graphql_name='image')
    license = sgqlc.types.Field('CompanyLicenseCreateOneWithoutCompanyInput', graphql_name='license')
    projects = sgqlc.types.Field('ProjectCreateManyWithoutCompanyInput', graphql_name='projects')
    subscription_plan = sgqlc.types.Field('CompanySubscriptionPlanCreateOneWithoutCompanyInput', graphql_name='subscriptionPlan')
    links = sgqlc.types.Field('LinkCreateManyWithoutCompanyInput', graphql_name='links')


class CompanyCreateWithoutCompanyUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'slug', 'description', 'free_trial_started_at', 'free_trial_expired_at', 'subscribed_at', 'free_trial_extended_at', 'free_trial_extended_by', 'activities', 'files', 'image', 'license', 'projects', 'subscription_plan', 'links')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')
    description = sgqlc.types.Field(String, graphql_name='description')
    free_trial_started_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialStartedAt')
    free_trial_expired_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExpiredAt')
    subscribed_at = sgqlc.types.Field(DateTime, graphql_name='subscribedAt')
    free_trial_extended_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExtendedAt')
    free_trial_extended_by = sgqlc.types.Field('UserCreateOneInput', graphql_name='freeTrialExtendedBy')
    activities = sgqlc.types.Field(ActivityCreateManyWithoutCompanyInput, graphql_name='activities')
    files = sgqlc.types.Field('FileCreateManyWithoutCompanyInput', graphql_name='files')
    image = sgqlc.types.Field('ImageCreateOneInput', graphql_name='image')
    license = sgqlc.types.Field('CompanyLicenseCreateOneWithoutCompanyInput', graphql_name='license')
    projects = sgqlc.types.Field('ProjectCreateManyWithoutCompanyInput', graphql_name='projects')
    subscription_plan = sgqlc.types.Field('CompanySubscriptionPlanCreateOneWithoutCompanyInput', graphql_name='subscriptionPlan')
    links = sgqlc.types.Field('LinkCreateManyWithoutCompanyInput', graphql_name='links')


class CompanyCreateWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'slug', 'description', 'free_trial_started_at', 'free_trial_expired_at', 'subscribed_at', 'free_trial_extended_at', 'free_trial_extended_by', 'activities', 'company_users', 'image', 'license', 'projects', 'subscription_plan', 'links')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')
    description = sgqlc.types.Field(String, graphql_name='description')
    free_trial_started_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialStartedAt')
    free_trial_expired_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExpiredAt')
    subscribed_at = sgqlc.types.Field(DateTime, graphql_name='subscribedAt')
    free_trial_extended_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExtendedAt')
    free_trial_extended_by = sgqlc.types.Field('UserCreateOneInput', graphql_name='freeTrialExtendedBy')
    activities = sgqlc.types.Field(ActivityCreateManyWithoutCompanyInput, graphql_name='activities')
    company_users = sgqlc.types.Field('CompanyUserCreateManyWithoutCompanyInput', graphql_name='companyUsers')
    image = sgqlc.types.Field('ImageCreateOneInput', graphql_name='image')
    license = sgqlc.types.Field('CompanyLicenseCreateOneWithoutCompanyInput', graphql_name='license')
    projects = sgqlc.types.Field('ProjectCreateManyWithoutCompanyInput', graphql_name='projects')
    subscription_plan = sgqlc.types.Field('CompanySubscriptionPlanCreateOneWithoutCompanyInput', graphql_name='subscriptionPlan')
    links = sgqlc.types.Field('LinkCreateManyWithoutCompanyInput', graphql_name='links')


class CompanyCreateWithoutLicenseInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'slug', 'description', 'free_trial_started_at', 'free_trial_expired_at', 'subscribed_at', 'free_trial_extended_at', 'free_trial_extended_by', 'activities', 'company_users', 'files', 'image', 'projects', 'subscription_plan', 'links')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')
    description = sgqlc.types.Field(String, graphql_name='description')
    free_trial_started_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialStartedAt')
    free_trial_expired_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExpiredAt')
    subscribed_at = sgqlc.types.Field(DateTime, graphql_name='subscribedAt')
    free_trial_extended_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExtendedAt')
    free_trial_extended_by = sgqlc.types.Field('UserCreateOneInput', graphql_name='freeTrialExtendedBy')
    activities = sgqlc.types.Field(ActivityCreateManyWithoutCompanyInput, graphql_name='activities')
    company_users = sgqlc.types.Field('CompanyUserCreateManyWithoutCompanyInput', graphql_name='companyUsers')
    files = sgqlc.types.Field('FileCreateManyWithoutCompanyInput', graphql_name='files')
    image = sgqlc.types.Field('ImageCreateOneInput', graphql_name='image')
    projects = sgqlc.types.Field('ProjectCreateManyWithoutCompanyInput', graphql_name='projects')
    subscription_plan = sgqlc.types.Field('CompanySubscriptionPlanCreateOneWithoutCompanyInput', graphql_name='subscriptionPlan')
    links = sgqlc.types.Field('LinkCreateManyWithoutCompanyInput', graphql_name='links')


class CompanyCreateWithoutLinksInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'slug', 'description', 'free_trial_started_at', 'free_trial_expired_at', 'subscribed_at', 'free_trial_extended_at', 'free_trial_extended_by', 'activities', 'company_users', 'files', 'image', 'license', 'projects', 'subscription_plan')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')
    description = sgqlc.types.Field(String, graphql_name='description')
    free_trial_started_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialStartedAt')
    free_trial_expired_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExpiredAt')
    subscribed_at = sgqlc.types.Field(DateTime, graphql_name='subscribedAt')
    free_trial_extended_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExtendedAt')
    free_trial_extended_by = sgqlc.types.Field('UserCreateOneInput', graphql_name='freeTrialExtendedBy')
    activities = sgqlc.types.Field(ActivityCreateManyWithoutCompanyInput, graphql_name='activities')
    company_users = sgqlc.types.Field('CompanyUserCreateManyWithoutCompanyInput', graphql_name='companyUsers')
    files = sgqlc.types.Field('FileCreateManyWithoutCompanyInput', graphql_name='files')
    image = sgqlc.types.Field('ImageCreateOneInput', graphql_name='image')
    license = sgqlc.types.Field('CompanyLicenseCreateOneWithoutCompanyInput', graphql_name='license')
    projects = sgqlc.types.Field('ProjectCreateManyWithoutCompanyInput', graphql_name='projects')
    subscription_plan = sgqlc.types.Field('CompanySubscriptionPlanCreateOneWithoutCompanyInput', graphql_name='subscriptionPlan')


class CompanyCreateWithoutProjectsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'slug', 'description', 'free_trial_started_at', 'free_trial_expired_at', 'subscribed_at', 'free_trial_extended_at', 'free_trial_extended_by', 'activities', 'company_users', 'files', 'image', 'license', 'subscription_plan', 'links')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')
    description = sgqlc.types.Field(String, graphql_name='description')
    free_trial_started_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialStartedAt')
    free_trial_expired_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExpiredAt')
    subscribed_at = sgqlc.types.Field(DateTime, graphql_name='subscribedAt')
    free_trial_extended_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExtendedAt')
    free_trial_extended_by = sgqlc.types.Field('UserCreateOneInput', graphql_name='freeTrialExtendedBy')
    activities = sgqlc.types.Field(ActivityCreateManyWithoutCompanyInput, graphql_name='activities')
    company_users = sgqlc.types.Field('CompanyUserCreateManyWithoutCompanyInput', graphql_name='companyUsers')
    files = sgqlc.types.Field('FileCreateManyWithoutCompanyInput', graphql_name='files')
    image = sgqlc.types.Field('ImageCreateOneInput', graphql_name='image')
    license = sgqlc.types.Field('CompanyLicenseCreateOneWithoutCompanyInput', graphql_name='license')
    subscription_plan = sgqlc.types.Field('CompanySubscriptionPlanCreateOneWithoutCompanyInput', graphql_name='subscriptionPlan')
    links = sgqlc.types.Field('LinkCreateManyWithoutCompanyInput', graphql_name='links')


class CompanyCreateWithoutSubscriptionPlanInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'slug', 'description', 'free_trial_started_at', 'free_trial_expired_at', 'subscribed_at', 'free_trial_extended_at', 'free_trial_extended_by', 'activities', 'company_users', 'files', 'image', 'license', 'projects', 'links')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')
    description = sgqlc.types.Field(String, graphql_name='description')
    free_trial_started_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialStartedAt')
    free_trial_expired_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExpiredAt')
    subscribed_at = sgqlc.types.Field(DateTime, graphql_name='subscribedAt')
    free_trial_extended_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExtendedAt')
    free_trial_extended_by = sgqlc.types.Field('UserCreateOneInput', graphql_name='freeTrialExtendedBy')
    activities = sgqlc.types.Field(ActivityCreateManyWithoutCompanyInput, graphql_name='activities')
    company_users = sgqlc.types.Field('CompanyUserCreateManyWithoutCompanyInput', graphql_name='companyUsers')
    files = sgqlc.types.Field('FileCreateManyWithoutCompanyInput', graphql_name='files')
    image = sgqlc.types.Field('ImageCreateOneInput', graphql_name='image')
    license = sgqlc.types.Field('CompanyLicenseCreateOneWithoutCompanyInput', graphql_name='license')
    projects = sgqlc.types.Field('ProjectCreateManyWithoutCompanyInput', graphql_name='projects')
    links = sgqlc.types.Field('LinkCreateManyWithoutCompanyInput', graphql_name='links')


class CompanyFilter(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('active', 'company_id', 'search', 'status', 'activatable')
    active = sgqlc.types.Field(Boolean, graphql_name='active')
    company_id = sgqlc.types.Field(String, graphql_name='companyId')
    search = sgqlc.types.Field(String, graphql_name='search')
    status = sgqlc.types.Field(CompanyFilterStatus, graphql_name='status')
    activatable = sgqlc.types.Field(Boolean, graphql_name='activatable')


class CompanyLicenseCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'activation_email', 'plan_id', 'source', 'license_id', 'invoice_id', 'company')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    activation_email = sgqlc.types.Field(String, graphql_name='activationEmail')
    plan_id = sgqlc.types.Field(String, graphql_name='planId')
    source = sgqlc.types.Field(String, graphql_name='source')
    license_id = sgqlc.types.Field(String, graphql_name='licenseId')
    invoice_id = sgqlc.types.Field(String, graphql_name='invoiceId')
    company = sgqlc.types.Field(CompanyCreateOneWithoutLicenseInput, graphql_name='company')


class CompanyLicenseCreateOneWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('CompanyLicenseCreateWithoutCompanyInput', graphql_name='create')
    connect = sgqlc.types.Field('CompanyLicenseWhereUniqueInput', graphql_name='connect')


class CompanyLicenseCreateWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'activation_email', 'plan_id', 'source', 'license_id', 'invoice_id')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    activation_email = sgqlc.types.Field(String, graphql_name='activationEmail')
    plan_id = sgqlc.types.Field(String, graphql_name='planId')
    source = sgqlc.types.Field(String, graphql_name='source')
    license_id = sgqlc.types.Field(String, graphql_name='licenseId')
    invoice_id = sgqlc.types.Field(String, graphql_name='invoiceId')


class CompanyLicenseFilter(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('search', 'source', 'tier')
    search = sgqlc.types.Field(String, graphql_name='search')
    source = sgqlc.types.Field(String, graphql_name='source')
    tier = sgqlc.types.Field(Int, graphql_name='tier')


class CompanyLicenseSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('CompanyLicenseWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyLicenseSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyLicenseSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyLicenseSubscriptionWhereInput')), graphql_name='NOT')


class CompanyLicenseUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'activation_email', 'plan_id', 'source', 'license_id', 'invoice_id', 'company')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    activation_email = sgqlc.types.Field(String, graphql_name='activationEmail')
    plan_id = sgqlc.types.Field(String, graphql_name='planId')
    source = sgqlc.types.Field(String, graphql_name='source')
    license_id = sgqlc.types.Field(String, graphql_name='licenseId')
    invoice_id = sgqlc.types.Field(String, graphql_name='invoiceId')
    company = sgqlc.types.Field('CompanyUpdateOneWithoutLicenseInput', graphql_name='company')


class CompanyLicenseUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'activation_email', 'plan_id', 'source', 'license_id', 'invoice_id')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    activation_email = sgqlc.types.Field(String, graphql_name='activationEmail')
    plan_id = sgqlc.types.Field(String, graphql_name='planId')
    source = sgqlc.types.Field(String, graphql_name='source')
    license_id = sgqlc.types.Field(String, graphql_name='licenseId')
    invoice_id = sgqlc.types.Field(String, graphql_name='invoiceId')


class CompanyLicenseUpdateOneWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(CompanyLicenseCreateWithoutCompanyInput, graphql_name='create')
    update = sgqlc.types.Field('CompanyLicenseUpdateWithoutCompanyDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('CompanyLicenseUpsertWithoutCompanyInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('CompanyLicenseWhereUniqueInput', graphql_name='connect')


class CompanyLicenseUpdateWithoutCompanyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'activation_email', 'plan_id', 'source', 'license_id', 'invoice_id')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    activation_email = sgqlc.types.Field(String, graphql_name='activationEmail')
    plan_id = sgqlc.types.Field(String, graphql_name='planId')
    source = sgqlc.types.Field(String, graphql_name='source')
    license_id = sgqlc.types.Field(String, graphql_name='licenseId')
    invoice_id = sgqlc.types.Field(String, graphql_name='invoiceId')


class CompanyLicenseUpsertWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(CompanyLicenseUpdateWithoutCompanyDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CompanyLicenseCreateWithoutCompanyInput), graphql_name='create')


class CompanyLicenseWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'activation_email', 'activation_email_not', 'activation_email_in', 'activation_email_not_in', 'activation_email_lt', 'activation_email_lte', 'activation_email_gt', 'activation_email_gte', 'activation_email_contains', 'activation_email_not_contains', 'activation_email_starts_with', 'activation_email_not_starts_with', 'activation_email_ends_with', 'activation_email_not_ends_with', 'plan_id', 'plan_id_not', 'plan_id_in', 'plan_id_not_in', 'plan_id_lt', 'plan_id_lte', 'plan_id_gt', 'plan_id_gte', 'plan_id_contains', 'plan_id_not_contains', 'plan_id_starts_with', 'plan_id_not_starts_with', 'plan_id_ends_with', 'plan_id_not_ends_with', 'source', 'source_not', 'source_in', 'source_not_in', 'source_lt', 'source_lte', 'source_gt', 'source_gte', 'source_contains', 'source_not_contains', 'source_starts_with', 'source_not_starts_with', 'source_ends_with', 'source_not_ends_with', 'license_id', 'license_id_not', 'license_id_in', 'license_id_not_in', 'license_id_lt', 'license_id_lte', 'license_id_gt', 'license_id_gte', 'license_id_contains', 'license_id_not_contains', 'license_id_starts_with', 'license_id_not_starts_with', 'license_id_ends_with', 'license_id_not_ends_with', 'invoice_id', 'invoice_id_not', 'invoice_id_in', 'invoice_id_not_in', 'invoice_id_lt', 'invoice_id_lte', 'invoice_id_gt', 'invoice_id_gte', 'invoice_id_contains', 'invoice_id_not_contains', 'invoice_id_starts_with', 'invoice_id_not_starts_with', 'invoice_id_ends_with', 'invoice_id_not_ends_with', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'company', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    activation_email = sgqlc.types.Field(String, graphql_name='activationEmail')
    activation_email_not = sgqlc.types.Field(String, graphql_name='activationEmail_not')
    activation_email_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='activationEmail_in')
    activation_email_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='activationEmail_not_in')
    activation_email_lt = sgqlc.types.Field(String, graphql_name='activationEmail_lt')
    activation_email_lte = sgqlc.types.Field(String, graphql_name='activationEmail_lte')
    activation_email_gt = sgqlc.types.Field(String, graphql_name='activationEmail_gt')
    activation_email_gte = sgqlc.types.Field(String, graphql_name='activationEmail_gte')
    activation_email_contains = sgqlc.types.Field(String, graphql_name='activationEmail_contains')
    activation_email_not_contains = sgqlc.types.Field(String, graphql_name='activationEmail_not_contains')
    activation_email_starts_with = sgqlc.types.Field(String, graphql_name='activationEmail_starts_with')
    activation_email_not_starts_with = sgqlc.types.Field(String, graphql_name='activationEmail_not_starts_with')
    activation_email_ends_with = sgqlc.types.Field(String, graphql_name='activationEmail_ends_with')
    activation_email_not_ends_with = sgqlc.types.Field(String, graphql_name='activationEmail_not_ends_with')
    plan_id = sgqlc.types.Field(String, graphql_name='planId')
    plan_id_not = sgqlc.types.Field(String, graphql_name='planId_not')
    plan_id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='planId_in')
    plan_id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='planId_not_in')
    plan_id_lt = sgqlc.types.Field(String, graphql_name='planId_lt')
    plan_id_lte = sgqlc.types.Field(String, graphql_name='planId_lte')
    plan_id_gt = sgqlc.types.Field(String, graphql_name='planId_gt')
    plan_id_gte = sgqlc.types.Field(String, graphql_name='planId_gte')
    plan_id_contains = sgqlc.types.Field(String, graphql_name='planId_contains')
    plan_id_not_contains = sgqlc.types.Field(String, graphql_name='planId_not_contains')
    plan_id_starts_with = sgqlc.types.Field(String, graphql_name='planId_starts_with')
    plan_id_not_starts_with = sgqlc.types.Field(String, graphql_name='planId_not_starts_with')
    plan_id_ends_with = sgqlc.types.Field(String, graphql_name='planId_ends_with')
    plan_id_not_ends_with = sgqlc.types.Field(String, graphql_name='planId_not_ends_with')
    source = sgqlc.types.Field(String, graphql_name='source')
    source_not = sgqlc.types.Field(String, graphql_name='source_not')
    source_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='source_in')
    source_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='source_not_in')
    source_lt = sgqlc.types.Field(String, graphql_name='source_lt')
    source_lte = sgqlc.types.Field(String, graphql_name='source_lte')
    source_gt = sgqlc.types.Field(String, graphql_name='source_gt')
    source_gte = sgqlc.types.Field(String, graphql_name='source_gte')
    source_contains = sgqlc.types.Field(String, graphql_name='source_contains')
    source_not_contains = sgqlc.types.Field(String, graphql_name='source_not_contains')
    source_starts_with = sgqlc.types.Field(String, graphql_name='source_starts_with')
    source_not_starts_with = sgqlc.types.Field(String, graphql_name='source_not_starts_with')
    source_ends_with = sgqlc.types.Field(String, graphql_name='source_ends_with')
    source_not_ends_with = sgqlc.types.Field(String, graphql_name='source_not_ends_with')
    license_id = sgqlc.types.Field(String, graphql_name='licenseId')
    license_id_not = sgqlc.types.Field(String, graphql_name='licenseId_not')
    license_id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='licenseId_in')
    license_id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='licenseId_not_in')
    license_id_lt = sgqlc.types.Field(String, graphql_name='licenseId_lt')
    license_id_lte = sgqlc.types.Field(String, graphql_name='licenseId_lte')
    license_id_gt = sgqlc.types.Field(String, graphql_name='licenseId_gt')
    license_id_gte = sgqlc.types.Field(String, graphql_name='licenseId_gte')
    license_id_contains = sgqlc.types.Field(String, graphql_name='licenseId_contains')
    license_id_not_contains = sgqlc.types.Field(String, graphql_name='licenseId_not_contains')
    license_id_starts_with = sgqlc.types.Field(String, graphql_name='licenseId_starts_with')
    license_id_not_starts_with = sgqlc.types.Field(String, graphql_name='licenseId_not_starts_with')
    license_id_ends_with = sgqlc.types.Field(String, graphql_name='licenseId_ends_with')
    license_id_not_ends_with = sgqlc.types.Field(String, graphql_name='licenseId_not_ends_with')
    invoice_id = sgqlc.types.Field(String, graphql_name='invoiceId')
    invoice_id_not = sgqlc.types.Field(String, graphql_name='invoiceId_not')
    invoice_id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='invoiceId_in')
    invoice_id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='invoiceId_not_in')
    invoice_id_lt = sgqlc.types.Field(String, graphql_name='invoiceId_lt')
    invoice_id_lte = sgqlc.types.Field(String, graphql_name='invoiceId_lte')
    invoice_id_gt = sgqlc.types.Field(String, graphql_name='invoiceId_gt')
    invoice_id_gte = sgqlc.types.Field(String, graphql_name='invoiceId_gte')
    invoice_id_contains = sgqlc.types.Field(String, graphql_name='invoiceId_contains')
    invoice_id_not_contains = sgqlc.types.Field(String, graphql_name='invoiceId_not_contains')
    invoice_id_starts_with = sgqlc.types.Field(String, graphql_name='invoiceId_starts_with')
    invoice_id_not_starts_with = sgqlc.types.Field(String, graphql_name='invoiceId_not_starts_with')
    invoice_id_ends_with = sgqlc.types.Field(String, graphql_name='invoiceId_ends_with')
    invoice_id_not_ends_with = sgqlc.types.Field(String, graphql_name='invoiceId_not_ends_with')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    company = sgqlc.types.Field('CompanyWhereInput', graphql_name='company')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyLicenseWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyLicenseWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyLicenseWhereInput')), graphql_name='NOT')


class CompanyLicenseWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'license_id', 'invoice_id')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    license_id = sgqlc.types.Field(String, graphql_name='licenseId')
    invoice_id = sgqlc.types.Field(String, graphql_name='invoiceId')


class CompanySubscriptionPlanCardCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'identifier', 'name', 'brand', 'country', 'exp_month', 'exp_year', 'funding', 'cvc_check', 'last4', 'plan')
    id = sgqlc.types.Field(ID, graphql_name='id')
    identifier = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='identifier')
    name = sgqlc.types.Field(String, graphql_name='name')
    brand = sgqlc.types.Field(String, graphql_name='brand')
    country = sgqlc.types.Field(String, graphql_name='country')
    exp_month = sgqlc.types.Field(Int, graphql_name='expMonth')
    exp_year = sgqlc.types.Field(Int, graphql_name='expYear')
    funding = sgqlc.types.Field(String, graphql_name='funding')
    cvc_check = sgqlc.types.Field(String, graphql_name='cvcCheck')
    last4 = sgqlc.types.Field(String, graphql_name='last4')
    plan = sgqlc.types.Field(sgqlc.types.non_null('CompanySubscriptionPlanCreateOneWithoutCardInput'), graphql_name='plan')


class CompanySubscriptionPlanCardCreateOneWithoutPlanInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('CompanySubscriptionPlanCardCreateWithoutPlanInput', graphql_name='create')
    connect = sgqlc.types.Field('CompanySubscriptionPlanCardWhereUniqueInput', graphql_name='connect')


class CompanySubscriptionPlanCardCreateWithoutPlanInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'identifier', 'name', 'brand', 'country', 'exp_month', 'exp_year', 'funding', 'cvc_check', 'last4')
    id = sgqlc.types.Field(ID, graphql_name='id')
    identifier = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='identifier')
    name = sgqlc.types.Field(String, graphql_name='name')
    brand = sgqlc.types.Field(String, graphql_name='brand')
    country = sgqlc.types.Field(String, graphql_name='country')
    exp_month = sgqlc.types.Field(Int, graphql_name='expMonth')
    exp_year = sgqlc.types.Field(Int, graphql_name='expYear')
    funding = sgqlc.types.Field(String, graphql_name='funding')
    cvc_check = sgqlc.types.Field(String, graphql_name='cvcCheck')
    last4 = sgqlc.types.Field(String, graphql_name='last4')


class CompanySubscriptionPlanCardSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('CompanySubscriptionPlanCardWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanySubscriptionPlanCardSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanySubscriptionPlanCardSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanySubscriptionPlanCardSubscriptionWhereInput')), graphql_name='NOT')


class CompanySubscriptionPlanCardUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('identifier', 'name', 'brand', 'country', 'exp_month', 'exp_year', 'funding', 'cvc_check', 'last4', 'plan')
    identifier = sgqlc.types.Field(String, graphql_name='identifier')
    name = sgqlc.types.Field(String, graphql_name='name')
    brand = sgqlc.types.Field(String, graphql_name='brand')
    country = sgqlc.types.Field(String, graphql_name='country')
    exp_month = sgqlc.types.Field(Int, graphql_name='expMonth')
    exp_year = sgqlc.types.Field(Int, graphql_name='expYear')
    funding = sgqlc.types.Field(String, graphql_name='funding')
    cvc_check = sgqlc.types.Field(String, graphql_name='cvcCheck')
    last4 = sgqlc.types.Field(String, graphql_name='last4')
    plan = sgqlc.types.Field('CompanySubscriptionPlanUpdateOneRequiredWithoutCardInput', graphql_name='plan')


class CompanySubscriptionPlanCardUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('identifier', 'name', 'brand', 'country', 'exp_month', 'exp_year', 'funding', 'cvc_check', 'last4')
    identifier = sgqlc.types.Field(String, graphql_name='identifier')
    name = sgqlc.types.Field(String, graphql_name='name')
    brand = sgqlc.types.Field(String, graphql_name='brand')
    country = sgqlc.types.Field(String, graphql_name='country')
    exp_month = sgqlc.types.Field(Int, graphql_name='expMonth')
    exp_year = sgqlc.types.Field(Int, graphql_name='expYear')
    funding = sgqlc.types.Field(String, graphql_name='funding')
    cvc_check = sgqlc.types.Field(String, graphql_name='cvcCheck')
    last4 = sgqlc.types.Field(String, graphql_name='last4')


class CompanySubscriptionPlanCardUpdateOneWithoutPlanInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(CompanySubscriptionPlanCardCreateWithoutPlanInput, graphql_name='create')
    update = sgqlc.types.Field('CompanySubscriptionPlanCardUpdateWithoutPlanDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('CompanySubscriptionPlanCardUpsertWithoutPlanInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('CompanySubscriptionPlanCardWhereUniqueInput', graphql_name='connect')


class CompanySubscriptionPlanCardUpdateWithoutPlanDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('identifier', 'name', 'brand', 'country', 'exp_month', 'exp_year', 'funding', 'cvc_check', 'last4')
    identifier = sgqlc.types.Field(String, graphql_name='identifier')
    name = sgqlc.types.Field(String, graphql_name='name')
    brand = sgqlc.types.Field(String, graphql_name='brand')
    country = sgqlc.types.Field(String, graphql_name='country')
    exp_month = sgqlc.types.Field(Int, graphql_name='expMonth')
    exp_year = sgqlc.types.Field(Int, graphql_name='expYear')
    funding = sgqlc.types.Field(String, graphql_name='funding')
    cvc_check = sgqlc.types.Field(String, graphql_name='cvcCheck')
    last4 = sgqlc.types.Field(String, graphql_name='last4')


class CompanySubscriptionPlanCardUpsertWithoutPlanInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(CompanySubscriptionPlanCardUpdateWithoutPlanDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CompanySubscriptionPlanCardCreateWithoutPlanInput), graphql_name='create')


class CompanySubscriptionPlanCardWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'identifier', 'identifier_not', 'identifier_in', 'identifier_not_in', 'identifier_lt', 'identifier_lte', 'identifier_gt', 'identifier_gte', 'identifier_contains', 'identifier_not_contains', 'identifier_starts_with', 'identifier_not_starts_with', 'identifier_ends_with', 'identifier_not_ends_with', 'name', 'name_not', 'name_in', 'name_not_in', 'name_lt', 'name_lte', 'name_gt', 'name_gte', 'name_contains', 'name_not_contains', 'name_starts_with', 'name_not_starts_with', 'name_ends_with', 'name_not_ends_with', 'brand', 'brand_not', 'brand_in', 'brand_not_in', 'brand_lt', 'brand_lte', 'brand_gt', 'brand_gte', 'brand_contains', 'brand_not_contains', 'brand_starts_with', 'brand_not_starts_with', 'brand_ends_with', 'brand_not_ends_with', 'country', 'country_not', 'country_in', 'country_not_in', 'country_lt', 'country_lte', 'country_gt', 'country_gte', 'country_contains', 'country_not_contains', 'country_starts_with', 'country_not_starts_with', 'country_ends_with', 'country_not_ends_with', 'exp_month', 'exp_month_not', 'exp_month_in', 'exp_month_not_in', 'exp_month_lt', 'exp_month_lte', 'exp_month_gt', 'exp_month_gte', 'exp_year', 'exp_year_not', 'exp_year_in', 'exp_year_not_in', 'exp_year_lt', 'exp_year_lte', 'exp_year_gt', 'exp_year_gte', 'funding', 'funding_not', 'funding_in', 'funding_not_in', 'funding_lt', 'funding_lte', 'funding_gt', 'funding_gte', 'funding_contains', 'funding_not_contains', 'funding_starts_with', 'funding_not_starts_with', 'funding_ends_with', 'funding_not_ends_with', 'cvc_check', 'cvc_check_not', 'cvc_check_in', 'cvc_check_not_in', 'cvc_check_lt', 'cvc_check_lte', 'cvc_check_gt', 'cvc_check_gte', 'cvc_check_contains', 'cvc_check_not_contains', 'cvc_check_starts_with', 'cvc_check_not_starts_with', 'cvc_check_ends_with', 'cvc_check_not_ends_with', 'last4', 'last4_not', 'last4_in', 'last4_not_in', 'last4_lt', 'last4_lte', 'last4_gt', 'last4_gte', 'last4_contains', 'last4_not_contains', 'last4_starts_with', 'last4_not_starts_with', 'last4_ends_with', 'last4_not_ends_with', 'plan', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    identifier = sgqlc.types.Field(String, graphql_name='identifier')
    identifier_not = sgqlc.types.Field(String, graphql_name='identifier_not')
    identifier_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='identifier_in')
    identifier_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='identifier_not_in')
    identifier_lt = sgqlc.types.Field(String, graphql_name='identifier_lt')
    identifier_lte = sgqlc.types.Field(String, graphql_name='identifier_lte')
    identifier_gt = sgqlc.types.Field(String, graphql_name='identifier_gt')
    identifier_gte = sgqlc.types.Field(String, graphql_name='identifier_gte')
    identifier_contains = sgqlc.types.Field(String, graphql_name='identifier_contains')
    identifier_not_contains = sgqlc.types.Field(String, graphql_name='identifier_not_contains')
    identifier_starts_with = sgqlc.types.Field(String, graphql_name='identifier_starts_with')
    identifier_not_starts_with = sgqlc.types.Field(String, graphql_name='identifier_not_starts_with')
    identifier_ends_with = sgqlc.types.Field(String, graphql_name='identifier_ends_with')
    identifier_not_ends_with = sgqlc.types.Field(String, graphql_name='identifier_not_ends_with')
    name = sgqlc.types.Field(String, graphql_name='name')
    name_not = sgqlc.types.Field(String, graphql_name='name_not')
    name_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='name_in')
    name_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='name_not_in')
    name_lt = sgqlc.types.Field(String, graphql_name='name_lt')
    name_lte = sgqlc.types.Field(String, graphql_name='name_lte')
    name_gt = sgqlc.types.Field(String, graphql_name='name_gt')
    name_gte = sgqlc.types.Field(String, graphql_name='name_gte')
    name_contains = sgqlc.types.Field(String, graphql_name='name_contains')
    name_not_contains = sgqlc.types.Field(String, graphql_name='name_not_contains')
    name_starts_with = sgqlc.types.Field(String, graphql_name='name_starts_with')
    name_not_starts_with = sgqlc.types.Field(String, graphql_name='name_not_starts_with')
    name_ends_with = sgqlc.types.Field(String, graphql_name='name_ends_with')
    name_not_ends_with = sgqlc.types.Field(String, graphql_name='name_not_ends_with')
    brand = sgqlc.types.Field(String, graphql_name='brand')
    brand_not = sgqlc.types.Field(String, graphql_name='brand_not')
    brand_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='brand_in')
    brand_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='brand_not_in')
    brand_lt = sgqlc.types.Field(String, graphql_name='brand_lt')
    brand_lte = sgqlc.types.Field(String, graphql_name='brand_lte')
    brand_gt = sgqlc.types.Field(String, graphql_name='brand_gt')
    brand_gte = sgqlc.types.Field(String, graphql_name='brand_gte')
    brand_contains = sgqlc.types.Field(String, graphql_name='brand_contains')
    brand_not_contains = sgqlc.types.Field(String, graphql_name='brand_not_contains')
    brand_starts_with = sgqlc.types.Field(String, graphql_name='brand_starts_with')
    brand_not_starts_with = sgqlc.types.Field(String, graphql_name='brand_not_starts_with')
    brand_ends_with = sgqlc.types.Field(String, graphql_name='brand_ends_with')
    brand_not_ends_with = sgqlc.types.Field(String, graphql_name='brand_not_ends_with')
    country = sgqlc.types.Field(String, graphql_name='country')
    country_not = sgqlc.types.Field(String, graphql_name='country_not')
    country_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='country_in')
    country_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='country_not_in')
    country_lt = sgqlc.types.Field(String, graphql_name='country_lt')
    country_lte = sgqlc.types.Field(String, graphql_name='country_lte')
    country_gt = sgqlc.types.Field(String, graphql_name='country_gt')
    country_gte = sgqlc.types.Field(String, graphql_name='country_gte')
    country_contains = sgqlc.types.Field(String, graphql_name='country_contains')
    country_not_contains = sgqlc.types.Field(String, graphql_name='country_not_contains')
    country_starts_with = sgqlc.types.Field(String, graphql_name='country_starts_with')
    country_not_starts_with = sgqlc.types.Field(String, graphql_name='country_not_starts_with')
    country_ends_with = sgqlc.types.Field(String, graphql_name='country_ends_with')
    country_not_ends_with = sgqlc.types.Field(String, graphql_name='country_not_ends_with')
    exp_month = sgqlc.types.Field(Int, graphql_name='expMonth')
    exp_month_not = sgqlc.types.Field(Int, graphql_name='expMonth_not')
    exp_month_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Int)), graphql_name='expMonth_in')
    exp_month_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Int)), graphql_name='expMonth_not_in')
    exp_month_lt = sgqlc.types.Field(Int, graphql_name='expMonth_lt')
    exp_month_lte = sgqlc.types.Field(Int, graphql_name='expMonth_lte')
    exp_month_gt = sgqlc.types.Field(Int, graphql_name='expMonth_gt')
    exp_month_gte = sgqlc.types.Field(Int, graphql_name='expMonth_gte')
    exp_year = sgqlc.types.Field(Int, graphql_name='expYear')
    exp_year_not = sgqlc.types.Field(Int, graphql_name='expYear_not')
    exp_year_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Int)), graphql_name='expYear_in')
    exp_year_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Int)), graphql_name='expYear_not_in')
    exp_year_lt = sgqlc.types.Field(Int, graphql_name='expYear_lt')
    exp_year_lte = sgqlc.types.Field(Int, graphql_name='expYear_lte')
    exp_year_gt = sgqlc.types.Field(Int, graphql_name='expYear_gt')
    exp_year_gte = sgqlc.types.Field(Int, graphql_name='expYear_gte')
    funding = sgqlc.types.Field(String, graphql_name='funding')
    funding_not = sgqlc.types.Field(String, graphql_name='funding_not')
    funding_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='funding_in')
    funding_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='funding_not_in')
    funding_lt = sgqlc.types.Field(String, graphql_name='funding_lt')
    funding_lte = sgqlc.types.Field(String, graphql_name='funding_lte')
    funding_gt = sgqlc.types.Field(String, graphql_name='funding_gt')
    funding_gte = sgqlc.types.Field(String, graphql_name='funding_gte')
    funding_contains = sgqlc.types.Field(String, graphql_name='funding_contains')
    funding_not_contains = sgqlc.types.Field(String, graphql_name='funding_not_contains')
    funding_starts_with = sgqlc.types.Field(String, graphql_name='funding_starts_with')
    funding_not_starts_with = sgqlc.types.Field(String, graphql_name='funding_not_starts_with')
    funding_ends_with = sgqlc.types.Field(String, graphql_name='funding_ends_with')
    funding_not_ends_with = sgqlc.types.Field(String, graphql_name='funding_not_ends_with')
    cvc_check = sgqlc.types.Field(String, graphql_name='cvcCheck')
    cvc_check_not = sgqlc.types.Field(String, graphql_name='cvcCheck_not')
    cvc_check_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='cvcCheck_in')
    cvc_check_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='cvcCheck_not_in')
    cvc_check_lt = sgqlc.types.Field(String, graphql_name='cvcCheck_lt')
    cvc_check_lte = sgqlc.types.Field(String, graphql_name='cvcCheck_lte')
    cvc_check_gt = sgqlc.types.Field(String, graphql_name='cvcCheck_gt')
    cvc_check_gte = sgqlc.types.Field(String, graphql_name='cvcCheck_gte')
    cvc_check_contains = sgqlc.types.Field(String, graphql_name='cvcCheck_contains')
    cvc_check_not_contains = sgqlc.types.Field(String, graphql_name='cvcCheck_not_contains')
    cvc_check_starts_with = sgqlc.types.Field(String, graphql_name='cvcCheck_starts_with')
    cvc_check_not_starts_with = sgqlc.types.Field(String, graphql_name='cvcCheck_not_starts_with')
    cvc_check_ends_with = sgqlc.types.Field(String, graphql_name='cvcCheck_ends_with')
    cvc_check_not_ends_with = sgqlc.types.Field(String, graphql_name='cvcCheck_not_ends_with')
    last4 = sgqlc.types.Field(String, graphql_name='last4')
    last4_not = sgqlc.types.Field(String, graphql_name='last4_not')
    last4_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='last4_in')
    last4_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='last4_not_in')
    last4_lt = sgqlc.types.Field(String, graphql_name='last4_lt')
    last4_lte = sgqlc.types.Field(String, graphql_name='last4_lte')
    last4_gt = sgqlc.types.Field(String, graphql_name='last4_gt')
    last4_gte = sgqlc.types.Field(String, graphql_name='last4_gte')
    last4_contains = sgqlc.types.Field(String, graphql_name='last4_contains')
    last4_not_contains = sgqlc.types.Field(String, graphql_name='last4_not_contains')
    last4_starts_with = sgqlc.types.Field(String, graphql_name='last4_starts_with')
    last4_not_starts_with = sgqlc.types.Field(String, graphql_name='last4_not_starts_with')
    last4_ends_with = sgqlc.types.Field(String, graphql_name='last4_ends_with')
    last4_not_ends_with = sgqlc.types.Field(String, graphql_name='last4_not_ends_with')
    plan = sgqlc.types.Field('CompanySubscriptionPlanWhereInput', graphql_name='plan')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanySubscriptionPlanCardWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanySubscriptionPlanCardWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanySubscriptionPlanCardWhereInput')), graphql_name='NOT')


class CompanySubscriptionPlanCardWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'identifier')
    id = sgqlc.types.Field(ID, graphql_name='id')
    identifier = sgqlc.types.Field(String, graphql_name='identifier')


class CompanySubscriptionPlanCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'cus_id', 'sub_id', 'plan_id', 'plan_name', 'status', 'current_period_start', 'current_period_end', 'cancel_at', 'canceled_at', 'cancel_at_period_end', 'ended_at', 'trial_start', 'trial_end', 'is_paid', 'payment_intent_id', 'payment_intent_status', 'payment_intent_client_secret', 'card', 'company', 'user')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    cus_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cusId')
    sub_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='subId')
    plan_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='planId')
    plan_name = sgqlc.types.Field(String, graphql_name='planName')
    status = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='status')
    current_period_start = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='currentPeriodStart')
    current_period_end = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='currentPeriodEnd')
    cancel_at = sgqlc.types.Field(DateTime, graphql_name='cancelAt')
    canceled_at = sgqlc.types.Field(DateTime, graphql_name='canceledAt')
    cancel_at_period_end = sgqlc.types.Field(Boolean, graphql_name='cancelAtPeriodEnd')
    ended_at = sgqlc.types.Field(DateTime, graphql_name='endedAt')
    trial_start = sgqlc.types.Field(DateTime, graphql_name='trialStart')
    trial_end = sgqlc.types.Field(DateTime, graphql_name='trialEnd')
    is_paid = sgqlc.types.Field(Boolean, graphql_name='isPaid')
    payment_intent_id = sgqlc.types.Field(String, graphql_name='paymentIntentId')
    payment_intent_status = sgqlc.types.Field(String, graphql_name='paymentIntentStatus')
    payment_intent_client_secret = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret')
    card = sgqlc.types.Field(CompanySubscriptionPlanCardCreateOneWithoutPlanInput, graphql_name='card')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutSubscriptionPlanInput), graphql_name='company')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutSubscriptionPlansInput'), graphql_name='user')


class CompanySubscriptionPlanCreateManyWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanySubscriptionPlanCreateWithoutUserInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanySubscriptionPlanWhereUniqueInput')), graphql_name='connect')


class CompanySubscriptionPlanCreateOneWithoutCardInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('CompanySubscriptionPlanCreateWithoutCardInput', graphql_name='create')
    connect = sgqlc.types.Field('CompanySubscriptionPlanWhereUniqueInput', graphql_name='connect')


class CompanySubscriptionPlanCreateOneWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('CompanySubscriptionPlanCreateWithoutCompanyInput', graphql_name='create')
    connect = sgqlc.types.Field('CompanySubscriptionPlanWhereUniqueInput', graphql_name='connect')


class CompanySubscriptionPlanCreateWithoutCardInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'cus_id', 'sub_id', 'plan_id', 'plan_name', 'status', 'current_period_start', 'current_period_end', 'cancel_at', 'canceled_at', 'cancel_at_period_end', 'ended_at', 'trial_start', 'trial_end', 'is_paid', 'payment_intent_id', 'payment_intent_status', 'payment_intent_client_secret', 'company', 'user')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    cus_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cusId')
    sub_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='subId')
    plan_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='planId')
    plan_name = sgqlc.types.Field(String, graphql_name='planName')
    status = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='status')
    current_period_start = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='currentPeriodStart')
    current_period_end = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='currentPeriodEnd')
    cancel_at = sgqlc.types.Field(DateTime, graphql_name='cancelAt')
    canceled_at = sgqlc.types.Field(DateTime, graphql_name='canceledAt')
    cancel_at_period_end = sgqlc.types.Field(Boolean, graphql_name='cancelAtPeriodEnd')
    ended_at = sgqlc.types.Field(DateTime, graphql_name='endedAt')
    trial_start = sgqlc.types.Field(DateTime, graphql_name='trialStart')
    trial_end = sgqlc.types.Field(DateTime, graphql_name='trialEnd')
    is_paid = sgqlc.types.Field(Boolean, graphql_name='isPaid')
    payment_intent_id = sgqlc.types.Field(String, graphql_name='paymentIntentId')
    payment_intent_status = sgqlc.types.Field(String, graphql_name='paymentIntentStatus')
    payment_intent_client_secret = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutSubscriptionPlanInput), graphql_name='company')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutSubscriptionPlansInput'), graphql_name='user')


class CompanySubscriptionPlanCreateWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'cus_id', 'sub_id', 'plan_id', 'plan_name', 'status', 'current_period_start', 'current_period_end', 'cancel_at', 'canceled_at', 'cancel_at_period_end', 'ended_at', 'trial_start', 'trial_end', 'is_paid', 'payment_intent_id', 'payment_intent_status', 'payment_intent_client_secret', 'card', 'user')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    cus_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cusId')
    sub_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='subId')
    plan_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='planId')
    plan_name = sgqlc.types.Field(String, graphql_name='planName')
    status = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='status')
    current_period_start = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='currentPeriodStart')
    current_period_end = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='currentPeriodEnd')
    cancel_at = sgqlc.types.Field(DateTime, graphql_name='cancelAt')
    canceled_at = sgqlc.types.Field(DateTime, graphql_name='canceledAt')
    cancel_at_period_end = sgqlc.types.Field(Boolean, graphql_name='cancelAtPeriodEnd')
    ended_at = sgqlc.types.Field(DateTime, graphql_name='endedAt')
    trial_start = sgqlc.types.Field(DateTime, graphql_name='trialStart')
    trial_end = sgqlc.types.Field(DateTime, graphql_name='trialEnd')
    is_paid = sgqlc.types.Field(Boolean, graphql_name='isPaid')
    payment_intent_id = sgqlc.types.Field(String, graphql_name='paymentIntentId')
    payment_intent_status = sgqlc.types.Field(String, graphql_name='paymentIntentStatus')
    payment_intent_client_secret = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret')
    card = sgqlc.types.Field(CompanySubscriptionPlanCardCreateOneWithoutPlanInput, graphql_name='card')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutSubscriptionPlansInput'), graphql_name='user')


class CompanySubscriptionPlanCreateWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'cus_id', 'sub_id', 'plan_id', 'plan_name', 'status', 'current_period_start', 'current_period_end', 'cancel_at', 'canceled_at', 'cancel_at_period_end', 'ended_at', 'trial_start', 'trial_end', 'is_paid', 'payment_intent_id', 'payment_intent_status', 'payment_intent_client_secret', 'card', 'company')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    cus_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cusId')
    sub_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='subId')
    plan_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='planId')
    plan_name = sgqlc.types.Field(String, graphql_name='planName')
    status = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='status')
    current_period_start = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='currentPeriodStart')
    current_period_end = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='currentPeriodEnd')
    cancel_at = sgqlc.types.Field(DateTime, graphql_name='cancelAt')
    canceled_at = sgqlc.types.Field(DateTime, graphql_name='canceledAt')
    cancel_at_period_end = sgqlc.types.Field(Boolean, graphql_name='cancelAtPeriodEnd')
    ended_at = sgqlc.types.Field(DateTime, graphql_name='endedAt')
    trial_start = sgqlc.types.Field(DateTime, graphql_name='trialStart')
    trial_end = sgqlc.types.Field(DateTime, graphql_name='trialEnd')
    is_paid = sgqlc.types.Field(Boolean, graphql_name='isPaid')
    payment_intent_id = sgqlc.types.Field(String, graphql_name='paymentIntentId')
    payment_intent_status = sgqlc.types.Field(String, graphql_name='paymentIntentStatus')
    payment_intent_client_secret = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret')
    card = sgqlc.types.Field(CompanySubscriptionPlanCardCreateOneWithoutPlanInput, graphql_name='card')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutSubscriptionPlanInput), graphql_name='company')


class CompanySubscriptionPlanScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'cus_id', 'cus_id_not', 'cus_id_in', 'cus_id_not_in', 'cus_id_lt', 'cus_id_lte', 'cus_id_gt', 'cus_id_gte', 'cus_id_contains', 'cus_id_not_contains', 'cus_id_starts_with', 'cus_id_not_starts_with', 'cus_id_ends_with', 'cus_id_not_ends_with', 'sub_id', 'sub_id_not', 'sub_id_in', 'sub_id_not_in', 'sub_id_lt', 'sub_id_lte', 'sub_id_gt', 'sub_id_gte', 'sub_id_contains', 'sub_id_not_contains', 'sub_id_starts_with', 'sub_id_not_starts_with', 'sub_id_ends_with', 'sub_id_not_ends_with', 'plan_id', 'plan_id_not', 'plan_id_in', 'plan_id_not_in', 'plan_id_lt', 'plan_id_lte', 'plan_id_gt', 'plan_id_gte', 'plan_id_contains', 'plan_id_not_contains', 'plan_id_starts_with', 'plan_id_not_starts_with', 'plan_id_ends_with', 'plan_id_not_ends_with', 'plan_name', 'plan_name_not', 'plan_name_in', 'plan_name_not_in', 'plan_name_lt', 'plan_name_lte', 'plan_name_gt', 'plan_name_gte', 'plan_name_contains', 'plan_name_not_contains', 'plan_name_starts_with', 'plan_name_not_starts_with', 'plan_name_ends_with', 'plan_name_not_ends_with', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'status', 'status_not', 'status_in', 'status_not_in', 'status_lt', 'status_lte', 'status_gt', 'status_gte', 'status_contains', 'status_not_contains', 'status_starts_with', 'status_not_starts_with', 'status_ends_with', 'status_not_ends_with', 'current_period_start', 'current_period_start_not', 'current_period_start_in', 'current_period_start_not_in', 'current_period_start_lt', 'current_period_start_lte', 'current_period_start_gt', 'current_period_start_gte', 'current_period_end', 'current_period_end_not', 'current_period_end_in', 'current_period_end_not_in', 'current_period_end_lt', 'current_period_end_lte', 'current_period_end_gt', 'current_period_end_gte', 'cancel_at', 'cancel_at_not', 'cancel_at_in', 'cancel_at_not_in', 'cancel_at_lt', 'cancel_at_lte', 'cancel_at_gt', 'cancel_at_gte', 'canceled_at', 'canceled_at_not', 'canceled_at_in', 'canceled_at_not_in', 'canceled_at_lt', 'canceled_at_lte', 'canceled_at_gt', 'canceled_at_gte', 'cancel_at_period_end', 'cancel_at_period_end_not', 'ended_at', 'ended_at_not', 'ended_at_in', 'ended_at_not_in', 'ended_at_lt', 'ended_at_lte', 'ended_at_gt', 'ended_at_gte', 'trial_start', 'trial_start_not', 'trial_start_in', 'trial_start_not_in', 'trial_start_lt', 'trial_start_lte', 'trial_start_gt', 'trial_start_gte', 'trial_end', 'trial_end_not', 'trial_end_in', 'trial_end_not_in', 'trial_end_lt', 'trial_end_lte', 'trial_end_gt', 'trial_end_gte', 'is_paid', 'is_paid_not', 'payment_intent_id', 'payment_intent_id_not', 'payment_intent_id_in', 'payment_intent_id_not_in', 'payment_intent_id_lt', 'payment_intent_id_lte', 'payment_intent_id_gt', 'payment_intent_id_gte', 'payment_intent_id_contains', 'payment_intent_id_not_contains', 'payment_intent_id_starts_with', 'payment_intent_id_not_starts_with', 'payment_intent_id_ends_with', 'payment_intent_id_not_ends_with', 'payment_intent_status', 'payment_intent_status_not', 'payment_intent_status_in', 'payment_intent_status_not_in', 'payment_intent_status_lt', 'payment_intent_status_lte', 'payment_intent_status_gt', 'payment_intent_status_gte', 'payment_intent_status_contains', 'payment_intent_status_not_contains', 'payment_intent_status_starts_with', 'payment_intent_status_not_starts_with', 'payment_intent_status_ends_with', 'payment_intent_status_not_ends_with', 'payment_intent_client_secret', 'payment_intent_client_secret_not', 'payment_intent_client_secret_in', 'payment_intent_client_secret_not_in', 'payment_intent_client_secret_lt', 'payment_intent_client_secret_lte', 'payment_intent_client_secret_gt', 'payment_intent_client_secret_gte', 'payment_intent_client_secret_contains', 'payment_intent_client_secret_not_contains', 'payment_intent_client_secret_starts_with', 'payment_intent_client_secret_not_starts_with', 'payment_intent_client_secret_ends_with', 'payment_intent_client_secret_not_ends_with', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    cus_id = sgqlc.types.Field(String, graphql_name='cusId')
    cus_id_not = sgqlc.types.Field(String, graphql_name='cusId_not')
    cus_id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='cusId_in')
    cus_id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='cusId_not_in')
    cus_id_lt = sgqlc.types.Field(String, graphql_name='cusId_lt')
    cus_id_lte = sgqlc.types.Field(String, graphql_name='cusId_lte')
    cus_id_gt = sgqlc.types.Field(String, graphql_name='cusId_gt')
    cus_id_gte = sgqlc.types.Field(String, graphql_name='cusId_gte')
    cus_id_contains = sgqlc.types.Field(String, graphql_name='cusId_contains')
    cus_id_not_contains = sgqlc.types.Field(String, graphql_name='cusId_not_contains')
    cus_id_starts_with = sgqlc.types.Field(String, graphql_name='cusId_starts_with')
    cus_id_not_starts_with = sgqlc.types.Field(String, graphql_name='cusId_not_starts_with')
    cus_id_ends_with = sgqlc.types.Field(String, graphql_name='cusId_ends_with')
    cus_id_not_ends_with = sgqlc.types.Field(String, graphql_name='cusId_not_ends_with')
    sub_id = sgqlc.types.Field(String, graphql_name='subId')
    sub_id_not = sgqlc.types.Field(String, graphql_name='subId_not')
    sub_id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='subId_in')
    sub_id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='subId_not_in')
    sub_id_lt = sgqlc.types.Field(String, graphql_name='subId_lt')
    sub_id_lte = sgqlc.types.Field(String, graphql_name='subId_lte')
    sub_id_gt = sgqlc.types.Field(String, graphql_name='subId_gt')
    sub_id_gte = sgqlc.types.Field(String, graphql_name='subId_gte')
    sub_id_contains = sgqlc.types.Field(String, graphql_name='subId_contains')
    sub_id_not_contains = sgqlc.types.Field(String, graphql_name='subId_not_contains')
    sub_id_starts_with = sgqlc.types.Field(String, graphql_name='subId_starts_with')
    sub_id_not_starts_with = sgqlc.types.Field(String, graphql_name='subId_not_starts_with')
    sub_id_ends_with = sgqlc.types.Field(String, graphql_name='subId_ends_with')
    sub_id_not_ends_with = sgqlc.types.Field(String, graphql_name='subId_not_ends_with')
    plan_id = sgqlc.types.Field(String, graphql_name='planId')
    plan_id_not = sgqlc.types.Field(String, graphql_name='planId_not')
    plan_id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='planId_in')
    plan_id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='planId_not_in')
    plan_id_lt = sgqlc.types.Field(String, graphql_name='planId_lt')
    plan_id_lte = sgqlc.types.Field(String, graphql_name='planId_lte')
    plan_id_gt = sgqlc.types.Field(String, graphql_name='planId_gt')
    plan_id_gte = sgqlc.types.Field(String, graphql_name='planId_gte')
    plan_id_contains = sgqlc.types.Field(String, graphql_name='planId_contains')
    plan_id_not_contains = sgqlc.types.Field(String, graphql_name='planId_not_contains')
    plan_id_starts_with = sgqlc.types.Field(String, graphql_name='planId_starts_with')
    plan_id_not_starts_with = sgqlc.types.Field(String, graphql_name='planId_not_starts_with')
    plan_id_ends_with = sgqlc.types.Field(String, graphql_name='planId_ends_with')
    plan_id_not_ends_with = sgqlc.types.Field(String, graphql_name='planId_not_ends_with')
    plan_name = sgqlc.types.Field(String, graphql_name='planName')
    plan_name_not = sgqlc.types.Field(String, graphql_name='planName_not')
    plan_name_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='planName_in')
    plan_name_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='planName_not_in')
    plan_name_lt = sgqlc.types.Field(String, graphql_name='planName_lt')
    plan_name_lte = sgqlc.types.Field(String, graphql_name='planName_lte')
    plan_name_gt = sgqlc.types.Field(String, graphql_name='planName_gt')
    plan_name_gte = sgqlc.types.Field(String, graphql_name='planName_gte')
    plan_name_contains = sgqlc.types.Field(String, graphql_name='planName_contains')
    plan_name_not_contains = sgqlc.types.Field(String, graphql_name='planName_not_contains')
    plan_name_starts_with = sgqlc.types.Field(String, graphql_name='planName_starts_with')
    plan_name_not_starts_with = sgqlc.types.Field(String, graphql_name='planName_not_starts_with')
    plan_name_ends_with = sgqlc.types.Field(String, graphql_name='planName_ends_with')
    plan_name_not_ends_with = sgqlc.types.Field(String, graphql_name='planName_not_ends_with')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    status = sgqlc.types.Field(String, graphql_name='status')
    status_not = sgqlc.types.Field(String, graphql_name='status_not')
    status_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='status_in')
    status_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='status_not_in')
    status_lt = sgqlc.types.Field(String, graphql_name='status_lt')
    status_lte = sgqlc.types.Field(String, graphql_name='status_lte')
    status_gt = sgqlc.types.Field(String, graphql_name='status_gt')
    status_gte = sgqlc.types.Field(String, graphql_name='status_gte')
    status_contains = sgqlc.types.Field(String, graphql_name='status_contains')
    status_not_contains = sgqlc.types.Field(String, graphql_name='status_not_contains')
    status_starts_with = sgqlc.types.Field(String, graphql_name='status_starts_with')
    status_not_starts_with = sgqlc.types.Field(String, graphql_name='status_not_starts_with')
    status_ends_with = sgqlc.types.Field(String, graphql_name='status_ends_with')
    status_not_ends_with = sgqlc.types.Field(String, graphql_name='status_not_ends_with')
    current_period_start = sgqlc.types.Field(DateTime, graphql_name='currentPeriodStart')
    current_period_start_not = sgqlc.types.Field(DateTime, graphql_name='currentPeriodStart_not')
    current_period_start_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='currentPeriodStart_in')
    current_period_start_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='currentPeriodStart_not_in')
    current_period_start_lt = sgqlc.types.Field(DateTime, graphql_name='currentPeriodStart_lt')
    current_period_start_lte = sgqlc.types.Field(DateTime, graphql_name='currentPeriodStart_lte')
    current_period_start_gt = sgqlc.types.Field(DateTime, graphql_name='currentPeriodStart_gt')
    current_period_start_gte = sgqlc.types.Field(DateTime, graphql_name='currentPeriodStart_gte')
    current_period_end = sgqlc.types.Field(DateTime, graphql_name='currentPeriodEnd')
    current_period_end_not = sgqlc.types.Field(DateTime, graphql_name='currentPeriodEnd_not')
    current_period_end_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='currentPeriodEnd_in')
    current_period_end_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='currentPeriodEnd_not_in')
    current_period_end_lt = sgqlc.types.Field(DateTime, graphql_name='currentPeriodEnd_lt')
    current_period_end_lte = sgqlc.types.Field(DateTime, graphql_name='currentPeriodEnd_lte')
    current_period_end_gt = sgqlc.types.Field(DateTime, graphql_name='currentPeriodEnd_gt')
    current_period_end_gte = sgqlc.types.Field(DateTime, graphql_name='currentPeriodEnd_gte')
    cancel_at = sgqlc.types.Field(DateTime, graphql_name='cancelAt')
    cancel_at_not = sgqlc.types.Field(DateTime, graphql_name='cancelAt_not')
    cancel_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='cancelAt_in')
    cancel_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='cancelAt_not_in')
    cancel_at_lt = sgqlc.types.Field(DateTime, graphql_name='cancelAt_lt')
    cancel_at_lte = sgqlc.types.Field(DateTime, graphql_name='cancelAt_lte')
    cancel_at_gt = sgqlc.types.Field(DateTime, graphql_name='cancelAt_gt')
    cancel_at_gte = sgqlc.types.Field(DateTime, graphql_name='cancelAt_gte')
    canceled_at = sgqlc.types.Field(DateTime, graphql_name='canceledAt')
    canceled_at_not = sgqlc.types.Field(DateTime, graphql_name='canceledAt_not')
    canceled_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='canceledAt_in')
    canceled_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='canceledAt_not_in')
    canceled_at_lt = sgqlc.types.Field(DateTime, graphql_name='canceledAt_lt')
    canceled_at_lte = sgqlc.types.Field(DateTime, graphql_name='canceledAt_lte')
    canceled_at_gt = sgqlc.types.Field(DateTime, graphql_name='canceledAt_gt')
    canceled_at_gte = sgqlc.types.Field(DateTime, graphql_name='canceledAt_gte')
    cancel_at_period_end = sgqlc.types.Field(Boolean, graphql_name='cancelAtPeriodEnd')
    cancel_at_period_end_not = sgqlc.types.Field(Boolean, graphql_name='cancelAtPeriodEnd_not')
    ended_at = sgqlc.types.Field(DateTime, graphql_name='endedAt')
    ended_at_not = sgqlc.types.Field(DateTime, graphql_name='endedAt_not')
    ended_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='endedAt_in')
    ended_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='endedAt_not_in')
    ended_at_lt = sgqlc.types.Field(DateTime, graphql_name='endedAt_lt')
    ended_at_lte = sgqlc.types.Field(DateTime, graphql_name='endedAt_lte')
    ended_at_gt = sgqlc.types.Field(DateTime, graphql_name='endedAt_gt')
    ended_at_gte = sgqlc.types.Field(DateTime, graphql_name='endedAt_gte')
    trial_start = sgqlc.types.Field(DateTime, graphql_name='trialStart')
    trial_start_not = sgqlc.types.Field(DateTime, graphql_name='trialStart_not')
    trial_start_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='trialStart_in')
    trial_start_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='trialStart_not_in')
    trial_start_lt = sgqlc.types.Field(DateTime, graphql_name='trialStart_lt')
    trial_start_lte = sgqlc.types.Field(DateTime, graphql_name='trialStart_lte')
    trial_start_gt = sgqlc.types.Field(DateTime, graphql_name='trialStart_gt')
    trial_start_gte = sgqlc.types.Field(DateTime, graphql_name='trialStart_gte')
    trial_end = sgqlc.types.Field(DateTime, graphql_name='trialEnd')
    trial_end_not = sgqlc.types.Field(DateTime, graphql_name='trialEnd_not')
    trial_end_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='trialEnd_in')
    trial_end_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='trialEnd_not_in')
    trial_end_lt = sgqlc.types.Field(DateTime, graphql_name='trialEnd_lt')
    trial_end_lte = sgqlc.types.Field(DateTime, graphql_name='trialEnd_lte')
    trial_end_gt = sgqlc.types.Field(DateTime, graphql_name='trialEnd_gt')
    trial_end_gte = sgqlc.types.Field(DateTime, graphql_name='trialEnd_gte')
    is_paid = sgqlc.types.Field(Boolean, graphql_name='isPaid')
    is_paid_not = sgqlc.types.Field(Boolean, graphql_name='isPaid_not')
    payment_intent_id = sgqlc.types.Field(String, graphql_name='paymentIntentId')
    payment_intent_id_not = sgqlc.types.Field(String, graphql_name='paymentIntentId_not')
    payment_intent_id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='paymentIntentId_in')
    payment_intent_id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='paymentIntentId_not_in')
    payment_intent_id_lt = sgqlc.types.Field(String, graphql_name='paymentIntentId_lt')
    payment_intent_id_lte = sgqlc.types.Field(String, graphql_name='paymentIntentId_lte')
    payment_intent_id_gt = sgqlc.types.Field(String, graphql_name='paymentIntentId_gt')
    payment_intent_id_gte = sgqlc.types.Field(String, graphql_name='paymentIntentId_gte')
    payment_intent_id_contains = sgqlc.types.Field(String, graphql_name='paymentIntentId_contains')
    payment_intent_id_not_contains = sgqlc.types.Field(String, graphql_name='paymentIntentId_not_contains')
    payment_intent_id_starts_with = sgqlc.types.Field(String, graphql_name='paymentIntentId_starts_with')
    payment_intent_id_not_starts_with = sgqlc.types.Field(String, graphql_name='paymentIntentId_not_starts_with')
    payment_intent_id_ends_with = sgqlc.types.Field(String, graphql_name='paymentIntentId_ends_with')
    payment_intent_id_not_ends_with = sgqlc.types.Field(String, graphql_name='paymentIntentId_not_ends_with')
    payment_intent_status = sgqlc.types.Field(String, graphql_name='paymentIntentStatus')
    payment_intent_status_not = sgqlc.types.Field(String, graphql_name='paymentIntentStatus_not')
    payment_intent_status_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='paymentIntentStatus_in')
    payment_intent_status_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='paymentIntentStatus_not_in')
    payment_intent_status_lt = sgqlc.types.Field(String, graphql_name='paymentIntentStatus_lt')
    payment_intent_status_lte = sgqlc.types.Field(String, graphql_name='paymentIntentStatus_lte')
    payment_intent_status_gt = sgqlc.types.Field(String, graphql_name='paymentIntentStatus_gt')
    payment_intent_status_gte = sgqlc.types.Field(String, graphql_name='paymentIntentStatus_gte')
    payment_intent_status_contains = sgqlc.types.Field(String, graphql_name='paymentIntentStatus_contains')
    payment_intent_status_not_contains = sgqlc.types.Field(String, graphql_name='paymentIntentStatus_not_contains')
    payment_intent_status_starts_with = sgqlc.types.Field(String, graphql_name='paymentIntentStatus_starts_with')
    payment_intent_status_not_starts_with = sgqlc.types.Field(String, graphql_name='paymentIntentStatus_not_starts_with')
    payment_intent_status_ends_with = sgqlc.types.Field(String, graphql_name='paymentIntentStatus_ends_with')
    payment_intent_status_not_ends_with = sgqlc.types.Field(String, graphql_name='paymentIntentStatus_not_ends_with')
    payment_intent_client_secret = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret')
    payment_intent_client_secret_not = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret_not')
    payment_intent_client_secret_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='paymentIntentClientSecret_in')
    payment_intent_client_secret_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='paymentIntentClientSecret_not_in')
    payment_intent_client_secret_lt = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret_lt')
    payment_intent_client_secret_lte = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret_lte')
    payment_intent_client_secret_gt = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret_gt')
    payment_intent_client_secret_gte = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret_gte')
    payment_intent_client_secret_contains = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret_contains')
    payment_intent_client_secret_not_contains = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret_not_contains')
    payment_intent_client_secret_starts_with = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret_starts_with')
    payment_intent_client_secret_not_starts_with = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret_not_starts_with')
    payment_intent_client_secret_ends_with = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret_ends_with')
    payment_intent_client_secret_not_ends_with = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret_not_ends_with')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanySubscriptionPlanScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanySubscriptionPlanScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanySubscriptionPlanScalarWhereInput')), graphql_name='NOT')


class CompanySubscriptionPlanSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('CompanySubscriptionPlanWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanySubscriptionPlanSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanySubscriptionPlanSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanySubscriptionPlanSubscriptionWhereInput')), graphql_name='NOT')


class CompanySubscriptionPlanUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'cus_id', 'sub_id', 'plan_id', 'plan_name', 'status', 'current_period_start', 'current_period_end', 'cancel_at', 'canceled_at', 'cancel_at_period_end', 'ended_at', 'trial_start', 'trial_end', 'is_paid', 'payment_intent_id', 'payment_intent_status', 'payment_intent_client_secret', 'card', 'company', 'user')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    cus_id = sgqlc.types.Field(String, graphql_name='cusId')
    sub_id = sgqlc.types.Field(String, graphql_name='subId')
    plan_id = sgqlc.types.Field(String, graphql_name='planId')
    plan_name = sgqlc.types.Field(String, graphql_name='planName')
    status = sgqlc.types.Field(String, graphql_name='status')
    current_period_start = sgqlc.types.Field(DateTime, graphql_name='currentPeriodStart')
    current_period_end = sgqlc.types.Field(DateTime, graphql_name='currentPeriodEnd')
    cancel_at = sgqlc.types.Field(DateTime, graphql_name='cancelAt')
    canceled_at = sgqlc.types.Field(DateTime, graphql_name='canceledAt')
    cancel_at_period_end = sgqlc.types.Field(Boolean, graphql_name='cancelAtPeriodEnd')
    ended_at = sgqlc.types.Field(DateTime, graphql_name='endedAt')
    trial_start = sgqlc.types.Field(DateTime, graphql_name='trialStart')
    trial_end = sgqlc.types.Field(DateTime, graphql_name='trialEnd')
    is_paid = sgqlc.types.Field(Boolean, graphql_name='isPaid')
    payment_intent_id = sgqlc.types.Field(String, graphql_name='paymentIntentId')
    payment_intent_status = sgqlc.types.Field(String, graphql_name='paymentIntentStatus')
    payment_intent_client_secret = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret')
    card = sgqlc.types.Field(CompanySubscriptionPlanCardUpdateOneWithoutPlanInput, graphql_name='card')
    company = sgqlc.types.Field('CompanyUpdateOneRequiredWithoutSubscriptionPlanInput', graphql_name='company')
    user = sgqlc.types.Field('UserUpdateOneRequiredWithoutSubscriptionPlansInput', graphql_name='user')


class CompanySubscriptionPlanUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'cus_id', 'sub_id', 'plan_id', 'plan_name', 'status', 'current_period_start', 'current_period_end', 'cancel_at', 'canceled_at', 'cancel_at_period_end', 'ended_at', 'trial_start', 'trial_end', 'is_paid', 'payment_intent_id', 'payment_intent_status', 'payment_intent_client_secret')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    cus_id = sgqlc.types.Field(String, graphql_name='cusId')
    sub_id = sgqlc.types.Field(String, graphql_name='subId')
    plan_id = sgqlc.types.Field(String, graphql_name='planId')
    plan_name = sgqlc.types.Field(String, graphql_name='planName')
    status = sgqlc.types.Field(String, graphql_name='status')
    current_period_start = sgqlc.types.Field(DateTime, graphql_name='currentPeriodStart')
    current_period_end = sgqlc.types.Field(DateTime, graphql_name='currentPeriodEnd')
    cancel_at = sgqlc.types.Field(DateTime, graphql_name='cancelAt')
    canceled_at = sgqlc.types.Field(DateTime, graphql_name='canceledAt')
    cancel_at_period_end = sgqlc.types.Field(Boolean, graphql_name='cancelAtPeriodEnd')
    ended_at = sgqlc.types.Field(DateTime, graphql_name='endedAt')
    trial_start = sgqlc.types.Field(DateTime, graphql_name='trialStart')
    trial_end = sgqlc.types.Field(DateTime, graphql_name='trialEnd')
    is_paid = sgqlc.types.Field(Boolean, graphql_name='isPaid')
    payment_intent_id = sgqlc.types.Field(String, graphql_name='paymentIntentId')
    payment_intent_status = sgqlc.types.Field(String, graphql_name='paymentIntentStatus')
    payment_intent_client_secret = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret')


class CompanySubscriptionPlanUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'cus_id', 'sub_id', 'plan_id', 'plan_name', 'status', 'current_period_start', 'current_period_end', 'cancel_at', 'canceled_at', 'cancel_at_period_end', 'ended_at', 'trial_start', 'trial_end', 'is_paid', 'payment_intent_id', 'payment_intent_status', 'payment_intent_client_secret')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    cus_id = sgqlc.types.Field(String, graphql_name='cusId')
    sub_id = sgqlc.types.Field(String, graphql_name='subId')
    plan_id = sgqlc.types.Field(String, graphql_name='planId')
    plan_name = sgqlc.types.Field(String, graphql_name='planName')
    status = sgqlc.types.Field(String, graphql_name='status')
    current_period_start = sgqlc.types.Field(DateTime, graphql_name='currentPeriodStart')
    current_period_end = sgqlc.types.Field(DateTime, graphql_name='currentPeriodEnd')
    cancel_at = sgqlc.types.Field(DateTime, graphql_name='cancelAt')
    canceled_at = sgqlc.types.Field(DateTime, graphql_name='canceledAt')
    cancel_at_period_end = sgqlc.types.Field(Boolean, graphql_name='cancelAtPeriodEnd')
    ended_at = sgqlc.types.Field(DateTime, graphql_name='endedAt')
    trial_start = sgqlc.types.Field(DateTime, graphql_name='trialStart')
    trial_end = sgqlc.types.Field(DateTime, graphql_name='trialEnd')
    is_paid = sgqlc.types.Field(Boolean, graphql_name='isPaid')
    payment_intent_id = sgqlc.types.Field(String, graphql_name='paymentIntentId')
    payment_intent_status = sgqlc.types.Field(String, graphql_name='paymentIntentStatus')
    payment_intent_client_secret = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret')


class CompanySubscriptionPlanUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(CompanySubscriptionPlanScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(CompanySubscriptionPlanUpdateManyDataInput), graphql_name='data')


class CompanySubscriptionPlanUpdateManyWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CompanySubscriptionPlanCreateWithoutUserInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanySubscriptionPlanWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanySubscriptionPlanWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanySubscriptionPlanWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanySubscriptionPlanWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanySubscriptionPlanUpdateWithWhereUniqueWithoutUserInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanySubscriptionPlanUpsertWithWhereUniqueWithoutUserInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CompanySubscriptionPlanScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CompanySubscriptionPlanUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class CompanySubscriptionPlanUpdateOneRequiredWithoutCardInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(CompanySubscriptionPlanCreateWithoutCardInput, graphql_name='create')
    update = sgqlc.types.Field('CompanySubscriptionPlanUpdateWithoutCardDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('CompanySubscriptionPlanUpsertWithoutCardInput', graphql_name='upsert')
    connect = sgqlc.types.Field('CompanySubscriptionPlanWhereUniqueInput', graphql_name='connect')


class CompanySubscriptionPlanUpdateOneWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(CompanySubscriptionPlanCreateWithoutCompanyInput, graphql_name='create')
    update = sgqlc.types.Field('CompanySubscriptionPlanUpdateWithoutCompanyDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('CompanySubscriptionPlanUpsertWithoutCompanyInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('CompanySubscriptionPlanWhereUniqueInput', graphql_name='connect')


class CompanySubscriptionPlanUpdateWithWhereUniqueWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('CompanySubscriptionPlanWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('CompanySubscriptionPlanUpdateWithoutUserDataInput'), graphql_name='data')


class CompanySubscriptionPlanUpdateWithoutCardDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'cus_id', 'sub_id', 'plan_id', 'plan_name', 'status', 'current_period_start', 'current_period_end', 'cancel_at', 'canceled_at', 'cancel_at_period_end', 'ended_at', 'trial_start', 'trial_end', 'is_paid', 'payment_intent_id', 'payment_intent_status', 'payment_intent_client_secret', 'company', 'user')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    cus_id = sgqlc.types.Field(String, graphql_name='cusId')
    sub_id = sgqlc.types.Field(String, graphql_name='subId')
    plan_id = sgqlc.types.Field(String, graphql_name='planId')
    plan_name = sgqlc.types.Field(String, graphql_name='planName')
    status = sgqlc.types.Field(String, graphql_name='status')
    current_period_start = sgqlc.types.Field(DateTime, graphql_name='currentPeriodStart')
    current_period_end = sgqlc.types.Field(DateTime, graphql_name='currentPeriodEnd')
    cancel_at = sgqlc.types.Field(DateTime, graphql_name='cancelAt')
    canceled_at = sgqlc.types.Field(DateTime, graphql_name='canceledAt')
    cancel_at_period_end = sgqlc.types.Field(Boolean, graphql_name='cancelAtPeriodEnd')
    ended_at = sgqlc.types.Field(DateTime, graphql_name='endedAt')
    trial_start = sgqlc.types.Field(DateTime, graphql_name='trialStart')
    trial_end = sgqlc.types.Field(DateTime, graphql_name='trialEnd')
    is_paid = sgqlc.types.Field(Boolean, graphql_name='isPaid')
    payment_intent_id = sgqlc.types.Field(String, graphql_name='paymentIntentId')
    payment_intent_status = sgqlc.types.Field(String, graphql_name='paymentIntentStatus')
    payment_intent_client_secret = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret')
    company = sgqlc.types.Field('CompanyUpdateOneRequiredWithoutSubscriptionPlanInput', graphql_name='company')
    user = sgqlc.types.Field('UserUpdateOneRequiredWithoutSubscriptionPlansInput', graphql_name='user')


class CompanySubscriptionPlanUpdateWithoutCompanyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'cus_id', 'sub_id', 'plan_id', 'plan_name', 'status', 'current_period_start', 'current_period_end', 'cancel_at', 'canceled_at', 'cancel_at_period_end', 'ended_at', 'trial_start', 'trial_end', 'is_paid', 'payment_intent_id', 'payment_intent_status', 'payment_intent_client_secret', 'card', 'user')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    cus_id = sgqlc.types.Field(String, graphql_name='cusId')
    sub_id = sgqlc.types.Field(String, graphql_name='subId')
    plan_id = sgqlc.types.Field(String, graphql_name='planId')
    plan_name = sgqlc.types.Field(String, graphql_name='planName')
    status = sgqlc.types.Field(String, graphql_name='status')
    current_period_start = sgqlc.types.Field(DateTime, graphql_name='currentPeriodStart')
    current_period_end = sgqlc.types.Field(DateTime, graphql_name='currentPeriodEnd')
    cancel_at = sgqlc.types.Field(DateTime, graphql_name='cancelAt')
    canceled_at = sgqlc.types.Field(DateTime, graphql_name='canceledAt')
    cancel_at_period_end = sgqlc.types.Field(Boolean, graphql_name='cancelAtPeriodEnd')
    ended_at = sgqlc.types.Field(DateTime, graphql_name='endedAt')
    trial_start = sgqlc.types.Field(DateTime, graphql_name='trialStart')
    trial_end = sgqlc.types.Field(DateTime, graphql_name='trialEnd')
    is_paid = sgqlc.types.Field(Boolean, graphql_name='isPaid')
    payment_intent_id = sgqlc.types.Field(String, graphql_name='paymentIntentId')
    payment_intent_status = sgqlc.types.Field(String, graphql_name='paymentIntentStatus')
    payment_intent_client_secret = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret')
    card = sgqlc.types.Field(CompanySubscriptionPlanCardUpdateOneWithoutPlanInput, graphql_name='card')
    user = sgqlc.types.Field('UserUpdateOneRequiredWithoutSubscriptionPlansInput', graphql_name='user')


class CompanySubscriptionPlanUpdateWithoutUserDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'cus_id', 'sub_id', 'plan_id', 'plan_name', 'status', 'current_period_start', 'current_period_end', 'cancel_at', 'canceled_at', 'cancel_at_period_end', 'ended_at', 'trial_start', 'trial_end', 'is_paid', 'payment_intent_id', 'payment_intent_status', 'payment_intent_client_secret', 'card', 'company')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    cus_id = sgqlc.types.Field(String, graphql_name='cusId')
    sub_id = sgqlc.types.Field(String, graphql_name='subId')
    plan_id = sgqlc.types.Field(String, graphql_name='planId')
    plan_name = sgqlc.types.Field(String, graphql_name='planName')
    status = sgqlc.types.Field(String, graphql_name='status')
    current_period_start = sgqlc.types.Field(DateTime, graphql_name='currentPeriodStart')
    current_period_end = sgqlc.types.Field(DateTime, graphql_name='currentPeriodEnd')
    cancel_at = sgqlc.types.Field(DateTime, graphql_name='cancelAt')
    canceled_at = sgqlc.types.Field(DateTime, graphql_name='canceledAt')
    cancel_at_period_end = sgqlc.types.Field(Boolean, graphql_name='cancelAtPeriodEnd')
    ended_at = sgqlc.types.Field(DateTime, graphql_name='endedAt')
    trial_start = sgqlc.types.Field(DateTime, graphql_name='trialStart')
    trial_end = sgqlc.types.Field(DateTime, graphql_name='trialEnd')
    is_paid = sgqlc.types.Field(Boolean, graphql_name='isPaid')
    payment_intent_id = sgqlc.types.Field(String, graphql_name='paymentIntentId')
    payment_intent_status = sgqlc.types.Field(String, graphql_name='paymentIntentStatus')
    payment_intent_client_secret = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret')
    card = sgqlc.types.Field(CompanySubscriptionPlanCardUpdateOneWithoutPlanInput, graphql_name='card')
    company = sgqlc.types.Field('CompanyUpdateOneRequiredWithoutSubscriptionPlanInput', graphql_name='company')


class CompanySubscriptionPlanUpsertWithWhereUniqueWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('CompanySubscriptionPlanWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(CompanySubscriptionPlanUpdateWithoutUserDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CompanySubscriptionPlanCreateWithoutUserInput), graphql_name='create')


class CompanySubscriptionPlanUpsertWithoutCardInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(CompanySubscriptionPlanUpdateWithoutCardDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CompanySubscriptionPlanCreateWithoutCardInput), graphql_name='create')


class CompanySubscriptionPlanUpsertWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(CompanySubscriptionPlanUpdateWithoutCompanyDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CompanySubscriptionPlanCreateWithoutCompanyInput), graphql_name='create')


class CompanySubscriptionPlanWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'cus_id', 'cus_id_not', 'cus_id_in', 'cus_id_not_in', 'cus_id_lt', 'cus_id_lte', 'cus_id_gt', 'cus_id_gte', 'cus_id_contains', 'cus_id_not_contains', 'cus_id_starts_with', 'cus_id_not_starts_with', 'cus_id_ends_with', 'cus_id_not_ends_with', 'sub_id', 'sub_id_not', 'sub_id_in', 'sub_id_not_in', 'sub_id_lt', 'sub_id_lte', 'sub_id_gt', 'sub_id_gte', 'sub_id_contains', 'sub_id_not_contains', 'sub_id_starts_with', 'sub_id_not_starts_with', 'sub_id_ends_with', 'sub_id_not_ends_with', 'plan_id', 'plan_id_not', 'plan_id_in', 'plan_id_not_in', 'plan_id_lt', 'plan_id_lte', 'plan_id_gt', 'plan_id_gte', 'plan_id_contains', 'plan_id_not_contains', 'plan_id_starts_with', 'plan_id_not_starts_with', 'plan_id_ends_with', 'plan_id_not_ends_with', 'plan_name', 'plan_name_not', 'plan_name_in', 'plan_name_not_in', 'plan_name_lt', 'plan_name_lte', 'plan_name_gt', 'plan_name_gte', 'plan_name_contains', 'plan_name_not_contains', 'plan_name_starts_with', 'plan_name_not_starts_with', 'plan_name_ends_with', 'plan_name_not_ends_with', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'status', 'status_not', 'status_in', 'status_not_in', 'status_lt', 'status_lte', 'status_gt', 'status_gte', 'status_contains', 'status_not_contains', 'status_starts_with', 'status_not_starts_with', 'status_ends_with', 'status_not_ends_with', 'current_period_start', 'current_period_start_not', 'current_period_start_in', 'current_period_start_not_in', 'current_period_start_lt', 'current_period_start_lte', 'current_period_start_gt', 'current_period_start_gte', 'current_period_end', 'current_period_end_not', 'current_period_end_in', 'current_period_end_not_in', 'current_period_end_lt', 'current_period_end_lte', 'current_period_end_gt', 'current_period_end_gte', 'cancel_at', 'cancel_at_not', 'cancel_at_in', 'cancel_at_not_in', 'cancel_at_lt', 'cancel_at_lte', 'cancel_at_gt', 'cancel_at_gte', 'canceled_at', 'canceled_at_not', 'canceled_at_in', 'canceled_at_not_in', 'canceled_at_lt', 'canceled_at_lte', 'canceled_at_gt', 'canceled_at_gte', 'cancel_at_period_end', 'cancel_at_period_end_not', 'ended_at', 'ended_at_not', 'ended_at_in', 'ended_at_not_in', 'ended_at_lt', 'ended_at_lte', 'ended_at_gt', 'ended_at_gte', 'trial_start', 'trial_start_not', 'trial_start_in', 'trial_start_not_in', 'trial_start_lt', 'trial_start_lte', 'trial_start_gt', 'trial_start_gte', 'trial_end', 'trial_end_not', 'trial_end_in', 'trial_end_not_in', 'trial_end_lt', 'trial_end_lte', 'trial_end_gt', 'trial_end_gte', 'is_paid', 'is_paid_not', 'payment_intent_id', 'payment_intent_id_not', 'payment_intent_id_in', 'payment_intent_id_not_in', 'payment_intent_id_lt', 'payment_intent_id_lte', 'payment_intent_id_gt', 'payment_intent_id_gte', 'payment_intent_id_contains', 'payment_intent_id_not_contains', 'payment_intent_id_starts_with', 'payment_intent_id_not_starts_with', 'payment_intent_id_ends_with', 'payment_intent_id_not_ends_with', 'payment_intent_status', 'payment_intent_status_not', 'payment_intent_status_in', 'payment_intent_status_not_in', 'payment_intent_status_lt', 'payment_intent_status_lte', 'payment_intent_status_gt', 'payment_intent_status_gte', 'payment_intent_status_contains', 'payment_intent_status_not_contains', 'payment_intent_status_starts_with', 'payment_intent_status_not_starts_with', 'payment_intent_status_ends_with', 'payment_intent_status_not_ends_with', 'payment_intent_client_secret', 'payment_intent_client_secret_not', 'payment_intent_client_secret_in', 'payment_intent_client_secret_not_in', 'payment_intent_client_secret_lt', 'payment_intent_client_secret_lte', 'payment_intent_client_secret_gt', 'payment_intent_client_secret_gte', 'payment_intent_client_secret_contains', 'payment_intent_client_secret_not_contains', 'payment_intent_client_secret_starts_with', 'payment_intent_client_secret_not_starts_with', 'payment_intent_client_secret_ends_with', 'payment_intent_client_secret_not_ends_with', 'card', 'company', 'user', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    cus_id = sgqlc.types.Field(String, graphql_name='cusId')
    cus_id_not = sgqlc.types.Field(String, graphql_name='cusId_not')
    cus_id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='cusId_in')
    cus_id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='cusId_not_in')
    cus_id_lt = sgqlc.types.Field(String, graphql_name='cusId_lt')
    cus_id_lte = sgqlc.types.Field(String, graphql_name='cusId_lte')
    cus_id_gt = sgqlc.types.Field(String, graphql_name='cusId_gt')
    cus_id_gte = sgqlc.types.Field(String, graphql_name='cusId_gte')
    cus_id_contains = sgqlc.types.Field(String, graphql_name='cusId_contains')
    cus_id_not_contains = sgqlc.types.Field(String, graphql_name='cusId_not_contains')
    cus_id_starts_with = sgqlc.types.Field(String, graphql_name='cusId_starts_with')
    cus_id_not_starts_with = sgqlc.types.Field(String, graphql_name='cusId_not_starts_with')
    cus_id_ends_with = sgqlc.types.Field(String, graphql_name='cusId_ends_with')
    cus_id_not_ends_with = sgqlc.types.Field(String, graphql_name='cusId_not_ends_with')
    sub_id = sgqlc.types.Field(String, graphql_name='subId')
    sub_id_not = sgqlc.types.Field(String, graphql_name='subId_not')
    sub_id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='subId_in')
    sub_id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='subId_not_in')
    sub_id_lt = sgqlc.types.Field(String, graphql_name='subId_lt')
    sub_id_lte = sgqlc.types.Field(String, graphql_name='subId_lte')
    sub_id_gt = sgqlc.types.Field(String, graphql_name='subId_gt')
    sub_id_gte = sgqlc.types.Field(String, graphql_name='subId_gte')
    sub_id_contains = sgqlc.types.Field(String, graphql_name='subId_contains')
    sub_id_not_contains = sgqlc.types.Field(String, graphql_name='subId_not_contains')
    sub_id_starts_with = sgqlc.types.Field(String, graphql_name='subId_starts_with')
    sub_id_not_starts_with = sgqlc.types.Field(String, graphql_name='subId_not_starts_with')
    sub_id_ends_with = sgqlc.types.Field(String, graphql_name='subId_ends_with')
    sub_id_not_ends_with = sgqlc.types.Field(String, graphql_name='subId_not_ends_with')
    plan_id = sgqlc.types.Field(String, graphql_name='planId')
    plan_id_not = sgqlc.types.Field(String, graphql_name='planId_not')
    plan_id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='planId_in')
    plan_id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='planId_not_in')
    plan_id_lt = sgqlc.types.Field(String, graphql_name='planId_lt')
    plan_id_lte = sgqlc.types.Field(String, graphql_name='planId_lte')
    plan_id_gt = sgqlc.types.Field(String, graphql_name='planId_gt')
    plan_id_gte = sgqlc.types.Field(String, graphql_name='planId_gte')
    plan_id_contains = sgqlc.types.Field(String, graphql_name='planId_contains')
    plan_id_not_contains = sgqlc.types.Field(String, graphql_name='planId_not_contains')
    plan_id_starts_with = sgqlc.types.Field(String, graphql_name='planId_starts_with')
    plan_id_not_starts_with = sgqlc.types.Field(String, graphql_name='planId_not_starts_with')
    plan_id_ends_with = sgqlc.types.Field(String, graphql_name='planId_ends_with')
    plan_id_not_ends_with = sgqlc.types.Field(String, graphql_name='planId_not_ends_with')
    plan_name = sgqlc.types.Field(String, graphql_name='planName')
    plan_name_not = sgqlc.types.Field(String, graphql_name='planName_not')
    plan_name_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='planName_in')
    plan_name_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='planName_not_in')
    plan_name_lt = sgqlc.types.Field(String, graphql_name='planName_lt')
    plan_name_lte = sgqlc.types.Field(String, graphql_name='planName_lte')
    plan_name_gt = sgqlc.types.Field(String, graphql_name='planName_gt')
    plan_name_gte = sgqlc.types.Field(String, graphql_name='planName_gte')
    plan_name_contains = sgqlc.types.Field(String, graphql_name='planName_contains')
    plan_name_not_contains = sgqlc.types.Field(String, graphql_name='planName_not_contains')
    plan_name_starts_with = sgqlc.types.Field(String, graphql_name='planName_starts_with')
    plan_name_not_starts_with = sgqlc.types.Field(String, graphql_name='planName_not_starts_with')
    plan_name_ends_with = sgqlc.types.Field(String, graphql_name='planName_ends_with')
    plan_name_not_ends_with = sgqlc.types.Field(String, graphql_name='planName_not_ends_with')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    status = sgqlc.types.Field(String, graphql_name='status')
    status_not = sgqlc.types.Field(String, graphql_name='status_not')
    status_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='status_in')
    status_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='status_not_in')
    status_lt = sgqlc.types.Field(String, graphql_name='status_lt')
    status_lte = sgqlc.types.Field(String, graphql_name='status_lte')
    status_gt = sgqlc.types.Field(String, graphql_name='status_gt')
    status_gte = sgqlc.types.Field(String, graphql_name='status_gte')
    status_contains = sgqlc.types.Field(String, graphql_name='status_contains')
    status_not_contains = sgqlc.types.Field(String, graphql_name='status_not_contains')
    status_starts_with = sgqlc.types.Field(String, graphql_name='status_starts_with')
    status_not_starts_with = sgqlc.types.Field(String, graphql_name='status_not_starts_with')
    status_ends_with = sgqlc.types.Field(String, graphql_name='status_ends_with')
    status_not_ends_with = sgqlc.types.Field(String, graphql_name='status_not_ends_with')
    current_period_start = sgqlc.types.Field(DateTime, graphql_name='currentPeriodStart')
    current_period_start_not = sgqlc.types.Field(DateTime, graphql_name='currentPeriodStart_not')
    current_period_start_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='currentPeriodStart_in')
    current_period_start_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='currentPeriodStart_not_in')
    current_period_start_lt = sgqlc.types.Field(DateTime, graphql_name='currentPeriodStart_lt')
    current_period_start_lte = sgqlc.types.Field(DateTime, graphql_name='currentPeriodStart_lte')
    current_period_start_gt = sgqlc.types.Field(DateTime, graphql_name='currentPeriodStart_gt')
    current_period_start_gte = sgqlc.types.Field(DateTime, graphql_name='currentPeriodStart_gte')
    current_period_end = sgqlc.types.Field(DateTime, graphql_name='currentPeriodEnd')
    current_period_end_not = sgqlc.types.Field(DateTime, graphql_name='currentPeriodEnd_not')
    current_period_end_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='currentPeriodEnd_in')
    current_period_end_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='currentPeriodEnd_not_in')
    current_period_end_lt = sgqlc.types.Field(DateTime, graphql_name='currentPeriodEnd_lt')
    current_period_end_lte = sgqlc.types.Field(DateTime, graphql_name='currentPeriodEnd_lte')
    current_period_end_gt = sgqlc.types.Field(DateTime, graphql_name='currentPeriodEnd_gt')
    current_period_end_gte = sgqlc.types.Field(DateTime, graphql_name='currentPeriodEnd_gte')
    cancel_at = sgqlc.types.Field(DateTime, graphql_name='cancelAt')
    cancel_at_not = sgqlc.types.Field(DateTime, graphql_name='cancelAt_not')
    cancel_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='cancelAt_in')
    cancel_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='cancelAt_not_in')
    cancel_at_lt = sgqlc.types.Field(DateTime, graphql_name='cancelAt_lt')
    cancel_at_lte = sgqlc.types.Field(DateTime, graphql_name='cancelAt_lte')
    cancel_at_gt = sgqlc.types.Field(DateTime, graphql_name='cancelAt_gt')
    cancel_at_gte = sgqlc.types.Field(DateTime, graphql_name='cancelAt_gte')
    canceled_at = sgqlc.types.Field(DateTime, graphql_name='canceledAt')
    canceled_at_not = sgqlc.types.Field(DateTime, graphql_name='canceledAt_not')
    canceled_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='canceledAt_in')
    canceled_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='canceledAt_not_in')
    canceled_at_lt = sgqlc.types.Field(DateTime, graphql_name='canceledAt_lt')
    canceled_at_lte = sgqlc.types.Field(DateTime, graphql_name='canceledAt_lte')
    canceled_at_gt = sgqlc.types.Field(DateTime, graphql_name='canceledAt_gt')
    canceled_at_gte = sgqlc.types.Field(DateTime, graphql_name='canceledAt_gte')
    cancel_at_period_end = sgqlc.types.Field(Boolean, graphql_name='cancelAtPeriodEnd')
    cancel_at_period_end_not = sgqlc.types.Field(Boolean, graphql_name='cancelAtPeriodEnd_not')
    ended_at = sgqlc.types.Field(DateTime, graphql_name='endedAt')
    ended_at_not = sgqlc.types.Field(DateTime, graphql_name='endedAt_not')
    ended_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='endedAt_in')
    ended_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='endedAt_not_in')
    ended_at_lt = sgqlc.types.Field(DateTime, graphql_name='endedAt_lt')
    ended_at_lte = sgqlc.types.Field(DateTime, graphql_name='endedAt_lte')
    ended_at_gt = sgqlc.types.Field(DateTime, graphql_name='endedAt_gt')
    ended_at_gte = sgqlc.types.Field(DateTime, graphql_name='endedAt_gte')
    trial_start = sgqlc.types.Field(DateTime, graphql_name='trialStart')
    trial_start_not = sgqlc.types.Field(DateTime, graphql_name='trialStart_not')
    trial_start_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='trialStart_in')
    trial_start_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='trialStart_not_in')
    trial_start_lt = sgqlc.types.Field(DateTime, graphql_name='trialStart_lt')
    trial_start_lte = sgqlc.types.Field(DateTime, graphql_name='trialStart_lte')
    trial_start_gt = sgqlc.types.Field(DateTime, graphql_name='trialStart_gt')
    trial_start_gte = sgqlc.types.Field(DateTime, graphql_name='trialStart_gte')
    trial_end = sgqlc.types.Field(DateTime, graphql_name='trialEnd')
    trial_end_not = sgqlc.types.Field(DateTime, graphql_name='trialEnd_not')
    trial_end_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='trialEnd_in')
    trial_end_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='trialEnd_not_in')
    trial_end_lt = sgqlc.types.Field(DateTime, graphql_name='trialEnd_lt')
    trial_end_lte = sgqlc.types.Field(DateTime, graphql_name='trialEnd_lte')
    trial_end_gt = sgqlc.types.Field(DateTime, graphql_name='trialEnd_gt')
    trial_end_gte = sgqlc.types.Field(DateTime, graphql_name='trialEnd_gte')
    is_paid = sgqlc.types.Field(Boolean, graphql_name='isPaid')
    is_paid_not = sgqlc.types.Field(Boolean, graphql_name='isPaid_not')
    payment_intent_id = sgqlc.types.Field(String, graphql_name='paymentIntentId')
    payment_intent_id_not = sgqlc.types.Field(String, graphql_name='paymentIntentId_not')
    payment_intent_id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='paymentIntentId_in')
    payment_intent_id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='paymentIntentId_not_in')
    payment_intent_id_lt = sgqlc.types.Field(String, graphql_name='paymentIntentId_lt')
    payment_intent_id_lte = sgqlc.types.Field(String, graphql_name='paymentIntentId_lte')
    payment_intent_id_gt = sgqlc.types.Field(String, graphql_name='paymentIntentId_gt')
    payment_intent_id_gte = sgqlc.types.Field(String, graphql_name='paymentIntentId_gte')
    payment_intent_id_contains = sgqlc.types.Field(String, graphql_name='paymentIntentId_contains')
    payment_intent_id_not_contains = sgqlc.types.Field(String, graphql_name='paymentIntentId_not_contains')
    payment_intent_id_starts_with = sgqlc.types.Field(String, graphql_name='paymentIntentId_starts_with')
    payment_intent_id_not_starts_with = sgqlc.types.Field(String, graphql_name='paymentIntentId_not_starts_with')
    payment_intent_id_ends_with = sgqlc.types.Field(String, graphql_name='paymentIntentId_ends_with')
    payment_intent_id_not_ends_with = sgqlc.types.Field(String, graphql_name='paymentIntentId_not_ends_with')
    payment_intent_status = sgqlc.types.Field(String, graphql_name='paymentIntentStatus')
    payment_intent_status_not = sgqlc.types.Field(String, graphql_name='paymentIntentStatus_not')
    payment_intent_status_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='paymentIntentStatus_in')
    payment_intent_status_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='paymentIntentStatus_not_in')
    payment_intent_status_lt = sgqlc.types.Field(String, graphql_name='paymentIntentStatus_lt')
    payment_intent_status_lte = sgqlc.types.Field(String, graphql_name='paymentIntentStatus_lte')
    payment_intent_status_gt = sgqlc.types.Field(String, graphql_name='paymentIntentStatus_gt')
    payment_intent_status_gte = sgqlc.types.Field(String, graphql_name='paymentIntentStatus_gte')
    payment_intent_status_contains = sgqlc.types.Field(String, graphql_name='paymentIntentStatus_contains')
    payment_intent_status_not_contains = sgqlc.types.Field(String, graphql_name='paymentIntentStatus_not_contains')
    payment_intent_status_starts_with = sgqlc.types.Field(String, graphql_name='paymentIntentStatus_starts_with')
    payment_intent_status_not_starts_with = sgqlc.types.Field(String, graphql_name='paymentIntentStatus_not_starts_with')
    payment_intent_status_ends_with = sgqlc.types.Field(String, graphql_name='paymentIntentStatus_ends_with')
    payment_intent_status_not_ends_with = sgqlc.types.Field(String, graphql_name='paymentIntentStatus_not_ends_with')
    payment_intent_client_secret = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret')
    payment_intent_client_secret_not = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret_not')
    payment_intent_client_secret_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='paymentIntentClientSecret_in')
    payment_intent_client_secret_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='paymentIntentClientSecret_not_in')
    payment_intent_client_secret_lt = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret_lt')
    payment_intent_client_secret_lte = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret_lte')
    payment_intent_client_secret_gt = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret_gt')
    payment_intent_client_secret_gte = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret_gte')
    payment_intent_client_secret_contains = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret_contains')
    payment_intent_client_secret_not_contains = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret_not_contains')
    payment_intent_client_secret_starts_with = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret_starts_with')
    payment_intent_client_secret_not_starts_with = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret_not_starts_with')
    payment_intent_client_secret_ends_with = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret_ends_with')
    payment_intent_client_secret_not_ends_with = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret_not_ends_with')
    card = sgqlc.types.Field(CompanySubscriptionPlanCardWhereInput, graphql_name='card')
    company = sgqlc.types.Field('CompanyWhereInput', graphql_name='company')
    user = sgqlc.types.Field('UserWhereInput', graphql_name='user')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanySubscriptionPlanWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanySubscriptionPlanWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanySubscriptionPlanWhereInput')), graphql_name='NOT')


class CompanySubscriptionPlanWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'sub_id')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    sub_id = sgqlc.types.Field(String, graphql_name='subId')


class CompanySubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('CompanyWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanySubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanySubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanySubscriptionWhereInput')), graphql_name='NOT')


class CompanyUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'slug', 'description', 'free_trial_started_at', 'free_trial_expired_at', 'subscribed_at', 'free_trial_extended_at', 'free_trial_extended_by', 'activities', 'company_users', 'files', 'image', 'license', 'projects', 'subscription_plan', 'links')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    description = sgqlc.types.Field(String, graphql_name='description')
    free_trial_started_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialStartedAt')
    free_trial_expired_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExpiredAt')
    subscribed_at = sgqlc.types.Field(DateTime, graphql_name='subscribedAt')
    free_trial_extended_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExtendedAt')
    free_trial_extended_by = sgqlc.types.Field('UserUpdateOneInput', graphql_name='freeTrialExtendedBy')
    activities = sgqlc.types.Field(ActivityUpdateManyWithoutCompanyInput, graphql_name='activities')
    company_users = sgqlc.types.Field('CompanyUserUpdateManyWithoutCompanyInput', graphql_name='companyUsers')
    files = sgqlc.types.Field('FileUpdateManyWithoutCompanyInput', graphql_name='files')
    image = sgqlc.types.Field('ImageUpdateOneInput', graphql_name='image')
    license = sgqlc.types.Field(CompanyLicenseUpdateOneWithoutCompanyInput, graphql_name='license')
    projects = sgqlc.types.Field('ProjectUpdateManyWithoutCompanyInput', graphql_name='projects')
    subscription_plan = sgqlc.types.Field(CompanySubscriptionPlanUpdateOneWithoutCompanyInput, graphql_name='subscriptionPlan')
    links = sgqlc.types.Field('LinkUpdateManyWithoutCompanyInput', graphql_name='links')


class CompanyUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'slug', 'description', 'free_trial_started_at', 'free_trial_expired_at', 'subscribed_at', 'free_trial_extended_at')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    description = sgqlc.types.Field(String, graphql_name='description')
    free_trial_started_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialStartedAt')
    free_trial_expired_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExpiredAt')
    subscribed_at = sgqlc.types.Field(DateTime, graphql_name='subscribedAt')
    free_trial_extended_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExtendedAt')


class CompanyUpdateOneRequiredWithoutCompanyUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(CompanyCreateWithoutCompanyUsersInput, graphql_name='create')
    update = sgqlc.types.Field('CompanyUpdateWithoutCompanyUsersDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('CompanyUpsertWithoutCompanyUsersInput', graphql_name='upsert')
    connect = sgqlc.types.Field('CompanyWhereUniqueInput', graphql_name='connect')


class CompanyUpdateOneRequiredWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(CompanyCreateWithoutFilesInput, graphql_name='create')
    update = sgqlc.types.Field('CompanyUpdateWithoutFilesDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('CompanyUpsertWithoutFilesInput', graphql_name='upsert')
    connect = sgqlc.types.Field('CompanyWhereUniqueInput', graphql_name='connect')


class CompanyUpdateOneRequiredWithoutLinksInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(CompanyCreateWithoutLinksInput, graphql_name='create')
    update = sgqlc.types.Field('CompanyUpdateWithoutLinksDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('CompanyUpsertWithoutLinksInput', graphql_name='upsert')
    connect = sgqlc.types.Field('CompanyWhereUniqueInput', graphql_name='connect')


class CompanyUpdateOneRequiredWithoutProjectsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(CompanyCreateWithoutProjectsInput, graphql_name='create')
    update = sgqlc.types.Field('CompanyUpdateWithoutProjectsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('CompanyUpsertWithoutProjectsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('CompanyWhereUniqueInput', graphql_name='connect')


class CompanyUpdateOneRequiredWithoutSubscriptionPlanInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(CompanyCreateWithoutSubscriptionPlanInput, graphql_name='create')
    update = sgqlc.types.Field('CompanyUpdateWithoutSubscriptionPlanDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('CompanyUpsertWithoutSubscriptionPlanInput', graphql_name='upsert')
    connect = sgqlc.types.Field('CompanyWhereUniqueInput', graphql_name='connect')


class CompanyUpdateOneWithoutActivitiesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(CompanyCreateWithoutActivitiesInput, graphql_name='create')
    update = sgqlc.types.Field('CompanyUpdateWithoutActivitiesDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('CompanyUpsertWithoutActivitiesInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('CompanyWhereUniqueInput', graphql_name='connect')


class CompanyUpdateOneWithoutLicenseInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(CompanyCreateWithoutLicenseInput, graphql_name='create')
    update = sgqlc.types.Field('CompanyUpdateWithoutLicenseDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('CompanyUpsertWithoutLicenseInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('CompanyWhereUniqueInput', graphql_name='connect')


class CompanyUpdateWithoutActivitiesDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'slug', 'description', 'free_trial_started_at', 'free_trial_expired_at', 'subscribed_at', 'free_trial_extended_at', 'free_trial_extended_by', 'company_users', 'files', 'image', 'license', 'projects', 'subscription_plan', 'links')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    description = sgqlc.types.Field(String, graphql_name='description')
    free_trial_started_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialStartedAt')
    free_trial_expired_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExpiredAt')
    subscribed_at = sgqlc.types.Field(DateTime, graphql_name='subscribedAt')
    free_trial_extended_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExtendedAt')
    free_trial_extended_by = sgqlc.types.Field('UserUpdateOneInput', graphql_name='freeTrialExtendedBy')
    company_users = sgqlc.types.Field('CompanyUserUpdateManyWithoutCompanyInput', graphql_name='companyUsers')
    files = sgqlc.types.Field('FileUpdateManyWithoutCompanyInput', graphql_name='files')
    image = sgqlc.types.Field('ImageUpdateOneInput', graphql_name='image')
    license = sgqlc.types.Field(CompanyLicenseUpdateOneWithoutCompanyInput, graphql_name='license')
    projects = sgqlc.types.Field('ProjectUpdateManyWithoutCompanyInput', graphql_name='projects')
    subscription_plan = sgqlc.types.Field(CompanySubscriptionPlanUpdateOneWithoutCompanyInput, graphql_name='subscriptionPlan')
    links = sgqlc.types.Field('LinkUpdateManyWithoutCompanyInput', graphql_name='links')


class CompanyUpdateWithoutCompanyUsersDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'slug', 'description', 'free_trial_started_at', 'free_trial_expired_at', 'subscribed_at', 'free_trial_extended_at', 'free_trial_extended_by', 'activities', 'files', 'image', 'license', 'projects', 'subscription_plan', 'links')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    description = sgqlc.types.Field(String, graphql_name='description')
    free_trial_started_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialStartedAt')
    free_trial_expired_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExpiredAt')
    subscribed_at = sgqlc.types.Field(DateTime, graphql_name='subscribedAt')
    free_trial_extended_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExtendedAt')
    free_trial_extended_by = sgqlc.types.Field('UserUpdateOneInput', graphql_name='freeTrialExtendedBy')
    activities = sgqlc.types.Field(ActivityUpdateManyWithoutCompanyInput, graphql_name='activities')
    files = sgqlc.types.Field('FileUpdateManyWithoutCompanyInput', graphql_name='files')
    image = sgqlc.types.Field('ImageUpdateOneInput', graphql_name='image')
    license = sgqlc.types.Field(CompanyLicenseUpdateOneWithoutCompanyInput, graphql_name='license')
    projects = sgqlc.types.Field('ProjectUpdateManyWithoutCompanyInput', graphql_name='projects')
    subscription_plan = sgqlc.types.Field(CompanySubscriptionPlanUpdateOneWithoutCompanyInput, graphql_name='subscriptionPlan')
    links = sgqlc.types.Field('LinkUpdateManyWithoutCompanyInput', graphql_name='links')


class CompanyUpdateWithoutFilesDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'slug', 'description', 'free_trial_started_at', 'free_trial_expired_at', 'subscribed_at', 'free_trial_extended_at', 'free_trial_extended_by', 'activities', 'company_users', 'image', 'license', 'projects', 'subscription_plan', 'links')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    description = sgqlc.types.Field(String, graphql_name='description')
    free_trial_started_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialStartedAt')
    free_trial_expired_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExpiredAt')
    subscribed_at = sgqlc.types.Field(DateTime, graphql_name='subscribedAt')
    free_trial_extended_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExtendedAt')
    free_trial_extended_by = sgqlc.types.Field('UserUpdateOneInput', graphql_name='freeTrialExtendedBy')
    activities = sgqlc.types.Field(ActivityUpdateManyWithoutCompanyInput, graphql_name='activities')
    company_users = sgqlc.types.Field('CompanyUserUpdateManyWithoutCompanyInput', graphql_name='companyUsers')
    image = sgqlc.types.Field('ImageUpdateOneInput', graphql_name='image')
    license = sgqlc.types.Field(CompanyLicenseUpdateOneWithoutCompanyInput, graphql_name='license')
    projects = sgqlc.types.Field('ProjectUpdateManyWithoutCompanyInput', graphql_name='projects')
    subscription_plan = sgqlc.types.Field(CompanySubscriptionPlanUpdateOneWithoutCompanyInput, graphql_name='subscriptionPlan')
    links = sgqlc.types.Field('LinkUpdateManyWithoutCompanyInput', graphql_name='links')


class CompanyUpdateWithoutLicenseDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'slug', 'description', 'free_trial_started_at', 'free_trial_expired_at', 'subscribed_at', 'free_trial_extended_at', 'free_trial_extended_by', 'activities', 'company_users', 'files', 'image', 'projects', 'subscription_plan', 'links')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    description = sgqlc.types.Field(String, graphql_name='description')
    free_trial_started_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialStartedAt')
    free_trial_expired_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExpiredAt')
    subscribed_at = sgqlc.types.Field(DateTime, graphql_name='subscribedAt')
    free_trial_extended_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExtendedAt')
    free_trial_extended_by = sgqlc.types.Field('UserUpdateOneInput', graphql_name='freeTrialExtendedBy')
    activities = sgqlc.types.Field(ActivityUpdateManyWithoutCompanyInput, graphql_name='activities')
    company_users = sgqlc.types.Field('CompanyUserUpdateManyWithoutCompanyInput', graphql_name='companyUsers')
    files = sgqlc.types.Field('FileUpdateManyWithoutCompanyInput', graphql_name='files')
    image = sgqlc.types.Field('ImageUpdateOneInput', graphql_name='image')
    projects = sgqlc.types.Field('ProjectUpdateManyWithoutCompanyInput', graphql_name='projects')
    subscription_plan = sgqlc.types.Field(CompanySubscriptionPlanUpdateOneWithoutCompanyInput, graphql_name='subscriptionPlan')
    links = sgqlc.types.Field('LinkUpdateManyWithoutCompanyInput', graphql_name='links')


class CompanyUpdateWithoutLinksDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'slug', 'description', 'free_trial_started_at', 'free_trial_expired_at', 'subscribed_at', 'free_trial_extended_at', 'free_trial_extended_by', 'activities', 'company_users', 'files', 'image', 'license', 'projects', 'subscription_plan')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    description = sgqlc.types.Field(String, graphql_name='description')
    free_trial_started_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialStartedAt')
    free_trial_expired_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExpiredAt')
    subscribed_at = sgqlc.types.Field(DateTime, graphql_name='subscribedAt')
    free_trial_extended_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExtendedAt')
    free_trial_extended_by = sgqlc.types.Field('UserUpdateOneInput', graphql_name='freeTrialExtendedBy')
    activities = sgqlc.types.Field(ActivityUpdateManyWithoutCompanyInput, graphql_name='activities')
    company_users = sgqlc.types.Field('CompanyUserUpdateManyWithoutCompanyInput', graphql_name='companyUsers')
    files = sgqlc.types.Field('FileUpdateManyWithoutCompanyInput', graphql_name='files')
    image = sgqlc.types.Field('ImageUpdateOneInput', graphql_name='image')
    license = sgqlc.types.Field(CompanyLicenseUpdateOneWithoutCompanyInput, graphql_name='license')
    projects = sgqlc.types.Field('ProjectUpdateManyWithoutCompanyInput', graphql_name='projects')
    subscription_plan = sgqlc.types.Field(CompanySubscriptionPlanUpdateOneWithoutCompanyInput, graphql_name='subscriptionPlan')


class CompanyUpdateWithoutProjectsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'slug', 'description', 'free_trial_started_at', 'free_trial_expired_at', 'subscribed_at', 'free_trial_extended_at', 'free_trial_extended_by', 'activities', 'company_users', 'files', 'image', 'license', 'subscription_plan', 'links')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    description = sgqlc.types.Field(String, graphql_name='description')
    free_trial_started_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialStartedAt')
    free_trial_expired_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExpiredAt')
    subscribed_at = sgqlc.types.Field(DateTime, graphql_name='subscribedAt')
    free_trial_extended_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExtendedAt')
    free_trial_extended_by = sgqlc.types.Field('UserUpdateOneInput', graphql_name='freeTrialExtendedBy')
    activities = sgqlc.types.Field(ActivityUpdateManyWithoutCompanyInput, graphql_name='activities')
    company_users = sgqlc.types.Field('CompanyUserUpdateManyWithoutCompanyInput', graphql_name='companyUsers')
    files = sgqlc.types.Field('FileUpdateManyWithoutCompanyInput', graphql_name='files')
    image = sgqlc.types.Field('ImageUpdateOneInput', graphql_name='image')
    license = sgqlc.types.Field(CompanyLicenseUpdateOneWithoutCompanyInput, graphql_name='license')
    subscription_plan = sgqlc.types.Field(CompanySubscriptionPlanUpdateOneWithoutCompanyInput, graphql_name='subscriptionPlan')
    links = sgqlc.types.Field('LinkUpdateManyWithoutCompanyInput', graphql_name='links')


class CompanyUpdateWithoutSubscriptionPlanDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'slug', 'description', 'free_trial_started_at', 'free_trial_expired_at', 'subscribed_at', 'free_trial_extended_at', 'free_trial_extended_by', 'activities', 'company_users', 'files', 'image', 'license', 'projects', 'links')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    description = sgqlc.types.Field(String, graphql_name='description')
    free_trial_started_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialStartedAt')
    free_trial_expired_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExpiredAt')
    subscribed_at = sgqlc.types.Field(DateTime, graphql_name='subscribedAt')
    free_trial_extended_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExtendedAt')
    free_trial_extended_by = sgqlc.types.Field('UserUpdateOneInput', graphql_name='freeTrialExtendedBy')
    activities = sgqlc.types.Field(ActivityUpdateManyWithoutCompanyInput, graphql_name='activities')
    company_users = sgqlc.types.Field('CompanyUserUpdateManyWithoutCompanyInput', graphql_name='companyUsers')
    files = sgqlc.types.Field('FileUpdateManyWithoutCompanyInput', graphql_name='files')
    image = sgqlc.types.Field('ImageUpdateOneInput', graphql_name='image')
    license = sgqlc.types.Field(CompanyLicenseUpdateOneWithoutCompanyInput, graphql_name='license')
    projects = sgqlc.types.Field('ProjectUpdateManyWithoutCompanyInput', graphql_name='projects')
    links = sgqlc.types.Field('LinkUpdateManyWithoutCompanyInput', graphql_name='links')


class CompanyUpsertWithoutActivitiesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(CompanyUpdateWithoutActivitiesDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateWithoutActivitiesInput), graphql_name='create')


class CompanyUpsertWithoutCompanyUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(CompanyUpdateWithoutCompanyUsersDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateWithoutCompanyUsersInput), graphql_name='create')


class CompanyUpsertWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(CompanyUpdateWithoutFilesDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateWithoutFilesInput), graphql_name='create')


class CompanyUpsertWithoutLicenseInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(CompanyUpdateWithoutLicenseDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateWithoutLicenseInput), graphql_name='create')


class CompanyUpsertWithoutLinksInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(CompanyUpdateWithoutLinksDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateWithoutLinksInput), graphql_name='create')


class CompanyUpsertWithoutProjectsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(CompanyUpdateWithoutProjectsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateWithoutProjectsInput), graphql_name='create')


class CompanyUpsertWithoutSubscriptionPlanInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(CompanyUpdateWithoutSubscriptionPlanDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateWithoutSubscriptionPlanInput), graphql_name='create')


class CompanyUserCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'company', 'user', 'level', 'allow_notification', 'company_user_notification_options', 'company_user_folders', 'last_accessed_at')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutCompanyUsersInput), graphql_name='company')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutCompanyUsersInput'), graphql_name='user')
    level = sgqlc.types.Field(sgqlc.types.non_null(UserAccessLevel), graphql_name='level')
    allow_notification = sgqlc.types.Field(Boolean, graphql_name='allowNotification')
    company_user_notification_options = sgqlc.types.Field('CompanyUserNotificationOptionCreateManyWithoutCompanyUserInput', graphql_name='companyUserNotificationOptions')
    company_user_folders = sgqlc.types.Field('CompanyUserFolderCreateManyWithoutCompanyUserInput', graphql_name='companyUserFolders')
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')


class CompanyUserCreateManyWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserCreateWithoutCompanyInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserWhereUniqueInput')), graphql_name='connect')


class CompanyUserCreateManyWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserCreateWithoutUserInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserWhereUniqueInput')), graphql_name='connect')


class CompanyUserCreateOneWithoutCompanyUserFoldersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('CompanyUserCreateWithoutCompanyUserFoldersInput', graphql_name='create')
    connect = sgqlc.types.Field('CompanyUserWhereUniqueInput', graphql_name='connect')


class CompanyUserCreateOneWithoutCompanyUserNotificationOptionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('CompanyUserCreateWithoutCompanyUserNotificationOptionsInput', graphql_name='create')
    connect = sgqlc.types.Field('CompanyUserWhereUniqueInput', graphql_name='connect')


class CompanyUserCreateWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'user', 'level', 'allow_notification', 'company_user_notification_options', 'company_user_folders', 'last_accessed_at')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutCompanyUsersInput'), graphql_name='user')
    level = sgqlc.types.Field(sgqlc.types.non_null(UserAccessLevel), graphql_name='level')
    allow_notification = sgqlc.types.Field(Boolean, graphql_name='allowNotification')
    company_user_notification_options = sgqlc.types.Field('CompanyUserNotificationOptionCreateManyWithoutCompanyUserInput', graphql_name='companyUserNotificationOptions')
    company_user_folders = sgqlc.types.Field('CompanyUserFolderCreateManyWithoutCompanyUserInput', graphql_name='companyUserFolders')
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')


class CompanyUserCreateWithoutCompanyUserFoldersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'company', 'user', 'level', 'allow_notification', 'company_user_notification_options', 'last_accessed_at')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutCompanyUsersInput), graphql_name='company')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutCompanyUsersInput'), graphql_name='user')
    level = sgqlc.types.Field(sgqlc.types.non_null(UserAccessLevel), graphql_name='level')
    allow_notification = sgqlc.types.Field(Boolean, graphql_name='allowNotification')
    company_user_notification_options = sgqlc.types.Field('CompanyUserNotificationOptionCreateManyWithoutCompanyUserInput', graphql_name='companyUserNotificationOptions')
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')


class CompanyUserCreateWithoutCompanyUserNotificationOptionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'company', 'user', 'level', 'allow_notification', 'company_user_folders', 'last_accessed_at')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutCompanyUsersInput), graphql_name='company')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutCompanyUsersInput'), graphql_name='user')
    level = sgqlc.types.Field(sgqlc.types.non_null(UserAccessLevel), graphql_name='level')
    allow_notification = sgqlc.types.Field(Boolean, graphql_name='allowNotification')
    company_user_folders = sgqlc.types.Field('CompanyUserFolderCreateManyWithoutCompanyUserInput', graphql_name='companyUserFolders')
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')


class CompanyUserCreateWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'company', 'level', 'allow_notification', 'company_user_notification_options', 'company_user_folders', 'last_accessed_at')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutCompanyUsersInput), graphql_name='company')
    level = sgqlc.types.Field(sgqlc.types.non_null(UserAccessLevel), graphql_name='level')
    allow_notification = sgqlc.types.Field(Boolean, graphql_name='allowNotification')
    company_user_notification_options = sgqlc.types.Field('CompanyUserNotificationOptionCreateManyWithoutCompanyUserInput', graphql_name='companyUserNotificationOptions')
    company_user_folders = sgqlc.types.Field('CompanyUserFolderCreateManyWithoutCompanyUserInput', graphql_name='companyUserFolders')
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')


class CompanyUserFolderCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'position', 'folder', 'company_user')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    folder = sgqlc.types.Field(sgqlc.types.non_null('FolderCreateOneWithoutCompanyUserFoldersInput'), graphql_name='folder')
    company_user = sgqlc.types.Field(sgqlc.types.non_null(CompanyUserCreateOneWithoutCompanyUserFoldersInput), graphql_name='companyUser')


class CompanyUserFolderCreateManyWithoutCompanyUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserFolderCreateWithoutCompanyUserInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserFolderWhereUniqueInput')), graphql_name='connect')


class CompanyUserFolderCreateManyWithoutFolderInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserFolderCreateWithoutFolderInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserFolderWhereUniqueInput')), graphql_name='connect')


class CompanyUserFolderCreateWithoutCompanyUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'position', 'folder')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    folder = sgqlc.types.Field(sgqlc.types.non_null('FolderCreateOneWithoutCompanyUserFoldersInput'), graphql_name='folder')


class CompanyUserFolderCreateWithoutFolderInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'position', 'company_user')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    company_user = sgqlc.types.Field(sgqlc.types.non_null(CompanyUserCreateOneWithoutCompanyUserFoldersInput), graphql_name='companyUser')


class CompanyUserFolderScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'position', 'position_not', 'position_in', 'position_not_in', 'position_lt', 'position_lte', 'position_gt', 'position_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    position = sgqlc.types.Field(Float, graphql_name='position')
    position_not = sgqlc.types.Field(Float, graphql_name='position_not')
    position_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_in')
    position_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_not_in')
    position_lt = sgqlc.types.Field(Float, graphql_name='position_lt')
    position_lte = sgqlc.types.Field(Float, graphql_name='position_lte')
    position_gt = sgqlc.types.Field(Float, graphql_name='position_gt')
    position_gte = sgqlc.types.Field(Float, graphql_name='position_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserFolderScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserFolderScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserFolderScalarWhereInput')), graphql_name='NOT')


class CompanyUserFolderSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('CompanyUserFolderWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserFolderSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserFolderSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserFolderSubscriptionWhereInput')), graphql_name='NOT')


class CompanyUserFolderUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position', 'folder', 'company_user')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')
    folder = sgqlc.types.Field('FolderUpdateOneRequiredWithoutCompanyUserFoldersInput', graphql_name='folder')
    company_user = sgqlc.types.Field('CompanyUserUpdateOneRequiredWithoutCompanyUserFoldersInput', graphql_name='companyUser')


class CompanyUserFolderUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')


class CompanyUserFolderUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')


class CompanyUserFolderUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(CompanyUserFolderScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(CompanyUserFolderUpdateManyDataInput), graphql_name='data')


class CompanyUserFolderUpdateManyWithoutCompanyUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CompanyUserFolderCreateWithoutCompanyUserInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserFolderWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserFolderWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserFolderWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserFolderWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserFolderUpdateWithWhereUniqueWithoutCompanyUserInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserFolderUpsertWithWhereUniqueWithoutCompanyUserInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CompanyUserFolderScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CompanyUserFolderUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class CompanyUserFolderUpdateManyWithoutFolderInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CompanyUserFolderCreateWithoutFolderInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserFolderWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserFolderWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserFolderWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserFolderWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserFolderUpdateWithWhereUniqueWithoutFolderInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserFolderUpsertWithWhereUniqueWithoutFolderInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CompanyUserFolderScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CompanyUserFolderUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class CompanyUserFolderUpdateWithWhereUniqueWithoutCompanyUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('CompanyUserFolderWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('CompanyUserFolderUpdateWithoutCompanyUserDataInput'), graphql_name='data')


class CompanyUserFolderUpdateWithWhereUniqueWithoutFolderInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('CompanyUserFolderWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('CompanyUserFolderUpdateWithoutFolderDataInput'), graphql_name='data')


class CompanyUserFolderUpdateWithoutCompanyUserDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position', 'folder')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')
    folder = sgqlc.types.Field('FolderUpdateOneRequiredWithoutCompanyUserFoldersInput', graphql_name='folder')


class CompanyUserFolderUpdateWithoutFolderDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position', 'company_user')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')
    company_user = sgqlc.types.Field('CompanyUserUpdateOneRequiredWithoutCompanyUserFoldersInput', graphql_name='companyUser')


class CompanyUserFolderUpsertWithWhereUniqueWithoutCompanyUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('CompanyUserFolderWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(CompanyUserFolderUpdateWithoutCompanyUserDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CompanyUserFolderCreateWithoutCompanyUserInput), graphql_name='create')


class CompanyUserFolderUpsertWithWhereUniqueWithoutFolderInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('CompanyUserFolderWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(CompanyUserFolderUpdateWithoutFolderDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CompanyUserFolderCreateWithoutFolderInput), graphql_name='create')


class CompanyUserFolderWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'position', 'position_not', 'position_in', 'position_not_in', 'position_lt', 'position_lte', 'position_gt', 'position_gte', 'folder', 'company_user', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    position = sgqlc.types.Field(Float, graphql_name='position')
    position_not = sgqlc.types.Field(Float, graphql_name='position_not')
    position_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_in')
    position_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_not_in')
    position_lt = sgqlc.types.Field(Float, graphql_name='position_lt')
    position_lte = sgqlc.types.Field(Float, graphql_name='position_lte')
    position_gt = sgqlc.types.Field(Float, graphql_name='position_gt')
    position_gte = sgqlc.types.Field(Float, graphql_name='position_gte')
    folder = sgqlc.types.Field('FolderWhereInput', graphql_name='folder')
    company_user = sgqlc.types.Field('CompanyUserWhereInput', graphql_name='companyUser')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserFolderWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserFolderWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserFolderWhereInput')), graphql_name='NOT')


class CompanyUserFolderWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class CompanyUserNotificationOptionCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'company_user', 'notification_option', 'allow_email', 'allow_push')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    company_user = sgqlc.types.Field(sgqlc.types.non_null(CompanyUserCreateOneWithoutCompanyUserNotificationOptionsInput), graphql_name='companyUser')
    notification_option = sgqlc.types.Field(sgqlc.types.non_null('NotificationOptionCreateOneWithoutCompanyUserNotificationOptionInput'), graphql_name='notificationOption')
    allow_email = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='allowEmail')
    allow_push = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='allowPush')


class CompanyUserNotificationOptionCreateManyWithoutCompanyUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserNotificationOptionCreateWithoutCompanyUserInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserNotificationOptionWhereUniqueInput')), graphql_name='connect')


class CompanyUserNotificationOptionCreateManyWithoutNotificationOptionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserNotificationOptionCreateWithoutNotificationOptionInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserNotificationOptionWhereUniqueInput')), graphql_name='connect')


class CompanyUserNotificationOptionCreateWithoutCompanyUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'notification_option', 'allow_email', 'allow_push')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    notification_option = sgqlc.types.Field(sgqlc.types.non_null('NotificationOptionCreateOneWithoutCompanyUserNotificationOptionInput'), graphql_name='notificationOption')
    allow_email = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='allowEmail')
    allow_push = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='allowPush')


class CompanyUserNotificationOptionCreateWithoutNotificationOptionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'company_user', 'allow_email', 'allow_push')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    company_user = sgqlc.types.Field(sgqlc.types.non_null(CompanyUserCreateOneWithoutCompanyUserNotificationOptionsInput), graphql_name='companyUser')
    allow_email = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='allowEmail')
    allow_push = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='allowPush')


class CompanyUserNotificationOptionScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'allow_email', 'allow_email_not', 'allow_push', 'allow_push_not', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    allow_email = sgqlc.types.Field(Boolean, graphql_name='allowEmail')
    allow_email_not = sgqlc.types.Field(Boolean, graphql_name='allowEmail_not')
    allow_push = sgqlc.types.Field(Boolean, graphql_name='allowPush')
    allow_push_not = sgqlc.types.Field(Boolean, graphql_name='allowPush_not')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserNotificationOptionScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserNotificationOptionScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserNotificationOptionScalarWhereInput')), graphql_name='NOT')


class CompanyUserNotificationOptionSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('CompanyUserNotificationOptionWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserNotificationOptionSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserNotificationOptionSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserNotificationOptionSubscriptionWhereInput')), graphql_name='NOT')


class CompanyUserNotificationOptionUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'company_user', 'notification_option', 'allow_email', 'allow_push')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    company_user = sgqlc.types.Field('CompanyUserUpdateOneRequiredWithoutCompanyUserNotificationOptionsInput', graphql_name='companyUser')
    notification_option = sgqlc.types.Field('NotificationOptionUpdateOneRequiredWithoutCompanyUserNotificationOptionInput', graphql_name='notificationOption')
    allow_email = sgqlc.types.Field(Boolean, graphql_name='allowEmail')
    allow_push = sgqlc.types.Field(Boolean, graphql_name='allowPush')


class CompanyUserNotificationOptionUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'allow_email', 'allow_push')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    allow_email = sgqlc.types.Field(Boolean, graphql_name='allowEmail')
    allow_push = sgqlc.types.Field(Boolean, graphql_name='allowPush')


class CompanyUserNotificationOptionUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'allow_email', 'allow_push')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    allow_email = sgqlc.types.Field(Boolean, graphql_name='allowEmail')
    allow_push = sgqlc.types.Field(Boolean, graphql_name='allowPush')


class CompanyUserNotificationOptionUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(CompanyUserNotificationOptionScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(CompanyUserNotificationOptionUpdateManyDataInput), graphql_name='data')


class CompanyUserNotificationOptionUpdateManyWithoutCompanyUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CompanyUserNotificationOptionCreateWithoutCompanyUserInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserNotificationOptionWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserNotificationOptionWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserNotificationOptionWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserNotificationOptionWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserNotificationOptionUpdateWithWhereUniqueWithoutCompanyUserInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserNotificationOptionUpsertWithWhereUniqueWithoutCompanyUserInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CompanyUserNotificationOptionScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CompanyUserNotificationOptionUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class CompanyUserNotificationOptionUpdateManyWithoutNotificationOptionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CompanyUserNotificationOptionCreateWithoutNotificationOptionInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserNotificationOptionWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserNotificationOptionWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserNotificationOptionWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserNotificationOptionWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserNotificationOptionUpdateWithWhereUniqueWithoutNotificationOptionInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserNotificationOptionUpsertWithWhereUniqueWithoutNotificationOptionInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CompanyUserNotificationOptionScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CompanyUserNotificationOptionUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class CompanyUserNotificationOptionUpdateWithWhereUniqueWithoutCompanyUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('CompanyUserNotificationOptionWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('CompanyUserNotificationOptionUpdateWithoutCompanyUserDataInput'), graphql_name='data')


class CompanyUserNotificationOptionUpdateWithWhereUniqueWithoutNotificationOptionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('CompanyUserNotificationOptionWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('CompanyUserNotificationOptionUpdateWithoutNotificationOptionDataInput'), graphql_name='data')


class CompanyUserNotificationOptionUpdateWithoutCompanyUserDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'notification_option', 'allow_email', 'allow_push')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    notification_option = sgqlc.types.Field('NotificationOptionUpdateOneRequiredWithoutCompanyUserNotificationOptionInput', graphql_name='notificationOption')
    allow_email = sgqlc.types.Field(Boolean, graphql_name='allowEmail')
    allow_push = sgqlc.types.Field(Boolean, graphql_name='allowPush')


class CompanyUserNotificationOptionUpdateWithoutNotificationOptionDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'company_user', 'allow_email', 'allow_push')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    company_user = sgqlc.types.Field('CompanyUserUpdateOneRequiredWithoutCompanyUserNotificationOptionsInput', graphql_name='companyUser')
    allow_email = sgqlc.types.Field(Boolean, graphql_name='allowEmail')
    allow_push = sgqlc.types.Field(Boolean, graphql_name='allowPush')


class CompanyUserNotificationOptionUpsertWithWhereUniqueWithoutCompanyUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('CompanyUserNotificationOptionWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(CompanyUserNotificationOptionUpdateWithoutCompanyUserDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CompanyUserNotificationOptionCreateWithoutCompanyUserInput), graphql_name='create')


class CompanyUserNotificationOptionUpsertWithWhereUniqueWithoutNotificationOptionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('CompanyUserNotificationOptionWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(CompanyUserNotificationOptionUpdateWithoutNotificationOptionDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CompanyUserNotificationOptionCreateWithoutNotificationOptionInput), graphql_name='create')


class CompanyUserNotificationOptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'company_user', 'notification_option', 'allow_email', 'allow_email_not', 'allow_push', 'allow_push_not', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    company_user = sgqlc.types.Field('CompanyUserWhereInput', graphql_name='companyUser')
    notification_option = sgqlc.types.Field('NotificationOptionWhereInput', graphql_name='notificationOption')
    allow_email = sgqlc.types.Field(Boolean, graphql_name='allowEmail')
    allow_email_not = sgqlc.types.Field(Boolean, graphql_name='allowEmail_not')
    allow_push = sgqlc.types.Field(Boolean, graphql_name='allowPush')
    allow_push_not = sgqlc.types.Field(Boolean, graphql_name='allowPush_not')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserNotificationOptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserNotificationOptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserNotificationOptionWhereInput')), graphql_name='NOT')


class CompanyUserNotificationOptionWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class CompanyUserScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'level', 'level_not', 'level_in', 'level_not_in', 'allow_notification', 'allow_notification_not', 'last_accessed_at', 'last_accessed_at_not', 'last_accessed_at_in', 'last_accessed_at_not_in', 'last_accessed_at_lt', 'last_accessed_at_lte', 'last_accessed_at_gt', 'last_accessed_at_gte', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    level = sgqlc.types.Field(UserAccessLevel, graphql_name='level')
    level_not = sgqlc.types.Field(UserAccessLevel, graphql_name='level_not')
    level_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(UserAccessLevel)), graphql_name='level_in')
    level_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(UserAccessLevel)), graphql_name='level_not_in')
    allow_notification = sgqlc.types.Field(Boolean, graphql_name='allowNotification')
    allow_notification_not = sgqlc.types.Field(Boolean, graphql_name='allowNotification_not')
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')
    last_accessed_at_not = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt_not')
    last_accessed_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='lastAccessedAt_in')
    last_accessed_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='lastAccessedAt_not_in')
    last_accessed_at_lt = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt_lt')
    last_accessed_at_lte = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt_lte')
    last_accessed_at_gt = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt_gt')
    last_accessed_at_gte = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt_gte')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserScalarWhereInput')), graphql_name='NOT')


class CompanyUserSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('CompanyUserWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserSubscriptionWhereInput')), graphql_name='NOT')


class CompanyUserUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'company', 'user', 'level', 'allow_notification', 'company_user_notification_options', 'company_user_folders', 'last_accessed_at')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    company = sgqlc.types.Field(CompanyUpdateOneRequiredWithoutCompanyUsersInput, graphql_name='company')
    user = sgqlc.types.Field('UserUpdateOneRequiredWithoutCompanyUsersInput', graphql_name='user')
    level = sgqlc.types.Field(UserAccessLevel, graphql_name='level')
    allow_notification = sgqlc.types.Field(Boolean, graphql_name='allowNotification')
    company_user_notification_options = sgqlc.types.Field(CompanyUserNotificationOptionUpdateManyWithoutCompanyUserInput, graphql_name='companyUserNotificationOptions')
    company_user_folders = sgqlc.types.Field(CompanyUserFolderUpdateManyWithoutCompanyUserInput, graphql_name='companyUserFolders')
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')


class CompanyUserUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'level', 'allow_notification', 'last_accessed_at')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    level = sgqlc.types.Field(UserAccessLevel, graphql_name='level')
    allow_notification = sgqlc.types.Field(Boolean, graphql_name='allowNotification')
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')


class CompanyUserUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'level', 'allow_notification', 'last_accessed_at')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    level = sgqlc.types.Field(UserAccessLevel, graphql_name='level')
    allow_notification = sgqlc.types.Field(Boolean, graphql_name='allowNotification')
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')


class CompanyUserUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(CompanyUserScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(CompanyUserUpdateManyDataInput), graphql_name='data')


class CompanyUserUpdateManyWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CompanyUserCreateWithoutCompanyInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserUpdateWithWhereUniqueWithoutCompanyInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserUpsertWithWhereUniqueWithoutCompanyInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CompanyUserScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CompanyUserUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class CompanyUserUpdateManyWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CompanyUserCreateWithoutUserInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserUpdateWithWhereUniqueWithoutUserInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserUpsertWithWhereUniqueWithoutUserInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CompanyUserScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CompanyUserUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class CompanyUserUpdateOneRequiredWithoutCompanyUserFoldersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(CompanyUserCreateWithoutCompanyUserFoldersInput, graphql_name='create')
    update = sgqlc.types.Field('CompanyUserUpdateWithoutCompanyUserFoldersDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('CompanyUserUpsertWithoutCompanyUserFoldersInput', graphql_name='upsert')
    connect = sgqlc.types.Field('CompanyUserWhereUniqueInput', graphql_name='connect')


class CompanyUserUpdateOneRequiredWithoutCompanyUserNotificationOptionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(CompanyUserCreateWithoutCompanyUserNotificationOptionsInput, graphql_name='create')
    update = sgqlc.types.Field('CompanyUserUpdateWithoutCompanyUserNotificationOptionsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('CompanyUserUpsertWithoutCompanyUserNotificationOptionsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('CompanyUserWhereUniqueInput', graphql_name='connect')


class CompanyUserUpdateWithWhereUniqueWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('CompanyUserWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('CompanyUserUpdateWithoutCompanyDataInput'), graphql_name='data')


class CompanyUserUpdateWithWhereUniqueWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('CompanyUserWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('CompanyUserUpdateWithoutUserDataInput'), graphql_name='data')


class CompanyUserUpdateWithoutCompanyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'user', 'level', 'allow_notification', 'company_user_notification_options', 'company_user_folders', 'last_accessed_at')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    user = sgqlc.types.Field('UserUpdateOneRequiredWithoutCompanyUsersInput', graphql_name='user')
    level = sgqlc.types.Field(UserAccessLevel, graphql_name='level')
    allow_notification = sgqlc.types.Field(Boolean, graphql_name='allowNotification')
    company_user_notification_options = sgqlc.types.Field(CompanyUserNotificationOptionUpdateManyWithoutCompanyUserInput, graphql_name='companyUserNotificationOptions')
    company_user_folders = sgqlc.types.Field(CompanyUserFolderUpdateManyWithoutCompanyUserInput, graphql_name='companyUserFolders')
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')


class CompanyUserUpdateWithoutCompanyUserFoldersDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'company', 'user', 'level', 'allow_notification', 'company_user_notification_options', 'last_accessed_at')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    company = sgqlc.types.Field(CompanyUpdateOneRequiredWithoutCompanyUsersInput, graphql_name='company')
    user = sgqlc.types.Field('UserUpdateOneRequiredWithoutCompanyUsersInput', graphql_name='user')
    level = sgqlc.types.Field(UserAccessLevel, graphql_name='level')
    allow_notification = sgqlc.types.Field(Boolean, graphql_name='allowNotification')
    company_user_notification_options = sgqlc.types.Field(CompanyUserNotificationOptionUpdateManyWithoutCompanyUserInput, graphql_name='companyUserNotificationOptions')
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')


class CompanyUserUpdateWithoutCompanyUserNotificationOptionsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'company', 'user', 'level', 'allow_notification', 'company_user_folders', 'last_accessed_at')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    company = sgqlc.types.Field(CompanyUpdateOneRequiredWithoutCompanyUsersInput, graphql_name='company')
    user = sgqlc.types.Field('UserUpdateOneRequiredWithoutCompanyUsersInput', graphql_name='user')
    level = sgqlc.types.Field(UserAccessLevel, graphql_name='level')
    allow_notification = sgqlc.types.Field(Boolean, graphql_name='allowNotification')
    company_user_folders = sgqlc.types.Field(CompanyUserFolderUpdateManyWithoutCompanyUserInput, graphql_name='companyUserFolders')
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')


class CompanyUserUpdateWithoutUserDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'company', 'level', 'allow_notification', 'company_user_notification_options', 'company_user_folders', 'last_accessed_at')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    company = sgqlc.types.Field(CompanyUpdateOneRequiredWithoutCompanyUsersInput, graphql_name='company')
    level = sgqlc.types.Field(UserAccessLevel, graphql_name='level')
    allow_notification = sgqlc.types.Field(Boolean, graphql_name='allowNotification')
    company_user_notification_options = sgqlc.types.Field(CompanyUserNotificationOptionUpdateManyWithoutCompanyUserInput, graphql_name='companyUserNotificationOptions')
    company_user_folders = sgqlc.types.Field(CompanyUserFolderUpdateManyWithoutCompanyUserInput, graphql_name='companyUserFolders')
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')


class CompanyUserUpsertWithWhereUniqueWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('CompanyUserWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(CompanyUserUpdateWithoutCompanyDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CompanyUserCreateWithoutCompanyInput), graphql_name='create')


class CompanyUserUpsertWithWhereUniqueWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('CompanyUserWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(CompanyUserUpdateWithoutUserDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CompanyUserCreateWithoutUserInput), graphql_name='create')


class CompanyUserUpsertWithoutCompanyUserFoldersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(CompanyUserUpdateWithoutCompanyUserFoldersDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CompanyUserCreateWithoutCompanyUserFoldersInput), graphql_name='create')


class CompanyUserUpsertWithoutCompanyUserNotificationOptionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(CompanyUserUpdateWithoutCompanyUserNotificationOptionsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CompanyUserCreateWithoutCompanyUserNotificationOptionsInput), graphql_name='create')


class CompanyUserWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'company', 'user', 'level', 'level_not', 'level_in', 'level_not_in', 'allow_notification', 'allow_notification_not', 'company_user_notification_options_every', 'company_user_notification_options_some', 'company_user_notification_options_none', 'company_user_folders_every', 'company_user_folders_some', 'company_user_folders_none', 'last_accessed_at', 'last_accessed_at_not', 'last_accessed_at_in', 'last_accessed_at_not_in', 'last_accessed_at_lt', 'last_accessed_at_lte', 'last_accessed_at_gt', 'last_accessed_at_gte', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    company = sgqlc.types.Field('CompanyWhereInput', graphql_name='company')
    user = sgqlc.types.Field('UserWhereInput', graphql_name='user')
    level = sgqlc.types.Field(UserAccessLevel, graphql_name='level')
    level_not = sgqlc.types.Field(UserAccessLevel, graphql_name='level_not')
    level_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(UserAccessLevel)), graphql_name='level_in')
    level_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(UserAccessLevel)), graphql_name='level_not_in')
    allow_notification = sgqlc.types.Field(Boolean, graphql_name='allowNotification')
    allow_notification_not = sgqlc.types.Field(Boolean, graphql_name='allowNotification_not')
    company_user_notification_options_every = sgqlc.types.Field(CompanyUserNotificationOptionWhereInput, graphql_name='companyUserNotificationOptions_every')
    company_user_notification_options_some = sgqlc.types.Field(CompanyUserNotificationOptionWhereInput, graphql_name='companyUserNotificationOptions_some')
    company_user_notification_options_none = sgqlc.types.Field(CompanyUserNotificationOptionWhereInput, graphql_name='companyUserNotificationOptions_none')
    company_user_folders_every = sgqlc.types.Field(CompanyUserFolderWhereInput, graphql_name='companyUserFolders_every')
    company_user_folders_some = sgqlc.types.Field(CompanyUserFolderWhereInput, graphql_name='companyUserFolders_some')
    company_user_folders_none = sgqlc.types.Field(CompanyUserFolderWhereInput, graphql_name='companyUserFolders_none')
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')
    last_accessed_at_not = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt_not')
    last_accessed_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='lastAccessedAt_in')
    last_accessed_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='lastAccessedAt_not_in')
    last_accessed_at_lt = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt_lt')
    last_accessed_at_lte = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt_lte')
    last_accessed_at_gt = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt_gt')
    last_accessed_at_gte = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt_gte')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserWhereInput')), graphql_name='NOT')


class CompanyUserWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class CompanyWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'name', 'name_not', 'name_in', 'name_not_in', 'name_lt', 'name_lte', 'name_gt', 'name_gte', 'name_contains', 'name_not_contains', 'name_starts_with', 'name_not_starts_with', 'name_ends_with', 'name_not_ends_with', 'slug', 'slug_not', 'slug_in', 'slug_not_in', 'slug_lt', 'slug_lte', 'slug_gt', 'slug_gte', 'slug_contains', 'slug_not_contains', 'slug_starts_with', 'slug_not_starts_with', 'slug_ends_with', 'slug_not_ends_with', 'description', 'description_not', 'description_in', 'description_not_in', 'description_lt', 'description_lte', 'description_gt', 'description_gte', 'description_contains', 'description_not_contains', 'description_starts_with', 'description_not_starts_with', 'description_ends_with', 'description_not_ends_with', 'free_trial_started_at', 'free_trial_started_at_not', 'free_trial_started_at_in', 'free_trial_started_at_not_in', 'free_trial_started_at_lt', 'free_trial_started_at_lte', 'free_trial_started_at_gt', 'free_trial_started_at_gte', 'free_trial_expired_at', 'free_trial_expired_at_not', 'free_trial_expired_at_in', 'free_trial_expired_at_not_in', 'free_trial_expired_at_lt', 'free_trial_expired_at_lte', 'free_trial_expired_at_gt', 'free_trial_expired_at_gte', 'subscribed_at', 'subscribed_at_not', 'subscribed_at_in', 'subscribed_at_not_in', 'subscribed_at_lt', 'subscribed_at_lte', 'subscribed_at_gt', 'subscribed_at_gte', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'free_trial_extended_at', 'free_trial_extended_at_not', 'free_trial_extended_at_in', 'free_trial_extended_at_not_in', 'free_trial_extended_at_lt', 'free_trial_extended_at_lte', 'free_trial_extended_at_gt', 'free_trial_extended_at_gte', 'free_trial_extended_by', 'activities_every', 'activities_some', 'activities_none', 'company_users_every', 'company_users_some', 'company_users_none', 'files_every', 'files_some', 'files_none', 'image', 'license', 'projects_every', 'projects_some', 'projects_none', 'subscription_plan', 'links_every', 'links_some', 'links_none', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    name = sgqlc.types.Field(String, graphql_name='name')
    name_not = sgqlc.types.Field(String, graphql_name='name_not')
    name_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='name_in')
    name_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='name_not_in')
    name_lt = sgqlc.types.Field(String, graphql_name='name_lt')
    name_lte = sgqlc.types.Field(String, graphql_name='name_lte')
    name_gt = sgqlc.types.Field(String, graphql_name='name_gt')
    name_gte = sgqlc.types.Field(String, graphql_name='name_gte')
    name_contains = sgqlc.types.Field(String, graphql_name='name_contains')
    name_not_contains = sgqlc.types.Field(String, graphql_name='name_not_contains')
    name_starts_with = sgqlc.types.Field(String, graphql_name='name_starts_with')
    name_not_starts_with = sgqlc.types.Field(String, graphql_name='name_not_starts_with')
    name_ends_with = sgqlc.types.Field(String, graphql_name='name_ends_with')
    name_not_ends_with = sgqlc.types.Field(String, graphql_name='name_not_ends_with')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    slug_not = sgqlc.types.Field(String, graphql_name='slug_not')
    slug_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='slug_in')
    slug_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='slug_not_in')
    slug_lt = sgqlc.types.Field(String, graphql_name='slug_lt')
    slug_lte = sgqlc.types.Field(String, graphql_name='slug_lte')
    slug_gt = sgqlc.types.Field(String, graphql_name='slug_gt')
    slug_gte = sgqlc.types.Field(String, graphql_name='slug_gte')
    slug_contains = sgqlc.types.Field(String, graphql_name='slug_contains')
    slug_not_contains = sgqlc.types.Field(String, graphql_name='slug_not_contains')
    slug_starts_with = sgqlc.types.Field(String, graphql_name='slug_starts_with')
    slug_not_starts_with = sgqlc.types.Field(String, graphql_name='slug_not_starts_with')
    slug_ends_with = sgqlc.types.Field(String, graphql_name='slug_ends_with')
    slug_not_ends_with = sgqlc.types.Field(String, graphql_name='slug_not_ends_with')
    description = sgqlc.types.Field(String, graphql_name='description')
    description_not = sgqlc.types.Field(String, graphql_name='description_not')
    description_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='description_in')
    description_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='description_not_in')
    description_lt = sgqlc.types.Field(String, graphql_name='description_lt')
    description_lte = sgqlc.types.Field(String, graphql_name='description_lte')
    description_gt = sgqlc.types.Field(String, graphql_name='description_gt')
    description_gte = sgqlc.types.Field(String, graphql_name='description_gte')
    description_contains = sgqlc.types.Field(String, graphql_name='description_contains')
    description_not_contains = sgqlc.types.Field(String, graphql_name='description_not_contains')
    description_starts_with = sgqlc.types.Field(String, graphql_name='description_starts_with')
    description_not_starts_with = sgqlc.types.Field(String, graphql_name='description_not_starts_with')
    description_ends_with = sgqlc.types.Field(String, graphql_name='description_ends_with')
    description_not_ends_with = sgqlc.types.Field(String, graphql_name='description_not_ends_with')
    free_trial_started_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialStartedAt')
    free_trial_started_at_not = sgqlc.types.Field(DateTime, graphql_name='freeTrialStartedAt_not')
    free_trial_started_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='freeTrialStartedAt_in')
    free_trial_started_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='freeTrialStartedAt_not_in')
    free_trial_started_at_lt = sgqlc.types.Field(DateTime, graphql_name='freeTrialStartedAt_lt')
    free_trial_started_at_lte = sgqlc.types.Field(DateTime, graphql_name='freeTrialStartedAt_lte')
    free_trial_started_at_gt = sgqlc.types.Field(DateTime, graphql_name='freeTrialStartedAt_gt')
    free_trial_started_at_gte = sgqlc.types.Field(DateTime, graphql_name='freeTrialStartedAt_gte')
    free_trial_expired_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExpiredAt')
    free_trial_expired_at_not = sgqlc.types.Field(DateTime, graphql_name='freeTrialExpiredAt_not')
    free_trial_expired_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='freeTrialExpiredAt_in')
    free_trial_expired_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='freeTrialExpiredAt_not_in')
    free_trial_expired_at_lt = sgqlc.types.Field(DateTime, graphql_name='freeTrialExpiredAt_lt')
    free_trial_expired_at_lte = sgqlc.types.Field(DateTime, graphql_name='freeTrialExpiredAt_lte')
    free_trial_expired_at_gt = sgqlc.types.Field(DateTime, graphql_name='freeTrialExpiredAt_gt')
    free_trial_expired_at_gte = sgqlc.types.Field(DateTime, graphql_name='freeTrialExpiredAt_gte')
    subscribed_at = sgqlc.types.Field(DateTime, graphql_name='subscribedAt')
    subscribed_at_not = sgqlc.types.Field(DateTime, graphql_name='subscribedAt_not')
    subscribed_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='subscribedAt_in')
    subscribed_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='subscribedAt_not_in')
    subscribed_at_lt = sgqlc.types.Field(DateTime, graphql_name='subscribedAt_lt')
    subscribed_at_lte = sgqlc.types.Field(DateTime, graphql_name='subscribedAt_lte')
    subscribed_at_gt = sgqlc.types.Field(DateTime, graphql_name='subscribedAt_gt')
    subscribed_at_gte = sgqlc.types.Field(DateTime, graphql_name='subscribedAt_gte')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    free_trial_extended_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExtendedAt')
    free_trial_extended_at_not = sgqlc.types.Field(DateTime, graphql_name='freeTrialExtendedAt_not')
    free_trial_extended_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='freeTrialExtendedAt_in')
    free_trial_extended_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='freeTrialExtendedAt_not_in')
    free_trial_extended_at_lt = sgqlc.types.Field(DateTime, graphql_name='freeTrialExtendedAt_lt')
    free_trial_extended_at_lte = sgqlc.types.Field(DateTime, graphql_name='freeTrialExtendedAt_lte')
    free_trial_extended_at_gt = sgqlc.types.Field(DateTime, graphql_name='freeTrialExtendedAt_gt')
    free_trial_extended_at_gte = sgqlc.types.Field(DateTime, graphql_name='freeTrialExtendedAt_gte')
    free_trial_extended_by = sgqlc.types.Field('UserWhereInput', graphql_name='freeTrialExtendedBy')
    activities_every = sgqlc.types.Field(ActivityWhereInput, graphql_name='activities_every')
    activities_some = sgqlc.types.Field(ActivityWhereInput, graphql_name='activities_some')
    activities_none = sgqlc.types.Field(ActivityWhereInput, graphql_name='activities_none')
    company_users_every = sgqlc.types.Field(CompanyUserWhereInput, graphql_name='companyUsers_every')
    company_users_some = sgqlc.types.Field(CompanyUserWhereInput, graphql_name='companyUsers_some')
    company_users_none = sgqlc.types.Field(CompanyUserWhereInput, graphql_name='companyUsers_none')
    files_every = sgqlc.types.Field('FileWhereInput', graphql_name='files_every')
    files_some = sgqlc.types.Field('FileWhereInput', graphql_name='files_some')
    files_none = sgqlc.types.Field('FileWhereInput', graphql_name='files_none')
    image = sgqlc.types.Field('ImageWhereInput', graphql_name='image')
    license = sgqlc.types.Field(CompanyLicenseWhereInput, graphql_name='license')
    projects_every = sgqlc.types.Field('ProjectWhereInput', graphql_name='projects_every')
    projects_some = sgqlc.types.Field('ProjectWhereInput', graphql_name='projects_some')
    projects_none = sgqlc.types.Field('ProjectWhereInput', graphql_name='projects_none')
    subscription_plan = sgqlc.types.Field(CompanySubscriptionPlanWhereInput, graphql_name='subscriptionPlan')
    links_every = sgqlc.types.Field('LinkWhereInput', graphql_name='links_every')
    links_some = sgqlc.types.Field('LinkWhereInput', graphql_name='links_some')
    links_none = sgqlc.types.Field('LinkWhereInput', graphql_name='links_none')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyWhereInput')), graphql_name='NOT')


class CompanyWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'slug')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    slug = sgqlc.types.Field(String, graphql_name='slug')


class ConvertProjectToTemplateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id', 'is_official_template')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    is_official_template = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isOfficialTemplate')


class CopyAutomationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('automation_id', 'is_active')
    automation_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='automationId')
    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')


class CopyChartInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('chart_id', 'dashboard_id', 'title')
    chart_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='chartId')
    dashboard_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='dashboardId')
    title = sgqlc.types.Field(String, graphql_name='title')


class CopyDashboardInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('dashboard_id', 'title')
    dashboard_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='dashboardId')
    title = sgqlc.types.Field(String, graphql_name='title')


class CopyFormInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('title', 'form_id', 'project_id')
    title = sgqlc.types.Field(String, graphql_name='title')
    form_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='formId')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')


class CopyProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id', 'name', 'description', 'image_url', 'company_id', 'options')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    company_id = sgqlc.types.Field(String, graphql_name='companyId')
    options = sgqlc.types.Field(sgqlc.types.non_null('CopyProjectOptionsInput'), graphql_name='options')


class CopyProjectOptionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('assignees', 'automations', 'checklists', 'custom_fields', 'discussions', 'discussion_comments', 'due_dates', 'files', 'forms', 'people', 'project_user_roles', 'status_updates', 'status_update_comments', 'tags', 'todo_actions', 'todo_comments', 'todo_lists', 'todos')
    assignees = sgqlc.types.Field(Boolean, graphql_name='assignees')
    automations = sgqlc.types.Field(Boolean, graphql_name='automations')
    checklists = sgqlc.types.Field(Boolean, graphql_name='checklists')
    custom_fields = sgqlc.types.Field(Boolean, graphql_name='customFields')
    discussions = sgqlc.types.Field(Boolean, graphql_name='discussions')
    discussion_comments = sgqlc.types.Field(Boolean, graphql_name='discussionComments')
    due_dates = sgqlc.types.Field(Boolean, graphql_name='dueDates')
    files = sgqlc.types.Field(Boolean, graphql_name='files')
    forms = sgqlc.types.Field(Boolean, graphql_name='forms')
    people = sgqlc.types.Field(Boolean, graphql_name='people')
    project_user_roles = sgqlc.types.Field(Boolean, graphql_name='projectUserRoles')
    status_updates = sgqlc.types.Field(Boolean, graphql_name='statusUpdates')
    status_update_comments = sgqlc.types.Field(Boolean, graphql_name='statusUpdateComments')
    tags = sgqlc.types.Field(Boolean, graphql_name='tags')
    todo_actions = sgqlc.types.Field(Boolean, graphql_name='todoActions')
    todo_comments = sgqlc.types.Field(Boolean, graphql_name='todoComments')
    todo_lists = sgqlc.types.Field(Boolean, graphql_name='todoLists')
    todos = sgqlc.types.Field(Boolean, graphql_name='todos')


class CopyTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('title', 'todo_id', 'todo_list_id', 'options')
    title = sgqlc.types.Field(String, graphql_name='title')
    todo_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoId')
    todo_list_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoListId')
    options = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(CopyTodoOption))), graphql_name='options')


class CreateAutomationActionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('type', 'dued_in', 'custom_field_id', 'custom_field_option_ids', 'todo_list_id', 'metadata', 'tag_ids', 'assignee_ids', 'color', 'assignee_triggerer', 'portable_document_id', 'http_option')
    type = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionType), graphql_name='type')
    dued_in = sgqlc.types.Field(Int, graphql_name='duedIn')
    custom_field_id = sgqlc.types.Field(String, graphql_name='customFieldId')
    custom_field_option_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='customFieldOptionIds')
    todo_list_id = sgqlc.types.Field(String, graphql_name='todoListId')
    metadata = sgqlc.types.Field(AutomationActionMetadataInput, graphql_name='metadata')
    tag_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='tagIds')
    assignee_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='assigneeIds')
    color = sgqlc.types.Field(String, graphql_name='color')
    assignee_triggerer = sgqlc.types.Field(String, graphql_name='assigneeTriggerer')
    portable_document_id = sgqlc.types.Field(String, graphql_name='portableDocumentId')
    http_option = sgqlc.types.Field(AutomationActionHttpOptionInput, graphql_name='httpOption')


class CreateAutomationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('trigger', 'actions')
    trigger = sgqlc.types.Field(sgqlc.types.non_null('CreateAutomationTriggerInput'), graphql_name='trigger')
    actions = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(CreateAutomationActionInput))), graphql_name='actions')


class CreateAutomationTriggerInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('type', 'metadata', 'custom_field_id', 'custom_field_option_ids', 'todo_list_id', 'tag_ids', 'todo_ids', 'assignee_ids', 'color')
    type = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerType), graphql_name='type')
    metadata = sgqlc.types.Field(AutomationTriggerMetadataInput, graphql_name='metadata')
    custom_field_id = sgqlc.types.Field(String, graphql_name='customFieldId')
    custom_field_option_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='customFieldOptionIds')
    todo_list_id = sgqlc.types.Field(String, graphql_name='todoListId')
    tag_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='tagIds')
    todo_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='todoIds')
    assignee_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='assigneeIds')
    color = sgqlc.types.Field(String, graphql_name='color')


class CreateCalendarSyncTokenInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('my_todos_only',)
    my_todos_only = sgqlc.types.Field(Boolean, graphql_name='myTodosOnly')


class CreateChartInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('dashboard_id', 'title', 'chart_segments', 'position', 'display', 'type', 'metadata')
    dashboard_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='dashboardId')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    chart_segments = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ChartSegmentInput)), graphql_name='chartSegments')
    position = sgqlc.types.Field(Float, graphql_name='position')
    display = sgqlc.types.Field('FormulaDisplayInput', graphql_name='display')
    type = sgqlc.types.Field(sgqlc.types.non_null(ChartType), graphql_name='type')
    metadata = sgqlc.types.Field(ChartMetadataInput, graphql_name='metadata')


class CreateChartSegmentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('chart_id', 'title', 'color', 'uid', 'chart_segment_values', 'formula')
    chart_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='chartId')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    color = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='color')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    chart_segment_values = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ChartSegmentValueInput)), graphql_name='chartSegmentValues')
    formula = sgqlc.types.Field(sgqlc.types.non_null('FormulaInput'), graphql_name='formula')


class CreateChartSegmentValueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('chart_segment_id', 'uid', 'title', 'project_id', 'custom_field_id', 'function', 'filter')
    chart_segment_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='chartSegmentId')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    custom_field_id = sgqlc.types.Field(String, graphql_name='customFieldId')
    function = sgqlc.types.Field(ChartSegmentValueFunctions, graphql_name='function')
    filter = sgqlc.types.Field('TodoFilterInput', graphql_name='filter')


class CreateChatInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id', 'title', 'type', 'file_uids', 'folder_ids')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    type = sgqlc.types.Field(ChatType, graphql_name='type')
    file_uids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='fileUIDs')
    folder_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='folderIds')


class CreateChatMessageInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('chat_id', 'text')
    chat_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='chatId')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')


class CreateChecklistInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('todo_id', 'title', 'position')
    todo_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoId')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')


class CreateChecklistItemInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('checklist_id', 'title', 'position')
    checklist_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='checklistId')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')


class CreateChecklistWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('title', 'position')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    position = sgqlc.types.Field(Float, graphql_name='position')


class CreateCommentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('html', 'text', 'category', 'category_id', 'tiptap')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    category = sgqlc.types.Field(sgqlc.types.non_null(CommentCategory), graphql_name='category')
    category_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='categoryId')
    tiptap = sgqlc.types.Field(Boolean, graphql_name='tiptap')


class CreateCompanyCheckoutURLInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('name', 'slug')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')


class CreateCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('name', 'slug', 'image')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')
    image = sgqlc.types.Field('ImageInput', graphql_name='image')


class CreateCompanyLicensesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('activation_email', 'plan_id', 'amount', 'uid', 'license_id')
    activation_email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='activationEmail')
    plan_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='planId')
    amount = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='amount')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    license_id = sgqlc.types.Field(String, graphql_name='licenseId')


class CreateCompanySubscriptionPlanInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id', 'payment_method_id', 'plan_id', 'promo_code_id', 'plan', 'token')
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')
    payment_method_id = sgqlc.types.Field(String, graphql_name='paymentMethodId')
    plan_id = sgqlc.types.Field(String, graphql_name='planId')
    promo_code_id = sgqlc.types.Field(String, graphql_name='promoCodeId')
    plan = sgqlc.types.Field(String, graphql_name='plan')
    token = sgqlc.types.Field(String, graphql_name='token')


class CreateCustomDomainInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('name', 'company_id', 'application_type')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')
    application_type = sgqlc.types.Field(ApplicationType, graphql_name='applicationType')


class CreateCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('name', 'type', 'description', 'button_type', 'button_confirm_text', 'currency_field_id', 'conversion_date', 'conversion_date_type', 'min', 'max', 'currency', 'prefix', 'is_due_date', 'formula', 'metadata', 'time_duration_display', 'time_duration_target_time', 'time_duration_start_input', 'time_duration_end_input', 'reference_project_id', 'reference_filter', 'reference_multiple', 'lookup_option', 'use_sequence_unique_id', 'sequence_digits', 'sequence_starting_number')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    type = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldType), graphql_name='type')
    description = sgqlc.types.Field(String, graphql_name='description')
    button_type = sgqlc.types.Field(String, graphql_name='buttonType')
    button_confirm_text = sgqlc.types.Field(String, graphql_name='buttonConfirmText')
    currency_field_id = sgqlc.types.Field(String, graphql_name='currencyFieldId')
    conversion_date = sgqlc.types.Field(String, graphql_name='conversionDate')
    conversion_date_type = sgqlc.types.Field(String, graphql_name='conversionDateType')
    min = sgqlc.types.Field(Float, graphql_name='min')
    max = sgqlc.types.Field(Float, graphql_name='max')
    currency = sgqlc.types.Field(String, graphql_name='currency')
    prefix = sgqlc.types.Field(String, graphql_name='prefix')
    is_due_date = sgqlc.types.Field(Boolean, graphql_name='isDueDate')
    formula = sgqlc.types.Field(JSON, graphql_name='formula')
    metadata = sgqlc.types.Field(JSON, graphql_name='metadata')
    time_duration_display = sgqlc.types.Field(CustomFieldTimeDurationDisplayType, graphql_name='timeDurationDisplay')
    time_duration_target_time = sgqlc.types.Field(Float, graphql_name='timeDurationTargetTime')
    time_duration_start_input = sgqlc.types.Field('CustomFieldTimeDurationInput', graphql_name='timeDurationStartInput')
    time_duration_end_input = sgqlc.types.Field('CustomFieldTimeDurationInput', graphql_name='timeDurationEndInput')
    reference_project_id = sgqlc.types.Field(String, graphql_name='referenceProjectId')
    reference_filter = sgqlc.types.Field('TodoFilterInput', graphql_name='referenceFilter')
    reference_multiple = sgqlc.types.Field(Boolean, graphql_name='referenceMultiple')
    lookup_option = sgqlc.types.Field('CustomFieldLookupOptionInput', graphql_name='lookupOption')
    use_sequence_unique_id = sgqlc.types.Field(Boolean, graphql_name='useSequenceUniqueId')
    sequence_digits = sgqlc.types.Field(Int, graphql_name='sequenceDigits')
    sequence_starting_number = sgqlc.types.Field(Int, graphql_name='sequenceStartingNumber')


class CreateCustomFieldOptionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('custom_field_id', 'title', 'color', 'currency_conversion_from', 'currency_conversion_to', 'todo_id', 'position')
    custom_field_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='customFieldId')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    color = sgqlc.types.Field(String, graphql_name='color')
    currency_conversion_from = sgqlc.types.Field(String, graphql_name='currencyConversionFrom')
    currency_conversion_to = sgqlc.types.Field(String, graphql_name='currencyConversionTo')
    todo_id = sgqlc.types.Field(String, graphql_name='todoId')
    position = sgqlc.types.Field(Float, graphql_name='position')


class CreateCustomFieldOptionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('custom_field_id', 'custom_field_options')
    custom_field_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='customFieldId')
    custom_field_options = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldOptionInput'))), graphql_name='customFieldOptions')


class CreateDashboardInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id', 'project_id', 'title')
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')
    project_id = sgqlc.types.Field(String, graphql_name='projectId')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')


class CreateDiscussionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('title', 'html', 'text', 'project_id')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')


class CreateDocumentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id', 'title', 'content', 'content_base64', 'wiki')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    title = sgqlc.types.Field(String, graphql_name='title')
    content = sgqlc.types.Field(String, graphql_name='content')
    content_base64 = sgqlc.types.Field(String, graphql_name='contentBase64')
    wiki = sgqlc.types.Field(Boolean, graphql_name='wiki')


class CreateEmailTemplateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id', 'type', 'enabled', 'subject', 'body', 'cta_text', 'cta_link', 'footer', 'disclaimer', 'signature')
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')
    type = sgqlc.types.Field(sgqlc.types.non_null(EmailTemplateType), graphql_name='type')
    enabled = sgqlc.types.Field(Boolean, graphql_name='enabled')
    subject = sgqlc.types.Field(String, graphql_name='subject')
    body = sgqlc.types.Field(String, graphql_name='body')
    cta_text = sgqlc.types.Field(String, graphql_name='ctaText')
    cta_link = sgqlc.types.Field(String, graphql_name='ctaLink')
    footer = sgqlc.types.Field(String, graphql_name='footer')
    disclaimer = sgqlc.types.Field(String, graphql_name='disclaimer')
    signature = sgqlc.types.Field(String, graphql_name='signature')


class CreateFileInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'size', 'type', 'extension', 'project_id', 'company_id', 'folder_id', 'document_id', 'shared')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    size = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='size')
    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='type')
    extension = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='extension')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')
    folder_id = sgqlc.types.Field(String, graphql_name='folderId')
    document_id = sgqlc.types.Field(String, graphql_name='documentId')
    shared = sgqlc.types.Field(Boolean, graphql_name='shared')


class CreateFolderInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'type', 'title', 'company_id', 'project_id', 'parent_id')
    id = sgqlc.types.Field(String, graphql_name='id')
    type = sgqlc.types.Field(sgqlc.types.non_null(FolderType), graphql_name='type')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')
    project_id = sgqlc.types.Field(String, graphql_name='projectId')
    parent_id = sgqlc.types.Field(String, graphql_name='parentId')


class CreateFormInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id', 'title', 'hide_branding', 'primary_color', 'description')
    project_id = sgqlc.types.Field(String, graphql_name='projectId')
    title = sgqlc.types.Field(String, graphql_name='title')
    hide_branding = sgqlc.types.Field(Boolean, graphql_name='hideBranding')
    primary_color = sgqlc.types.Field(String, graphql_name='primaryColor')
    description = sgqlc.types.Field(String, graphql_name='description')


class CreateLinkInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('title', 'url', 'position', 'members_only', 'company_id')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')
    position = sgqlc.types.Field(Float, graphql_name='position')
    members_only = sgqlc.types.Field(Boolean, graphql_name='membersOnly')
    company_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='companyId')


class CreateOAuthConnectionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id', 'name', 'provider', 'access_token', 'refresh_token', 'expired_at', 'metadata')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    provider = sgqlc.types.Field(sgqlc.types.non_null(OAuthProvider), graphql_name='provider')
    access_token = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='accessToken')
    refresh_token = sgqlc.types.Field(String, graphql_name='refreshToken')
    expired_at = sgqlc.types.Field(DateTime, graphql_name='expiredAt')
    metadata = sgqlc.types.Field(JSON, graphql_name='metadata')


class CreatePersonalAccessTokenInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('name', 'scopes', 'expired_at')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    scopes = sgqlc.types.Field(String, graphql_name='scopes')
    expired_at = sgqlc.types.Field(DateTime, graphql_name='expiredAt')


class CreatePortableDocumentFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('page_id', 'position_x', 'position_y', 'width', 'height', 'id', 'field', 'custom_field_id')
    page_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='pageId')
    position_x = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='positionX')
    position_y = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='positionY')
    width = sgqlc.types.Field(Float, graphql_name='width')
    height = sgqlc.types.Field(Float, graphql_name='height')
    id = sgqlc.types.Field(String, graphql_name='id')
    field = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='field')
    custom_field_id = sgqlc.types.Field(String, graphql_name='customFieldId')


class CreatePortableDocumentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id', 'file_id')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    file_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='fileId')


class CreateProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id', 'name', 'description', 'color', 'icon', 'category', 'template_id')
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    color = sgqlc.types.Field(String, graphql_name='color')
    icon = sgqlc.types.Field(String, graphql_name='icon')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    template_id = sgqlc.types.Field(String, graphql_name='templateId')


class CreateProjectUserRoleCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('custom_field_id', 'editable')
    custom_field_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='customFieldId')
    editable = sgqlc.types.Field(Boolean, graphql_name='editable')


class CreateProjectUserRoleInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id', 'name', 'description', 'allow_invite_others', 'show_only_assigned_todos', 'show_only_mentioned_comments', 'is_activity_enabled', 'is_forms_enabled', 'is_wiki_enabled', 'is_chat_enabled', 'is_docs_enabled', 'is_files_enabled', 'is_records_enabled', 'is_people_enabled', 'record_tag_filter', 'custom_fields', 'todo_lists')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    allow_invite_others = sgqlc.types.Field(Boolean, graphql_name='allowInviteOthers')
    show_only_assigned_todos = sgqlc.types.Field(Boolean, graphql_name='showOnlyAssignedTodos')
    show_only_mentioned_comments = sgqlc.types.Field(Boolean, graphql_name='showOnlyMentionedComments')
    is_activity_enabled = sgqlc.types.Field(Boolean, graphql_name='isActivityEnabled')
    is_forms_enabled = sgqlc.types.Field(Boolean, graphql_name='isFormsEnabled')
    is_wiki_enabled = sgqlc.types.Field(Boolean, graphql_name='isWikiEnabled')
    is_chat_enabled = sgqlc.types.Field(Boolean, graphql_name='isChatEnabled')
    is_docs_enabled = sgqlc.types.Field(Boolean, graphql_name='isDocsEnabled')
    is_files_enabled = sgqlc.types.Field(Boolean, graphql_name='isFilesEnabled')
    is_records_enabled = sgqlc.types.Field(Boolean, graphql_name='isRecordsEnabled')
    is_people_enabled = sgqlc.types.Field(Boolean, graphql_name='isPeopleEnabled')
    record_tag_filter = sgqlc.types.Field('RecordTagFilterInput', graphql_name='recordTagFilter')
    custom_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CreateProjectUserRoleCustomFieldInput)), graphql_name='customFields')
    todo_lists = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CreateProjectUserRoleTodoListInput')), graphql_name='todoLists')


class CreateProjectUserRoleTodoListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('todo_list_id', 'viewable', 'editable', 'deletable')
    todo_list_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoListId')
    viewable = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='viewable')
    editable = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='editable')
    deletable = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='deletable')


class CreateRepeatingTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('todo_id', 'todo_list_id', 'type', 'fields', 'from_', 'interval', 'end')
    todo_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoId')
    todo_list_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoListId')
    type = sgqlc.types.Field(sgqlc.types.non_null(RepeatingTodoRepeatType), graphql_name='type')
    fields = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(RepeatingTodoAllowedField)), graphql_name='fields')
    from_ = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='from')
    interval = sgqlc.types.Field('RepeatingTodoIntervalInput', graphql_name='interval')
    end = sgqlc.types.Field('RepeatingTodoEndInput', graphql_name='end')


class CreateSmtpCredentialInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id', 'host', 'port', 'username', 'password', 'sender_name', 'sender_email')
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')
    host = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='host')
    port = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='port')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    password = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='password')
    sender_name = sgqlc.types.Field(String, graphql_name='senderName')
    sender_email = sgqlc.types.Field(String, graphql_name='senderEmail')


class CreateStatusUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id', 'html', 'text', 'date', 'category')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    date = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='date')
    category = sgqlc.types.Field(sgqlc.types.non_null(StatusUpdateCategory), graphql_name='category')


class CreateTagInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('title', 'color')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='color')


class CreateTodoActionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('type', 'todo_id', 'user_id', 'custom_field_id', 'old_value', 'new_value')
    type = sgqlc.types.Field(sgqlc.types.non_null(TodoActionType), graphql_name='type')
    todo_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoId')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='userId')
    custom_field_id = sgqlc.types.Field(String, graphql_name='customFieldId')
    old_value = sgqlc.types.Field(String, graphql_name='oldValue')
    new_value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='newValue')


class CreateTodoCustomFieldFileInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('todo_id', 'custom_field_id', 'file_uid')
    todo_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoId')
    custom_field_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='customFieldId')
    file_uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='fileUid')


class CreateTodoDependencyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('type', 'todo_id', 'other_todo_id')
    type = sgqlc.types.Field(sgqlc.types.non_null(TodoDependencyType), graphql_name='type')
    todo_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoId')
    other_todo_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='otherTodoId')


class CreateTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('todo_list_id', 'title', 'position', 'started_at', 'dued_at', 'notify', 'description', 'placement', 'assignee_ids', 'checklists', 'custom_fields', 'tags')
    todo_list_id = sgqlc.types.Field(String, graphql_name='todoListId')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    position = sgqlc.types.Field(Float, graphql_name='position')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    notify = sgqlc.types.Field(Boolean, graphql_name='notify')
    description = sgqlc.types.Field(String, graphql_name='description')
    placement = sgqlc.types.Field(CreateTodoInputPlacement, graphql_name='placement')
    assignee_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='assigneeIds')
    checklists = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CreateChecklistWithoutTodoInput)), graphql_name='checklists')
    custom_fields = sgqlc.types.Field(sgqlc.types.list_of('CreateTodoInputCustomField'), graphql_name='customFields')
    tags = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CreateTodoTagInput')), graphql_name='tags')


class CreateTodoInputCustomField(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('custom_field_id', 'value')
    custom_field_id = sgqlc.types.Field(String, graphql_name='customFieldId')
    value = sgqlc.types.Field(String, graphql_name='value')


class CreateTodoListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id', 'title', 'position')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')


class CreateTodoTagInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'title', 'color')
    id = sgqlc.types.Field(String, graphql_name='id')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(String, graphql_name='color')


class CreateWebhookInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('name', 'url', 'events', 'project_ids')
    name = sgqlc.types.Field(String, graphql_name='name')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')
    events = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(WebhookEvent)), graphql_name='events')
    project_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='projectIds')


class CreateWhiteLabelSubscriptionCheckoutURLInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id', 'billing_interval')
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')
    billing_interval = sgqlc.types.Field(sgqlc.types.non_null(BillingInterval), graphql_name='billingInterval')


class CreateWhiteLabelSubscriptionPortalURLInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id',)
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')


class CustomDomainFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id',)
    company_id = sgqlc.types.Field(String, graphql_name='companyId')


class CustomFieldCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'type', 'position', 'description', 'min', 'max', 'currency', 'prefix', 'project', 'custom_field_options', 'todo_custom_fields', 'activity', 'todo_actions', 'form_fields')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    type = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldType), graphql_name='type')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    description = sgqlc.types.Field(String, graphql_name='description')
    min = sgqlc.types.Field(Float, graphql_name='min')
    max = sgqlc.types.Field(Float, graphql_name='max')
    currency = sgqlc.types.Field(String, graphql_name='currency')
    prefix = sgqlc.types.Field(String, graphql_name='prefix')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutCustomFieldsInput'), graphql_name='project')
    custom_field_options = sgqlc.types.Field('CustomFieldOptionCreateManyWithoutCustomFieldInput', graphql_name='customFieldOptions')
    todo_custom_fields = sgqlc.types.Field('TodoCustomFieldCreateManyWithoutCustomFieldInput', graphql_name='todoCustomFields')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutCustomFieldInput, graphql_name='activity')
    todo_actions = sgqlc.types.Field('TodoActionCreateManyWithoutCustomFieldInput', graphql_name='todoActions')
    form_fields = sgqlc.types.Field('FormFieldCreateManyWithoutCustomFieldInput', graphql_name='formFields')


class CustomFieldCreateManyWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldCreateWithoutProjectInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldWhereUniqueInput')), graphql_name='connect')


class CustomFieldCreateOneWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('CustomFieldCreateWithoutActivityInput', graphql_name='create')
    connect = sgqlc.types.Field('CustomFieldWhereUniqueInput', graphql_name='connect')


class CustomFieldCreateOneWithoutCustomFieldOptionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('CustomFieldCreateWithoutCustomFieldOptionsInput', graphql_name='create')
    connect = sgqlc.types.Field('CustomFieldWhereUniqueInput', graphql_name='connect')


class CustomFieldCreateOneWithoutFormFieldsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('CustomFieldCreateWithoutFormFieldsInput', graphql_name='create')
    connect = sgqlc.types.Field('CustomFieldWhereUniqueInput', graphql_name='connect')


class CustomFieldCreateOneWithoutTodoActionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('CustomFieldCreateWithoutTodoActionsInput', graphql_name='create')
    connect = sgqlc.types.Field('CustomFieldWhereUniqueInput', graphql_name='connect')


class CustomFieldCreateOneWithoutTodoCustomFieldsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('CustomFieldCreateWithoutTodoCustomFieldsInput', graphql_name='create')
    connect = sgqlc.types.Field('CustomFieldWhereUniqueInput', graphql_name='connect')


class CustomFieldCreateWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'type', 'position', 'description', 'min', 'max', 'currency', 'prefix', 'project', 'custom_field_options', 'todo_custom_fields', 'todo_actions', 'form_fields')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    type = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldType), graphql_name='type')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    description = sgqlc.types.Field(String, graphql_name='description')
    min = sgqlc.types.Field(Float, graphql_name='min')
    max = sgqlc.types.Field(Float, graphql_name='max')
    currency = sgqlc.types.Field(String, graphql_name='currency')
    prefix = sgqlc.types.Field(String, graphql_name='prefix')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutCustomFieldsInput'), graphql_name='project')
    custom_field_options = sgqlc.types.Field('CustomFieldOptionCreateManyWithoutCustomFieldInput', graphql_name='customFieldOptions')
    todo_custom_fields = sgqlc.types.Field('TodoCustomFieldCreateManyWithoutCustomFieldInput', graphql_name='todoCustomFields')
    todo_actions = sgqlc.types.Field('TodoActionCreateManyWithoutCustomFieldInput', graphql_name='todoActions')
    form_fields = sgqlc.types.Field('FormFieldCreateManyWithoutCustomFieldInput', graphql_name='formFields')


class CustomFieldCreateWithoutCustomFieldOptionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'type', 'position', 'description', 'min', 'max', 'currency', 'prefix', 'project', 'todo_custom_fields', 'activity', 'todo_actions', 'form_fields')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    type = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldType), graphql_name='type')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    description = sgqlc.types.Field(String, graphql_name='description')
    min = sgqlc.types.Field(Float, graphql_name='min')
    max = sgqlc.types.Field(Float, graphql_name='max')
    currency = sgqlc.types.Field(String, graphql_name='currency')
    prefix = sgqlc.types.Field(String, graphql_name='prefix')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutCustomFieldsInput'), graphql_name='project')
    todo_custom_fields = sgqlc.types.Field('TodoCustomFieldCreateManyWithoutCustomFieldInput', graphql_name='todoCustomFields')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutCustomFieldInput, graphql_name='activity')
    todo_actions = sgqlc.types.Field('TodoActionCreateManyWithoutCustomFieldInput', graphql_name='todoActions')
    form_fields = sgqlc.types.Field('FormFieldCreateManyWithoutCustomFieldInput', graphql_name='formFields')


class CustomFieldCreateWithoutFormFieldsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'type', 'position', 'description', 'min', 'max', 'currency', 'prefix', 'project', 'custom_field_options', 'todo_custom_fields', 'activity', 'todo_actions')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    type = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldType), graphql_name='type')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    description = sgqlc.types.Field(String, graphql_name='description')
    min = sgqlc.types.Field(Float, graphql_name='min')
    max = sgqlc.types.Field(Float, graphql_name='max')
    currency = sgqlc.types.Field(String, graphql_name='currency')
    prefix = sgqlc.types.Field(String, graphql_name='prefix')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutCustomFieldsInput'), graphql_name='project')
    custom_field_options = sgqlc.types.Field('CustomFieldOptionCreateManyWithoutCustomFieldInput', graphql_name='customFieldOptions')
    todo_custom_fields = sgqlc.types.Field('TodoCustomFieldCreateManyWithoutCustomFieldInput', graphql_name='todoCustomFields')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutCustomFieldInput, graphql_name='activity')
    todo_actions = sgqlc.types.Field('TodoActionCreateManyWithoutCustomFieldInput', graphql_name='todoActions')


class CustomFieldCreateWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'type', 'position', 'description', 'min', 'max', 'currency', 'prefix', 'custom_field_options', 'todo_custom_fields', 'activity', 'todo_actions', 'form_fields')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    type = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldType), graphql_name='type')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    description = sgqlc.types.Field(String, graphql_name='description')
    min = sgqlc.types.Field(Float, graphql_name='min')
    max = sgqlc.types.Field(Float, graphql_name='max')
    currency = sgqlc.types.Field(String, graphql_name='currency')
    prefix = sgqlc.types.Field(String, graphql_name='prefix')
    custom_field_options = sgqlc.types.Field('CustomFieldOptionCreateManyWithoutCustomFieldInput', graphql_name='customFieldOptions')
    todo_custom_fields = sgqlc.types.Field('TodoCustomFieldCreateManyWithoutCustomFieldInput', graphql_name='todoCustomFields')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutCustomFieldInput, graphql_name='activity')
    todo_actions = sgqlc.types.Field('TodoActionCreateManyWithoutCustomFieldInput', graphql_name='todoActions')
    form_fields = sgqlc.types.Field('FormFieldCreateManyWithoutCustomFieldInput', graphql_name='formFields')


class CustomFieldCreateWithoutTodoActionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'type', 'position', 'description', 'min', 'max', 'currency', 'prefix', 'project', 'custom_field_options', 'todo_custom_fields', 'activity', 'form_fields')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    type = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldType), graphql_name='type')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    description = sgqlc.types.Field(String, graphql_name='description')
    min = sgqlc.types.Field(Float, graphql_name='min')
    max = sgqlc.types.Field(Float, graphql_name='max')
    currency = sgqlc.types.Field(String, graphql_name='currency')
    prefix = sgqlc.types.Field(String, graphql_name='prefix')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutCustomFieldsInput'), graphql_name='project')
    custom_field_options = sgqlc.types.Field('CustomFieldOptionCreateManyWithoutCustomFieldInput', graphql_name='customFieldOptions')
    todo_custom_fields = sgqlc.types.Field('TodoCustomFieldCreateManyWithoutCustomFieldInput', graphql_name='todoCustomFields')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutCustomFieldInput, graphql_name='activity')
    form_fields = sgqlc.types.Field('FormFieldCreateManyWithoutCustomFieldInput', graphql_name='formFields')


class CustomFieldCreateWithoutTodoCustomFieldsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'type', 'position', 'description', 'min', 'max', 'currency', 'prefix', 'project', 'custom_field_options', 'activity', 'todo_actions', 'form_fields')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    type = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldType), graphql_name='type')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    description = sgqlc.types.Field(String, graphql_name='description')
    min = sgqlc.types.Field(Float, graphql_name='min')
    max = sgqlc.types.Field(Float, graphql_name='max')
    currency = sgqlc.types.Field(String, graphql_name='currency')
    prefix = sgqlc.types.Field(String, graphql_name='prefix')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutCustomFieldsInput'), graphql_name='project')
    custom_field_options = sgqlc.types.Field('CustomFieldOptionCreateManyWithoutCustomFieldInput', graphql_name='customFieldOptions')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutCustomFieldInput, graphql_name='activity')
    todo_actions = sgqlc.types.Field('TodoActionCreateManyWithoutCustomFieldInput', graphql_name='todoActions')
    form_fields = sgqlc.types.Field('FormFieldCreateManyWithoutCustomFieldInput', graphql_name='formFields')


class CustomFieldFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id', 'types')
    project_id = sgqlc.types.Field(String, graphql_name='projectId')
    types = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CustomFieldType)), graphql_name='types')


class CustomFieldLookupOptionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('reference_id', 'lookup_id', 'lookup_type')
    reference_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='referenceId')
    lookup_id = sgqlc.types.Field(String, graphql_name='lookupId')
    lookup_type = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldLookupType), graphql_name='lookupType')


class CustomFieldOptionCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'color', 'position', 'custom_field', 'todo_custom_field', 'todo_custom_field_options')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(String, graphql_name='color')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    custom_field = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldCreateOneWithoutCustomFieldOptionsInput), graphql_name='customField')
    todo_custom_field = sgqlc.types.Field('TodoCustomFieldCreateOneWithoutCustomFieldOptionInput', graphql_name='todoCustomField')
    todo_custom_field_options = sgqlc.types.Field('TodoCustomFieldOptionCreateManyWithoutCustomFieldOptionInput', graphql_name='todoCustomFieldOptions')


class CustomFieldOptionCreateManyWithoutCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldOptionCreateWithoutCustomFieldInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldOptionWhereUniqueInput')), graphql_name='connect')


class CustomFieldOptionCreateOneWithoutTodoCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('CustomFieldOptionCreateWithoutTodoCustomFieldInput', graphql_name='create')
    connect = sgqlc.types.Field('CustomFieldOptionWhereUniqueInput', graphql_name='connect')


class CustomFieldOptionCreateOneWithoutTodoCustomFieldOptionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('CustomFieldOptionCreateWithoutTodoCustomFieldOptionsInput', graphql_name='create')
    connect = sgqlc.types.Field('CustomFieldOptionWhereUniqueInput', graphql_name='connect')


class CustomFieldOptionCreateWithoutCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'color', 'position', 'todo_custom_field', 'todo_custom_field_options')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(String, graphql_name='color')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    todo_custom_field = sgqlc.types.Field('TodoCustomFieldCreateOneWithoutCustomFieldOptionInput', graphql_name='todoCustomField')
    todo_custom_field_options = sgqlc.types.Field('TodoCustomFieldOptionCreateManyWithoutCustomFieldOptionInput', graphql_name='todoCustomFieldOptions')


class CustomFieldOptionCreateWithoutTodoCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'color', 'position', 'custom_field', 'todo_custom_field_options')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(String, graphql_name='color')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    custom_field = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldCreateOneWithoutCustomFieldOptionsInput), graphql_name='customField')
    todo_custom_field_options = sgqlc.types.Field('TodoCustomFieldOptionCreateManyWithoutCustomFieldOptionInput', graphql_name='todoCustomFieldOptions')


class CustomFieldOptionCreateWithoutTodoCustomFieldOptionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'color', 'position', 'custom_field', 'todo_custom_field')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(String, graphql_name='color')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    custom_field = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldCreateOneWithoutCustomFieldOptionsInput), graphql_name='customField')
    todo_custom_field = sgqlc.types.Field('TodoCustomFieldCreateOneWithoutCustomFieldOptionInput', graphql_name='todoCustomField')


class CustomFieldOptionFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('ids', 'custom_field_id', 'q', 'todo_id')
    ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='ids')
    custom_field_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='customFieldId')
    q = sgqlc.types.Field(String, graphql_name='q')
    todo_id = sgqlc.types.Field(String, graphql_name='todoId')


class CustomFieldOptionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('title', 'color', 'currency_conversion_from', 'currency_conversion_to', 'position')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    color = sgqlc.types.Field(String, graphql_name='color')
    currency_conversion_from = sgqlc.types.Field(String, graphql_name='currencyConversionFrom')
    currency_conversion_to = sgqlc.types.Field(String, graphql_name='currencyConversionTo')
    position = sgqlc.types.Field(Float, graphql_name='position')


class CustomFieldOptionScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'title', 'title_not', 'title_in', 'title_not_in', 'title_lt', 'title_lte', 'title_gt', 'title_gte', 'title_contains', 'title_not_contains', 'title_starts_with', 'title_not_starts_with', 'title_ends_with', 'title_not_ends_with', 'color', 'color_not', 'color_in', 'color_not_in', 'color_lt', 'color_lte', 'color_gt', 'color_gte', 'color_contains', 'color_not_contains', 'color_starts_with', 'color_not_starts_with', 'color_ends_with', 'color_not_ends_with', 'position', 'position_not', 'position_in', 'position_not_in', 'position_lt', 'position_lte', 'position_gt', 'position_gte', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    title = sgqlc.types.Field(String, graphql_name='title')
    title_not = sgqlc.types.Field(String, graphql_name='title_not')
    title_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_in')
    title_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_not_in')
    title_lt = sgqlc.types.Field(String, graphql_name='title_lt')
    title_lte = sgqlc.types.Field(String, graphql_name='title_lte')
    title_gt = sgqlc.types.Field(String, graphql_name='title_gt')
    title_gte = sgqlc.types.Field(String, graphql_name='title_gte')
    title_contains = sgqlc.types.Field(String, graphql_name='title_contains')
    title_not_contains = sgqlc.types.Field(String, graphql_name='title_not_contains')
    title_starts_with = sgqlc.types.Field(String, graphql_name='title_starts_with')
    title_not_starts_with = sgqlc.types.Field(String, graphql_name='title_not_starts_with')
    title_ends_with = sgqlc.types.Field(String, graphql_name='title_ends_with')
    title_not_ends_with = sgqlc.types.Field(String, graphql_name='title_not_ends_with')
    color = sgqlc.types.Field(String, graphql_name='color')
    color_not = sgqlc.types.Field(String, graphql_name='color_not')
    color_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='color_in')
    color_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='color_not_in')
    color_lt = sgqlc.types.Field(String, graphql_name='color_lt')
    color_lte = sgqlc.types.Field(String, graphql_name='color_lte')
    color_gt = sgqlc.types.Field(String, graphql_name='color_gt')
    color_gte = sgqlc.types.Field(String, graphql_name='color_gte')
    color_contains = sgqlc.types.Field(String, graphql_name='color_contains')
    color_not_contains = sgqlc.types.Field(String, graphql_name='color_not_contains')
    color_starts_with = sgqlc.types.Field(String, graphql_name='color_starts_with')
    color_not_starts_with = sgqlc.types.Field(String, graphql_name='color_not_starts_with')
    color_ends_with = sgqlc.types.Field(String, graphql_name='color_ends_with')
    color_not_ends_with = sgqlc.types.Field(String, graphql_name='color_not_ends_with')
    position = sgqlc.types.Field(Float, graphql_name='position')
    position_not = sgqlc.types.Field(Float, graphql_name='position_not')
    position_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_in')
    position_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_not_in')
    position_lt = sgqlc.types.Field(Float, graphql_name='position_lt')
    position_lte = sgqlc.types.Field(Float, graphql_name='position_lte')
    position_gt = sgqlc.types.Field(Float, graphql_name='position_gt')
    position_gte = sgqlc.types.Field(Float, graphql_name='position_gte')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldOptionScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldOptionScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldOptionScalarWhereInput')), graphql_name='NOT')


class CustomFieldOptionSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('CustomFieldOptionWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldOptionSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldOptionSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldOptionSubscriptionWhereInput')), graphql_name='NOT')


class CustomFieldOptionUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'color', 'position', 'custom_field', 'todo_custom_field', 'todo_custom_field_options')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(String, graphql_name='color')
    position = sgqlc.types.Field(Float, graphql_name='position')
    custom_field = sgqlc.types.Field('CustomFieldUpdateOneRequiredWithoutCustomFieldOptionsInput', graphql_name='customField')
    todo_custom_field = sgqlc.types.Field('TodoCustomFieldUpdateOneWithoutCustomFieldOptionInput', graphql_name='todoCustomField')
    todo_custom_field_options = sgqlc.types.Field('TodoCustomFieldOptionUpdateManyWithoutCustomFieldOptionInput', graphql_name='todoCustomFieldOptions')


class CustomFieldOptionUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'color', 'position')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(String, graphql_name='color')
    position = sgqlc.types.Field(Float, graphql_name='position')


class CustomFieldOptionUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'color', 'position')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(String, graphql_name='color')
    position = sgqlc.types.Field(Float, graphql_name='position')


class CustomFieldOptionUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldOptionScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldOptionUpdateManyDataInput), graphql_name='data')


class CustomFieldOptionUpdateManyWithoutCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CustomFieldOptionCreateWithoutCustomFieldInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldOptionWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldOptionWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldOptionWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldOptionWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldOptionUpdateWithWhereUniqueWithoutCustomFieldInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldOptionUpsertWithWhereUniqueWithoutCustomFieldInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CustomFieldOptionScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CustomFieldOptionUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class CustomFieldOptionUpdateOneRequiredWithoutTodoCustomFieldOptionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(CustomFieldOptionCreateWithoutTodoCustomFieldOptionsInput, graphql_name='create')
    update = sgqlc.types.Field('CustomFieldOptionUpdateWithoutTodoCustomFieldOptionsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('CustomFieldOptionUpsertWithoutTodoCustomFieldOptionsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('CustomFieldOptionWhereUniqueInput', graphql_name='connect')


class CustomFieldOptionUpdateOneWithoutTodoCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(CustomFieldOptionCreateWithoutTodoCustomFieldInput, graphql_name='create')
    update = sgqlc.types.Field('CustomFieldOptionUpdateWithoutTodoCustomFieldDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('CustomFieldOptionUpsertWithoutTodoCustomFieldInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('CustomFieldOptionWhereUniqueInput', graphql_name='connect')


class CustomFieldOptionUpdateWithWhereUniqueWithoutCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('CustomFieldOptionWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('CustomFieldOptionUpdateWithoutCustomFieldDataInput'), graphql_name='data')


class CustomFieldOptionUpdateWithoutCustomFieldDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'color', 'position', 'todo_custom_field', 'todo_custom_field_options')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(String, graphql_name='color')
    position = sgqlc.types.Field(Float, graphql_name='position')
    todo_custom_field = sgqlc.types.Field('TodoCustomFieldUpdateOneWithoutCustomFieldOptionInput', graphql_name='todoCustomField')
    todo_custom_field_options = sgqlc.types.Field('TodoCustomFieldOptionUpdateManyWithoutCustomFieldOptionInput', graphql_name='todoCustomFieldOptions')


class CustomFieldOptionUpdateWithoutTodoCustomFieldDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'color', 'position', 'custom_field', 'todo_custom_field_options')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(String, graphql_name='color')
    position = sgqlc.types.Field(Float, graphql_name='position')
    custom_field = sgqlc.types.Field('CustomFieldUpdateOneRequiredWithoutCustomFieldOptionsInput', graphql_name='customField')
    todo_custom_field_options = sgqlc.types.Field('TodoCustomFieldOptionUpdateManyWithoutCustomFieldOptionInput', graphql_name='todoCustomFieldOptions')


class CustomFieldOptionUpdateWithoutTodoCustomFieldOptionsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'color', 'position', 'custom_field', 'todo_custom_field')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(String, graphql_name='color')
    position = sgqlc.types.Field(Float, graphql_name='position')
    custom_field = sgqlc.types.Field('CustomFieldUpdateOneRequiredWithoutCustomFieldOptionsInput', graphql_name='customField')
    todo_custom_field = sgqlc.types.Field('TodoCustomFieldUpdateOneWithoutCustomFieldOptionInput', graphql_name='todoCustomField')


class CustomFieldOptionUpsertWithWhereUniqueWithoutCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('CustomFieldOptionWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldOptionUpdateWithoutCustomFieldDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldOptionCreateWithoutCustomFieldInput), graphql_name='create')


class CustomFieldOptionUpsertWithoutTodoCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldOptionUpdateWithoutTodoCustomFieldDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldOptionCreateWithoutTodoCustomFieldInput), graphql_name='create')


class CustomFieldOptionUpsertWithoutTodoCustomFieldOptionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldOptionUpdateWithoutTodoCustomFieldOptionsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldOptionCreateWithoutTodoCustomFieldOptionsInput), graphql_name='create')


class CustomFieldOptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'title', 'title_not', 'title_in', 'title_not_in', 'title_lt', 'title_lte', 'title_gt', 'title_gte', 'title_contains', 'title_not_contains', 'title_starts_with', 'title_not_starts_with', 'title_ends_with', 'title_not_ends_with', 'color', 'color_not', 'color_in', 'color_not_in', 'color_lt', 'color_lte', 'color_gt', 'color_gte', 'color_contains', 'color_not_contains', 'color_starts_with', 'color_not_starts_with', 'color_ends_with', 'color_not_ends_with', 'position', 'position_not', 'position_in', 'position_not_in', 'position_lt', 'position_lte', 'position_gt', 'position_gte', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'custom_field', 'todo_custom_field', 'todo_custom_field_options_every', 'todo_custom_field_options_some', 'todo_custom_field_options_none', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    title = sgqlc.types.Field(String, graphql_name='title')
    title_not = sgqlc.types.Field(String, graphql_name='title_not')
    title_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_in')
    title_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_not_in')
    title_lt = sgqlc.types.Field(String, graphql_name='title_lt')
    title_lte = sgqlc.types.Field(String, graphql_name='title_lte')
    title_gt = sgqlc.types.Field(String, graphql_name='title_gt')
    title_gte = sgqlc.types.Field(String, graphql_name='title_gte')
    title_contains = sgqlc.types.Field(String, graphql_name='title_contains')
    title_not_contains = sgqlc.types.Field(String, graphql_name='title_not_contains')
    title_starts_with = sgqlc.types.Field(String, graphql_name='title_starts_with')
    title_not_starts_with = sgqlc.types.Field(String, graphql_name='title_not_starts_with')
    title_ends_with = sgqlc.types.Field(String, graphql_name='title_ends_with')
    title_not_ends_with = sgqlc.types.Field(String, graphql_name='title_not_ends_with')
    color = sgqlc.types.Field(String, graphql_name='color')
    color_not = sgqlc.types.Field(String, graphql_name='color_not')
    color_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='color_in')
    color_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='color_not_in')
    color_lt = sgqlc.types.Field(String, graphql_name='color_lt')
    color_lte = sgqlc.types.Field(String, graphql_name='color_lte')
    color_gt = sgqlc.types.Field(String, graphql_name='color_gt')
    color_gte = sgqlc.types.Field(String, graphql_name='color_gte')
    color_contains = sgqlc.types.Field(String, graphql_name='color_contains')
    color_not_contains = sgqlc.types.Field(String, graphql_name='color_not_contains')
    color_starts_with = sgqlc.types.Field(String, graphql_name='color_starts_with')
    color_not_starts_with = sgqlc.types.Field(String, graphql_name='color_not_starts_with')
    color_ends_with = sgqlc.types.Field(String, graphql_name='color_ends_with')
    color_not_ends_with = sgqlc.types.Field(String, graphql_name='color_not_ends_with')
    position = sgqlc.types.Field(Float, graphql_name='position')
    position_not = sgqlc.types.Field(Float, graphql_name='position_not')
    position_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_in')
    position_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_not_in')
    position_lt = sgqlc.types.Field(Float, graphql_name='position_lt')
    position_lte = sgqlc.types.Field(Float, graphql_name='position_lte')
    position_gt = sgqlc.types.Field(Float, graphql_name='position_gt')
    position_gte = sgqlc.types.Field(Float, graphql_name='position_gte')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    custom_field = sgqlc.types.Field('CustomFieldWhereInput', graphql_name='customField')
    todo_custom_field = sgqlc.types.Field('TodoCustomFieldWhereInput', graphql_name='todoCustomField')
    todo_custom_field_options_every = sgqlc.types.Field('TodoCustomFieldOptionWhereInput', graphql_name='todoCustomFieldOptions_every')
    todo_custom_field_options_some = sgqlc.types.Field('TodoCustomFieldOptionWhereInput', graphql_name='todoCustomFieldOptions_some')
    todo_custom_field_options_none = sgqlc.types.Field('TodoCustomFieldOptionWhereInput', graphql_name='todoCustomFieldOptions_none')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldOptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldOptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldOptionWhereInput')), graphql_name='NOT')


class CustomFieldOptionWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class CustomFieldOptionsFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_ids', 'project_ids', 'ids', 'titles', 'colors', 'custom_field_ids', 'custom_field_types', 'custom_field_names', 'custom_field_reference_project_ids', 'search')
    company_ids = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='companyIds')
    project_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='projectIds')
    ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='ids')
    titles = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='titles')
    colors = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='colors')
    custom_field_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='customFieldIds')
    custom_field_types = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CustomFieldType)), graphql_name='customFieldTypes')
    custom_field_names = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='customFieldNames')
    custom_field_reference_project_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='customFieldReferenceProjectIds')
    search = sgqlc.types.Field(String, graphql_name='search')


class CustomFieldReferenceTodosFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('custom_field_id', 'search')
    custom_field_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='customFieldId')
    search = sgqlc.types.Field(String, graphql_name='search')


class CustomFieldScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'name', 'name_not', 'name_in', 'name_not_in', 'name_lt', 'name_lte', 'name_gt', 'name_gte', 'name_contains', 'name_not_contains', 'name_starts_with', 'name_not_starts_with', 'name_ends_with', 'name_not_ends_with', 'type', 'type_not', 'type_in', 'type_not_in', 'position', 'position_not', 'position_in', 'position_not_in', 'position_lt', 'position_lte', 'position_gt', 'position_gte', 'description', 'description_not', 'description_in', 'description_not_in', 'description_lt', 'description_lte', 'description_gt', 'description_gte', 'description_contains', 'description_not_contains', 'description_starts_with', 'description_not_starts_with', 'description_ends_with', 'description_not_ends_with', 'min', 'min_not', 'min_in', 'min_not_in', 'min_lt', 'min_lte', 'min_gt', 'min_gte', 'max', 'max_not', 'max_in', 'max_not_in', 'max_lt', 'max_lte', 'max_gt', 'max_gte', 'currency', 'currency_not', 'currency_in', 'currency_not_in', 'currency_lt', 'currency_lte', 'currency_gt', 'currency_gte', 'currency_contains', 'currency_not_contains', 'currency_starts_with', 'currency_not_starts_with', 'currency_ends_with', 'currency_not_ends_with', 'prefix', 'prefix_not', 'prefix_in', 'prefix_not_in', 'prefix_lt', 'prefix_lte', 'prefix_gt', 'prefix_gte', 'prefix_contains', 'prefix_not_contains', 'prefix_starts_with', 'prefix_not_starts_with', 'prefix_ends_with', 'prefix_not_ends_with', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    name = sgqlc.types.Field(String, graphql_name='name')
    name_not = sgqlc.types.Field(String, graphql_name='name_not')
    name_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='name_in')
    name_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='name_not_in')
    name_lt = sgqlc.types.Field(String, graphql_name='name_lt')
    name_lte = sgqlc.types.Field(String, graphql_name='name_lte')
    name_gt = sgqlc.types.Field(String, graphql_name='name_gt')
    name_gte = sgqlc.types.Field(String, graphql_name='name_gte')
    name_contains = sgqlc.types.Field(String, graphql_name='name_contains')
    name_not_contains = sgqlc.types.Field(String, graphql_name='name_not_contains')
    name_starts_with = sgqlc.types.Field(String, graphql_name='name_starts_with')
    name_not_starts_with = sgqlc.types.Field(String, graphql_name='name_not_starts_with')
    name_ends_with = sgqlc.types.Field(String, graphql_name='name_ends_with')
    name_not_ends_with = sgqlc.types.Field(String, graphql_name='name_not_ends_with')
    type = sgqlc.types.Field(CustomFieldType, graphql_name='type')
    type_not = sgqlc.types.Field(CustomFieldType, graphql_name='type_not')
    type_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CustomFieldType)), graphql_name='type_in')
    type_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CustomFieldType)), graphql_name='type_not_in')
    position = sgqlc.types.Field(Float, graphql_name='position')
    position_not = sgqlc.types.Field(Float, graphql_name='position_not')
    position_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_in')
    position_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_not_in')
    position_lt = sgqlc.types.Field(Float, graphql_name='position_lt')
    position_lte = sgqlc.types.Field(Float, graphql_name='position_lte')
    position_gt = sgqlc.types.Field(Float, graphql_name='position_gt')
    position_gte = sgqlc.types.Field(Float, graphql_name='position_gte')
    description = sgqlc.types.Field(String, graphql_name='description')
    description_not = sgqlc.types.Field(String, graphql_name='description_not')
    description_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='description_in')
    description_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='description_not_in')
    description_lt = sgqlc.types.Field(String, graphql_name='description_lt')
    description_lte = sgqlc.types.Field(String, graphql_name='description_lte')
    description_gt = sgqlc.types.Field(String, graphql_name='description_gt')
    description_gte = sgqlc.types.Field(String, graphql_name='description_gte')
    description_contains = sgqlc.types.Field(String, graphql_name='description_contains')
    description_not_contains = sgqlc.types.Field(String, graphql_name='description_not_contains')
    description_starts_with = sgqlc.types.Field(String, graphql_name='description_starts_with')
    description_not_starts_with = sgqlc.types.Field(String, graphql_name='description_not_starts_with')
    description_ends_with = sgqlc.types.Field(String, graphql_name='description_ends_with')
    description_not_ends_with = sgqlc.types.Field(String, graphql_name='description_not_ends_with')
    min = sgqlc.types.Field(Float, graphql_name='min')
    min_not = sgqlc.types.Field(Float, graphql_name='min_not')
    min_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='min_in')
    min_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='min_not_in')
    min_lt = sgqlc.types.Field(Float, graphql_name='min_lt')
    min_lte = sgqlc.types.Field(Float, graphql_name='min_lte')
    min_gt = sgqlc.types.Field(Float, graphql_name='min_gt')
    min_gte = sgqlc.types.Field(Float, graphql_name='min_gte')
    max = sgqlc.types.Field(Float, graphql_name='max')
    max_not = sgqlc.types.Field(Float, graphql_name='max_not')
    max_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='max_in')
    max_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='max_not_in')
    max_lt = sgqlc.types.Field(Float, graphql_name='max_lt')
    max_lte = sgqlc.types.Field(Float, graphql_name='max_lte')
    max_gt = sgqlc.types.Field(Float, graphql_name='max_gt')
    max_gte = sgqlc.types.Field(Float, graphql_name='max_gte')
    currency = sgqlc.types.Field(String, graphql_name='currency')
    currency_not = sgqlc.types.Field(String, graphql_name='currency_not')
    currency_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='currency_in')
    currency_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='currency_not_in')
    currency_lt = sgqlc.types.Field(String, graphql_name='currency_lt')
    currency_lte = sgqlc.types.Field(String, graphql_name='currency_lte')
    currency_gt = sgqlc.types.Field(String, graphql_name='currency_gt')
    currency_gte = sgqlc.types.Field(String, graphql_name='currency_gte')
    currency_contains = sgqlc.types.Field(String, graphql_name='currency_contains')
    currency_not_contains = sgqlc.types.Field(String, graphql_name='currency_not_contains')
    currency_starts_with = sgqlc.types.Field(String, graphql_name='currency_starts_with')
    currency_not_starts_with = sgqlc.types.Field(String, graphql_name='currency_not_starts_with')
    currency_ends_with = sgqlc.types.Field(String, graphql_name='currency_ends_with')
    currency_not_ends_with = sgqlc.types.Field(String, graphql_name='currency_not_ends_with')
    prefix = sgqlc.types.Field(String, graphql_name='prefix')
    prefix_not = sgqlc.types.Field(String, graphql_name='prefix_not')
    prefix_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='prefix_in')
    prefix_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='prefix_not_in')
    prefix_lt = sgqlc.types.Field(String, graphql_name='prefix_lt')
    prefix_lte = sgqlc.types.Field(String, graphql_name='prefix_lte')
    prefix_gt = sgqlc.types.Field(String, graphql_name='prefix_gt')
    prefix_gte = sgqlc.types.Field(String, graphql_name='prefix_gte')
    prefix_contains = sgqlc.types.Field(String, graphql_name='prefix_contains')
    prefix_not_contains = sgqlc.types.Field(String, graphql_name='prefix_not_contains')
    prefix_starts_with = sgqlc.types.Field(String, graphql_name='prefix_starts_with')
    prefix_not_starts_with = sgqlc.types.Field(String, graphql_name='prefix_not_starts_with')
    prefix_ends_with = sgqlc.types.Field(String, graphql_name='prefix_ends_with')
    prefix_not_ends_with = sgqlc.types.Field(String, graphql_name='prefix_not_ends_with')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldScalarWhereInput')), graphql_name='NOT')


class CustomFieldSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('CustomFieldWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldSubscriptionWhereInput')), graphql_name='NOT')


class CustomFieldTimeDurationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('type', 'condition', 'custom_field_id', 'custom_field_option_ids', 'todo_list_id', 'tag_id', 'assignee_id')
    type = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldTimeDurationType), graphql_name='type')
    condition = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldTimeDurationCondition), graphql_name='condition')
    custom_field_id = sgqlc.types.Field(String, graphql_name='customFieldId')
    custom_field_option_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='customFieldOptionIds')
    todo_list_id = sgqlc.types.Field(String, graphql_name='todoListId')
    tag_id = sgqlc.types.Field(String, graphql_name='tagId')
    assignee_id = sgqlc.types.Field(String, graphql_name='assigneeId')


class CustomFieldUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'type', 'position', 'description', 'min', 'max', 'currency', 'prefix', 'project', 'custom_field_options', 'todo_custom_fields', 'activity', 'todo_actions', 'form_fields')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    type = sgqlc.types.Field(CustomFieldType, graphql_name='type')
    position = sgqlc.types.Field(Float, graphql_name='position')
    description = sgqlc.types.Field(String, graphql_name='description')
    min = sgqlc.types.Field(Float, graphql_name='min')
    max = sgqlc.types.Field(Float, graphql_name='max')
    currency = sgqlc.types.Field(String, graphql_name='currency')
    prefix = sgqlc.types.Field(String, graphql_name='prefix')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutCustomFieldsInput', graphql_name='project')
    custom_field_options = sgqlc.types.Field(CustomFieldOptionUpdateManyWithoutCustomFieldInput, graphql_name='customFieldOptions')
    todo_custom_fields = sgqlc.types.Field('TodoCustomFieldUpdateManyWithoutCustomFieldInput', graphql_name='todoCustomFields')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutCustomFieldInput, graphql_name='activity')
    todo_actions = sgqlc.types.Field('TodoActionUpdateManyWithoutCustomFieldInput', graphql_name='todoActions')
    form_fields = sgqlc.types.Field('FormFieldUpdateManyWithoutCustomFieldInput', graphql_name='formFields')


class CustomFieldUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'type', 'position', 'description', 'min', 'max', 'currency', 'prefix')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    type = sgqlc.types.Field(CustomFieldType, graphql_name='type')
    position = sgqlc.types.Field(Float, graphql_name='position')
    description = sgqlc.types.Field(String, graphql_name='description')
    min = sgqlc.types.Field(Float, graphql_name='min')
    max = sgqlc.types.Field(Float, graphql_name='max')
    currency = sgqlc.types.Field(String, graphql_name='currency')
    prefix = sgqlc.types.Field(String, graphql_name='prefix')


class CustomFieldUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'type', 'position', 'description', 'min', 'max', 'currency', 'prefix')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    type = sgqlc.types.Field(CustomFieldType, graphql_name='type')
    position = sgqlc.types.Field(Float, graphql_name='position')
    description = sgqlc.types.Field(String, graphql_name='description')
    min = sgqlc.types.Field(Float, graphql_name='min')
    max = sgqlc.types.Field(Float, graphql_name='max')
    currency = sgqlc.types.Field(String, graphql_name='currency')
    prefix = sgqlc.types.Field(String, graphql_name='prefix')


class CustomFieldUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldUpdateManyDataInput), graphql_name='data')


class CustomFieldUpdateManyWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CustomFieldCreateWithoutProjectInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldUpdateWithWhereUniqueWithoutProjectInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldUpsertWithWhereUniqueWithoutProjectInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CustomFieldScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CustomFieldUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class CustomFieldUpdateOneRequiredWithoutCustomFieldOptionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(CustomFieldCreateWithoutCustomFieldOptionsInput, graphql_name='create')
    update = sgqlc.types.Field('CustomFieldUpdateWithoutCustomFieldOptionsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('CustomFieldUpsertWithoutCustomFieldOptionsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('CustomFieldWhereUniqueInput', graphql_name='connect')


class CustomFieldUpdateOneRequiredWithoutTodoCustomFieldsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(CustomFieldCreateWithoutTodoCustomFieldsInput, graphql_name='create')
    update = sgqlc.types.Field('CustomFieldUpdateWithoutTodoCustomFieldsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('CustomFieldUpsertWithoutTodoCustomFieldsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('CustomFieldWhereUniqueInput', graphql_name='connect')


class CustomFieldUpdateOneWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(CustomFieldCreateWithoutActivityInput, graphql_name='create')
    update = sgqlc.types.Field('CustomFieldUpdateWithoutActivityDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('CustomFieldUpsertWithoutActivityInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('CustomFieldWhereUniqueInput', graphql_name='connect')


class CustomFieldUpdateOneWithoutFormFieldsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(CustomFieldCreateWithoutFormFieldsInput, graphql_name='create')
    update = sgqlc.types.Field('CustomFieldUpdateWithoutFormFieldsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('CustomFieldUpsertWithoutFormFieldsInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('CustomFieldWhereUniqueInput', graphql_name='connect')


class CustomFieldUpdateOneWithoutTodoActionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(CustomFieldCreateWithoutTodoActionsInput, graphql_name='create')
    update = sgqlc.types.Field('CustomFieldUpdateWithoutTodoActionsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('CustomFieldUpsertWithoutTodoActionsInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('CustomFieldWhereUniqueInput', graphql_name='connect')


class CustomFieldUpdateWithWhereUniqueWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('CustomFieldWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('CustomFieldUpdateWithoutProjectDataInput'), graphql_name='data')


class CustomFieldUpdateWithoutActivityDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'type', 'position', 'description', 'min', 'max', 'currency', 'prefix', 'project', 'custom_field_options', 'todo_custom_fields', 'todo_actions', 'form_fields')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    type = sgqlc.types.Field(CustomFieldType, graphql_name='type')
    position = sgqlc.types.Field(Float, graphql_name='position')
    description = sgqlc.types.Field(String, graphql_name='description')
    min = sgqlc.types.Field(Float, graphql_name='min')
    max = sgqlc.types.Field(Float, graphql_name='max')
    currency = sgqlc.types.Field(String, graphql_name='currency')
    prefix = sgqlc.types.Field(String, graphql_name='prefix')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutCustomFieldsInput', graphql_name='project')
    custom_field_options = sgqlc.types.Field(CustomFieldOptionUpdateManyWithoutCustomFieldInput, graphql_name='customFieldOptions')
    todo_custom_fields = sgqlc.types.Field('TodoCustomFieldUpdateManyWithoutCustomFieldInput', graphql_name='todoCustomFields')
    todo_actions = sgqlc.types.Field('TodoActionUpdateManyWithoutCustomFieldInput', graphql_name='todoActions')
    form_fields = sgqlc.types.Field('FormFieldUpdateManyWithoutCustomFieldInput', graphql_name='formFields')


class CustomFieldUpdateWithoutCustomFieldOptionsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'type', 'position', 'description', 'min', 'max', 'currency', 'prefix', 'project', 'todo_custom_fields', 'activity', 'todo_actions', 'form_fields')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    type = sgqlc.types.Field(CustomFieldType, graphql_name='type')
    position = sgqlc.types.Field(Float, graphql_name='position')
    description = sgqlc.types.Field(String, graphql_name='description')
    min = sgqlc.types.Field(Float, graphql_name='min')
    max = sgqlc.types.Field(Float, graphql_name='max')
    currency = sgqlc.types.Field(String, graphql_name='currency')
    prefix = sgqlc.types.Field(String, graphql_name='prefix')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutCustomFieldsInput', graphql_name='project')
    todo_custom_fields = sgqlc.types.Field('TodoCustomFieldUpdateManyWithoutCustomFieldInput', graphql_name='todoCustomFields')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutCustomFieldInput, graphql_name='activity')
    todo_actions = sgqlc.types.Field('TodoActionUpdateManyWithoutCustomFieldInput', graphql_name='todoActions')
    form_fields = sgqlc.types.Field('FormFieldUpdateManyWithoutCustomFieldInput', graphql_name='formFields')


class CustomFieldUpdateWithoutFormFieldsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'type', 'position', 'description', 'min', 'max', 'currency', 'prefix', 'project', 'custom_field_options', 'todo_custom_fields', 'activity', 'todo_actions')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    type = sgqlc.types.Field(CustomFieldType, graphql_name='type')
    position = sgqlc.types.Field(Float, graphql_name='position')
    description = sgqlc.types.Field(String, graphql_name='description')
    min = sgqlc.types.Field(Float, graphql_name='min')
    max = sgqlc.types.Field(Float, graphql_name='max')
    currency = sgqlc.types.Field(String, graphql_name='currency')
    prefix = sgqlc.types.Field(String, graphql_name='prefix')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutCustomFieldsInput', graphql_name='project')
    custom_field_options = sgqlc.types.Field(CustomFieldOptionUpdateManyWithoutCustomFieldInput, graphql_name='customFieldOptions')
    todo_custom_fields = sgqlc.types.Field('TodoCustomFieldUpdateManyWithoutCustomFieldInput', graphql_name='todoCustomFields')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutCustomFieldInput, graphql_name='activity')
    todo_actions = sgqlc.types.Field('TodoActionUpdateManyWithoutCustomFieldInput', graphql_name='todoActions')


class CustomFieldUpdateWithoutProjectDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'type', 'position', 'description', 'min', 'max', 'currency', 'prefix', 'custom_field_options', 'todo_custom_fields', 'activity', 'todo_actions', 'form_fields')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    type = sgqlc.types.Field(CustomFieldType, graphql_name='type')
    position = sgqlc.types.Field(Float, graphql_name='position')
    description = sgqlc.types.Field(String, graphql_name='description')
    min = sgqlc.types.Field(Float, graphql_name='min')
    max = sgqlc.types.Field(Float, graphql_name='max')
    currency = sgqlc.types.Field(String, graphql_name='currency')
    prefix = sgqlc.types.Field(String, graphql_name='prefix')
    custom_field_options = sgqlc.types.Field(CustomFieldOptionUpdateManyWithoutCustomFieldInput, graphql_name='customFieldOptions')
    todo_custom_fields = sgqlc.types.Field('TodoCustomFieldUpdateManyWithoutCustomFieldInput', graphql_name='todoCustomFields')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutCustomFieldInput, graphql_name='activity')
    todo_actions = sgqlc.types.Field('TodoActionUpdateManyWithoutCustomFieldInput', graphql_name='todoActions')
    form_fields = sgqlc.types.Field('FormFieldUpdateManyWithoutCustomFieldInput', graphql_name='formFields')


class CustomFieldUpdateWithoutTodoActionsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'type', 'position', 'description', 'min', 'max', 'currency', 'prefix', 'project', 'custom_field_options', 'todo_custom_fields', 'activity', 'form_fields')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    type = sgqlc.types.Field(CustomFieldType, graphql_name='type')
    position = sgqlc.types.Field(Float, graphql_name='position')
    description = sgqlc.types.Field(String, graphql_name='description')
    min = sgqlc.types.Field(Float, graphql_name='min')
    max = sgqlc.types.Field(Float, graphql_name='max')
    currency = sgqlc.types.Field(String, graphql_name='currency')
    prefix = sgqlc.types.Field(String, graphql_name='prefix')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutCustomFieldsInput', graphql_name='project')
    custom_field_options = sgqlc.types.Field(CustomFieldOptionUpdateManyWithoutCustomFieldInput, graphql_name='customFieldOptions')
    todo_custom_fields = sgqlc.types.Field('TodoCustomFieldUpdateManyWithoutCustomFieldInput', graphql_name='todoCustomFields')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutCustomFieldInput, graphql_name='activity')
    form_fields = sgqlc.types.Field('FormFieldUpdateManyWithoutCustomFieldInput', graphql_name='formFields')


class CustomFieldUpdateWithoutTodoCustomFieldsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'type', 'position', 'description', 'min', 'max', 'currency', 'prefix', 'project', 'custom_field_options', 'activity', 'todo_actions', 'form_fields')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    type = sgqlc.types.Field(CustomFieldType, graphql_name='type')
    position = sgqlc.types.Field(Float, graphql_name='position')
    description = sgqlc.types.Field(String, graphql_name='description')
    min = sgqlc.types.Field(Float, graphql_name='min')
    max = sgqlc.types.Field(Float, graphql_name='max')
    currency = sgqlc.types.Field(String, graphql_name='currency')
    prefix = sgqlc.types.Field(String, graphql_name='prefix')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutCustomFieldsInput', graphql_name='project')
    custom_field_options = sgqlc.types.Field(CustomFieldOptionUpdateManyWithoutCustomFieldInput, graphql_name='customFieldOptions')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutCustomFieldInput, graphql_name='activity')
    todo_actions = sgqlc.types.Field('TodoActionUpdateManyWithoutCustomFieldInput', graphql_name='todoActions')
    form_fields = sgqlc.types.Field('FormFieldUpdateManyWithoutCustomFieldInput', graphql_name='formFields')


class CustomFieldUpsertWithWhereUniqueWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('CustomFieldWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldUpdateWithoutProjectDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldCreateWithoutProjectInput), graphql_name='create')


class CustomFieldUpsertWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldUpdateWithoutActivityDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldCreateWithoutActivityInput), graphql_name='create')


class CustomFieldUpsertWithoutCustomFieldOptionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldUpdateWithoutCustomFieldOptionsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldCreateWithoutCustomFieldOptionsInput), graphql_name='create')


class CustomFieldUpsertWithoutFormFieldsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldUpdateWithoutFormFieldsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldCreateWithoutFormFieldsInput), graphql_name='create')


class CustomFieldUpsertWithoutTodoActionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldUpdateWithoutTodoActionsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldCreateWithoutTodoActionsInput), graphql_name='create')


class CustomFieldUpsertWithoutTodoCustomFieldsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldUpdateWithoutTodoCustomFieldsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldCreateWithoutTodoCustomFieldsInput), graphql_name='create')


class CustomFieldWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'name', 'name_not', 'name_in', 'name_not_in', 'name_lt', 'name_lte', 'name_gt', 'name_gte', 'name_contains', 'name_not_contains', 'name_starts_with', 'name_not_starts_with', 'name_ends_with', 'name_not_ends_with', 'type', 'type_not', 'type_in', 'type_not_in', 'position', 'position_not', 'position_in', 'position_not_in', 'position_lt', 'position_lte', 'position_gt', 'position_gte', 'description', 'description_not', 'description_in', 'description_not_in', 'description_lt', 'description_lte', 'description_gt', 'description_gte', 'description_contains', 'description_not_contains', 'description_starts_with', 'description_not_starts_with', 'description_ends_with', 'description_not_ends_with', 'min', 'min_not', 'min_in', 'min_not_in', 'min_lt', 'min_lte', 'min_gt', 'min_gte', 'max', 'max_not', 'max_in', 'max_not_in', 'max_lt', 'max_lte', 'max_gt', 'max_gte', 'currency', 'currency_not', 'currency_in', 'currency_not_in', 'currency_lt', 'currency_lte', 'currency_gt', 'currency_gte', 'currency_contains', 'currency_not_contains', 'currency_starts_with', 'currency_not_starts_with', 'currency_ends_with', 'currency_not_ends_with', 'prefix', 'prefix_not', 'prefix_in', 'prefix_not_in', 'prefix_lt', 'prefix_lte', 'prefix_gt', 'prefix_gte', 'prefix_contains', 'prefix_not_contains', 'prefix_starts_with', 'prefix_not_starts_with', 'prefix_ends_with', 'prefix_not_ends_with', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'project', 'custom_field_options_every', 'custom_field_options_some', 'custom_field_options_none', 'todo_custom_fields_every', 'todo_custom_fields_some', 'todo_custom_fields_none', 'activity', 'todo_actions_every', 'todo_actions_some', 'todo_actions_none', 'form_fields_every', 'form_fields_some', 'form_fields_none', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    name = sgqlc.types.Field(String, graphql_name='name')
    name_not = sgqlc.types.Field(String, graphql_name='name_not')
    name_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='name_in')
    name_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='name_not_in')
    name_lt = sgqlc.types.Field(String, graphql_name='name_lt')
    name_lte = sgqlc.types.Field(String, graphql_name='name_lte')
    name_gt = sgqlc.types.Field(String, graphql_name='name_gt')
    name_gte = sgqlc.types.Field(String, graphql_name='name_gte')
    name_contains = sgqlc.types.Field(String, graphql_name='name_contains')
    name_not_contains = sgqlc.types.Field(String, graphql_name='name_not_contains')
    name_starts_with = sgqlc.types.Field(String, graphql_name='name_starts_with')
    name_not_starts_with = sgqlc.types.Field(String, graphql_name='name_not_starts_with')
    name_ends_with = sgqlc.types.Field(String, graphql_name='name_ends_with')
    name_not_ends_with = sgqlc.types.Field(String, graphql_name='name_not_ends_with')
    type = sgqlc.types.Field(CustomFieldType, graphql_name='type')
    type_not = sgqlc.types.Field(CustomFieldType, graphql_name='type_not')
    type_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CustomFieldType)), graphql_name='type_in')
    type_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CustomFieldType)), graphql_name='type_not_in')
    position = sgqlc.types.Field(Float, graphql_name='position')
    position_not = sgqlc.types.Field(Float, graphql_name='position_not')
    position_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_in')
    position_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_not_in')
    position_lt = sgqlc.types.Field(Float, graphql_name='position_lt')
    position_lte = sgqlc.types.Field(Float, graphql_name='position_lte')
    position_gt = sgqlc.types.Field(Float, graphql_name='position_gt')
    position_gte = sgqlc.types.Field(Float, graphql_name='position_gte')
    description = sgqlc.types.Field(String, graphql_name='description')
    description_not = sgqlc.types.Field(String, graphql_name='description_not')
    description_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='description_in')
    description_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='description_not_in')
    description_lt = sgqlc.types.Field(String, graphql_name='description_lt')
    description_lte = sgqlc.types.Field(String, graphql_name='description_lte')
    description_gt = sgqlc.types.Field(String, graphql_name='description_gt')
    description_gte = sgqlc.types.Field(String, graphql_name='description_gte')
    description_contains = sgqlc.types.Field(String, graphql_name='description_contains')
    description_not_contains = sgqlc.types.Field(String, graphql_name='description_not_contains')
    description_starts_with = sgqlc.types.Field(String, graphql_name='description_starts_with')
    description_not_starts_with = sgqlc.types.Field(String, graphql_name='description_not_starts_with')
    description_ends_with = sgqlc.types.Field(String, graphql_name='description_ends_with')
    description_not_ends_with = sgqlc.types.Field(String, graphql_name='description_not_ends_with')
    min = sgqlc.types.Field(Float, graphql_name='min')
    min_not = sgqlc.types.Field(Float, graphql_name='min_not')
    min_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='min_in')
    min_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='min_not_in')
    min_lt = sgqlc.types.Field(Float, graphql_name='min_lt')
    min_lte = sgqlc.types.Field(Float, graphql_name='min_lte')
    min_gt = sgqlc.types.Field(Float, graphql_name='min_gt')
    min_gte = sgqlc.types.Field(Float, graphql_name='min_gte')
    max = sgqlc.types.Field(Float, graphql_name='max')
    max_not = sgqlc.types.Field(Float, graphql_name='max_not')
    max_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='max_in')
    max_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='max_not_in')
    max_lt = sgqlc.types.Field(Float, graphql_name='max_lt')
    max_lte = sgqlc.types.Field(Float, graphql_name='max_lte')
    max_gt = sgqlc.types.Field(Float, graphql_name='max_gt')
    max_gte = sgqlc.types.Field(Float, graphql_name='max_gte')
    currency = sgqlc.types.Field(String, graphql_name='currency')
    currency_not = sgqlc.types.Field(String, graphql_name='currency_not')
    currency_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='currency_in')
    currency_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='currency_not_in')
    currency_lt = sgqlc.types.Field(String, graphql_name='currency_lt')
    currency_lte = sgqlc.types.Field(String, graphql_name='currency_lte')
    currency_gt = sgqlc.types.Field(String, graphql_name='currency_gt')
    currency_gte = sgqlc.types.Field(String, graphql_name='currency_gte')
    currency_contains = sgqlc.types.Field(String, graphql_name='currency_contains')
    currency_not_contains = sgqlc.types.Field(String, graphql_name='currency_not_contains')
    currency_starts_with = sgqlc.types.Field(String, graphql_name='currency_starts_with')
    currency_not_starts_with = sgqlc.types.Field(String, graphql_name='currency_not_starts_with')
    currency_ends_with = sgqlc.types.Field(String, graphql_name='currency_ends_with')
    currency_not_ends_with = sgqlc.types.Field(String, graphql_name='currency_not_ends_with')
    prefix = sgqlc.types.Field(String, graphql_name='prefix')
    prefix_not = sgqlc.types.Field(String, graphql_name='prefix_not')
    prefix_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='prefix_in')
    prefix_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='prefix_not_in')
    prefix_lt = sgqlc.types.Field(String, graphql_name='prefix_lt')
    prefix_lte = sgqlc.types.Field(String, graphql_name='prefix_lte')
    prefix_gt = sgqlc.types.Field(String, graphql_name='prefix_gt')
    prefix_gte = sgqlc.types.Field(String, graphql_name='prefix_gte')
    prefix_contains = sgqlc.types.Field(String, graphql_name='prefix_contains')
    prefix_not_contains = sgqlc.types.Field(String, graphql_name='prefix_not_contains')
    prefix_starts_with = sgqlc.types.Field(String, graphql_name='prefix_starts_with')
    prefix_not_starts_with = sgqlc.types.Field(String, graphql_name='prefix_not_starts_with')
    prefix_ends_with = sgqlc.types.Field(String, graphql_name='prefix_ends_with')
    prefix_not_ends_with = sgqlc.types.Field(String, graphql_name='prefix_not_ends_with')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    project = sgqlc.types.Field('ProjectWhereInput', graphql_name='project')
    custom_field_options_every = sgqlc.types.Field(CustomFieldOptionWhereInput, graphql_name='customFieldOptions_every')
    custom_field_options_some = sgqlc.types.Field(CustomFieldOptionWhereInput, graphql_name='customFieldOptions_some')
    custom_field_options_none = sgqlc.types.Field(CustomFieldOptionWhereInput, graphql_name='customFieldOptions_none')
    todo_custom_fields_every = sgqlc.types.Field('TodoCustomFieldWhereInput', graphql_name='todoCustomFields_every')
    todo_custom_fields_some = sgqlc.types.Field('TodoCustomFieldWhereInput', graphql_name='todoCustomFields_some')
    todo_custom_fields_none = sgqlc.types.Field('TodoCustomFieldWhereInput', graphql_name='todoCustomFields_none')
    activity = sgqlc.types.Field(ActivityWhereInput, graphql_name='activity')
    todo_actions_every = sgqlc.types.Field('TodoActionWhereInput', graphql_name='todoActions_every')
    todo_actions_some = sgqlc.types.Field('TodoActionWhereInput', graphql_name='todoActions_some')
    todo_actions_none = sgqlc.types.Field('TodoActionWhereInput', graphql_name='todoActions_none')
    form_fields_every = sgqlc.types.Field('FormFieldWhereInput', graphql_name='formFields_every')
    form_fields_some = sgqlc.types.Field('FormFieldWhereInput', graphql_name='formFields_some')
    form_fields_none = sgqlc.types.Field('FormFieldWhereInput', graphql_name='formFields_none')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldWhereInput')), graphql_name='NOT')


class CustomFieldWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class CustomFieldsFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_ids', 'project_ids', 'types', 'search')
    company_ids = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='companyIds')
    project_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='projectIds')
    types = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CustomFieldType)), graphql_name='types')
    search = sgqlc.types.Field(String, graphql_name='search')


class DashboardFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id', 'project_id')
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')
    project_id = sgqlc.types.Field(String, graphql_name='projectId')


class DeactivateCompanyLicenseInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id',)
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')


class DeleteCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id', 'code')
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')
    code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='code')


class DeleteCompanyRequestInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id',)
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')


class DeleteFolderInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id',)
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')


class DeleteLinkInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id',)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class DeletePersonalAccessTokenInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id',)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class DeleteProjectUserRoleInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('role_id', 'project_id')
    role_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='roleId')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')


class DeleteTodoCustomFieldFileInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('todo_id', 'custom_field_id', 'file_uid')
    todo_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoId')
    custom_field_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='customFieldId')
    file_uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='fileUid')


class DeleteTodoDependencyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('todo_id', 'other_todo_id')
    todo_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoId')
    other_todo_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='otherTodoId')


class DeleteTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('todo_id',)
    todo_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoId')


class DeleteTodoListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id', 'todo_list_id')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    todo_list_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoListId')


class DeleteWebhookInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('webhook_id',)
    webhook_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='webhookId')


class DisableWebhookInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('webhook_id',)
    webhook_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='webhookId')


class DiscussionCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'html', 'text', 'user', 'activity', 'project', 'comments', 'files')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneInput'), graphql_name='user')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutDiscussionInput, graphql_name='activity')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutDiscussionsInput'), graphql_name='project')
    comments = sgqlc.types.Field(CommentCreateManyWithoutDiscussionInput, graphql_name='comments')
    files = sgqlc.types.Field('FileCreateManyWithoutDiscussionInput', graphql_name='files')


class DiscussionCreateManyWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DiscussionCreateWithoutProjectInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DiscussionWhereUniqueInput')), graphql_name='connect')


class DiscussionCreateOneWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('DiscussionCreateWithoutActivityInput', graphql_name='create')
    connect = sgqlc.types.Field('DiscussionWhereUniqueInput', graphql_name='connect')


class DiscussionCreateOneWithoutCommentsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('DiscussionCreateWithoutCommentsInput', graphql_name='create')
    connect = sgqlc.types.Field('DiscussionWhereUniqueInput', graphql_name='connect')


class DiscussionCreateOneWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('DiscussionCreateWithoutFilesInput', graphql_name='create')
    connect = sgqlc.types.Field('DiscussionWhereUniqueInput', graphql_name='connect')


class DiscussionCreateWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'html', 'text', 'user', 'project', 'comments', 'files')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneInput'), graphql_name='user')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutDiscussionsInput'), graphql_name='project')
    comments = sgqlc.types.Field(CommentCreateManyWithoutDiscussionInput, graphql_name='comments')
    files = sgqlc.types.Field('FileCreateManyWithoutDiscussionInput', graphql_name='files')


class DiscussionCreateWithoutCommentsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'html', 'text', 'user', 'activity', 'project', 'files')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneInput'), graphql_name='user')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutDiscussionInput, graphql_name='activity')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutDiscussionsInput'), graphql_name='project')
    files = sgqlc.types.Field('FileCreateManyWithoutDiscussionInput', graphql_name='files')


class DiscussionCreateWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'html', 'text', 'user', 'activity', 'project', 'comments')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneInput'), graphql_name='user')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutDiscussionInput, graphql_name='activity')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutDiscussionsInput'), graphql_name='project')
    comments = sgqlc.types.Field(CommentCreateManyWithoutDiscussionInput, graphql_name='comments')


class DiscussionCreateWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'html', 'text', 'user', 'activity', 'comments', 'files')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneInput'), graphql_name='user')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutDiscussionInput, graphql_name='activity')
    comments = sgqlc.types.Field(CommentCreateManyWithoutDiscussionInput, graphql_name='comments')
    files = sgqlc.types.Field('FileCreateManyWithoutDiscussionInput', graphql_name='files')


class DiscussionFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id',)
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')


class DiscussionScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'title', 'title_not', 'title_in', 'title_not_in', 'title_lt', 'title_lte', 'title_gt', 'title_gte', 'title_contains', 'title_not_contains', 'title_starts_with', 'title_not_starts_with', 'title_ends_with', 'title_not_ends_with', 'html', 'html_not', 'html_in', 'html_not_in', 'html_lt', 'html_lte', 'html_gt', 'html_gte', 'html_contains', 'html_not_contains', 'html_starts_with', 'html_not_starts_with', 'html_ends_with', 'html_not_ends_with', 'text', 'text_not', 'text_in', 'text_not_in', 'text_lt', 'text_lte', 'text_gt', 'text_gte', 'text_contains', 'text_not_contains', 'text_starts_with', 'text_not_starts_with', 'text_ends_with', 'text_not_ends_with', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    title = sgqlc.types.Field(String, graphql_name='title')
    title_not = sgqlc.types.Field(String, graphql_name='title_not')
    title_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_in')
    title_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_not_in')
    title_lt = sgqlc.types.Field(String, graphql_name='title_lt')
    title_lte = sgqlc.types.Field(String, graphql_name='title_lte')
    title_gt = sgqlc.types.Field(String, graphql_name='title_gt')
    title_gte = sgqlc.types.Field(String, graphql_name='title_gte')
    title_contains = sgqlc.types.Field(String, graphql_name='title_contains')
    title_not_contains = sgqlc.types.Field(String, graphql_name='title_not_contains')
    title_starts_with = sgqlc.types.Field(String, graphql_name='title_starts_with')
    title_not_starts_with = sgqlc.types.Field(String, graphql_name='title_not_starts_with')
    title_ends_with = sgqlc.types.Field(String, graphql_name='title_ends_with')
    title_not_ends_with = sgqlc.types.Field(String, graphql_name='title_not_ends_with')
    html = sgqlc.types.Field(String, graphql_name='html')
    html_not = sgqlc.types.Field(String, graphql_name='html_not')
    html_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='html_in')
    html_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='html_not_in')
    html_lt = sgqlc.types.Field(String, graphql_name='html_lt')
    html_lte = sgqlc.types.Field(String, graphql_name='html_lte')
    html_gt = sgqlc.types.Field(String, graphql_name='html_gt')
    html_gte = sgqlc.types.Field(String, graphql_name='html_gte')
    html_contains = sgqlc.types.Field(String, graphql_name='html_contains')
    html_not_contains = sgqlc.types.Field(String, graphql_name='html_not_contains')
    html_starts_with = sgqlc.types.Field(String, graphql_name='html_starts_with')
    html_not_starts_with = sgqlc.types.Field(String, graphql_name='html_not_starts_with')
    html_ends_with = sgqlc.types.Field(String, graphql_name='html_ends_with')
    html_not_ends_with = sgqlc.types.Field(String, graphql_name='html_not_ends_with')
    text = sgqlc.types.Field(String, graphql_name='text')
    text_not = sgqlc.types.Field(String, graphql_name='text_not')
    text_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='text_in')
    text_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='text_not_in')
    text_lt = sgqlc.types.Field(String, graphql_name='text_lt')
    text_lte = sgqlc.types.Field(String, graphql_name='text_lte')
    text_gt = sgqlc.types.Field(String, graphql_name='text_gt')
    text_gte = sgqlc.types.Field(String, graphql_name='text_gte')
    text_contains = sgqlc.types.Field(String, graphql_name='text_contains')
    text_not_contains = sgqlc.types.Field(String, graphql_name='text_not_contains')
    text_starts_with = sgqlc.types.Field(String, graphql_name='text_starts_with')
    text_not_starts_with = sgqlc.types.Field(String, graphql_name='text_not_starts_with')
    text_ends_with = sgqlc.types.Field(String, graphql_name='text_ends_with')
    text_not_ends_with = sgqlc.types.Field(String, graphql_name='text_not_ends_with')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DiscussionScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DiscussionScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DiscussionScalarWhereInput')), graphql_name='NOT')


class DiscussionSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('DiscussionWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DiscussionSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DiscussionSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DiscussionSubscriptionWhereInput')), graphql_name='NOT')


class DiscussionUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'html', 'text', 'user', 'activity', 'project', 'comments', 'files')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    html = sgqlc.types.Field(String, graphql_name='html')
    text = sgqlc.types.Field(String, graphql_name='text')
    user = sgqlc.types.Field('UserUpdateOneRequiredInput', graphql_name='user')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutDiscussionInput, graphql_name='activity')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutDiscussionsInput', graphql_name='project')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutDiscussionInput, graphql_name='comments')
    files = sgqlc.types.Field('FileUpdateManyWithoutDiscussionInput', graphql_name='files')


class DiscussionUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'html', 'text')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    html = sgqlc.types.Field(String, graphql_name='html')
    text = sgqlc.types.Field(String, graphql_name='text')


class DiscussionUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'html', 'text')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    html = sgqlc.types.Field(String, graphql_name='html')
    text = sgqlc.types.Field(String, graphql_name='text')


class DiscussionUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(DiscussionScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(DiscussionUpdateManyDataInput), graphql_name='data')


class DiscussionUpdateManyWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DiscussionCreateWithoutProjectInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DiscussionWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DiscussionWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DiscussionWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DiscussionWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DiscussionUpdateWithWhereUniqueWithoutProjectInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DiscussionUpsertWithWhereUniqueWithoutProjectInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DiscussionScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DiscussionUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class DiscussionUpdateOneWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(DiscussionCreateWithoutActivityInput, graphql_name='create')
    update = sgqlc.types.Field('DiscussionUpdateWithoutActivityDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('DiscussionUpsertWithoutActivityInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('DiscussionWhereUniqueInput', graphql_name='connect')


class DiscussionUpdateOneWithoutCommentsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(DiscussionCreateWithoutCommentsInput, graphql_name='create')
    update = sgqlc.types.Field('DiscussionUpdateWithoutCommentsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('DiscussionUpsertWithoutCommentsInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('DiscussionWhereUniqueInput', graphql_name='connect')


class DiscussionUpdateOneWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(DiscussionCreateWithoutFilesInput, graphql_name='create')
    update = sgqlc.types.Field('DiscussionUpdateWithoutFilesDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('DiscussionUpsertWithoutFilesInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('DiscussionWhereUniqueInput', graphql_name='connect')


class DiscussionUpdateWithWhereUniqueWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('DiscussionWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('DiscussionUpdateWithoutProjectDataInput'), graphql_name='data')


class DiscussionUpdateWithoutActivityDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'html', 'text', 'user', 'project', 'comments', 'files')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    html = sgqlc.types.Field(String, graphql_name='html')
    text = sgqlc.types.Field(String, graphql_name='text')
    user = sgqlc.types.Field('UserUpdateOneRequiredInput', graphql_name='user')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutDiscussionsInput', graphql_name='project')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutDiscussionInput, graphql_name='comments')
    files = sgqlc.types.Field('FileUpdateManyWithoutDiscussionInput', graphql_name='files')


class DiscussionUpdateWithoutCommentsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'html', 'text', 'user', 'activity', 'project', 'files')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    html = sgqlc.types.Field(String, graphql_name='html')
    text = sgqlc.types.Field(String, graphql_name='text')
    user = sgqlc.types.Field('UserUpdateOneRequiredInput', graphql_name='user')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutDiscussionInput, graphql_name='activity')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutDiscussionsInput', graphql_name='project')
    files = sgqlc.types.Field('FileUpdateManyWithoutDiscussionInput', graphql_name='files')


class DiscussionUpdateWithoutFilesDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'html', 'text', 'user', 'activity', 'project', 'comments')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    html = sgqlc.types.Field(String, graphql_name='html')
    text = sgqlc.types.Field(String, graphql_name='text')
    user = sgqlc.types.Field('UserUpdateOneRequiredInput', graphql_name='user')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutDiscussionInput, graphql_name='activity')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutDiscussionsInput', graphql_name='project')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutDiscussionInput, graphql_name='comments')


class DiscussionUpdateWithoutProjectDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'html', 'text', 'user', 'activity', 'comments', 'files')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    html = sgqlc.types.Field(String, graphql_name='html')
    text = sgqlc.types.Field(String, graphql_name='text')
    user = sgqlc.types.Field('UserUpdateOneRequiredInput', graphql_name='user')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutDiscussionInput, graphql_name='activity')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutDiscussionInput, graphql_name='comments')
    files = sgqlc.types.Field('FileUpdateManyWithoutDiscussionInput', graphql_name='files')


class DiscussionUpsertWithWhereUniqueWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('DiscussionWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(DiscussionUpdateWithoutProjectDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(DiscussionCreateWithoutProjectInput), graphql_name='create')


class DiscussionUpsertWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(DiscussionUpdateWithoutActivityDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(DiscussionCreateWithoutActivityInput), graphql_name='create')


class DiscussionUpsertWithoutCommentsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(DiscussionUpdateWithoutCommentsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(DiscussionCreateWithoutCommentsInput), graphql_name='create')


class DiscussionUpsertWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(DiscussionUpdateWithoutFilesDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(DiscussionCreateWithoutFilesInput), graphql_name='create')


class DiscussionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'title', 'title_not', 'title_in', 'title_not_in', 'title_lt', 'title_lte', 'title_gt', 'title_gte', 'title_contains', 'title_not_contains', 'title_starts_with', 'title_not_starts_with', 'title_ends_with', 'title_not_ends_with', 'html', 'html_not', 'html_in', 'html_not_in', 'html_lt', 'html_lte', 'html_gt', 'html_gte', 'html_contains', 'html_not_contains', 'html_starts_with', 'html_not_starts_with', 'html_ends_with', 'html_not_ends_with', 'text', 'text_not', 'text_in', 'text_not_in', 'text_lt', 'text_lte', 'text_gt', 'text_gte', 'text_contains', 'text_not_contains', 'text_starts_with', 'text_not_starts_with', 'text_ends_with', 'text_not_ends_with', 'user', 'activity', 'project', 'comments_every', 'comments_some', 'comments_none', 'files_every', 'files_some', 'files_none', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    title = sgqlc.types.Field(String, graphql_name='title')
    title_not = sgqlc.types.Field(String, graphql_name='title_not')
    title_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_in')
    title_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_not_in')
    title_lt = sgqlc.types.Field(String, graphql_name='title_lt')
    title_lte = sgqlc.types.Field(String, graphql_name='title_lte')
    title_gt = sgqlc.types.Field(String, graphql_name='title_gt')
    title_gte = sgqlc.types.Field(String, graphql_name='title_gte')
    title_contains = sgqlc.types.Field(String, graphql_name='title_contains')
    title_not_contains = sgqlc.types.Field(String, graphql_name='title_not_contains')
    title_starts_with = sgqlc.types.Field(String, graphql_name='title_starts_with')
    title_not_starts_with = sgqlc.types.Field(String, graphql_name='title_not_starts_with')
    title_ends_with = sgqlc.types.Field(String, graphql_name='title_ends_with')
    title_not_ends_with = sgqlc.types.Field(String, graphql_name='title_not_ends_with')
    html = sgqlc.types.Field(String, graphql_name='html')
    html_not = sgqlc.types.Field(String, graphql_name='html_not')
    html_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='html_in')
    html_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='html_not_in')
    html_lt = sgqlc.types.Field(String, graphql_name='html_lt')
    html_lte = sgqlc.types.Field(String, graphql_name='html_lte')
    html_gt = sgqlc.types.Field(String, graphql_name='html_gt')
    html_gte = sgqlc.types.Field(String, graphql_name='html_gte')
    html_contains = sgqlc.types.Field(String, graphql_name='html_contains')
    html_not_contains = sgqlc.types.Field(String, graphql_name='html_not_contains')
    html_starts_with = sgqlc.types.Field(String, graphql_name='html_starts_with')
    html_not_starts_with = sgqlc.types.Field(String, graphql_name='html_not_starts_with')
    html_ends_with = sgqlc.types.Field(String, graphql_name='html_ends_with')
    html_not_ends_with = sgqlc.types.Field(String, graphql_name='html_not_ends_with')
    text = sgqlc.types.Field(String, graphql_name='text')
    text_not = sgqlc.types.Field(String, graphql_name='text_not')
    text_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='text_in')
    text_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='text_not_in')
    text_lt = sgqlc.types.Field(String, graphql_name='text_lt')
    text_lte = sgqlc.types.Field(String, graphql_name='text_lte')
    text_gt = sgqlc.types.Field(String, graphql_name='text_gt')
    text_gte = sgqlc.types.Field(String, graphql_name='text_gte')
    text_contains = sgqlc.types.Field(String, graphql_name='text_contains')
    text_not_contains = sgqlc.types.Field(String, graphql_name='text_not_contains')
    text_starts_with = sgqlc.types.Field(String, graphql_name='text_starts_with')
    text_not_starts_with = sgqlc.types.Field(String, graphql_name='text_not_starts_with')
    text_ends_with = sgqlc.types.Field(String, graphql_name='text_ends_with')
    text_not_ends_with = sgqlc.types.Field(String, graphql_name='text_not_ends_with')
    user = sgqlc.types.Field('UserWhereInput', graphql_name='user')
    activity = sgqlc.types.Field(ActivityWhereInput, graphql_name='activity')
    project = sgqlc.types.Field('ProjectWhereInput', graphql_name='project')
    comments_every = sgqlc.types.Field(CommentWhereInput, graphql_name='comments_every')
    comments_some = sgqlc.types.Field(CommentWhereInput, graphql_name='comments_some')
    comments_none = sgqlc.types.Field(CommentWhereInput, graphql_name='comments_none')
    files_every = sgqlc.types.Field('FileWhereInput', graphql_name='files_every')
    files_some = sgqlc.types.Field('FileWhereInput', graphql_name='files_some')
    files_none = sgqlc.types.Field('FileWhereInput', graphql_name='files_none')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DiscussionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DiscussionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DiscussionWhereInput')), graphql_name='NOT')


class DiscussionWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class DocumentCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'content', 'content_base64', 'wiki', 'project', 'created_by')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    content = sgqlc.types.Field(String, graphql_name='content')
    content_base64 = sgqlc.types.Field(String, graphql_name='contentBase64')
    wiki = sgqlc.types.Field(Boolean, graphql_name='wiki')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutDocumentsInput'), graphql_name='project')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutDocumentsInput'), graphql_name='createdBy')


class DocumentCreateManyWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DocumentCreateWithoutCreatedByInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DocumentWhereUniqueInput')), graphql_name='connect')


class DocumentCreateManyWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DocumentCreateWithoutProjectInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DocumentWhereUniqueInput')), graphql_name='connect')


class DocumentCreateOneInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(DocumentCreateInput, graphql_name='create')
    connect = sgqlc.types.Field('DocumentWhereUniqueInput', graphql_name='connect')


class DocumentCreateWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'content', 'content_base64', 'wiki', 'project')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    content = sgqlc.types.Field(String, graphql_name='content')
    content_base64 = sgqlc.types.Field(String, graphql_name='contentBase64')
    wiki = sgqlc.types.Field(Boolean, graphql_name='wiki')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutDocumentsInput'), graphql_name='project')


class DocumentCreateWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'content', 'content_base64', 'wiki', 'created_by')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    content = sgqlc.types.Field(String, graphql_name='content')
    content_base64 = sgqlc.types.Field(String, graphql_name='contentBase64')
    wiki = sgqlc.types.Field(Boolean, graphql_name='wiki')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutDocumentsInput'), graphql_name='createdBy')


class DocumentFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id', 'wiki')
    project_id = sgqlc.types.Field(String, graphql_name='projectId')
    wiki = sgqlc.types.Field(Boolean, graphql_name='wiki')


class DocumentScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'title', 'title_not', 'title_in', 'title_not_in', 'title_lt', 'title_lte', 'title_gt', 'title_gte', 'title_contains', 'title_not_contains', 'title_starts_with', 'title_not_starts_with', 'title_ends_with', 'title_not_ends_with', 'content', 'content_not', 'content_in', 'content_not_in', 'content_lt', 'content_lte', 'content_gt', 'content_gte', 'content_contains', 'content_not_contains', 'content_starts_with', 'content_not_starts_with', 'content_ends_with', 'content_not_ends_with', 'content_base64', 'content_base64_not', 'content_base64_in', 'content_base64_not_in', 'content_base64_lt', 'content_base64_lte', 'content_base64_gt', 'content_base64_gte', 'content_base64_contains', 'content_base64_not_contains', 'content_base64_starts_with', 'content_base64_not_starts_with', 'content_base64_ends_with', 'content_base64_not_ends_with', 'wiki', 'wiki_not', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    title = sgqlc.types.Field(String, graphql_name='title')
    title_not = sgqlc.types.Field(String, graphql_name='title_not')
    title_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_in')
    title_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_not_in')
    title_lt = sgqlc.types.Field(String, graphql_name='title_lt')
    title_lte = sgqlc.types.Field(String, graphql_name='title_lte')
    title_gt = sgqlc.types.Field(String, graphql_name='title_gt')
    title_gte = sgqlc.types.Field(String, graphql_name='title_gte')
    title_contains = sgqlc.types.Field(String, graphql_name='title_contains')
    title_not_contains = sgqlc.types.Field(String, graphql_name='title_not_contains')
    title_starts_with = sgqlc.types.Field(String, graphql_name='title_starts_with')
    title_not_starts_with = sgqlc.types.Field(String, graphql_name='title_not_starts_with')
    title_ends_with = sgqlc.types.Field(String, graphql_name='title_ends_with')
    title_not_ends_with = sgqlc.types.Field(String, graphql_name='title_not_ends_with')
    content = sgqlc.types.Field(String, graphql_name='content')
    content_not = sgqlc.types.Field(String, graphql_name='content_not')
    content_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='content_in')
    content_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='content_not_in')
    content_lt = sgqlc.types.Field(String, graphql_name='content_lt')
    content_lte = sgqlc.types.Field(String, graphql_name='content_lte')
    content_gt = sgqlc.types.Field(String, graphql_name='content_gt')
    content_gte = sgqlc.types.Field(String, graphql_name='content_gte')
    content_contains = sgqlc.types.Field(String, graphql_name='content_contains')
    content_not_contains = sgqlc.types.Field(String, graphql_name='content_not_contains')
    content_starts_with = sgqlc.types.Field(String, graphql_name='content_starts_with')
    content_not_starts_with = sgqlc.types.Field(String, graphql_name='content_not_starts_with')
    content_ends_with = sgqlc.types.Field(String, graphql_name='content_ends_with')
    content_not_ends_with = sgqlc.types.Field(String, graphql_name='content_not_ends_with')
    content_base64 = sgqlc.types.Field(String, graphql_name='contentBase64')
    content_base64_not = sgqlc.types.Field(String, graphql_name='contentBase64_not')
    content_base64_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='contentBase64_in')
    content_base64_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='contentBase64_not_in')
    content_base64_lt = sgqlc.types.Field(String, graphql_name='contentBase64_lt')
    content_base64_lte = sgqlc.types.Field(String, graphql_name='contentBase64_lte')
    content_base64_gt = sgqlc.types.Field(String, graphql_name='contentBase64_gt')
    content_base64_gte = sgqlc.types.Field(String, graphql_name='contentBase64_gte')
    content_base64_contains = sgqlc.types.Field(String, graphql_name='contentBase64_contains')
    content_base64_not_contains = sgqlc.types.Field(String, graphql_name='contentBase64_not_contains')
    content_base64_starts_with = sgqlc.types.Field(String, graphql_name='contentBase64_starts_with')
    content_base64_not_starts_with = sgqlc.types.Field(String, graphql_name='contentBase64_not_starts_with')
    content_base64_ends_with = sgqlc.types.Field(String, graphql_name='contentBase64_ends_with')
    content_base64_not_ends_with = sgqlc.types.Field(String, graphql_name='contentBase64_not_ends_with')
    wiki = sgqlc.types.Field(Boolean, graphql_name='wiki')
    wiki_not = sgqlc.types.Field(Boolean, graphql_name='wiki_not')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DocumentScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DocumentScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DocumentScalarWhereInput')), graphql_name='NOT')


class DocumentSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('DocumentWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DocumentSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DocumentSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DocumentSubscriptionWhereInput')), graphql_name='NOT')


class DocumentUpdateDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'content', 'content_base64', 'wiki', 'project', 'created_by')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    content = sgqlc.types.Field(String, graphql_name='content')
    content_base64 = sgqlc.types.Field(String, graphql_name='contentBase64')
    wiki = sgqlc.types.Field(Boolean, graphql_name='wiki')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutDocumentsInput', graphql_name='project')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutDocumentsInput', graphql_name='createdBy')


class DocumentUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'content', 'content_base64', 'wiki', 'project', 'created_by')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    content = sgqlc.types.Field(String, graphql_name='content')
    content_base64 = sgqlc.types.Field(String, graphql_name='contentBase64')
    wiki = sgqlc.types.Field(Boolean, graphql_name='wiki')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutDocumentsInput', graphql_name='project')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutDocumentsInput', graphql_name='createdBy')


class DocumentUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'content', 'content_base64', 'wiki')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    content = sgqlc.types.Field(String, graphql_name='content')
    content_base64 = sgqlc.types.Field(String, graphql_name='contentBase64')
    wiki = sgqlc.types.Field(Boolean, graphql_name='wiki')


class DocumentUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'content', 'content_base64', 'wiki')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    content = sgqlc.types.Field(String, graphql_name='content')
    content_base64 = sgqlc.types.Field(String, graphql_name='contentBase64')
    wiki = sgqlc.types.Field(Boolean, graphql_name='wiki')


class DocumentUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(DocumentScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(DocumentUpdateManyDataInput), graphql_name='data')


class DocumentUpdateManyWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DocumentCreateWithoutCreatedByInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DocumentWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DocumentWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DocumentWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DocumentWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DocumentUpdateWithWhereUniqueWithoutCreatedByInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DocumentUpsertWithWhereUniqueWithoutCreatedByInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DocumentScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DocumentUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class DocumentUpdateManyWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DocumentCreateWithoutProjectInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DocumentWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DocumentWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DocumentWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DocumentWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DocumentUpdateWithWhereUniqueWithoutProjectInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DocumentUpsertWithWhereUniqueWithoutProjectInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DocumentScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DocumentUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class DocumentUpdateOneInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(DocumentCreateInput, graphql_name='create')
    update = sgqlc.types.Field(DocumentUpdateDataInput, graphql_name='update')
    upsert = sgqlc.types.Field('DocumentUpsertNestedInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('DocumentWhereUniqueInput', graphql_name='connect')


class DocumentUpdateWithWhereUniqueWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('DocumentWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('DocumentUpdateWithoutCreatedByDataInput'), graphql_name='data')


class DocumentUpdateWithWhereUniqueWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('DocumentWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('DocumentUpdateWithoutProjectDataInput'), graphql_name='data')


class DocumentUpdateWithoutCreatedByDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'content', 'content_base64', 'wiki', 'project')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    content = sgqlc.types.Field(String, graphql_name='content')
    content_base64 = sgqlc.types.Field(String, graphql_name='contentBase64')
    wiki = sgqlc.types.Field(Boolean, graphql_name='wiki')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutDocumentsInput', graphql_name='project')


class DocumentUpdateWithoutProjectDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'content', 'content_base64', 'wiki', 'created_by')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    content = sgqlc.types.Field(String, graphql_name='content')
    content_base64 = sgqlc.types.Field(String, graphql_name='contentBase64')
    wiki = sgqlc.types.Field(Boolean, graphql_name='wiki')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutDocumentsInput', graphql_name='createdBy')


class DocumentUpsertNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(DocumentUpdateDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(DocumentCreateInput), graphql_name='create')


class DocumentUpsertWithWhereUniqueWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('DocumentWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(DocumentUpdateWithoutCreatedByDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(DocumentCreateWithoutCreatedByInput), graphql_name='create')


class DocumentUpsertWithWhereUniqueWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('DocumentWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(DocumentUpdateWithoutProjectDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(DocumentCreateWithoutProjectInput), graphql_name='create')


class DocumentWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'title', 'title_not', 'title_in', 'title_not_in', 'title_lt', 'title_lte', 'title_gt', 'title_gte', 'title_contains', 'title_not_contains', 'title_starts_with', 'title_not_starts_with', 'title_ends_with', 'title_not_ends_with', 'content', 'content_not', 'content_in', 'content_not_in', 'content_lt', 'content_lte', 'content_gt', 'content_gte', 'content_contains', 'content_not_contains', 'content_starts_with', 'content_not_starts_with', 'content_ends_with', 'content_not_ends_with', 'content_base64', 'content_base64_not', 'content_base64_in', 'content_base64_not_in', 'content_base64_lt', 'content_base64_lte', 'content_base64_gt', 'content_base64_gte', 'content_base64_contains', 'content_base64_not_contains', 'content_base64_starts_with', 'content_base64_not_starts_with', 'content_base64_ends_with', 'content_base64_not_ends_with', 'wiki', 'wiki_not', 'project', 'created_by', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    title = sgqlc.types.Field(String, graphql_name='title')
    title_not = sgqlc.types.Field(String, graphql_name='title_not')
    title_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_in')
    title_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_not_in')
    title_lt = sgqlc.types.Field(String, graphql_name='title_lt')
    title_lte = sgqlc.types.Field(String, graphql_name='title_lte')
    title_gt = sgqlc.types.Field(String, graphql_name='title_gt')
    title_gte = sgqlc.types.Field(String, graphql_name='title_gte')
    title_contains = sgqlc.types.Field(String, graphql_name='title_contains')
    title_not_contains = sgqlc.types.Field(String, graphql_name='title_not_contains')
    title_starts_with = sgqlc.types.Field(String, graphql_name='title_starts_with')
    title_not_starts_with = sgqlc.types.Field(String, graphql_name='title_not_starts_with')
    title_ends_with = sgqlc.types.Field(String, graphql_name='title_ends_with')
    title_not_ends_with = sgqlc.types.Field(String, graphql_name='title_not_ends_with')
    content = sgqlc.types.Field(String, graphql_name='content')
    content_not = sgqlc.types.Field(String, graphql_name='content_not')
    content_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='content_in')
    content_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='content_not_in')
    content_lt = sgqlc.types.Field(String, graphql_name='content_lt')
    content_lte = sgqlc.types.Field(String, graphql_name='content_lte')
    content_gt = sgqlc.types.Field(String, graphql_name='content_gt')
    content_gte = sgqlc.types.Field(String, graphql_name='content_gte')
    content_contains = sgqlc.types.Field(String, graphql_name='content_contains')
    content_not_contains = sgqlc.types.Field(String, graphql_name='content_not_contains')
    content_starts_with = sgqlc.types.Field(String, graphql_name='content_starts_with')
    content_not_starts_with = sgqlc.types.Field(String, graphql_name='content_not_starts_with')
    content_ends_with = sgqlc.types.Field(String, graphql_name='content_ends_with')
    content_not_ends_with = sgqlc.types.Field(String, graphql_name='content_not_ends_with')
    content_base64 = sgqlc.types.Field(String, graphql_name='contentBase64')
    content_base64_not = sgqlc.types.Field(String, graphql_name='contentBase64_not')
    content_base64_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='contentBase64_in')
    content_base64_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='contentBase64_not_in')
    content_base64_lt = sgqlc.types.Field(String, graphql_name='contentBase64_lt')
    content_base64_lte = sgqlc.types.Field(String, graphql_name='contentBase64_lte')
    content_base64_gt = sgqlc.types.Field(String, graphql_name='contentBase64_gt')
    content_base64_gte = sgqlc.types.Field(String, graphql_name='contentBase64_gte')
    content_base64_contains = sgqlc.types.Field(String, graphql_name='contentBase64_contains')
    content_base64_not_contains = sgqlc.types.Field(String, graphql_name='contentBase64_not_contains')
    content_base64_starts_with = sgqlc.types.Field(String, graphql_name='contentBase64_starts_with')
    content_base64_not_starts_with = sgqlc.types.Field(String, graphql_name='contentBase64_not_starts_with')
    content_base64_ends_with = sgqlc.types.Field(String, graphql_name='contentBase64_ends_with')
    content_base64_not_ends_with = sgqlc.types.Field(String, graphql_name='contentBase64_not_ends_with')
    wiki = sgqlc.types.Field(Boolean, graphql_name='wiki')
    wiki_not = sgqlc.types.Field(Boolean, graphql_name='wiki_not')
    project = sgqlc.types.Field('ProjectWhereInput', graphql_name='project')
    created_by = sgqlc.types.Field('UserWhereInput', graphql_name='createdBy')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DocumentWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DocumentWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DocumentWhereInput')), graphql_name='NOT')


class DocumentWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class EditAutomationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('automation_id', 'trigger', 'actions', 'is_active')
    automation_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='automationId')
    trigger = sgqlc.types.Field(CreateAutomationTriggerInput, graphql_name='trigger')
    actions = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CreateAutomationActionInput)), graphql_name='actions')
    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')


class EditChartInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'title', 'position', 'display', 'metadata')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    title = sgqlc.types.Field(String, graphql_name='title')
    position = sgqlc.types.Field(Float, graphql_name='position')
    display = sgqlc.types.Field('FormulaDisplayInput', graphql_name='display')
    metadata = sgqlc.types.Field(ChartMetadataInput, graphql_name='metadata')


class EditChartSegmentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'title', 'formula', 'color')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    title = sgqlc.types.Field(String, graphql_name='title')
    formula = sgqlc.types.Field('FormulaInput', graphql_name='formula')
    color = sgqlc.types.Field(String, graphql_name='color')


class EditChartSegmentValueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'title', 'project_id', 'custom_field_id', 'function', 'filter')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    title = sgqlc.types.Field(String, graphql_name='title')
    project_id = sgqlc.types.Field(String, graphql_name='projectId')
    custom_field_id = sgqlc.types.Field(String, graphql_name='customFieldId')
    function = sgqlc.types.Field(ChartSegmentValueFunctions, graphql_name='function')
    filter = sgqlc.types.Field('TodoFilterInput', graphql_name='filter')


class EditChecklistInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('checklist_id', 'title', 'position')
    checklist_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='checklistId')
    title = sgqlc.types.Field(String, graphql_name='title')
    position = sgqlc.types.Field(Float, graphql_name='position')


class EditChecklistItemInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('checklist_item_id', 'checklist_id', 'title', 'position', 'done')
    checklist_item_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='checklistItemId')
    checklist_id = sgqlc.types.Field(String, graphql_name='checklistId')
    title = sgqlc.types.Field(String, graphql_name='title')
    position = sgqlc.types.Field(Float, graphql_name='position')
    done = sgqlc.types.Field(Boolean, graphql_name='done')


class EditCommentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'html', 'text')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')


class EditCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id', 'name', 'image', 'slug', 'is_map_enabled', 'is_aienabled', 'white_label_settings', 'google_maps_settings')
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')
    name = sgqlc.types.Field(String, graphql_name='name')
    image = sgqlc.types.Field('ImageInput', graphql_name='image')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    is_map_enabled = sgqlc.types.Field(Boolean, graphql_name='isMapEnabled')
    is_aienabled = sgqlc.types.Field(Boolean, graphql_name='isAIEnabled')
    white_label_settings = sgqlc.types.Field('WhiteLabelSettingsInput', graphql_name='whiteLabelSettings')
    google_maps_settings = sgqlc.types.Field('GoogleMapsSettingsInput', graphql_name='googleMapsSettings')


class EditCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('custom_field_id', 'position', 'name', 'button_type', 'button_confirm_text', 'currency_field_id', 'conversion_date_type', 'conversion_date', 'description', 'min', 'max', 'currency', 'prefix', 'is_due_date', 'formula', 'metadata', 'time_duration_display', 'time_duration_target_time', 'time_duration_start_input', 'time_duration_end_input', 'reference_project_id', 'reference_filter', 'reference_multiple', 'lookup_option', 'use_sequence_unique_id', 'sequence_digits', 'sequence_starting_number')
    custom_field_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='customFieldId')
    position = sgqlc.types.Field(Float, graphql_name='position')
    name = sgqlc.types.Field(String, graphql_name='name')
    button_type = sgqlc.types.Field(String, graphql_name='buttonType')
    button_confirm_text = sgqlc.types.Field(String, graphql_name='buttonConfirmText')
    currency_field_id = sgqlc.types.Field(String, graphql_name='currencyFieldId')
    conversion_date_type = sgqlc.types.Field(String, graphql_name='conversionDateType')
    conversion_date = sgqlc.types.Field(String, graphql_name='conversionDate')
    description = sgqlc.types.Field(String, graphql_name='description')
    min = sgqlc.types.Field(Float, graphql_name='min')
    max = sgqlc.types.Field(Float, graphql_name='max')
    currency = sgqlc.types.Field(String, graphql_name='currency')
    prefix = sgqlc.types.Field(String, graphql_name='prefix')
    is_due_date = sgqlc.types.Field(Boolean, graphql_name='isDueDate')
    formula = sgqlc.types.Field('FormulaInput', graphql_name='formula')
    metadata = sgqlc.types.Field(JSON, graphql_name='metadata')
    time_duration_display = sgqlc.types.Field(CustomFieldTimeDurationDisplayType, graphql_name='timeDurationDisplay')
    time_duration_target_time = sgqlc.types.Field(Float, graphql_name='timeDurationTargetTime')
    time_duration_start_input = sgqlc.types.Field(CustomFieldTimeDurationInput, graphql_name='timeDurationStartInput')
    time_duration_end_input = sgqlc.types.Field(CustomFieldTimeDurationInput, graphql_name='timeDurationEndInput')
    reference_project_id = sgqlc.types.Field(String, graphql_name='referenceProjectId')
    reference_filter = sgqlc.types.Field('TodoFilterInput', graphql_name='referenceFilter')
    reference_multiple = sgqlc.types.Field(Boolean, graphql_name='referenceMultiple')
    lookup_option = sgqlc.types.Field(CustomFieldLookupOptionInput, graphql_name='lookupOption')
    use_sequence_unique_id = sgqlc.types.Field(Boolean, graphql_name='useSequenceUniqueId')
    sequence_digits = sgqlc.types.Field(Int, graphql_name='sequenceDigits')
    sequence_starting_number = sgqlc.types.Field(Int, graphql_name='sequenceStartingNumber')


class EditCustomFieldOptionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('custom_field_id', 'option_id', 'title', 'color', 'currency_conversion_from', 'currency_conversion_to', 'position', 'todo_id')
    custom_field_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='customFieldId')
    option_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='optionId')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(String, graphql_name='color')
    currency_conversion_from = sgqlc.types.Field(String, graphql_name='currencyConversionFrom')
    currency_conversion_to = sgqlc.types.Field(String, graphql_name='currencyConversionTo')
    position = sgqlc.types.Field(Float, graphql_name='position')
    todo_id = sgqlc.types.Field(String, graphql_name='todoId')


class EditDashboardInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'title', 'dashboard_users')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    title = sgqlc.types.Field(String, graphql_name='title')
    dashboard_users = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('EditDashboardUserInput')), graphql_name='dashboardUsers')


class EditDashboardUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('user_id', 'role')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='userId')
    role = sgqlc.types.Field(sgqlc.types.non_null(DashboardRole), graphql_name='role')


class EditFolderInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'title', 'color', 'position')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(String, graphql_name='color')
    position = sgqlc.types.Field(Float, graphql_name='position')


class EditProfileInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('first_name', 'last_name', 'job_title', 'date_of_birth', 'timezone', 'is_welcome_guide_completed', 'theme', 'date_format', 'calendar_first_day')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    theme = sgqlc.types.Field(JSON, graphql_name='theme')
    date_format = sgqlc.types.Field(String, graphql_name='dateFormat')
    calendar_first_day = sgqlc.types.Field(Int, graphql_name='calendarFirstDay')


class EditProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id', 'name', 'slug', 'description', 'image', 'color', 'icon', 'category', 'todo_alias', 'hide_record_count', 'show_time_spent_in_todo_list', 'show_time_spent_in_project', 'todo_fields', 'features', 'sequence_custom_field_id')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    name = sgqlc.types.Field(String, graphql_name='name')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field('ImageInput', graphql_name='image')
    color = sgqlc.types.Field(String, graphql_name='color')
    icon = sgqlc.types.Field(String, graphql_name='icon')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    todo_alias = sgqlc.types.Field(String, graphql_name='todoAlias')
    hide_record_count = sgqlc.types.Field(Boolean, graphql_name='hideRecordCount')
    show_time_spent_in_todo_list = sgqlc.types.Field(Boolean, graphql_name='showTimeSpentInTodoList')
    show_time_spent_in_project = sgqlc.types.Field(Boolean, graphql_name='showTimeSpentInProject')
    todo_fields = sgqlc.types.Field(sgqlc.types.list_of('TodoFieldInput'), graphql_name='todoFields')
    features = sgqlc.types.Field(sgqlc.types.list_of('ProjectFeatureInput'), graphql_name='features')
    sequence_custom_field_id = sgqlc.types.Field(String, graphql_name='sequenceCustomFieldId')


class EditTagInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'title', 'color')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(String, graphql_name='color')


class EditTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('todo_list_id', 'todo_id', 'position', 'title', 'html', 'text', 'started_at', 'dued_at', 'color', 'tags')
    todo_list_id = sgqlc.types.Field(String, graphql_name='todoListId')
    todo_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoId')
    position = sgqlc.types.Field(Float, graphql_name='position')
    title = sgqlc.types.Field(String, graphql_name='title')
    html = sgqlc.types.Field(String, graphql_name='html')
    text = sgqlc.types.Field(String, graphql_name='text')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    color = sgqlc.types.Field(String, graphql_name='color')
    tags = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CreateTodoTagInput)), graphql_name='tags')


class EditTodoListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('todo_list_id', 'title', 'position', 'is_locked')
    todo_list_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoListId')
    title = sgqlc.types.Field(String, graphql_name='title')
    position = sgqlc.types.Field(Float, graphql_name='position')
    is_locked = sgqlc.types.Field(Boolean, graphql_name='isLocked')


class EmailTemplateFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('type',)
    type = sgqlc.types.Field(EmailTemplateType, graphql_name='type')


class ExportCSVTemplateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id',)
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')


class ExportTodosInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id', 'use_rust_export', 'filter')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    use_rust_export = sgqlc.types.Field(Boolean, graphql_name='useRustExport')
    filter = sgqlc.types.Field('TodosFilter', graphql_name='filter')


class ExtendFreeTrialInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id',)
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')


class FileCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'size', 'type', 'extension', 'shared', 'comment', 'discussion', 'status_update', 'todo', 'user', 'folder', 'document', 'project', 'company', 'todo_custom_field_file')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    size = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='size')
    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='type')
    extension = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='extension')
    shared = sgqlc.types.Field(Boolean, graphql_name='shared')
    comment = sgqlc.types.Field(CommentCreateOneWithoutFilesInput, graphql_name='comment')
    discussion = sgqlc.types.Field(DiscussionCreateOneWithoutFilesInput, graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateCreateOneWithoutFilesInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoCreateOneWithoutFilesInput', graphql_name='todo')
    user = sgqlc.types.Field('UserCreateOneWithoutFilesInput', graphql_name='user')
    folder = sgqlc.types.Field('FolderCreateOneWithoutFilesInput', graphql_name='folder')
    document = sgqlc.types.Field(DocumentCreateOneInput, graphql_name='document')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutFilesInput'), graphql_name='project')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutFilesInput), graphql_name='company')
    todo_custom_field_file = sgqlc.types.Field('TodoCustomFieldFileCreateOneWithoutFileInput', graphql_name='todoCustomFieldFile')


class FileCreateManyWithoutCommentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileCreateWithoutCommentInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='connect')


class FileCreateManyWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileCreateWithoutCompanyInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='connect')


class FileCreateManyWithoutDiscussionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileCreateWithoutDiscussionInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='connect')


class FileCreateManyWithoutFolderInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileCreateWithoutFolderInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='connect')


class FileCreateManyWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileCreateWithoutProjectInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='connect')


class FileCreateManyWithoutStatusUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileCreateWithoutStatusUpdateInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='connect')


class FileCreateManyWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileCreateWithoutTodoInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='connect')


class FileCreateManyWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileCreateWithoutUserInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='connect')


class FileCreateOneWithoutTodoCustomFieldFileInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('FileCreateWithoutTodoCustomFieldFileInput', graphql_name='create')
    connect = sgqlc.types.Field('FileWhereUniqueInput', graphql_name='connect')


class FileCreateWithoutCommentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'size', 'type', 'extension', 'shared', 'discussion', 'status_update', 'todo', 'user', 'folder', 'document', 'project', 'company', 'todo_custom_field_file')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    size = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='size')
    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='type')
    extension = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='extension')
    shared = sgqlc.types.Field(Boolean, graphql_name='shared')
    discussion = sgqlc.types.Field(DiscussionCreateOneWithoutFilesInput, graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateCreateOneWithoutFilesInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoCreateOneWithoutFilesInput', graphql_name='todo')
    user = sgqlc.types.Field('UserCreateOneWithoutFilesInput', graphql_name='user')
    folder = sgqlc.types.Field('FolderCreateOneWithoutFilesInput', graphql_name='folder')
    document = sgqlc.types.Field(DocumentCreateOneInput, graphql_name='document')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutFilesInput'), graphql_name='project')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutFilesInput), graphql_name='company')
    todo_custom_field_file = sgqlc.types.Field('TodoCustomFieldFileCreateOneWithoutFileInput', graphql_name='todoCustomFieldFile')


class FileCreateWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'size', 'type', 'extension', 'shared', 'comment', 'discussion', 'status_update', 'todo', 'user', 'folder', 'document', 'project', 'todo_custom_field_file')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    size = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='size')
    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='type')
    extension = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='extension')
    shared = sgqlc.types.Field(Boolean, graphql_name='shared')
    comment = sgqlc.types.Field(CommentCreateOneWithoutFilesInput, graphql_name='comment')
    discussion = sgqlc.types.Field(DiscussionCreateOneWithoutFilesInput, graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateCreateOneWithoutFilesInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoCreateOneWithoutFilesInput', graphql_name='todo')
    user = sgqlc.types.Field('UserCreateOneWithoutFilesInput', graphql_name='user')
    folder = sgqlc.types.Field('FolderCreateOneWithoutFilesInput', graphql_name='folder')
    document = sgqlc.types.Field(DocumentCreateOneInput, graphql_name='document')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutFilesInput'), graphql_name='project')
    todo_custom_field_file = sgqlc.types.Field('TodoCustomFieldFileCreateOneWithoutFileInput', graphql_name='todoCustomFieldFile')


class FileCreateWithoutDiscussionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'size', 'type', 'extension', 'shared', 'comment', 'status_update', 'todo', 'user', 'folder', 'document', 'project', 'company', 'todo_custom_field_file')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    size = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='size')
    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='type')
    extension = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='extension')
    shared = sgqlc.types.Field(Boolean, graphql_name='shared')
    comment = sgqlc.types.Field(CommentCreateOneWithoutFilesInput, graphql_name='comment')
    status_update = sgqlc.types.Field('StatusUpdateCreateOneWithoutFilesInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoCreateOneWithoutFilesInput', graphql_name='todo')
    user = sgqlc.types.Field('UserCreateOneWithoutFilesInput', graphql_name='user')
    folder = sgqlc.types.Field('FolderCreateOneWithoutFilesInput', graphql_name='folder')
    document = sgqlc.types.Field(DocumentCreateOneInput, graphql_name='document')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutFilesInput'), graphql_name='project')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutFilesInput), graphql_name='company')
    todo_custom_field_file = sgqlc.types.Field('TodoCustomFieldFileCreateOneWithoutFileInput', graphql_name='todoCustomFieldFile')


class FileCreateWithoutFolderInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'size', 'type', 'extension', 'shared', 'comment', 'discussion', 'status_update', 'todo', 'user', 'document', 'project', 'company', 'todo_custom_field_file')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    size = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='size')
    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='type')
    extension = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='extension')
    shared = sgqlc.types.Field(Boolean, graphql_name='shared')
    comment = sgqlc.types.Field(CommentCreateOneWithoutFilesInput, graphql_name='comment')
    discussion = sgqlc.types.Field(DiscussionCreateOneWithoutFilesInput, graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateCreateOneWithoutFilesInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoCreateOneWithoutFilesInput', graphql_name='todo')
    user = sgqlc.types.Field('UserCreateOneWithoutFilesInput', graphql_name='user')
    document = sgqlc.types.Field(DocumentCreateOneInput, graphql_name='document')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutFilesInput'), graphql_name='project')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutFilesInput), graphql_name='company')
    todo_custom_field_file = sgqlc.types.Field('TodoCustomFieldFileCreateOneWithoutFileInput', graphql_name='todoCustomFieldFile')


class FileCreateWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'size', 'type', 'extension', 'shared', 'comment', 'discussion', 'status_update', 'todo', 'user', 'folder', 'document', 'company', 'todo_custom_field_file')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    size = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='size')
    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='type')
    extension = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='extension')
    shared = sgqlc.types.Field(Boolean, graphql_name='shared')
    comment = sgqlc.types.Field(CommentCreateOneWithoutFilesInput, graphql_name='comment')
    discussion = sgqlc.types.Field(DiscussionCreateOneWithoutFilesInput, graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateCreateOneWithoutFilesInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoCreateOneWithoutFilesInput', graphql_name='todo')
    user = sgqlc.types.Field('UserCreateOneWithoutFilesInput', graphql_name='user')
    folder = sgqlc.types.Field('FolderCreateOneWithoutFilesInput', graphql_name='folder')
    document = sgqlc.types.Field(DocumentCreateOneInput, graphql_name='document')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutFilesInput), graphql_name='company')
    todo_custom_field_file = sgqlc.types.Field('TodoCustomFieldFileCreateOneWithoutFileInput', graphql_name='todoCustomFieldFile')


class FileCreateWithoutStatusUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'size', 'type', 'extension', 'shared', 'comment', 'discussion', 'todo', 'user', 'folder', 'document', 'project', 'company', 'todo_custom_field_file')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    size = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='size')
    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='type')
    extension = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='extension')
    shared = sgqlc.types.Field(Boolean, graphql_name='shared')
    comment = sgqlc.types.Field(CommentCreateOneWithoutFilesInput, graphql_name='comment')
    discussion = sgqlc.types.Field(DiscussionCreateOneWithoutFilesInput, graphql_name='discussion')
    todo = sgqlc.types.Field('TodoCreateOneWithoutFilesInput', graphql_name='todo')
    user = sgqlc.types.Field('UserCreateOneWithoutFilesInput', graphql_name='user')
    folder = sgqlc.types.Field('FolderCreateOneWithoutFilesInput', graphql_name='folder')
    document = sgqlc.types.Field(DocumentCreateOneInput, graphql_name='document')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutFilesInput'), graphql_name='project')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutFilesInput), graphql_name='company')
    todo_custom_field_file = sgqlc.types.Field('TodoCustomFieldFileCreateOneWithoutFileInput', graphql_name='todoCustomFieldFile')


class FileCreateWithoutTodoCustomFieldFileInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'size', 'type', 'extension', 'shared', 'comment', 'discussion', 'status_update', 'todo', 'user', 'folder', 'document', 'project', 'company')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    size = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='size')
    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='type')
    extension = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='extension')
    shared = sgqlc.types.Field(Boolean, graphql_name='shared')
    comment = sgqlc.types.Field(CommentCreateOneWithoutFilesInput, graphql_name='comment')
    discussion = sgqlc.types.Field(DiscussionCreateOneWithoutFilesInput, graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateCreateOneWithoutFilesInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoCreateOneWithoutFilesInput', graphql_name='todo')
    user = sgqlc.types.Field('UserCreateOneWithoutFilesInput', graphql_name='user')
    folder = sgqlc.types.Field('FolderCreateOneWithoutFilesInput', graphql_name='folder')
    document = sgqlc.types.Field(DocumentCreateOneInput, graphql_name='document')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutFilesInput'), graphql_name='project')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutFilesInput), graphql_name='company')


class FileCreateWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'size', 'type', 'extension', 'shared', 'comment', 'discussion', 'status_update', 'user', 'folder', 'document', 'project', 'company', 'todo_custom_field_file')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    size = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='size')
    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='type')
    extension = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='extension')
    shared = sgqlc.types.Field(Boolean, graphql_name='shared')
    comment = sgqlc.types.Field(CommentCreateOneWithoutFilesInput, graphql_name='comment')
    discussion = sgqlc.types.Field(DiscussionCreateOneWithoutFilesInput, graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateCreateOneWithoutFilesInput', graphql_name='statusUpdate')
    user = sgqlc.types.Field('UserCreateOneWithoutFilesInput', graphql_name='user')
    folder = sgqlc.types.Field('FolderCreateOneWithoutFilesInput', graphql_name='folder')
    document = sgqlc.types.Field(DocumentCreateOneInput, graphql_name='document')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutFilesInput'), graphql_name='project')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutFilesInput), graphql_name='company')
    todo_custom_field_file = sgqlc.types.Field('TodoCustomFieldFileCreateOneWithoutFileInput', graphql_name='todoCustomFieldFile')


class FileCreateWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'size', 'type', 'extension', 'shared', 'comment', 'discussion', 'status_update', 'todo', 'folder', 'document', 'project', 'company', 'todo_custom_field_file')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    size = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='size')
    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='type')
    extension = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='extension')
    shared = sgqlc.types.Field(Boolean, graphql_name='shared')
    comment = sgqlc.types.Field(CommentCreateOneWithoutFilesInput, graphql_name='comment')
    discussion = sgqlc.types.Field(DiscussionCreateOneWithoutFilesInput, graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateCreateOneWithoutFilesInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoCreateOneWithoutFilesInput', graphql_name='todo')
    folder = sgqlc.types.Field('FolderCreateOneWithoutFilesInput', graphql_name='folder')
    document = sgqlc.types.Field(DocumentCreateOneInput, graphql_name='document')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutFilesInput'), graphql_name='project')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutFilesInput), graphql_name='company')
    todo_custom_field_file = sgqlc.types.Field('TodoCustomFieldFileCreateOneWithoutFileInput', graphql_name='todoCustomFieldFile')


class FileFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_ids', 'project_ids', 'folder_id', 'folder_ids', 'q')
    company_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='companyIds')
    project_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='projectIds')
    folder_id = sgqlc.types.Field(String, graphql_name='folderId')
    folder_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='folderIds')
    q = sgqlc.types.Field(String, graphql_name='q')


class FileScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'name', 'name_not', 'name_in', 'name_not_in', 'name_lt', 'name_lte', 'name_gt', 'name_gte', 'name_contains', 'name_not_contains', 'name_starts_with', 'name_not_starts_with', 'name_ends_with', 'name_not_ends_with', 'size', 'size_not', 'size_in', 'size_not_in', 'size_lt', 'size_lte', 'size_gt', 'size_gte', 'type', 'type_not', 'type_in', 'type_not_in', 'type_lt', 'type_lte', 'type_gt', 'type_gte', 'type_contains', 'type_not_contains', 'type_starts_with', 'type_not_starts_with', 'type_ends_with', 'type_not_ends_with', 'extension', 'extension_not', 'extension_in', 'extension_not_in', 'extension_lt', 'extension_lte', 'extension_gt', 'extension_gte', 'extension_contains', 'extension_not_contains', 'extension_starts_with', 'extension_not_starts_with', 'extension_ends_with', 'extension_not_ends_with', 'shared', 'shared_not', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    name = sgqlc.types.Field(String, graphql_name='name')
    name_not = sgqlc.types.Field(String, graphql_name='name_not')
    name_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='name_in')
    name_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='name_not_in')
    name_lt = sgqlc.types.Field(String, graphql_name='name_lt')
    name_lte = sgqlc.types.Field(String, graphql_name='name_lte')
    name_gt = sgqlc.types.Field(String, graphql_name='name_gt')
    name_gte = sgqlc.types.Field(String, graphql_name='name_gte')
    name_contains = sgqlc.types.Field(String, graphql_name='name_contains')
    name_not_contains = sgqlc.types.Field(String, graphql_name='name_not_contains')
    name_starts_with = sgqlc.types.Field(String, graphql_name='name_starts_with')
    name_not_starts_with = sgqlc.types.Field(String, graphql_name='name_not_starts_with')
    name_ends_with = sgqlc.types.Field(String, graphql_name='name_ends_with')
    name_not_ends_with = sgqlc.types.Field(String, graphql_name='name_not_ends_with')
    size = sgqlc.types.Field(Float, graphql_name='size')
    size_not = sgqlc.types.Field(Float, graphql_name='size_not')
    size_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='size_in')
    size_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='size_not_in')
    size_lt = sgqlc.types.Field(Float, graphql_name='size_lt')
    size_lte = sgqlc.types.Field(Float, graphql_name='size_lte')
    size_gt = sgqlc.types.Field(Float, graphql_name='size_gt')
    size_gte = sgqlc.types.Field(Float, graphql_name='size_gte')
    type = sgqlc.types.Field(String, graphql_name='type')
    type_not = sgqlc.types.Field(String, graphql_name='type_not')
    type_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='type_in')
    type_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='type_not_in')
    type_lt = sgqlc.types.Field(String, graphql_name='type_lt')
    type_lte = sgqlc.types.Field(String, graphql_name='type_lte')
    type_gt = sgqlc.types.Field(String, graphql_name='type_gt')
    type_gte = sgqlc.types.Field(String, graphql_name='type_gte')
    type_contains = sgqlc.types.Field(String, graphql_name='type_contains')
    type_not_contains = sgqlc.types.Field(String, graphql_name='type_not_contains')
    type_starts_with = sgqlc.types.Field(String, graphql_name='type_starts_with')
    type_not_starts_with = sgqlc.types.Field(String, graphql_name='type_not_starts_with')
    type_ends_with = sgqlc.types.Field(String, graphql_name='type_ends_with')
    type_not_ends_with = sgqlc.types.Field(String, graphql_name='type_not_ends_with')
    extension = sgqlc.types.Field(String, graphql_name='extension')
    extension_not = sgqlc.types.Field(String, graphql_name='extension_not')
    extension_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='extension_in')
    extension_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='extension_not_in')
    extension_lt = sgqlc.types.Field(String, graphql_name='extension_lt')
    extension_lte = sgqlc.types.Field(String, graphql_name='extension_lte')
    extension_gt = sgqlc.types.Field(String, graphql_name='extension_gt')
    extension_gte = sgqlc.types.Field(String, graphql_name='extension_gte')
    extension_contains = sgqlc.types.Field(String, graphql_name='extension_contains')
    extension_not_contains = sgqlc.types.Field(String, graphql_name='extension_not_contains')
    extension_starts_with = sgqlc.types.Field(String, graphql_name='extension_starts_with')
    extension_not_starts_with = sgqlc.types.Field(String, graphql_name='extension_not_starts_with')
    extension_ends_with = sgqlc.types.Field(String, graphql_name='extension_ends_with')
    extension_not_ends_with = sgqlc.types.Field(String, graphql_name='extension_not_ends_with')
    shared = sgqlc.types.Field(Boolean, graphql_name='shared')
    shared_not = sgqlc.types.Field(Boolean, graphql_name='shared_not')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileScalarWhereInput')), graphql_name='NOT')


class FileSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('FileWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileSubscriptionWhereInput')), graphql_name='NOT')


class FileUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'size', 'type', 'extension', 'shared', 'comment', 'discussion', 'status_update', 'todo', 'user', 'folder', 'document', 'project', 'company', 'todo_custom_field_file')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    size = sgqlc.types.Field(Float, graphql_name='size')
    type = sgqlc.types.Field(String, graphql_name='type')
    extension = sgqlc.types.Field(String, graphql_name='extension')
    shared = sgqlc.types.Field(Boolean, graphql_name='shared')
    comment = sgqlc.types.Field(CommentUpdateOneWithoutFilesInput, graphql_name='comment')
    discussion = sgqlc.types.Field(DiscussionUpdateOneWithoutFilesInput, graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateUpdateOneWithoutFilesInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoUpdateOneWithoutFilesInput', graphql_name='todo')
    user = sgqlc.types.Field('UserUpdateOneWithoutFilesInput', graphql_name='user')
    folder = sgqlc.types.Field('FolderUpdateOneWithoutFilesInput', graphql_name='folder')
    document = sgqlc.types.Field(DocumentUpdateOneInput, graphql_name='document')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutFilesInput', graphql_name='project')
    company = sgqlc.types.Field(CompanyUpdateOneRequiredWithoutFilesInput, graphql_name='company')
    todo_custom_field_file = sgqlc.types.Field('TodoCustomFieldFileUpdateOneWithoutFileInput', graphql_name='todoCustomFieldFile')


class FileUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'size', 'type', 'extension', 'shared')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    size = sgqlc.types.Field(Float, graphql_name='size')
    type = sgqlc.types.Field(String, graphql_name='type')
    extension = sgqlc.types.Field(String, graphql_name='extension')
    shared = sgqlc.types.Field(Boolean, graphql_name='shared')


class FileUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'size', 'type', 'extension', 'shared')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    size = sgqlc.types.Field(Float, graphql_name='size')
    type = sgqlc.types.Field(String, graphql_name='type')
    extension = sgqlc.types.Field(String, graphql_name='extension')
    shared = sgqlc.types.Field(Boolean, graphql_name='shared')


class FileUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(FileScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(FileUpdateManyDataInput), graphql_name='data')


class FileUpdateManyWithoutCommentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FileCreateWithoutCommentInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileUpdateWithWhereUniqueWithoutCommentInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileUpsertWithWhereUniqueWithoutCommentInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FileScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FileUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class FileUpdateManyWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FileCreateWithoutCompanyInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileUpdateWithWhereUniqueWithoutCompanyInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileUpsertWithWhereUniqueWithoutCompanyInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FileScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FileUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class FileUpdateManyWithoutDiscussionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FileCreateWithoutDiscussionInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileUpdateWithWhereUniqueWithoutDiscussionInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileUpsertWithWhereUniqueWithoutDiscussionInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FileScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FileUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class FileUpdateManyWithoutFolderInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FileCreateWithoutFolderInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileUpdateWithWhereUniqueWithoutFolderInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileUpsertWithWhereUniqueWithoutFolderInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FileScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FileUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class FileUpdateManyWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FileCreateWithoutProjectInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileUpdateWithWhereUniqueWithoutProjectInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileUpsertWithWhereUniqueWithoutProjectInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FileScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FileUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class FileUpdateManyWithoutStatusUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FileCreateWithoutStatusUpdateInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileUpdateWithWhereUniqueWithoutStatusUpdateInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileUpsertWithWhereUniqueWithoutStatusUpdateInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FileScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FileUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class FileUpdateManyWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FileCreateWithoutTodoInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileUpdateWithWhereUniqueWithoutTodoInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileUpsertWithWhereUniqueWithoutTodoInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FileScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FileUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class FileUpdateManyWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FileCreateWithoutUserInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileUpdateWithWhereUniqueWithoutUserInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileUpsertWithWhereUniqueWithoutUserInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FileScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FileUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class FileUpdateOneRequiredWithoutTodoCustomFieldFileInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(FileCreateWithoutTodoCustomFieldFileInput, graphql_name='create')
    update = sgqlc.types.Field('FileUpdateWithoutTodoCustomFieldFileDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('FileUpsertWithoutTodoCustomFieldFileInput', graphql_name='upsert')
    connect = sgqlc.types.Field('FileWhereUniqueInput', graphql_name='connect')


class FileUpdateWithWhereUniqueWithoutCommentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('FileWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('FileUpdateWithoutCommentDataInput'), graphql_name='data')


class FileUpdateWithWhereUniqueWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('FileWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('FileUpdateWithoutCompanyDataInput'), graphql_name='data')


class FileUpdateWithWhereUniqueWithoutDiscussionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('FileWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('FileUpdateWithoutDiscussionDataInput'), graphql_name='data')


class FileUpdateWithWhereUniqueWithoutFolderInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('FileWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('FileUpdateWithoutFolderDataInput'), graphql_name='data')


class FileUpdateWithWhereUniqueWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('FileWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('FileUpdateWithoutProjectDataInput'), graphql_name='data')


class FileUpdateWithWhereUniqueWithoutStatusUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('FileWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('FileUpdateWithoutStatusUpdateDataInput'), graphql_name='data')


class FileUpdateWithWhereUniqueWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('FileWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('FileUpdateWithoutTodoDataInput'), graphql_name='data')


class FileUpdateWithWhereUniqueWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('FileWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('FileUpdateWithoutUserDataInput'), graphql_name='data')


class FileUpdateWithoutCommentDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'size', 'type', 'extension', 'shared', 'discussion', 'status_update', 'todo', 'user', 'folder', 'document', 'project', 'company', 'todo_custom_field_file')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    size = sgqlc.types.Field(Float, graphql_name='size')
    type = sgqlc.types.Field(String, graphql_name='type')
    extension = sgqlc.types.Field(String, graphql_name='extension')
    shared = sgqlc.types.Field(Boolean, graphql_name='shared')
    discussion = sgqlc.types.Field(DiscussionUpdateOneWithoutFilesInput, graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateUpdateOneWithoutFilesInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoUpdateOneWithoutFilesInput', graphql_name='todo')
    user = sgqlc.types.Field('UserUpdateOneWithoutFilesInput', graphql_name='user')
    folder = sgqlc.types.Field('FolderUpdateOneWithoutFilesInput', graphql_name='folder')
    document = sgqlc.types.Field(DocumentUpdateOneInput, graphql_name='document')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutFilesInput', graphql_name='project')
    company = sgqlc.types.Field(CompanyUpdateOneRequiredWithoutFilesInput, graphql_name='company')
    todo_custom_field_file = sgqlc.types.Field('TodoCustomFieldFileUpdateOneWithoutFileInput', graphql_name='todoCustomFieldFile')


class FileUpdateWithoutCompanyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'size', 'type', 'extension', 'shared', 'comment', 'discussion', 'status_update', 'todo', 'user', 'folder', 'document', 'project', 'todo_custom_field_file')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    size = sgqlc.types.Field(Float, graphql_name='size')
    type = sgqlc.types.Field(String, graphql_name='type')
    extension = sgqlc.types.Field(String, graphql_name='extension')
    shared = sgqlc.types.Field(Boolean, graphql_name='shared')
    comment = sgqlc.types.Field(CommentUpdateOneWithoutFilesInput, graphql_name='comment')
    discussion = sgqlc.types.Field(DiscussionUpdateOneWithoutFilesInput, graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateUpdateOneWithoutFilesInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoUpdateOneWithoutFilesInput', graphql_name='todo')
    user = sgqlc.types.Field('UserUpdateOneWithoutFilesInput', graphql_name='user')
    folder = sgqlc.types.Field('FolderUpdateOneWithoutFilesInput', graphql_name='folder')
    document = sgqlc.types.Field(DocumentUpdateOneInput, graphql_name='document')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutFilesInput', graphql_name='project')
    todo_custom_field_file = sgqlc.types.Field('TodoCustomFieldFileUpdateOneWithoutFileInput', graphql_name='todoCustomFieldFile')


class FileUpdateWithoutDiscussionDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'size', 'type', 'extension', 'shared', 'comment', 'status_update', 'todo', 'user', 'folder', 'document', 'project', 'company', 'todo_custom_field_file')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    size = sgqlc.types.Field(Float, graphql_name='size')
    type = sgqlc.types.Field(String, graphql_name='type')
    extension = sgqlc.types.Field(String, graphql_name='extension')
    shared = sgqlc.types.Field(Boolean, graphql_name='shared')
    comment = sgqlc.types.Field(CommentUpdateOneWithoutFilesInput, graphql_name='comment')
    status_update = sgqlc.types.Field('StatusUpdateUpdateOneWithoutFilesInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoUpdateOneWithoutFilesInput', graphql_name='todo')
    user = sgqlc.types.Field('UserUpdateOneWithoutFilesInput', graphql_name='user')
    folder = sgqlc.types.Field('FolderUpdateOneWithoutFilesInput', graphql_name='folder')
    document = sgqlc.types.Field(DocumentUpdateOneInput, graphql_name='document')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutFilesInput', graphql_name='project')
    company = sgqlc.types.Field(CompanyUpdateOneRequiredWithoutFilesInput, graphql_name='company')
    todo_custom_field_file = sgqlc.types.Field('TodoCustomFieldFileUpdateOneWithoutFileInput', graphql_name='todoCustomFieldFile')


class FileUpdateWithoutFolderDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'size', 'type', 'extension', 'shared', 'comment', 'discussion', 'status_update', 'todo', 'user', 'document', 'project', 'company', 'todo_custom_field_file')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    size = sgqlc.types.Field(Float, graphql_name='size')
    type = sgqlc.types.Field(String, graphql_name='type')
    extension = sgqlc.types.Field(String, graphql_name='extension')
    shared = sgqlc.types.Field(Boolean, graphql_name='shared')
    comment = sgqlc.types.Field(CommentUpdateOneWithoutFilesInput, graphql_name='comment')
    discussion = sgqlc.types.Field(DiscussionUpdateOneWithoutFilesInput, graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateUpdateOneWithoutFilesInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoUpdateOneWithoutFilesInput', graphql_name='todo')
    user = sgqlc.types.Field('UserUpdateOneWithoutFilesInput', graphql_name='user')
    document = sgqlc.types.Field(DocumentUpdateOneInput, graphql_name='document')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutFilesInput', graphql_name='project')
    company = sgqlc.types.Field(CompanyUpdateOneRequiredWithoutFilesInput, graphql_name='company')
    todo_custom_field_file = sgqlc.types.Field('TodoCustomFieldFileUpdateOneWithoutFileInput', graphql_name='todoCustomFieldFile')


class FileUpdateWithoutProjectDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'size', 'type', 'extension', 'shared', 'comment', 'discussion', 'status_update', 'todo', 'user', 'folder', 'document', 'company', 'todo_custom_field_file')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    size = sgqlc.types.Field(Float, graphql_name='size')
    type = sgqlc.types.Field(String, graphql_name='type')
    extension = sgqlc.types.Field(String, graphql_name='extension')
    shared = sgqlc.types.Field(Boolean, graphql_name='shared')
    comment = sgqlc.types.Field(CommentUpdateOneWithoutFilesInput, graphql_name='comment')
    discussion = sgqlc.types.Field(DiscussionUpdateOneWithoutFilesInput, graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateUpdateOneWithoutFilesInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoUpdateOneWithoutFilesInput', graphql_name='todo')
    user = sgqlc.types.Field('UserUpdateOneWithoutFilesInput', graphql_name='user')
    folder = sgqlc.types.Field('FolderUpdateOneWithoutFilesInput', graphql_name='folder')
    document = sgqlc.types.Field(DocumentUpdateOneInput, graphql_name='document')
    company = sgqlc.types.Field(CompanyUpdateOneRequiredWithoutFilesInput, graphql_name='company')
    todo_custom_field_file = sgqlc.types.Field('TodoCustomFieldFileUpdateOneWithoutFileInput', graphql_name='todoCustomFieldFile')


class FileUpdateWithoutStatusUpdateDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'size', 'type', 'extension', 'shared', 'comment', 'discussion', 'todo', 'user', 'folder', 'document', 'project', 'company', 'todo_custom_field_file')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    size = sgqlc.types.Field(Float, graphql_name='size')
    type = sgqlc.types.Field(String, graphql_name='type')
    extension = sgqlc.types.Field(String, graphql_name='extension')
    shared = sgqlc.types.Field(Boolean, graphql_name='shared')
    comment = sgqlc.types.Field(CommentUpdateOneWithoutFilesInput, graphql_name='comment')
    discussion = sgqlc.types.Field(DiscussionUpdateOneWithoutFilesInput, graphql_name='discussion')
    todo = sgqlc.types.Field('TodoUpdateOneWithoutFilesInput', graphql_name='todo')
    user = sgqlc.types.Field('UserUpdateOneWithoutFilesInput', graphql_name='user')
    folder = sgqlc.types.Field('FolderUpdateOneWithoutFilesInput', graphql_name='folder')
    document = sgqlc.types.Field(DocumentUpdateOneInput, graphql_name='document')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutFilesInput', graphql_name='project')
    company = sgqlc.types.Field(CompanyUpdateOneRequiredWithoutFilesInput, graphql_name='company')
    todo_custom_field_file = sgqlc.types.Field('TodoCustomFieldFileUpdateOneWithoutFileInput', graphql_name='todoCustomFieldFile')


class FileUpdateWithoutTodoCustomFieldFileDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'size', 'type', 'extension', 'shared', 'comment', 'discussion', 'status_update', 'todo', 'user', 'folder', 'document', 'project', 'company')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    size = sgqlc.types.Field(Float, graphql_name='size')
    type = sgqlc.types.Field(String, graphql_name='type')
    extension = sgqlc.types.Field(String, graphql_name='extension')
    shared = sgqlc.types.Field(Boolean, graphql_name='shared')
    comment = sgqlc.types.Field(CommentUpdateOneWithoutFilesInput, graphql_name='comment')
    discussion = sgqlc.types.Field(DiscussionUpdateOneWithoutFilesInput, graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateUpdateOneWithoutFilesInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoUpdateOneWithoutFilesInput', graphql_name='todo')
    user = sgqlc.types.Field('UserUpdateOneWithoutFilesInput', graphql_name='user')
    folder = sgqlc.types.Field('FolderUpdateOneWithoutFilesInput', graphql_name='folder')
    document = sgqlc.types.Field(DocumentUpdateOneInput, graphql_name='document')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutFilesInput', graphql_name='project')
    company = sgqlc.types.Field(CompanyUpdateOneRequiredWithoutFilesInput, graphql_name='company')


class FileUpdateWithoutTodoDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'size', 'type', 'extension', 'shared', 'comment', 'discussion', 'status_update', 'user', 'folder', 'document', 'project', 'company', 'todo_custom_field_file')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    size = sgqlc.types.Field(Float, graphql_name='size')
    type = sgqlc.types.Field(String, graphql_name='type')
    extension = sgqlc.types.Field(String, graphql_name='extension')
    shared = sgqlc.types.Field(Boolean, graphql_name='shared')
    comment = sgqlc.types.Field(CommentUpdateOneWithoutFilesInput, graphql_name='comment')
    discussion = sgqlc.types.Field(DiscussionUpdateOneWithoutFilesInput, graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateUpdateOneWithoutFilesInput', graphql_name='statusUpdate')
    user = sgqlc.types.Field('UserUpdateOneWithoutFilesInput', graphql_name='user')
    folder = sgqlc.types.Field('FolderUpdateOneWithoutFilesInput', graphql_name='folder')
    document = sgqlc.types.Field(DocumentUpdateOneInput, graphql_name='document')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutFilesInput', graphql_name='project')
    company = sgqlc.types.Field(CompanyUpdateOneRequiredWithoutFilesInput, graphql_name='company')
    todo_custom_field_file = sgqlc.types.Field('TodoCustomFieldFileUpdateOneWithoutFileInput', graphql_name='todoCustomFieldFile')


class FileUpdateWithoutUserDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'size', 'type', 'extension', 'shared', 'comment', 'discussion', 'status_update', 'todo', 'folder', 'document', 'project', 'company', 'todo_custom_field_file')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    size = sgqlc.types.Field(Float, graphql_name='size')
    type = sgqlc.types.Field(String, graphql_name='type')
    extension = sgqlc.types.Field(String, graphql_name='extension')
    shared = sgqlc.types.Field(Boolean, graphql_name='shared')
    comment = sgqlc.types.Field(CommentUpdateOneWithoutFilesInput, graphql_name='comment')
    discussion = sgqlc.types.Field(DiscussionUpdateOneWithoutFilesInput, graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateUpdateOneWithoutFilesInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoUpdateOneWithoutFilesInput', graphql_name='todo')
    folder = sgqlc.types.Field('FolderUpdateOneWithoutFilesInput', graphql_name='folder')
    document = sgqlc.types.Field(DocumentUpdateOneInput, graphql_name='document')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutFilesInput', graphql_name='project')
    company = sgqlc.types.Field(CompanyUpdateOneRequiredWithoutFilesInput, graphql_name='company')
    todo_custom_field_file = sgqlc.types.Field('TodoCustomFieldFileUpdateOneWithoutFileInput', graphql_name='todoCustomFieldFile')


class FileUpsertWithWhereUniqueWithoutCommentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('FileWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(FileUpdateWithoutCommentDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(FileCreateWithoutCommentInput), graphql_name='create')


class FileUpsertWithWhereUniqueWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('FileWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(FileUpdateWithoutCompanyDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(FileCreateWithoutCompanyInput), graphql_name='create')


class FileUpsertWithWhereUniqueWithoutDiscussionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('FileWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(FileUpdateWithoutDiscussionDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(FileCreateWithoutDiscussionInput), graphql_name='create')


class FileUpsertWithWhereUniqueWithoutFolderInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('FileWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(FileUpdateWithoutFolderDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(FileCreateWithoutFolderInput), graphql_name='create')


class FileUpsertWithWhereUniqueWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('FileWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(FileUpdateWithoutProjectDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(FileCreateWithoutProjectInput), graphql_name='create')


class FileUpsertWithWhereUniqueWithoutStatusUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('FileWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(FileUpdateWithoutStatusUpdateDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(FileCreateWithoutStatusUpdateInput), graphql_name='create')


class FileUpsertWithWhereUniqueWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('FileWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(FileUpdateWithoutTodoDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(FileCreateWithoutTodoInput), graphql_name='create')


class FileUpsertWithWhereUniqueWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('FileWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(FileUpdateWithoutUserDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(FileCreateWithoutUserInput), graphql_name='create')


class FileUpsertWithoutTodoCustomFieldFileInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(FileUpdateWithoutTodoCustomFieldFileDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(FileCreateWithoutTodoCustomFieldFileInput), graphql_name='create')


class FileWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'name', 'name_not', 'name_in', 'name_not_in', 'name_lt', 'name_lte', 'name_gt', 'name_gte', 'name_contains', 'name_not_contains', 'name_starts_with', 'name_not_starts_with', 'name_ends_with', 'name_not_ends_with', 'size', 'size_not', 'size_in', 'size_not_in', 'size_lt', 'size_lte', 'size_gt', 'size_gte', 'type', 'type_not', 'type_in', 'type_not_in', 'type_lt', 'type_lte', 'type_gt', 'type_gte', 'type_contains', 'type_not_contains', 'type_starts_with', 'type_not_starts_with', 'type_ends_with', 'type_not_ends_with', 'extension', 'extension_not', 'extension_in', 'extension_not_in', 'extension_lt', 'extension_lte', 'extension_gt', 'extension_gte', 'extension_contains', 'extension_not_contains', 'extension_starts_with', 'extension_not_starts_with', 'extension_ends_with', 'extension_not_ends_with', 'shared', 'shared_not', 'comment', 'discussion', 'status_update', 'todo', 'user', 'folder', 'document', 'project', 'company', 'todo_custom_field_file', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    name = sgqlc.types.Field(String, graphql_name='name')
    name_not = sgqlc.types.Field(String, graphql_name='name_not')
    name_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='name_in')
    name_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='name_not_in')
    name_lt = sgqlc.types.Field(String, graphql_name='name_lt')
    name_lte = sgqlc.types.Field(String, graphql_name='name_lte')
    name_gt = sgqlc.types.Field(String, graphql_name='name_gt')
    name_gte = sgqlc.types.Field(String, graphql_name='name_gte')
    name_contains = sgqlc.types.Field(String, graphql_name='name_contains')
    name_not_contains = sgqlc.types.Field(String, graphql_name='name_not_contains')
    name_starts_with = sgqlc.types.Field(String, graphql_name='name_starts_with')
    name_not_starts_with = sgqlc.types.Field(String, graphql_name='name_not_starts_with')
    name_ends_with = sgqlc.types.Field(String, graphql_name='name_ends_with')
    name_not_ends_with = sgqlc.types.Field(String, graphql_name='name_not_ends_with')
    size = sgqlc.types.Field(Float, graphql_name='size')
    size_not = sgqlc.types.Field(Float, graphql_name='size_not')
    size_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='size_in')
    size_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='size_not_in')
    size_lt = sgqlc.types.Field(Float, graphql_name='size_lt')
    size_lte = sgqlc.types.Field(Float, graphql_name='size_lte')
    size_gt = sgqlc.types.Field(Float, graphql_name='size_gt')
    size_gte = sgqlc.types.Field(Float, graphql_name='size_gte')
    type = sgqlc.types.Field(String, graphql_name='type')
    type_not = sgqlc.types.Field(String, graphql_name='type_not')
    type_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='type_in')
    type_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='type_not_in')
    type_lt = sgqlc.types.Field(String, graphql_name='type_lt')
    type_lte = sgqlc.types.Field(String, graphql_name='type_lte')
    type_gt = sgqlc.types.Field(String, graphql_name='type_gt')
    type_gte = sgqlc.types.Field(String, graphql_name='type_gte')
    type_contains = sgqlc.types.Field(String, graphql_name='type_contains')
    type_not_contains = sgqlc.types.Field(String, graphql_name='type_not_contains')
    type_starts_with = sgqlc.types.Field(String, graphql_name='type_starts_with')
    type_not_starts_with = sgqlc.types.Field(String, graphql_name='type_not_starts_with')
    type_ends_with = sgqlc.types.Field(String, graphql_name='type_ends_with')
    type_not_ends_with = sgqlc.types.Field(String, graphql_name='type_not_ends_with')
    extension = sgqlc.types.Field(String, graphql_name='extension')
    extension_not = sgqlc.types.Field(String, graphql_name='extension_not')
    extension_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='extension_in')
    extension_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='extension_not_in')
    extension_lt = sgqlc.types.Field(String, graphql_name='extension_lt')
    extension_lte = sgqlc.types.Field(String, graphql_name='extension_lte')
    extension_gt = sgqlc.types.Field(String, graphql_name='extension_gt')
    extension_gte = sgqlc.types.Field(String, graphql_name='extension_gte')
    extension_contains = sgqlc.types.Field(String, graphql_name='extension_contains')
    extension_not_contains = sgqlc.types.Field(String, graphql_name='extension_not_contains')
    extension_starts_with = sgqlc.types.Field(String, graphql_name='extension_starts_with')
    extension_not_starts_with = sgqlc.types.Field(String, graphql_name='extension_not_starts_with')
    extension_ends_with = sgqlc.types.Field(String, graphql_name='extension_ends_with')
    extension_not_ends_with = sgqlc.types.Field(String, graphql_name='extension_not_ends_with')
    shared = sgqlc.types.Field(Boolean, graphql_name='shared')
    shared_not = sgqlc.types.Field(Boolean, graphql_name='shared_not')
    comment = sgqlc.types.Field(CommentWhereInput, graphql_name='comment')
    discussion = sgqlc.types.Field(DiscussionWhereInput, graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdateWhereInput', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('TodoWhereInput', graphql_name='todo')
    user = sgqlc.types.Field('UserWhereInput', graphql_name='user')
    folder = sgqlc.types.Field('FolderWhereInput', graphql_name='folder')
    document = sgqlc.types.Field(DocumentWhereInput, graphql_name='document')
    project = sgqlc.types.Field('ProjectWhereInput', graphql_name='project')
    company = sgqlc.types.Field(CompanyWhereInput, graphql_name='company')
    todo_custom_field_file = sgqlc.types.Field('TodoCustomFieldFileWhereInput', graphql_name='todoCustomFieldFile')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FileWhereInput')), graphql_name='NOT')


class FileWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class FolderCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'type', 'color', 'created_by', 'parent', 'company_user_folders', 'project_user_folders', 'files', 'folders', 'metadata')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    type = sgqlc.types.Field(sgqlc.types.non_null(FolderType), graphql_name='type')
    color = sgqlc.types.Field(String, graphql_name='color')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneInput'), graphql_name='createdBy')
    parent = sgqlc.types.Field('FolderCreateOneWithoutFoldersInput', graphql_name='parent')
    company_user_folders = sgqlc.types.Field(CompanyUserFolderCreateManyWithoutFolderInput, graphql_name='companyUserFolders')
    project_user_folders = sgqlc.types.Field('ProjectUserFolderCreateManyWithoutFolderInput', graphql_name='projectUserFolders')
    files = sgqlc.types.Field(FileCreateManyWithoutFolderInput, graphql_name='files')
    folders = sgqlc.types.Field('FolderCreateManyWithoutParentInput', graphql_name='folders')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class FolderCreateManyWithoutParentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FolderCreateWithoutParentInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FolderWhereUniqueInput')), graphql_name='connect')


class FolderCreateOneWithoutCompanyUserFoldersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('FolderCreateWithoutCompanyUserFoldersInput', graphql_name='create')
    connect = sgqlc.types.Field('FolderWhereUniqueInput', graphql_name='connect')


class FolderCreateOneWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('FolderCreateWithoutFilesInput', graphql_name='create')
    connect = sgqlc.types.Field('FolderWhereUniqueInput', graphql_name='connect')


class FolderCreateOneWithoutFoldersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('FolderCreateWithoutFoldersInput', graphql_name='create')
    connect = sgqlc.types.Field('FolderWhereUniqueInput', graphql_name='connect')


class FolderCreateOneWithoutProjectUserFoldersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('FolderCreateWithoutProjectUserFoldersInput', graphql_name='create')
    connect = sgqlc.types.Field('FolderWhereUniqueInput', graphql_name='connect')


class FolderCreateWithoutCompanyUserFoldersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'type', 'color', 'created_by', 'parent', 'project_user_folders', 'files', 'folders', 'metadata')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    type = sgqlc.types.Field(sgqlc.types.non_null(FolderType), graphql_name='type')
    color = sgqlc.types.Field(String, graphql_name='color')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneInput'), graphql_name='createdBy')
    parent = sgqlc.types.Field(FolderCreateOneWithoutFoldersInput, graphql_name='parent')
    project_user_folders = sgqlc.types.Field('ProjectUserFolderCreateManyWithoutFolderInput', graphql_name='projectUserFolders')
    files = sgqlc.types.Field(FileCreateManyWithoutFolderInput, graphql_name='files')
    folders = sgqlc.types.Field(FolderCreateManyWithoutParentInput, graphql_name='folders')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class FolderCreateWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'type', 'color', 'created_by', 'parent', 'company_user_folders', 'project_user_folders', 'folders', 'metadata')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    type = sgqlc.types.Field(sgqlc.types.non_null(FolderType), graphql_name='type')
    color = sgqlc.types.Field(String, graphql_name='color')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneInput'), graphql_name='createdBy')
    parent = sgqlc.types.Field(FolderCreateOneWithoutFoldersInput, graphql_name='parent')
    company_user_folders = sgqlc.types.Field(CompanyUserFolderCreateManyWithoutFolderInput, graphql_name='companyUserFolders')
    project_user_folders = sgqlc.types.Field('ProjectUserFolderCreateManyWithoutFolderInput', graphql_name='projectUserFolders')
    folders = sgqlc.types.Field(FolderCreateManyWithoutParentInput, graphql_name='folders')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class FolderCreateWithoutFoldersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'type', 'color', 'created_by', 'parent', 'company_user_folders', 'project_user_folders', 'files', 'metadata')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    type = sgqlc.types.Field(sgqlc.types.non_null(FolderType), graphql_name='type')
    color = sgqlc.types.Field(String, graphql_name='color')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneInput'), graphql_name='createdBy')
    parent = sgqlc.types.Field(FolderCreateOneWithoutFoldersInput, graphql_name='parent')
    company_user_folders = sgqlc.types.Field(CompanyUserFolderCreateManyWithoutFolderInput, graphql_name='companyUserFolders')
    project_user_folders = sgqlc.types.Field('ProjectUserFolderCreateManyWithoutFolderInput', graphql_name='projectUserFolders')
    files = sgqlc.types.Field(FileCreateManyWithoutFolderInput, graphql_name='files')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class FolderCreateWithoutParentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'type', 'color', 'created_by', 'company_user_folders', 'project_user_folders', 'files', 'folders', 'metadata')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    type = sgqlc.types.Field(sgqlc.types.non_null(FolderType), graphql_name='type')
    color = sgqlc.types.Field(String, graphql_name='color')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneInput'), graphql_name='createdBy')
    company_user_folders = sgqlc.types.Field(CompanyUserFolderCreateManyWithoutFolderInput, graphql_name='companyUserFolders')
    project_user_folders = sgqlc.types.Field('ProjectUserFolderCreateManyWithoutFolderInput', graphql_name='projectUserFolders')
    files = sgqlc.types.Field(FileCreateManyWithoutFolderInput, graphql_name='files')
    folders = sgqlc.types.Field(FolderCreateManyWithoutParentInput, graphql_name='folders')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class FolderCreateWithoutProjectUserFoldersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'type', 'color', 'created_by', 'parent', 'company_user_folders', 'files', 'folders', 'metadata')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    type = sgqlc.types.Field(sgqlc.types.non_null(FolderType), graphql_name='type')
    color = sgqlc.types.Field(String, graphql_name='color')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneInput'), graphql_name='createdBy')
    parent = sgqlc.types.Field(FolderCreateOneWithoutFoldersInput, graphql_name='parent')
    company_user_folders = sgqlc.types.Field(CompanyUserFolderCreateManyWithoutFolderInput, graphql_name='companyUserFolders')
    files = sgqlc.types.Field(FileCreateManyWithoutFolderInput, graphql_name='files')
    folders = sgqlc.types.Field(FolderCreateManyWithoutParentInput, graphql_name='folders')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class FolderFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id', 'type', 'project_id', 'parent_id')
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')
    type = sgqlc.types.Field(sgqlc.types.non_null(FolderType), graphql_name='type')
    project_id = sgqlc.types.Field(String, graphql_name='projectId')
    parent_id = sgqlc.types.Field(String, graphql_name='parentId')


class FolderScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'title', 'title_not', 'title_in', 'title_not_in', 'title_lt', 'title_lte', 'title_gt', 'title_gte', 'title_contains', 'title_not_contains', 'title_starts_with', 'title_not_starts_with', 'title_ends_with', 'title_not_ends_with', 'type', 'type_not', 'type_in', 'type_not_in', 'color', 'color_not', 'color_in', 'color_not_in', 'color_lt', 'color_lte', 'color_gt', 'color_gte', 'color_contains', 'color_not_contains', 'color_starts_with', 'color_not_starts_with', 'color_ends_with', 'color_not_ends_with', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'metadata', 'metadata_not', 'metadata_in', 'metadata_not_in', 'metadata_lt', 'metadata_lte', 'metadata_gt', 'metadata_gte', 'metadata_contains', 'metadata_not_contains', 'metadata_starts_with', 'metadata_not_starts_with', 'metadata_ends_with', 'metadata_not_ends_with', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    title = sgqlc.types.Field(String, graphql_name='title')
    title_not = sgqlc.types.Field(String, graphql_name='title_not')
    title_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_in')
    title_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_not_in')
    title_lt = sgqlc.types.Field(String, graphql_name='title_lt')
    title_lte = sgqlc.types.Field(String, graphql_name='title_lte')
    title_gt = sgqlc.types.Field(String, graphql_name='title_gt')
    title_gte = sgqlc.types.Field(String, graphql_name='title_gte')
    title_contains = sgqlc.types.Field(String, graphql_name='title_contains')
    title_not_contains = sgqlc.types.Field(String, graphql_name='title_not_contains')
    title_starts_with = sgqlc.types.Field(String, graphql_name='title_starts_with')
    title_not_starts_with = sgqlc.types.Field(String, graphql_name='title_not_starts_with')
    title_ends_with = sgqlc.types.Field(String, graphql_name='title_ends_with')
    title_not_ends_with = sgqlc.types.Field(String, graphql_name='title_not_ends_with')
    type = sgqlc.types.Field(FolderType, graphql_name='type')
    type_not = sgqlc.types.Field(FolderType, graphql_name='type_not')
    type_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FolderType)), graphql_name='type_in')
    type_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FolderType)), graphql_name='type_not_in')
    color = sgqlc.types.Field(String, graphql_name='color')
    color_not = sgqlc.types.Field(String, graphql_name='color_not')
    color_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='color_in')
    color_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='color_not_in')
    color_lt = sgqlc.types.Field(String, graphql_name='color_lt')
    color_lte = sgqlc.types.Field(String, graphql_name='color_lte')
    color_gt = sgqlc.types.Field(String, graphql_name='color_gt')
    color_gte = sgqlc.types.Field(String, graphql_name='color_gte')
    color_contains = sgqlc.types.Field(String, graphql_name='color_contains')
    color_not_contains = sgqlc.types.Field(String, graphql_name='color_not_contains')
    color_starts_with = sgqlc.types.Field(String, graphql_name='color_starts_with')
    color_not_starts_with = sgqlc.types.Field(String, graphql_name='color_not_starts_with')
    color_ends_with = sgqlc.types.Field(String, graphql_name='color_ends_with')
    color_not_ends_with = sgqlc.types.Field(String, graphql_name='color_not_ends_with')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    metadata_not = sgqlc.types.Field(String, graphql_name='metadata_not')
    metadata_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='metadata_in')
    metadata_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='metadata_not_in')
    metadata_lt = sgqlc.types.Field(String, graphql_name='metadata_lt')
    metadata_lte = sgqlc.types.Field(String, graphql_name='metadata_lte')
    metadata_gt = sgqlc.types.Field(String, graphql_name='metadata_gt')
    metadata_gte = sgqlc.types.Field(String, graphql_name='metadata_gte')
    metadata_contains = sgqlc.types.Field(String, graphql_name='metadata_contains')
    metadata_not_contains = sgqlc.types.Field(String, graphql_name='metadata_not_contains')
    metadata_starts_with = sgqlc.types.Field(String, graphql_name='metadata_starts_with')
    metadata_not_starts_with = sgqlc.types.Field(String, graphql_name='metadata_not_starts_with')
    metadata_ends_with = sgqlc.types.Field(String, graphql_name='metadata_ends_with')
    metadata_not_ends_with = sgqlc.types.Field(String, graphql_name='metadata_not_ends_with')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FolderScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FolderScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FolderScalarWhereInput')), graphql_name='NOT')


class FolderSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('FolderWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FolderSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FolderSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FolderSubscriptionWhereInput')), graphql_name='NOT')


class FolderUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'type', 'color', 'created_by', 'parent', 'company_user_folders', 'project_user_folders', 'files', 'folders', 'metadata')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    type = sgqlc.types.Field(FolderType, graphql_name='type')
    color = sgqlc.types.Field(String, graphql_name='color')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredInput', graphql_name='createdBy')
    parent = sgqlc.types.Field('FolderUpdateOneWithoutFoldersInput', graphql_name='parent')
    company_user_folders = sgqlc.types.Field(CompanyUserFolderUpdateManyWithoutFolderInput, graphql_name='companyUserFolders')
    project_user_folders = sgqlc.types.Field('ProjectUserFolderUpdateManyWithoutFolderInput', graphql_name='projectUserFolders')
    files = sgqlc.types.Field(FileUpdateManyWithoutFolderInput, graphql_name='files')
    folders = sgqlc.types.Field('FolderUpdateManyWithoutParentInput', graphql_name='folders')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class FolderUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'type', 'color', 'metadata')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    type = sgqlc.types.Field(FolderType, graphql_name='type')
    color = sgqlc.types.Field(String, graphql_name='color')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class FolderUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'type', 'color', 'metadata')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    type = sgqlc.types.Field(FolderType, graphql_name='type')
    color = sgqlc.types.Field(String, graphql_name='color')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class FolderUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(FolderScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(FolderUpdateManyDataInput), graphql_name='data')


class FolderUpdateManyWithoutParentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FolderCreateWithoutParentInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FolderWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FolderWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FolderWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FolderWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FolderUpdateWithWhereUniqueWithoutParentInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FolderUpsertWithWhereUniqueWithoutParentInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FolderScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FolderUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class FolderUpdateOneRequiredWithoutCompanyUserFoldersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(FolderCreateWithoutCompanyUserFoldersInput, graphql_name='create')
    update = sgqlc.types.Field('FolderUpdateWithoutCompanyUserFoldersDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('FolderUpsertWithoutCompanyUserFoldersInput', graphql_name='upsert')
    connect = sgqlc.types.Field('FolderWhereUniqueInput', graphql_name='connect')


class FolderUpdateOneRequiredWithoutProjectUserFoldersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(FolderCreateWithoutProjectUserFoldersInput, graphql_name='create')
    update = sgqlc.types.Field('FolderUpdateWithoutProjectUserFoldersDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('FolderUpsertWithoutProjectUserFoldersInput', graphql_name='upsert')
    connect = sgqlc.types.Field('FolderWhereUniqueInput', graphql_name='connect')


class FolderUpdateOneWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(FolderCreateWithoutFilesInput, graphql_name='create')
    update = sgqlc.types.Field('FolderUpdateWithoutFilesDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('FolderUpsertWithoutFilesInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('FolderWhereUniqueInput', graphql_name='connect')


class FolderUpdateOneWithoutFoldersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(FolderCreateWithoutFoldersInput, graphql_name='create')
    update = sgqlc.types.Field('FolderUpdateWithoutFoldersDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('FolderUpsertWithoutFoldersInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('FolderWhereUniqueInput', graphql_name='connect')


class FolderUpdateWithWhereUniqueWithoutParentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('FolderWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('FolderUpdateWithoutParentDataInput'), graphql_name='data')


class FolderUpdateWithoutCompanyUserFoldersDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'type', 'color', 'created_by', 'parent', 'project_user_folders', 'files', 'folders', 'metadata')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    type = sgqlc.types.Field(FolderType, graphql_name='type')
    color = sgqlc.types.Field(String, graphql_name='color')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredInput', graphql_name='createdBy')
    parent = sgqlc.types.Field(FolderUpdateOneWithoutFoldersInput, graphql_name='parent')
    project_user_folders = sgqlc.types.Field('ProjectUserFolderUpdateManyWithoutFolderInput', graphql_name='projectUserFolders')
    files = sgqlc.types.Field(FileUpdateManyWithoutFolderInput, graphql_name='files')
    folders = sgqlc.types.Field(FolderUpdateManyWithoutParentInput, graphql_name='folders')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class FolderUpdateWithoutFilesDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'type', 'color', 'created_by', 'parent', 'company_user_folders', 'project_user_folders', 'folders', 'metadata')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    type = sgqlc.types.Field(FolderType, graphql_name='type')
    color = sgqlc.types.Field(String, graphql_name='color')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredInput', graphql_name='createdBy')
    parent = sgqlc.types.Field(FolderUpdateOneWithoutFoldersInput, graphql_name='parent')
    company_user_folders = sgqlc.types.Field(CompanyUserFolderUpdateManyWithoutFolderInput, graphql_name='companyUserFolders')
    project_user_folders = sgqlc.types.Field('ProjectUserFolderUpdateManyWithoutFolderInput', graphql_name='projectUserFolders')
    folders = sgqlc.types.Field(FolderUpdateManyWithoutParentInput, graphql_name='folders')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class FolderUpdateWithoutFoldersDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'type', 'color', 'created_by', 'parent', 'company_user_folders', 'project_user_folders', 'files', 'metadata')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    type = sgqlc.types.Field(FolderType, graphql_name='type')
    color = sgqlc.types.Field(String, graphql_name='color')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredInput', graphql_name='createdBy')
    parent = sgqlc.types.Field(FolderUpdateOneWithoutFoldersInput, graphql_name='parent')
    company_user_folders = sgqlc.types.Field(CompanyUserFolderUpdateManyWithoutFolderInput, graphql_name='companyUserFolders')
    project_user_folders = sgqlc.types.Field('ProjectUserFolderUpdateManyWithoutFolderInput', graphql_name='projectUserFolders')
    files = sgqlc.types.Field(FileUpdateManyWithoutFolderInput, graphql_name='files')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class FolderUpdateWithoutParentDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'type', 'color', 'created_by', 'company_user_folders', 'project_user_folders', 'files', 'folders', 'metadata')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    type = sgqlc.types.Field(FolderType, graphql_name='type')
    color = sgqlc.types.Field(String, graphql_name='color')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredInput', graphql_name='createdBy')
    company_user_folders = sgqlc.types.Field(CompanyUserFolderUpdateManyWithoutFolderInput, graphql_name='companyUserFolders')
    project_user_folders = sgqlc.types.Field('ProjectUserFolderUpdateManyWithoutFolderInput', graphql_name='projectUserFolders')
    files = sgqlc.types.Field(FileUpdateManyWithoutFolderInput, graphql_name='files')
    folders = sgqlc.types.Field(FolderUpdateManyWithoutParentInput, graphql_name='folders')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class FolderUpdateWithoutProjectUserFoldersDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'type', 'color', 'created_by', 'parent', 'company_user_folders', 'files', 'folders', 'metadata')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    type = sgqlc.types.Field(FolderType, graphql_name='type')
    color = sgqlc.types.Field(String, graphql_name='color')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredInput', graphql_name='createdBy')
    parent = sgqlc.types.Field(FolderUpdateOneWithoutFoldersInput, graphql_name='parent')
    company_user_folders = sgqlc.types.Field(CompanyUserFolderUpdateManyWithoutFolderInput, graphql_name='companyUserFolders')
    files = sgqlc.types.Field(FileUpdateManyWithoutFolderInput, graphql_name='files')
    folders = sgqlc.types.Field(FolderUpdateManyWithoutParentInput, graphql_name='folders')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class FolderUpsertWithWhereUniqueWithoutParentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('FolderWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(FolderUpdateWithoutParentDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(FolderCreateWithoutParentInput), graphql_name='create')


class FolderUpsertWithoutCompanyUserFoldersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(FolderUpdateWithoutCompanyUserFoldersDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(FolderCreateWithoutCompanyUserFoldersInput), graphql_name='create')


class FolderUpsertWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(FolderUpdateWithoutFilesDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(FolderCreateWithoutFilesInput), graphql_name='create')


class FolderUpsertWithoutFoldersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(FolderUpdateWithoutFoldersDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(FolderCreateWithoutFoldersInput), graphql_name='create')


class FolderUpsertWithoutProjectUserFoldersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(FolderUpdateWithoutProjectUserFoldersDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(FolderCreateWithoutProjectUserFoldersInput), graphql_name='create')


class FolderWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'title', 'title_not', 'title_in', 'title_not_in', 'title_lt', 'title_lte', 'title_gt', 'title_gte', 'title_contains', 'title_not_contains', 'title_starts_with', 'title_not_starts_with', 'title_ends_with', 'title_not_ends_with', 'type', 'type_not', 'type_in', 'type_not_in', 'color', 'color_not', 'color_in', 'color_not_in', 'color_lt', 'color_lte', 'color_gt', 'color_gte', 'color_contains', 'color_not_contains', 'color_starts_with', 'color_not_starts_with', 'color_ends_with', 'color_not_ends_with', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'created_by', 'parent', 'company_user_folders_every', 'company_user_folders_some', 'company_user_folders_none', 'project_user_folders_every', 'project_user_folders_some', 'project_user_folders_none', 'files_every', 'files_some', 'files_none', 'folders_every', 'folders_some', 'folders_none', 'metadata', 'metadata_not', 'metadata_in', 'metadata_not_in', 'metadata_lt', 'metadata_lte', 'metadata_gt', 'metadata_gte', 'metadata_contains', 'metadata_not_contains', 'metadata_starts_with', 'metadata_not_starts_with', 'metadata_ends_with', 'metadata_not_ends_with', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    title = sgqlc.types.Field(String, graphql_name='title')
    title_not = sgqlc.types.Field(String, graphql_name='title_not')
    title_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_in')
    title_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_not_in')
    title_lt = sgqlc.types.Field(String, graphql_name='title_lt')
    title_lte = sgqlc.types.Field(String, graphql_name='title_lte')
    title_gt = sgqlc.types.Field(String, graphql_name='title_gt')
    title_gte = sgqlc.types.Field(String, graphql_name='title_gte')
    title_contains = sgqlc.types.Field(String, graphql_name='title_contains')
    title_not_contains = sgqlc.types.Field(String, graphql_name='title_not_contains')
    title_starts_with = sgqlc.types.Field(String, graphql_name='title_starts_with')
    title_not_starts_with = sgqlc.types.Field(String, graphql_name='title_not_starts_with')
    title_ends_with = sgqlc.types.Field(String, graphql_name='title_ends_with')
    title_not_ends_with = sgqlc.types.Field(String, graphql_name='title_not_ends_with')
    type = sgqlc.types.Field(FolderType, graphql_name='type')
    type_not = sgqlc.types.Field(FolderType, graphql_name='type_not')
    type_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FolderType)), graphql_name='type_in')
    type_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FolderType)), graphql_name='type_not_in')
    color = sgqlc.types.Field(String, graphql_name='color')
    color_not = sgqlc.types.Field(String, graphql_name='color_not')
    color_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='color_in')
    color_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='color_not_in')
    color_lt = sgqlc.types.Field(String, graphql_name='color_lt')
    color_lte = sgqlc.types.Field(String, graphql_name='color_lte')
    color_gt = sgqlc.types.Field(String, graphql_name='color_gt')
    color_gte = sgqlc.types.Field(String, graphql_name='color_gte')
    color_contains = sgqlc.types.Field(String, graphql_name='color_contains')
    color_not_contains = sgqlc.types.Field(String, graphql_name='color_not_contains')
    color_starts_with = sgqlc.types.Field(String, graphql_name='color_starts_with')
    color_not_starts_with = sgqlc.types.Field(String, graphql_name='color_not_starts_with')
    color_ends_with = sgqlc.types.Field(String, graphql_name='color_ends_with')
    color_not_ends_with = sgqlc.types.Field(String, graphql_name='color_not_ends_with')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    created_by = sgqlc.types.Field('UserWhereInput', graphql_name='createdBy')
    parent = sgqlc.types.Field('FolderWhereInput', graphql_name='parent')
    company_user_folders_every = sgqlc.types.Field(CompanyUserFolderWhereInput, graphql_name='companyUserFolders_every')
    company_user_folders_some = sgqlc.types.Field(CompanyUserFolderWhereInput, graphql_name='companyUserFolders_some')
    company_user_folders_none = sgqlc.types.Field(CompanyUserFolderWhereInput, graphql_name='companyUserFolders_none')
    project_user_folders_every = sgqlc.types.Field('ProjectUserFolderWhereInput', graphql_name='projectUserFolders_every')
    project_user_folders_some = sgqlc.types.Field('ProjectUserFolderWhereInput', graphql_name='projectUserFolders_some')
    project_user_folders_none = sgqlc.types.Field('ProjectUserFolderWhereInput', graphql_name='projectUserFolders_none')
    files_every = sgqlc.types.Field(FileWhereInput, graphql_name='files_every')
    files_some = sgqlc.types.Field(FileWhereInput, graphql_name='files_some')
    files_none = sgqlc.types.Field(FileWhereInput, graphql_name='files_none')
    folders_every = sgqlc.types.Field('FolderWhereInput', graphql_name='folders_every')
    folders_some = sgqlc.types.Field('FolderWhereInput', graphql_name='folders_some')
    folders_none = sgqlc.types.Field('FolderWhereInput', graphql_name='folders_none')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    metadata_not = sgqlc.types.Field(String, graphql_name='metadata_not')
    metadata_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='metadata_in')
    metadata_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='metadata_not_in')
    metadata_lt = sgqlc.types.Field(String, graphql_name='metadata_lt')
    metadata_lte = sgqlc.types.Field(String, graphql_name='metadata_lte')
    metadata_gt = sgqlc.types.Field(String, graphql_name='metadata_gt')
    metadata_gte = sgqlc.types.Field(String, graphql_name='metadata_gte')
    metadata_contains = sgqlc.types.Field(String, graphql_name='metadata_contains')
    metadata_not_contains = sgqlc.types.Field(String, graphql_name='metadata_not_contains')
    metadata_starts_with = sgqlc.types.Field(String, graphql_name='metadata_starts_with')
    metadata_not_starts_with = sgqlc.types.Field(String, graphql_name='metadata_not_starts_with')
    metadata_ends_with = sgqlc.types.Field(String, graphql_name='metadata_ends_with')
    metadata_not_ends_with = sgqlc.types.Field(String, graphql_name='metadata_not_ends_with')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FolderWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FolderWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FolderWhereInput')), graphql_name='NOT')


class FolderWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class FormCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'description', 'is_active', 'theme', 'primary_color', 'hide_branding', 'response_text', 'submit_text', 'image_url', 'redirect_url', 'snapshot_url', 'created_by', 'form_tags', 'form_fields', 'form_users', 'todo_list', 'project')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    description = sgqlc.types.Field(String, graphql_name='description')
    is_active = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isActive')
    theme = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='theme')
    primary_color = sgqlc.types.Field(String, graphql_name='primaryColor')
    hide_branding = sgqlc.types.Field(Boolean, graphql_name='hideBranding')
    response_text = sgqlc.types.Field(String, graphql_name='responseText')
    submit_text = sgqlc.types.Field(String, graphql_name='submitText')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    redirect_url = sgqlc.types.Field(String, graphql_name='redirectURL')
    snapshot_url = sgqlc.types.Field(String, graphql_name='snapshotURL')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutFormsInput'), graphql_name='createdBy')
    form_tags = sgqlc.types.Field('FormTagCreateManyWithoutFormInput', graphql_name='formTags')
    form_fields = sgqlc.types.Field('FormFieldCreateManyWithoutFormInput', graphql_name='formFields')
    form_users = sgqlc.types.Field('FormUserCreateManyWithoutFormInput', graphql_name='formUsers')
    todo_list = sgqlc.types.Field('TodoListCreateOneWithoutFormsInput', graphql_name='todoList')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutFormsInput'), graphql_name='project')


class FormCreateManyWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormCreateWithoutCreatedByInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormWhereUniqueInput')), graphql_name='connect')


class FormCreateManyWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormCreateWithoutProjectInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormWhereUniqueInput')), graphql_name='connect')


class FormCreateManyWithoutTodoListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormCreateWithoutTodoListInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormWhereUniqueInput')), graphql_name='connect')


class FormCreateOneWithoutFormFieldsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('FormCreateWithoutFormFieldsInput', graphql_name='create')
    connect = sgqlc.types.Field('FormWhereUniqueInput', graphql_name='connect')


class FormCreateOneWithoutFormTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('FormCreateWithoutFormTagsInput', graphql_name='create')
    connect = sgqlc.types.Field('FormWhereUniqueInput', graphql_name='connect')


class FormCreateOneWithoutFormUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('FormCreateWithoutFormUsersInput', graphql_name='create')
    connect = sgqlc.types.Field('FormWhereUniqueInput', graphql_name='connect')


class FormCreateWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'description', 'is_active', 'theme', 'primary_color', 'hide_branding', 'response_text', 'submit_text', 'image_url', 'redirect_url', 'snapshot_url', 'form_tags', 'form_fields', 'form_users', 'todo_list', 'project')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    description = sgqlc.types.Field(String, graphql_name='description')
    is_active = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isActive')
    theme = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='theme')
    primary_color = sgqlc.types.Field(String, graphql_name='primaryColor')
    hide_branding = sgqlc.types.Field(Boolean, graphql_name='hideBranding')
    response_text = sgqlc.types.Field(String, graphql_name='responseText')
    submit_text = sgqlc.types.Field(String, graphql_name='submitText')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    redirect_url = sgqlc.types.Field(String, graphql_name='redirectURL')
    snapshot_url = sgqlc.types.Field(String, graphql_name='snapshotURL')
    form_tags = sgqlc.types.Field('FormTagCreateManyWithoutFormInput', graphql_name='formTags')
    form_fields = sgqlc.types.Field('FormFieldCreateManyWithoutFormInput', graphql_name='formFields')
    form_users = sgqlc.types.Field('FormUserCreateManyWithoutFormInput', graphql_name='formUsers')
    todo_list = sgqlc.types.Field('TodoListCreateOneWithoutFormsInput', graphql_name='todoList')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutFormsInput'), graphql_name='project')


class FormCreateWithoutFormFieldsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'description', 'is_active', 'theme', 'primary_color', 'hide_branding', 'response_text', 'submit_text', 'image_url', 'redirect_url', 'snapshot_url', 'created_by', 'form_tags', 'form_users', 'todo_list', 'project')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    description = sgqlc.types.Field(String, graphql_name='description')
    is_active = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isActive')
    theme = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='theme')
    primary_color = sgqlc.types.Field(String, graphql_name='primaryColor')
    hide_branding = sgqlc.types.Field(Boolean, graphql_name='hideBranding')
    response_text = sgqlc.types.Field(String, graphql_name='responseText')
    submit_text = sgqlc.types.Field(String, graphql_name='submitText')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    redirect_url = sgqlc.types.Field(String, graphql_name='redirectURL')
    snapshot_url = sgqlc.types.Field(String, graphql_name='snapshotURL')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutFormsInput'), graphql_name='createdBy')
    form_tags = sgqlc.types.Field('FormTagCreateManyWithoutFormInput', graphql_name='formTags')
    form_users = sgqlc.types.Field('FormUserCreateManyWithoutFormInput', graphql_name='formUsers')
    todo_list = sgqlc.types.Field('TodoListCreateOneWithoutFormsInput', graphql_name='todoList')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutFormsInput'), graphql_name='project')


class FormCreateWithoutFormTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'description', 'is_active', 'theme', 'primary_color', 'hide_branding', 'response_text', 'submit_text', 'image_url', 'redirect_url', 'snapshot_url', 'created_by', 'form_fields', 'form_users', 'todo_list', 'project')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    description = sgqlc.types.Field(String, graphql_name='description')
    is_active = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isActive')
    theme = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='theme')
    primary_color = sgqlc.types.Field(String, graphql_name='primaryColor')
    hide_branding = sgqlc.types.Field(Boolean, graphql_name='hideBranding')
    response_text = sgqlc.types.Field(String, graphql_name='responseText')
    submit_text = sgqlc.types.Field(String, graphql_name='submitText')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    redirect_url = sgqlc.types.Field(String, graphql_name='redirectURL')
    snapshot_url = sgqlc.types.Field(String, graphql_name='snapshotURL')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutFormsInput'), graphql_name='createdBy')
    form_fields = sgqlc.types.Field('FormFieldCreateManyWithoutFormInput', graphql_name='formFields')
    form_users = sgqlc.types.Field('FormUserCreateManyWithoutFormInput', graphql_name='formUsers')
    todo_list = sgqlc.types.Field('TodoListCreateOneWithoutFormsInput', graphql_name='todoList')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutFormsInput'), graphql_name='project')


class FormCreateWithoutFormUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'description', 'is_active', 'theme', 'primary_color', 'hide_branding', 'response_text', 'submit_text', 'image_url', 'redirect_url', 'snapshot_url', 'created_by', 'form_tags', 'form_fields', 'todo_list', 'project')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    description = sgqlc.types.Field(String, graphql_name='description')
    is_active = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isActive')
    theme = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='theme')
    primary_color = sgqlc.types.Field(String, graphql_name='primaryColor')
    hide_branding = sgqlc.types.Field(Boolean, graphql_name='hideBranding')
    response_text = sgqlc.types.Field(String, graphql_name='responseText')
    submit_text = sgqlc.types.Field(String, graphql_name='submitText')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    redirect_url = sgqlc.types.Field(String, graphql_name='redirectURL')
    snapshot_url = sgqlc.types.Field(String, graphql_name='snapshotURL')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutFormsInput'), graphql_name='createdBy')
    form_tags = sgqlc.types.Field('FormTagCreateManyWithoutFormInput', graphql_name='formTags')
    form_fields = sgqlc.types.Field('FormFieldCreateManyWithoutFormInput', graphql_name='formFields')
    todo_list = sgqlc.types.Field('TodoListCreateOneWithoutFormsInput', graphql_name='todoList')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutFormsInput'), graphql_name='project')


class FormCreateWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'description', 'is_active', 'theme', 'primary_color', 'hide_branding', 'response_text', 'submit_text', 'image_url', 'redirect_url', 'snapshot_url', 'created_by', 'form_tags', 'form_fields', 'form_users', 'todo_list')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    description = sgqlc.types.Field(String, graphql_name='description')
    is_active = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isActive')
    theme = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='theme')
    primary_color = sgqlc.types.Field(String, graphql_name='primaryColor')
    hide_branding = sgqlc.types.Field(Boolean, graphql_name='hideBranding')
    response_text = sgqlc.types.Field(String, graphql_name='responseText')
    submit_text = sgqlc.types.Field(String, graphql_name='submitText')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    redirect_url = sgqlc.types.Field(String, graphql_name='redirectURL')
    snapshot_url = sgqlc.types.Field(String, graphql_name='snapshotURL')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutFormsInput'), graphql_name='createdBy')
    form_tags = sgqlc.types.Field('FormTagCreateManyWithoutFormInput', graphql_name='formTags')
    form_fields = sgqlc.types.Field('FormFieldCreateManyWithoutFormInput', graphql_name='formFields')
    form_users = sgqlc.types.Field('FormUserCreateManyWithoutFormInput', graphql_name='formUsers')
    todo_list = sgqlc.types.Field('TodoListCreateOneWithoutFormsInput', graphql_name='todoList')


class FormCreateWithoutTodoListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'description', 'is_active', 'theme', 'primary_color', 'hide_branding', 'response_text', 'submit_text', 'image_url', 'redirect_url', 'snapshot_url', 'created_by', 'form_tags', 'form_fields', 'form_users', 'project')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    description = sgqlc.types.Field(String, graphql_name='description')
    is_active = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isActive')
    theme = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='theme')
    primary_color = sgqlc.types.Field(String, graphql_name='primaryColor')
    hide_branding = sgqlc.types.Field(Boolean, graphql_name='hideBranding')
    response_text = sgqlc.types.Field(String, graphql_name='responseText')
    submit_text = sgqlc.types.Field(String, graphql_name='submitText')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    redirect_url = sgqlc.types.Field(String, graphql_name='redirectURL')
    snapshot_url = sgqlc.types.Field(String, graphql_name='snapshotURL')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutFormsInput'), graphql_name='createdBy')
    form_tags = sgqlc.types.Field('FormTagCreateManyWithoutFormInput', graphql_name='formTags')
    form_fields = sgqlc.types.Field('FormFieldCreateManyWithoutFormInput', graphql_name='formFields')
    form_users = sgqlc.types.Field('FormUserCreateManyWithoutFormInput', graphql_name='formUsers')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutFormsInput'), graphql_name='project')


class FormFieldCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'placeholder', 'required', 'hidden', 'extra_info', 'add_to_description', 'field', 'position', 'custom_field', 'form')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    placeholder = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='placeholder')
    required = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='required')
    hidden = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hidden')
    extra_info = sgqlc.types.Field(String, graphql_name='extraInfo')
    add_to_description = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='addToDescription')
    field = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='field')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    custom_field = sgqlc.types.Field(CustomFieldCreateOneWithoutFormFieldsInput, graphql_name='customField')
    form = sgqlc.types.Field(sgqlc.types.non_null(FormCreateOneWithoutFormFieldsInput), graphql_name='form')


class FormFieldCreateManyWithoutCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormFieldCreateWithoutCustomFieldInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormFieldWhereUniqueInput')), graphql_name='connect')


class FormFieldCreateManyWithoutFormInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormFieldCreateWithoutFormInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormFieldWhereUniqueInput')), graphql_name='connect')


class FormFieldCreateWithoutCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'placeholder', 'required', 'hidden', 'extra_info', 'add_to_description', 'field', 'position', 'form')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    placeholder = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='placeholder')
    required = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='required')
    hidden = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hidden')
    extra_info = sgqlc.types.Field(String, graphql_name='extraInfo')
    add_to_description = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='addToDescription')
    field = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='field')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    form = sgqlc.types.Field(sgqlc.types.non_null(FormCreateOneWithoutFormFieldsInput), graphql_name='form')


class FormFieldCreateWithoutFormInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'placeholder', 'required', 'hidden', 'extra_info', 'add_to_description', 'field', 'position', 'custom_field')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    placeholder = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='placeholder')
    required = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='required')
    hidden = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hidden')
    extra_info = sgqlc.types.Field(String, graphql_name='extraInfo')
    add_to_description = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='addToDescription')
    field = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='field')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    custom_field = sgqlc.types.Field(CustomFieldCreateOneWithoutFormFieldsInput, graphql_name='customField')


class FormFieldFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('form_id',)
    form_id = sgqlc.types.Field(String, graphql_name='formId')


class FormFieldScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'name', 'name_not', 'name_in', 'name_not_in', 'name_lt', 'name_lte', 'name_gt', 'name_gte', 'name_contains', 'name_not_contains', 'name_starts_with', 'name_not_starts_with', 'name_ends_with', 'name_not_ends_with', 'placeholder', 'placeholder_not', 'placeholder_in', 'placeholder_not_in', 'placeholder_lt', 'placeholder_lte', 'placeholder_gt', 'placeholder_gte', 'placeholder_contains', 'placeholder_not_contains', 'placeholder_starts_with', 'placeholder_not_starts_with', 'placeholder_ends_with', 'placeholder_not_ends_with', 'required', 'required_not', 'hidden', 'hidden_not', 'extra_info', 'extra_info_not', 'extra_info_in', 'extra_info_not_in', 'extra_info_lt', 'extra_info_lte', 'extra_info_gt', 'extra_info_gte', 'extra_info_contains', 'extra_info_not_contains', 'extra_info_starts_with', 'extra_info_not_starts_with', 'extra_info_ends_with', 'extra_info_not_ends_with', 'add_to_description', 'add_to_description_not', 'field', 'field_not', 'field_in', 'field_not_in', 'field_lt', 'field_lte', 'field_gt', 'field_gte', 'field_contains', 'field_not_contains', 'field_starts_with', 'field_not_starts_with', 'field_ends_with', 'field_not_ends_with', 'position', 'position_not', 'position_in', 'position_not_in', 'position_lt', 'position_lte', 'position_gt', 'position_gte', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    name = sgqlc.types.Field(String, graphql_name='name')
    name_not = sgqlc.types.Field(String, graphql_name='name_not')
    name_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='name_in')
    name_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='name_not_in')
    name_lt = sgqlc.types.Field(String, graphql_name='name_lt')
    name_lte = sgqlc.types.Field(String, graphql_name='name_lte')
    name_gt = sgqlc.types.Field(String, graphql_name='name_gt')
    name_gte = sgqlc.types.Field(String, graphql_name='name_gte')
    name_contains = sgqlc.types.Field(String, graphql_name='name_contains')
    name_not_contains = sgqlc.types.Field(String, graphql_name='name_not_contains')
    name_starts_with = sgqlc.types.Field(String, graphql_name='name_starts_with')
    name_not_starts_with = sgqlc.types.Field(String, graphql_name='name_not_starts_with')
    name_ends_with = sgqlc.types.Field(String, graphql_name='name_ends_with')
    name_not_ends_with = sgqlc.types.Field(String, graphql_name='name_not_ends_with')
    placeholder = sgqlc.types.Field(String, graphql_name='placeholder')
    placeholder_not = sgqlc.types.Field(String, graphql_name='placeholder_not')
    placeholder_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='placeholder_in')
    placeholder_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='placeholder_not_in')
    placeholder_lt = sgqlc.types.Field(String, graphql_name='placeholder_lt')
    placeholder_lte = sgqlc.types.Field(String, graphql_name='placeholder_lte')
    placeholder_gt = sgqlc.types.Field(String, graphql_name='placeholder_gt')
    placeholder_gte = sgqlc.types.Field(String, graphql_name='placeholder_gte')
    placeholder_contains = sgqlc.types.Field(String, graphql_name='placeholder_contains')
    placeholder_not_contains = sgqlc.types.Field(String, graphql_name='placeholder_not_contains')
    placeholder_starts_with = sgqlc.types.Field(String, graphql_name='placeholder_starts_with')
    placeholder_not_starts_with = sgqlc.types.Field(String, graphql_name='placeholder_not_starts_with')
    placeholder_ends_with = sgqlc.types.Field(String, graphql_name='placeholder_ends_with')
    placeholder_not_ends_with = sgqlc.types.Field(String, graphql_name='placeholder_not_ends_with')
    required = sgqlc.types.Field(Boolean, graphql_name='required')
    required_not = sgqlc.types.Field(Boolean, graphql_name='required_not')
    hidden = sgqlc.types.Field(Boolean, graphql_name='hidden')
    hidden_not = sgqlc.types.Field(Boolean, graphql_name='hidden_not')
    extra_info = sgqlc.types.Field(String, graphql_name='extraInfo')
    extra_info_not = sgqlc.types.Field(String, graphql_name='extraInfo_not')
    extra_info_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='extraInfo_in')
    extra_info_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='extraInfo_not_in')
    extra_info_lt = sgqlc.types.Field(String, graphql_name='extraInfo_lt')
    extra_info_lte = sgqlc.types.Field(String, graphql_name='extraInfo_lte')
    extra_info_gt = sgqlc.types.Field(String, graphql_name='extraInfo_gt')
    extra_info_gte = sgqlc.types.Field(String, graphql_name='extraInfo_gte')
    extra_info_contains = sgqlc.types.Field(String, graphql_name='extraInfo_contains')
    extra_info_not_contains = sgqlc.types.Field(String, graphql_name='extraInfo_not_contains')
    extra_info_starts_with = sgqlc.types.Field(String, graphql_name='extraInfo_starts_with')
    extra_info_not_starts_with = sgqlc.types.Field(String, graphql_name='extraInfo_not_starts_with')
    extra_info_ends_with = sgqlc.types.Field(String, graphql_name='extraInfo_ends_with')
    extra_info_not_ends_with = sgqlc.types.Field(String, graphql_name='extraInfo_not_ends_with')
    add_to_description = sgqlc.types.Field(Boolean, graphql_name='addToDescription')
    add_to_description_not = sgqlc.types.Field(Boolean, graphql_name='addToDescription_not')
    field = sgqlc.types.Field(String, graphql_name='field')
    field_not = sgqlc.types.Field(String, graphql_name='field_not')
    field_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='field_in')
    field_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='field_not_in')
    field_lt = sgqlc.types.Field(String, graphql_name='field_lt')
    field_lte = sgqlc.types.Field(String, graphql_name='field_lte')
    field_gt = sgqlc.types.Field(String, graphql_name='field_gt')
    field_gte = sgqlc.types.Field(String, graphql_name='field_gte')
    field_contains = sgqlc.types.Field(String, graphql_name='field_contains')
    field_not_contains = sgqlc.types.Field(String, graphql_name='field_not_contains')
    field_starts_with = sgqlc.types.Field(String, graphql_name='field_starts_with')
    field_not_starts_with = sgqlc.types.Field(String, graphql_name='field_not_starts_with')
    field_ends_with = sgqlc.types.Field(String, graphql_name='field_ends_with')
    field_not_ends_with = sgqlc.types.Field(String, graphql_name='field_not_ends_with')
    position = sgqlc.types.Field(Float, graphql_name='position')
    position_not = sgqlc.types.Field(Float, graphql_name='position_not')
    position_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_in')
    position_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_not_in')
    position_lt = sgqlc.types.Field(Float, graphql_name='position_lt')
    position_lte = sgqlc.types.Field(Float, graphql_name='position_lte')
    position_gt = sgqlc.types.Field(Float, graphql_name='position_gt')
    position_gte = sgqlc.types.Field(Float, graphql_name='position_gte')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormFieldScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormFieldScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormFieldScalarWhereInput')), graphql_name='NOT')


class FormFieldSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('FormFieldWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormFieldSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormFieldSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormFieldSubscriptionWhereInput')), graphql_name='NOT')


class FormFieldUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'placeholder', 'required', 'hidden', 'extra_info', 'add_to_description', 'field', 'position', 'custom_field', 'form')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    placeholder = sgqlc.types.Field(String, graphql_name='placeholder')
    required = sgqlc.types.Field(Boolean, graphql_name='required')
    hidden = sgqlc.types.Field(Boolean, graphql_name='hidden')
    extra_info = sgqlc.types.Field(String, graphql_name='extraInfo')
    add_to_description = sgqlc.types.Field(Boolean, graphql_name='addToDescription')
    field = sgqlc.types.Field(String, graphql_name='field')
    position = sgqlc.types.Field(Float, graphql_name='position')
    custom_field = sgqlc.types.Field(CustomFieldUpdateOneWithoutFormFieldsInput, graphql_name='customField')
    form = sgqlc.types.Field('FormUpdateOneRequiredWithoutFormFieldsInput', graphql_name='form')


class FormFieldUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'placeholder', 'required', 'hidden', 'extra_info', 'add_to_description', 'field', 'position')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    placeholder = sgqlc.types.Field(String, graphql_name='placeholder')
    required = sgqlc.types.Field(Boolean, graphql_name='required')
    hidden = sgqlc.types.Field(Boolean, graphql_name='hidden')
    extra_info = sgqlc.types.Field(String, graphql_name='extraInfo')
    add_to_description = sgqlc.types.Field(Boolean, graphql_name='addToDescription')
    field = sgqlc.types.Field(String, graphql_name='field')
    position = sgqlc.types.Field(Float, graphql_name='position')


class FormFieldUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'placeholder', 'required', 'hidden', 'extra_info', 'add_to_description', 'field', 'position')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    placeholder = sgqlc.types.Field(String, graphql_name='placeholder')
    required = sgqlc.types.Field(Boolean, graphql_name='required')
    hidden = sgqlc.types.Field(Boolean, graphql_name='hidden')
    extra_info = sgqlc.types.Field(String, graphql_name='extraInfo')
    add_to_description = sgqlc.types.Field(Boolean, graphql_name='addToDescription')
    field = sgqlc.types.Field(String, graphql_name='field')
    position = sgqlc.types.Field(Float, graphql_name='position')


class FormFieldUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(FormFieldScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(FormFieldUpdateManyDataInput), graphql_name='data')


class FormFieldUpdateManyWithoutCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FormFieldCreateWithoutCustomFieldInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormFieldWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormFieldWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormFieldWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormFieldWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormFieldUpdateWithWhereUniqueWithoutCustomFieldInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormFieldUpsertWithWhereUniqueWithoutCustomFieldInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FormFieldScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FormFieldUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class FormFieldUpdateManyWithoutFormInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FormFieldCreateWithoutFormInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormFieldWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormFieldWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormFieldWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormFieldWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormFieldUpdateWithWhereUniqueWithoutFormInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormFieldUpsertWithWhereUniqueWithoutFormInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FormFieldScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FormFieldUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class FormFieldUpdateWithWhereUniqueWithoutCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('FormFieldWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('FormFieldUpdateWithoutCustomFieldDataInput'), graphql_name='data')


class FormFieldUpdateWithWhereUniqueWithoutFormInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('FormFieldWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('FormFieldUpdateWithoutFormDataInput'), graphql_name='data')


class FormFieldUpdateWithoutCustomFieldDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'placeholder', 'required', 'hidden', 'extra_info', 'add_to_description', 'field', 'position', 'form')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    placeholder = sgqlc.types.Field(String, graphql_name='placeholder')
    required = sgqlc.types.Field(Boolean, graphql_name='required')
    hidden = sgqlc.types.Field(Boolean, graphql_name='hidden')
    extra_info = sgqlc.types.Field(String, graphql_name='extraInfo')
    add_to_description = sgqlc.types.Field(Boolean, graphql_name='addToDescription')
    field = sgqlc.types.Field(String, graphql_name='field')
    position = sgqlc.types.Field(Float, graphql_name='position')
    form = sgqlc.types.Field('FormUpdateOneRequiredWithoutFormFieldsInput', graphql_name='form')


class FormFieldUpdateWithoutFormDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'placeholder', 'required', 'hidden', 'extra_info', 'add_to_description', 'field', 'position', 'custom_field')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    placeholder = sgqlc.types.Field(String, graphql_name='placeholder')
    required = sgqlc.types.Field(Boolean, graphql_name='required')
    hidden = sgqlc.types.Field(Boolean, graphql_name='hidden')
    extra_info = sgqlc.types.Field(String, graphql_name='extraInfo')
    add_to_description = sgqlc.types.Field(Boolean, graphql_name='addToDescription')
    field = sgqlc.types.Field(String, graphql_name='field')
    position = sgqlc.types.Field(Float, graphql_name='position')
    custom_field = sgqlc.types.Field(CustomFieldUpdateOneWithoutFormFieldsInput, graphql_name='customField')


class FormFieldUpsertWithWhereUniqueWithoutCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('FormFieldWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(FormFieldUpdateWithoutCustomFieldDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(FormFieldCreateWithoutCustomFieldInput), graphql_name='create')


class FormFieldUpsertWithWhereUniqueWithoutFormInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('FormFieldWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(FormFieldUpdateWithoutFormDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(FormFieldCreateWithoutFormInput), graphql_name='create')


class FormFieldWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'name', 'name_not', 'name_in', 'name_not_in', 'name_lt', 'name_lte', 'name_gt', 'name_gte', 'name_contains', 'name_not_contains', 'name_starts_with', 'name_not_starts_with', 'name_ends_with', 'name_not_ends_with', 'placeholder', 'placeholder_not', 'placeholder_in', 'placeholder_not_in', 'placeholder_lt', 'placeholder_lte', 'placeholder_gt', 'placeholder_gte', 'placeholder_contains', 'placeholder_not_contains', 'placeholder_starts_with', 'placeholder_not_starts_with', 'placeholder_ends_with', 'placeholder_not_ends_with', 'required', 'required_not', 'hidden', 'hidden_not', 'extra_info', 'extra_info_not', 'extra_info_in', 'extra_info_not_in', 'extra_info_lt', 'extra_info_lte', 'extra_info_gt', 'extra_info_gte', 'extra_info_contains', 'extra_info_not_contains', 'extra_info_starts_with', 'extra_info_not_starts_with', 'extra_info_ends_with', 'extra_info_not_ends_with', 'add_to_description', 'add_to_description_not', 'field', 'field_not', 'field_in', 'field_not_in', 'field_lt', 'field_lte', 'field_gt', 'field_gte', 'field_contains', 'field_not_contains', 'field_starts_with', 'field_not_starts_with', 'field_ends_with', 'field_not_ends_with', 'position', 'position_not', 'position_in', 'position_not_in', 'position_lt', 'position_lte', 'position_gt', 'position_gte', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'custom_field', 'form', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    name = sgqlc.types.Field(String, graphql_name='name')
    name_not = sgqlc.types.Field(String, graphql_name='name_not')
    name_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='name_in')
    name_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='name_not_in')
    name_lt = sgqlc.types.Field(String, graphql_name='name_lt')
    name_lte = sgqlc.types.Field(String, graphql_name='name_lte')
    name_gt = sgqlc.types.Field(String, graphql_name='name_gt')
    name_gte = sgqlc.types.Field(String, graphql_name='name_gte')
    name_contains = sgqlc.types.Field(String, graphql_name='name_contains')
    name_not_contains = sgqlc.types.Field(String, graphql_name='name_not_contains')
    name_starts_with = sgqlc.types.Field(String, graphql_name='name_starts_with')
    name_not_starts_with = sgqlc.types.Field(String, graphql_name='name_not_starts_with')
    name_ends_with = sgqlc.types.Field(String, graphql_name='name_ends_with')
    name_not_ends_with = sgqlc.types.Field(String, graphql_name='name_not_ends_with')
    placeholder = sgqlc.types.Field(String, graphql_name='placeholder')
    placeholder_not = sgqlc.types.Field(String, graphql_name='placeholder_not')
    placeholder_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='placeholder_in')
    placeholder_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='placeholder_not_in')
    placeholder_lt = sgqlc.types.Field(String, graphql_name='placeholder_lt')
    placeholder_lte = sgqlc.types.Field(String, graphql_name='placeholder_lte')
    placeholder_gt = sgqlc.types.Field(String, graphql_name='placeholder_gt')
    placeholder_gte = sgqlc.types.Field(String, graphql_name='placeholder_gte')
    placeholder_contains = sgqlc.types.Field(String, graphql_name='placeholder_contains')
    placeholder_not_contains = sgqlc.types.Field(String, graphql_name='placeholder_not_contains')
    placeholder_starts_with = sgqlc.types.Field(String, graphql_name='placeholder_starts_with')
    placeholder_not_starts_with = sgqlc.types.Field(String, graphql_name='placeholder_not_starts_with')
    placeholder_ends_with = sgqlc.types.Field(String, graphql_name='placeholder_ends_with')
    placeholder_not_ends_with = sgqlc.types.Field(String, graphql_name='placeholder_not_ends_with')
    required = sgqlc.types.Field(Boolean, graphql_name='required')
    required_not = sgqlc.types.Field(Boolean, graphql_name='required_not')
    hidden = sgqlc.types.Field(Boolean, graphql_name='hidden')
    hidden_not = sgqlc.types.Field(Boolean, graphql_name='hidden_not')
    extra_info = sgqlc.types.Field(String, graphql_name='extraInfo')
    extra_info_not = sgqlc.types.Field(String, graphql_name='extraInfo_not')
    extra_info_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='extraInfo_in')
    extra_info_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='extraInfo_not_in')
    extra_info_lt = sgqlc.types.Field(String, graphql_name='extraInfo_lt')
    extra_info_lte = sgqlc.types.Field(String, graphql_name='extraInfo_lte')
    extra_info_gt = sgqlc.types.Field(String, graphql_name='extraInfo_gt')
    extra_info_gte = sgqlc.types.Field(String, graphql_name='extraInfo_gte')
    extra_info_contains = sgqlc.types.Field(String, graphql_name='extraInfo_contains')
    extra_info_not_contains = sgqlc.types.Field(String, graphql_name='extraInfo_not_contains')
    extra_info_starts_with = sgqlc.types.Field(String, graphql_name='extraInfo_starts_with')
    extra_info_not_starts_with = sgqlc.types.Field(String, graphql_name='extraInfo_not_starts_with')
    extra_info_ends_with = sgqlc.types.Field(String, graphql_name='extraInfo_ends_with')
    extra_info_not_ends_with = sgqlc.types.Field(String, graphql_name='extraInfo_not_ends_with')
    add_to_description = sgqlc.types.Field(Boolean, graphql_name='addToDescription')
    add_to_description_not = sgqlc.types.Field(Boolean, graphql_name='addToDescription_not')
    field = sgqlc.types.Field(String, graphql_name='field')
    field_not = sgqlc.types.Field(String, graphql_name='field_not')
    field_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='field_in')
    field_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='field_not_in')
    field_lt = sgqlc.types.Field(String, graphql_name='field_lt')
    field_lte = sgqlc.types.Field(String, graphql_name='field_lte')
    field_gt = sgqlc.types.Field(String, graphql_name='field_gt')
    field_gte = sgqlc.types.Field(String, graphql_name='field_gte')
    field_contains = sgqlc.types.Field(String, graphql_name='field_contains')
    field_not_contains = sgqlc.types.Field(String, graphql_name='field_not_contains')
    field_starts_with = sgqlc.types.Field(String, graphql_name='field_starts_with')
    field_not_starts_with = sgqlc.types.Field(String, graphql_name='field_not_starts_with')
    field_ends_with = sgqlc.types.Field(String, graphql_name='field_ends_with')
    field_not_ends_with = sgqlc.types.Field(String, graphql_name='field_not_ends_with')
    position = sgqlc.types.Field(Float, graphql_name='position')
    position_not = sgqlc.types.Field(Float, graphql_name='position_not')
    position_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_in')
    position_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_not_in')
    position_lt = sgqlc.types.Field(Float, graphql_name='position_lt')
    position_lte = sgqlc.types.Field(Float, graphql_name='position_lte')
    position_gt = sgqlc.types.Field(Float, graphql_name='position_gt')
    position_gte = sgqlc.types.Field(Float, graphql_name='position_gte')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    custom_field = sgqlc.types.Field(CustomFieldWhereInput, graphql_name='customField')
    form = sgqlc.types.Field('FormWhereInput', graphql_name='form')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormFieldWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormFieldWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormFieldWhereInput')), graphql_name='NOT')


class FormFieldWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class FormFieldsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('name', 'placeholder', 'field', 'position', 'required', 'hidden', 'extra_info', 'add_to_description')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    placeholder = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='placeholder')
    field = sgqlc.types.Field(sgqlc.types.non_null(FormFieldsField), graphql_name='field')
    position = sgqlc.types.Field(Float, graphql_name='position')
    required = sgqlc.types.Field(Boolean, graphql_name='required')
    hidden = sgqlc.types.Field(Boolean, graphql_name='hidden')
    extra_info = sgqlc.types.Field(String, graphql_name='extraInfo')
    add_to_description = sgqlc.types.Field(Boolean, graphql_name='addToDescription')


class FormFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id',)
    project_id = sgqlc.types.Field(String, graphql_name='projectId')


class FormScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'title', 'title_not', 'title_in', 'title_not_in', 'title_lt', 'title_lte', 'title_gt', 'title_gte', 'title_contains', 'title_not_contains', 'title_starts_with', 'title_not_starts_with', 'title_ends_with', 'title_not_ends_with', 'description', 'description_not', 'description_in', 'description_not_in', 'description_lt', 'description_lte', 'description_gt', 'description_gte', 'description_contains', 'description_not_contains', 'description_starts_with', 'description_not_starts_with', 'description_ends_with', 'description_not_ends_with', 'is_active', 'is_active_not', 'theme', 'theme_not', 'theme_in', 'theme_not_in', 'theme_lt', 'theme_lte', 'theme_gt', 'theme_gte', 'theme_contains', 'theme_not_contains', 'theme_starts_with', 'theme_not_starts_with', 'theme_ends_with', 'theme_not_ends_with', 'primary_color', 'primary_color_not', 'primary_color_in', 'primary_color_not_in', 'primary_color_lt', 'primary_color_lte', 'primary_color_gt', 'primary_color_gte', 'primary_color_contains', 'primary_color_not_contains', 'primary_color_starts_with', 'primary_color_not_starts_with', 'primary_color_ends_with', 'primary_color_not_ends_with', 'hide_branding', 'hide_branding_not', 'response_text', 'response_text_not', 'response_text_in', 'response_text_not_in', 'response_text_lt', 'response_text_lte', 'response_text_gt', 'response_text_gte', 'response_text_contains', 'response_text_not_contains', 'response_text_starts_with', 'response_text_not_starts_with', 'response_text_ends_with', 'response_text_not_ends_with', 'submit_text', 'submit_text_not', 'submit_text_in', 'submit_text_not_in', 'submit_text_lt', 'submit_text_lte', 'submit_text_gt', 'submit_text_gte', 'submit_text_contains', 'submit_text_not_contains', 'submit_text_starts_with', 'submit_text_not_starts_with', 'submit_text_ends_with', 'submit_text_not_ends_with', 'image_url', 'image_url_not', 'image_url_in', 'image_url_not_in', 'image_url_lt', 'image_url_lte', 'image_url_gt', 'image_url_gte', 'image_url_contains', 'image_url_not_contains', 'image_url_starts_with', 'image_url_not_starts_with', 'image_url_ends_with', 'image_url_not_ends_with', 'redirect_url', 'redirect_url_not', 'redirect_url_in', 'redirect_url_not_in', 'redirect_url_lt', 'redirect_url_lte', 'redirect_url_gt', 'redirect_url_gte', 'redirect_url_contains', 'redirect_url_not_contains', 'redirect_url_starts_with', 'redirect_url_not_starts_with', 'redirect_url_ends_with', 'redirect_url_not_ends_with', 'snapshot_url', 'snapshot_url_not', 'snapshot_url_in', 'snapshot_url_not_in', 'snapshot_url_lt', 'snapshot_url_lte', 'snapshot_url_gt', 'snapshot_url_gte', 'snapshot_url_contains', 'snapshot_url_not_contains', 'snapshot_url_starts_with', 'snapshot_url_not_starts_with', 'snapshot_url_ends_with', 'snapshot_url_not_ends_with', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    title = sgqlc.types.Field(String, graphql_name='title')
    title_not = sgqlc.types.Field(String, graphql_name='title_not')
    title_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_in')
    title_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_not_in')
    title_lt = sgqlc.types.Field(String, graphql_name='title_lt')
    title_lte = sgqlc.types.Field(String, graphql_name='title_lte')
    title_gt = sgqlc.types.Field(String, graphql_name='title_gt')
    title_gte = sgqlc.types.Field(String, graphql_name='title_gte')
    title_contains = sgqlc.types.Field(String, graphql_name='title_contains')
    title_not_contains = sgqlc.types.Field(String, graphql_name='title_not_contains')
    title_starts_with = sgqlc.types.Field(String, graphql_name='title_starts_with')
    title_not_starts_with = sgqlc.types.Field(String, graphql_name='title_not_starts_with')
    title_ends_with = sgqlc.types.Field(String, graphql_name='title_ends_with')
    title_not_ends_with = sgqlc.types.Field(String, graphql_name='title_not_ends_with')
    description = sgqlc.types.Field(String, graphql_name='description')
    description_not = sgqlc.types.Field(String, graphql_name='description_not')
    description_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='description_in')
    description_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='description_not_in')
    description_lt = sgqlc.types.Field(String, graphql_name='description_lt')
    description_lte = sgqlc.types.Field(String, graphql_name='description_lte')
    description_gt = sgqlc.types.Field(String, graphql_name='description_gt')
    description_gte = sgqlc.types.Field(String, graphql_name='description_gte')
    description_contains = sgqlc.types.Field(String, graphql_name='description_contains')
    description_not_contains = sgqlc.types.Field(String, graphql_name='description_not_contains')
    description_starts_with = sgqlc.types.Field(String, graphql_name='description_starts_with')
    description_not_starts_with = sgqlc.types.Field(String, graphql_name='description_not_starts_with')
    description_ends_with = sgqlc.types.Field(String, graphql_name='description_ends_with')
    description_not_ends_with = sgqlc.types.Field(String, graphql_name='description_not_ends_with')
    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    is_active_not = sgqlc.types.Field(Boolean, graphql_name='isActive_not')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    theme_not = sgqlc.types.Field(String, graphql_name='theme_not')
    theme_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='theme_in')
    theme_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='theme_not_in')
    theme_lt = sgqlc.types.Field(String, graphql_name='theme_lt')
    theme_lte = sgqlc.types.Field(String, graphql_name='theme_lte')
    theme_gt = sgqlc.types.Field(String, graphql_name='theme_gt')
    theme_gte = sgqlc.types.Field(String, graphql_name='theme_gte')
    theme_contains = sgqlc.types.Field(String, graphql_name='theme_contains')
    theme_not_contains = sgqlc.types.Field(String, graphql_name='theme_not_contains')
    theme_starts_with = sgqlc.types.Field(String, graphql_name='theme_starts_with')
    theme_not_starts_with = sgqlc.types.Field(String, graphql_name='theme_not_starts_with')
    theme_ends_with = sgqlc.types.Field(String, graphql_name='theme_ends_with')
    theme_not_ends_with = sgqlc.types.Field(String, graphql_name='theme_not_ends_with')
    primary_color = sgqlc.types.Field(String, graphql_name='primaryColor')
    primary_color_not = sgqlc.types.Field(String, graphql_name='primaryColor_not')
    primary_color_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='primaryColor_in')
    primary_color_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='primaryColor_not_in')
    primary_color_lt = sgqlc.types.Field(String, graphql_name='primaryColor_lt')
    primary_color_lte = sgqlc.types.Field(String, graphql_name='primaryColor_lte')
    primary_color_gt = sgqlc.types.Field(String, graphql_name='primaryColor_gt')
    primary_color_gte = sgqlc.types.Field(String, graphql_name='primaryColor_gte')
    primary_color_contains = sgqlc.types.Field(String, graphql_name='primaryColor_contains')
    primary_color_not_contains = sgqlc.types.Field(String, graphql_name='primaryColor_not_contains')
    primary_color_starts_with = sgqlc.types.Field(String, graphql_name='primaryColor_starts_with')
    primary_color_not_starts_with = sgqlc.types.Field(String, graphql_name='primaryColor_not_starts_with')
    primary_color_ends_with = sgqlc.types.Field(String, graphql_name='primaryColor_ends_with')
    primary_color_not_ends_with = sgqlc.types.Field(String, graphql_name='primaryColor_not_ends_with')
    hide_branding = sgqlc.types.Field(Boolean, graphql_name='hideBranding')
    hide_branding_not = sgqlc.types.Field(Boolean, graphql_name='hideBranding_not')
    response_text = sgqlc.types.Field(String, graphql_name='responseText')
    response_text_not = sgqlc.types.Field(String, graphql_name='responseText_not')
    response_text_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='responseText_in')
    response_text_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='responseText_not_in')
    response_text_lt = sgqlc.types.Field(String, graphql_name='responseText_lt')
    response_text_lte = sgqlc.types.Field(String, graphql_name='responseText_lte')
    response_text_gt = sgqlc.types.Field(String, graphql_name='responseText_gt')
    response_text_gte = sgqlc.types.Field(String, graphql_name='responseText_gte')
    response_text_contains = sgqlc.types.Field(String, graphql_name='responseText_contains')
    response_text_not_contains = sgqlc.types.Field(String, graphql_name='responseText_not_contains')
    response_text_starts_with = sgqlc.types.Field(String, graphql_name='responseText_starts_with')
    response_text_not_starts_with = sgqlc.types.Field(String, graphql_name='responseText_not_starts_with')
    response_text_ends_with = sgqlc.types.Field(String, graphql_name='responseText_ends_with')
    response_text_not_ends_with = sgqlc.types.Field(String, graphql_name='responseText_not_ends_with')
    submit_text = sgqlc.types.Field(String, graphql_name='submitText')
    submit_text_not = sgqlc.types.Field(String, graphql_name='submitText_not')
    submit_text_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='submitText_in')
    submit_text_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='submitText_not_in')
    submit_text_lt = sgqlc.types.Field(String, graphql_name='submitText_lt')
    submit_text_lte = sgqlc.types.Field(String, graphql_name='submitText_lte')
    submit_text_gt = sgqlc.types.Field(String, graphql_name='submitText_gt')
    submit_text_gte = sgqlc.types.Field(String, graphql_name='submitText_gte')
    submit_text_contains = sgqlc.types.Field(String, graphql_name='submitText_contains')
    submit_text_not_contains = sgqlc.types.Field(String, graphql_name='submitText_not_contains')
    submit_text_starts_with = sgqlc.types.Field(String, graphql_name='submitText_starts_with')
    submit_text_not_starts_with = sgqlc.types.Field(String, graphql_name='submitText_not_starts_with')
    submit_text_ends_with = sgqlc.types.Field(String, graphql_name='submitText_ends_with')
    submit_text_not_ends_with = sgqlc.types.Field(String, graphql_name='submitText_not_ends_with')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    image_url_not = sgqlc.types.Field(String, graphql_name='imageURL_not')
    image_url_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='imageURL_in')
    image_url_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='imageURL_not_in')
    image_url_lt = sgqlc.types.Field(String, graphql_name='imageURL_lt')
    image_url_lte = sgqlc.types.Field(String, graphql_name='imageURL_lte')
    image_url_gt = sgqlc.types.Field(String, graphql_name='imageURL_gt')
    image_url_gte = sgqlc.types.Field(String, graphql_name='imageURL_gte')
    image_url_contains = sgqlc.types.Field(String, graphql_name='imageURL_contains')
    image_url_not_contains = sgqlc.types.Field(String, graphql_name='imageURL_not_contains')
    image_url_starts_with = sgqlc.types.Field(String, graphql_name='imageURL_starts_with')
    image_url_not_starts_with = sgqlc.types.Field(String, graphql_name='imageURL_not_starts_with')
    image_url_ends_with = sgqlc.types.Field(String, graphql_name='imageURL_ends_with')
    image_url_not_ends_with = sgqlc.types.Field(String, graphql_name='imageURL_not_ends_with')
    redirect_url = sgqlc.types.Field(String, graphql_name='redirectURL')
    redirect_url_not = sgqlc.types.Field(String, graphql_name='redirectURL_not')
    redirect_url_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='redirectURL_in')
    redirect_url_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='redirectURL_not_in')
    redirect_url_lt = sgqlc.types.Field(String, graphql_name='redirectURL_lt')
    redirect_url_lte = sgqlc.types.Field(String, graphql_name='redirectURL_lte')
    redirect_url_gt = sgqlc.types.Field(String, graphql_name='redirectURL_gt')
    redirect_url_gte = sgqlc.types.Field(String, graphql_name='redirectURL_gte')
    redirect_url_contains = sgqlc.types.Field(String, graphql_name='redirectURL_contains')
    redirect_url_not_contains = sgqlc.types.Field(String, graphql_name='redirectURL_not_contains')
    redirect_url_starts_with = sgqlc.types.Field(String, graphql_name='redirectURL_starts_with')
    redirect_url_not_starts_with = sgqlc.types.Field(String, graphql_name='redirectURL_not_starts_with')
    redirect_url_ends_with = sgqlc.types.Field(String, graphql_name='redirectURL_ends_with')
    redirect_url_not_ends_with = sgqlc.types.Field(String, graphql_name='redirectURL_not_ends_with')
    snapshot_url = sgqlc.types.Field(String, graphql_name='snapshotURL')
    snapshot_url_not = sgqlc.types.Field(String, graphql_name='snapshotURL_not')
    snapshot_url_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='snapshotURL_in')
    snapshot_url_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='snapshotURL_not_in')
    snapshot_url_lt = sgqlc.types.Field(String, graphql_name='snapshotURL_lt')
    snapshot_url_lte = sgqlc.types.Field(String, graphql_name='snapshotURL_lte')
    snapshot_url_gt = sgqlc.types.Field(String, graphql_name='snapshotURL_gt')
    snapshot_url_gte = sgqlc.types.Field(String, graphql_name='snapshotURL_gte')
    snapshot_url_contains = sgqlc.types.Field(String, graphql_name='snapshotURL_contains')
    snapshot_url_not_contains = sgqlc.types.Field(String, graphql_name='snapshotURL_not_contains')
    snapshot_url_starts_with = sgqlc.types.Field(String, graphql_name='snapshotURL_starts_with')
    snapshot_url_not_starts_with = sgqlc.types.Field(String, graphql_name='snapshotURL_not_starts_with')
    snapshot_url_ends_with = sgqlc.types.Field(String, graphql_name='snapshotURL_ends_with')
    snapshot_url_not_ends_with = sgqlc.types.Field(String, graphql_name='snapshotURL_not_ends_with')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormScalarWhereInput')), graphql_name='NOT')


class FormSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('FormWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormSubscriptionWhereInput')), graphql_name='NOT')


class FormTagCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'tag', 'form')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    tag = sgqlc.types.Field(sgqlc.types.non_null('TagCreateOneWithoutFormTagsInput'), graphql_name='tag')
    form = sgqlc.types.Field(sgqlc.types.non_null(FormCreateOneWithoutFormTagsInput), graphql_name='form')


class FormTagCreateManyWithoutFormInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormTagCreateWithoutFormInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormTagWhereUniqueInput')), graphql_name='connect')


class FormTagCreateManyWithoutTagInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormTagCreateWithoutTagInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormTagWhereUniqueInput')), graphql_name='connect')


class FormTagCreateWithoutFormInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'tag')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    tag = sgqlc.types.Field(sgqlc.types.non_null('TagCreateOneWithoutFormTagsInput'), graphql_name='tag')


class FormTagCreateWithoutTagInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'form')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    form = sgqlc.types.Field(sgqlc.types.non_null(FormCreateOneWithoutFormTagsInput), graphql_name='form')


class FormTagScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormTagScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormTagScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormTagScalarWhereInput')), graphql_name='NOT')


class FormTagSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('FormTagWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormTagSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormTagSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormTagSubscriptionWhereInput')), graphql_name='NOT')


class FormTagUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'tag', 'form')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    tag = sgqlc.types.Field('TagUpdateOneRequiredWithoutFormTagsInput', graphql_name='tag')
    form = sgqlc.types.Field('FormUpdateOneRequiredWithoutFormTagsInput', graphql_name='form')


class FormTagUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid',)
    uid = sgqlc.types.Field(String, graphql_name='uid')


class FormTagUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid',)
    uid = sgqlc.types.Field(String, graphql_name='uid')


class FormTagUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(FormTagScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(FormTagUpdateManyDataInput), graphql_name='data')


class FormTagUpdateManyWithoutFormInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FormTagCreateWithoutFormInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormTagWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormTagWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormTagWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormTagWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormTagUpdateWithWhereUniqueWithoutFormInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormTagUpsertWithWhereUniqueWithoutFormInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FormTagScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FormTagUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class FormTagUpdateManyWithoutTagInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FormTagCreateWithoutTagInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormTagWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormTagWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormTagWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormTagWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormTagUpdateWithWhereUniqueWithoutTagInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormTagUpsertWithWhereUniqueWithoutTagInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FormTagScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FormTagUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class FormTagUpdateWithWhereUniqueWithoutFormInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('FormTagWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('FormTagUpdateWithoutFormDataInput'), graphql_name='data')


class FormTagUpdateWithWhereUniqueWithoutTagInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('FormTagWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('FormTagUpdateWithoutTagDataInput'), graphql_name='data')


class FormTagUpdateWithoutFormDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'tag')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    tag = sgqlc.types.Field('TagUpdateOneRequiredWithoutFormTagsInput', graphql_name='tag')


class FormTagUpdateWithoutTagDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'form')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    form = sgqlc.types.Field('FormUpdateOneRequiredWithoutFormTagsInput', graphql_name='form')


class FormTagUpsertWithWhereUniqueWithoutFormInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('FormTagWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(FormTagUpdateWithoutFormDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(FormTagCreateWithoutFormInput), graphql_name='create')


class FormTagUpsertWithWhereUniqueWithoutTagInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('FormTagWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(FormTagUpdateWithoutTagDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(FormTagCreateWithoutTagInput), graphql_name='create')


class FormTagWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'tag', 'form', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    tag = sgqlc.types.Field('TagWhereInput', graphql_name='tag')
    form = sgqlc.types.Field('FormWhereInput', graphql_name='form')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormTagWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormTagWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormTagWhereInput')), graphql_name='NOT')


class FormTagWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class FormUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'description', 'is_active', 'theme', 'primary_color', 'hide_branding', 'response_text', 'submit_text', 'image_url', 'redirect_url', 'snapshot_url', 'created_by', 'form_tags', 'form_fields', 'form_users', 'todo_list', 'project')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    description = sgqlc.types.Field(String, graphql_name='description')
    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    primary_color = sgqlc.types.Field(String, graphql_name='primaryColor')
    hide_branding = sgqlc.types.Field(Boolean, graphql_name='hideBranding')
    response_text = sgqlc.types.Field(String, graphql_name='responseText')
    submit_text = sgqlc.types.Field(String, graphql_name='submitText')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    redirect_url = sgqlc.types.Field(String, graphql_name='redirectURL')
    snapshot_url = sgqlc.types.Field(String, graphql_name='snapshotURL')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutFormsInput', graphql_name='createdBy')
    form_tags = sgqlc.types.Field(FormTagUpdateManyWithoutFormInput, graphql_name='formTags')
    form_fields = sgqlc.types.Field(FormFieldUpdateManyWithoutFormInput, graphql_name='formFields')
    form_users = sgqlc.types.Field('FormUserUpdateManyWithoutFormInput', graphql_name='formUsers')
    todo_list = sgqlc.types.Field('TodoListUpdateOneWithoutFormsInput', graphql_name='todoList')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutFormsInput', graphql_name='project')


class FormUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'description', 'is_active', 'theme', 'primary_color', 'hide_branding', 'response_text', 'submit_text', 'image_url', 'redirect_url', 'snapshot_url')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    description = sgqlc.types.Field(String, graphql_name='description')
    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    primary_color = sgqlc.types.Field(String, graphql_name='primaryColor')
    hide_branding = sgqlc.types.Field(Boolean, graphql_name='hideBranding')
    response_text = sgqlc.types.Field(String, graphql_name='responseText')
    submit_text = sgqlc.types.Field(String, graphql_name='submitText')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    redirect_url = sgqlc.types.Field(String, graphql_name='redirectURL')
    snapshot_url = sgqlc.types.Field(String, graphql_name='snapshotURL')


class FormUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'description', 'is_active', 'theme', 'primary_color', 'hide_branding', 'response_text', 'submit_text', 'image_url', 'redirect_url', 'snapshot_url')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    description = sgqlc.types.Field(String, graphql_name='description')
    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    primary_color = sgqlc.types.Field(String, graphql_name='primaryColor')
    hide_branding = sgqlc.types.Field(Boolean, graphql_name='hideBranding')
    response_text = sgqlc.types.Field(String, graphql_name='responseText')
    submit_text = sgqlc.types.Field(String, graphql_name='submitText')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    redirect_url = sgqlc.types.Field(String, graphql_name='redirectURL')
    snapshot_url = sgqlc.types.Field(String, graphql_name='snapshotURL')


class FormUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(FormScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(FormUpdateManyDataInput), graphql_name='data')


class FormUpdateManyWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FormCreateWithoutCreatedByInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUpdateWithWhereUniqueWithoutCreatedByInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUpsertWithWhereUniqueWithoutCreatedByInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FormScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FormUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class FormUpdateManyWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FormCreateWithoutProjectInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUpdateWithWhereUniqueWithoutProjectInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUpsertWithWhereUniqueWithoutProjectInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FormScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FormUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class FormUpdateManyWithoutTodoListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FormCreateWithoutTodoListInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUpdateWithWhereUniqueWithoutTodoListInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUpsertWithWhereUniqueWithoutTodoListInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FormScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FormUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class FormUpdateOneRequiredWithoutFormFieldsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(FormCreateWithoutFormFieldsInput, graphql_name='create')
    update = sgqlc.types.Field('FormUpdateWithoutFormFieldsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('FormUpsertWithoutFormFieldsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('FormWhereUniqueInput', graphql_name='connect')


class FormUpdateOneRequiredWithoutFormTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(FormCreateWithoutFormTagsInput, graphql_name='create')
    update = sgqlc.types.Field('FormUpdateWithoutFormTagsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('FormUpsertWithoutFormTagsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('FormWhereUniqueInput', graphql_name='connect')


class FormUpdateOneRequiredWithoutFormUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(FormCreateWithoutFormUsersInput, graphql_name='create')
    update = sgqlc.types.Field('FormUpdateWithoutFormUsersDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('FormUpsertWithoutFormUsersInput', graphql_name='upsert')
    connect = sgqlc.types.Field('FormWhereUniqueInput', graphql_name='connect')


class FormUpdateWithWhereUniqueWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('FormWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('FormUpdateWithoutCreatedByDataInput'), graphql_name='data')


class FormUpdateWithWhereUniqueWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('FormWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('FormUpdateWithoutProjectDataInput'), graphql_name='data')


class FormUpdateWithWhereUniqueWithoutTodoListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('FormWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('FormUpdateWithoutTodoListDataInput'), graphql_name='data')


class FormUpdateWithoutCreatedByDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'description', 'is_active', 'theme', 'primary_color', 'hide_branding', 'response_text', 'submit_text', 'image_url', 'redirect_url', 'snapshot_url', 'form_tags', 'form_fields', 'form_users', 'todo_list', 'project')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    description = sgqlc.types.Field(String, graphql_name='description')
    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    primary_color = sgqlc.types.Field(String, graphql_name='primaryColor')
    hide_branding = sgqlc.types.Field(Boolean, graphql_name='hideBranding')
    response_text = sgqlc.types.Field(String, graphql_name='responseText')
    submit_text = sgqlc.types.Field(String, graphql_name='submitText')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    redirect_url = sgqlc.types.Field(String, graphql_name='redirectURL')
    snapshot_url = sgqlc.types.Field(String, graphql_name='snapshotURL')
    form_tags = sgqlc.types.Field(FormTagUpdateManyWithoutFormInput, graphql_name='formTags')
    form_fields = sgqlc.types.Field(FormFieldUpdateManyWithoutFormInput, graphql_name='formFields')
    form_users = sgqlc.types.Field('FormUserUpdateManyWithoutFormInput', graphql_name='formUsers')
    todo_list = sgqlc.types.Field('TodoListUpdateOneWithoutFormsInput', graphql_name='todoList')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutFormsInput', graphql_name='project')


class FormUpdateWithoutFormFieldsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'description', 'is_active', 'theme', 'primary_color', 'hide_branding', 'response_text', 'submit_text', 'image_url', 'redirect_url', 'snapshot_url', 'created_by', 'form_tags', 'form_users', 'todo_list', 'project')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    description = sgqlc.types.Field(String, graphql_name='description')
    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    primary_color = sgqlc.types.Field(String, graphql_name='primaryColor')
    hide_branding = sgqlc.types.Field(Boolean, graphql_name='hideBranding')
    response_text = sgqlc.types.Field(String, graphql_name='responseText')
    submit_text = sgqlc.types.Field(String, graphql_name='submitText')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    redirect_url = sgqlc.types.Field(String, graphql_name='redirectURL')
    snapshot_url = sgqlc.types.Field(String, graphql_name='snapshotURL')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutFormsInput', graphql_name='createdBy')
    form_tags = sgqlc.types.Field(FormTagUpdateManyWithoutFormInput, graphql_name='formTags')
    form_users = sgqlc.types.Field('FormUserUpdateManyWithoutFormInput', graphql_name='formUsers')
    todo_list = sgqlc.types.Field('TodoListUpdateOneWithoutFormsInput', graphql_name='todoList')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutFormsInput', graphql_name='project')


class FormUpdateWithoutFormTagsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'description', 'is_active', 'theme', 'primary_color', 'hide_branding', 'response_text', 'submit_text', 'image_url', 'redirect_url', 'snapshot_url', 'created_by', 'form_fields', 'form_users', 'todo_list', 'project')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    description = sgqlc.types.Field(String, graphql_name='description')
    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    primary_color = sgqlc.types.Field(String, graphql_name='primaryColor')
    hide_branding = sgqlc.types.Field(Boolean, graphql_name='hideBranding')
    response_text = sgqlc.types.Field(String, graphql_name='responseText')
    submit_text = sgqlc.types.Field(String, graphql_name='submitText')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    redirect_url = sgqlc.types.Field(String, graphql_name='redirectURL')
    snapshot_url = sgqlc.types.Field(String, graphql_name='snapshotURL')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutFormsInput', graphql_name='createdBy')
    form_fields = sgqlc.types.Field(FormFieldUpdateManyWithoutFormInput, graphql_name='formFields')
    form_users = sgqlc.types.Field('FormUserUpdateManyWithoutFormInput', graphql_name='formUsers')
    todo_list = sgqlc.types.Field('TodoListUpdateOneWithoutFormsInput', graphql_name='todoList')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutFormsInput', graphql_name='project')


class FormUpdateWithoutFormUsersDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'description', 'is_active', 'theme', 'primary_color', 'hide_branding', 'response_text', 'submit_text', 'image_url', 'redirect_url', 'snapshot_url', 'created_by', 'form_tags', 'form_fields', 'todo_list', 'project')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    description = sgqlc.types.Field(String, graphql_name='description')
    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    primary_color = sgqlc.types.Field(String, graphql_name='primaryColor')
    hide_branding = sgqlc.types.Field(Boolean, graphql_name='hideBranding')
    response_text = sgqlc.types.Field(String, graphql_name='responseText')
    submit_text = sgqlc.types.Field(String, graphql_name='submitText')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    redirect_url = sgqlc.types.Field(String, graphql_name='redirectURL')
    snapshot_url = sgqlc.types.Field(String, graphql_name='snapshotURL')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutFormsInput', graphql_name='createdBy')
    form_tags = sgqlc.types.Field(FormTagUpdateManyWithoutFormInput, graphql_name='formTags')
    form_fields = sgqlc.types.Field(FormFieldUpdateManyWithoutFormInput, graphql_name='formFields')
    todo_list = sgqlc.types.Field('TodoListUpdateOneWithoutFormsInput', graphql_name='todoList')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutFormsInput', graphql_name='project')


class FormUpdateWithoutProjectDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'description', 'is_active', 'theme', 'primary_color', 'hide_branding', 'response_text', 'submit_text', 'image_url', 'redirect_url', 'snapshot_url', 'created_by', 'form_tags', 'form_fields', 'form_users', 'todo_list')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    description = sgqlc.types.Field(String, graphql_name='description')
    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    primary_color = sgqlc.types.Field(String, graphql_name='primaryColor')
    hide_branding = sgqlc.types.Field(Boolean, graphql_name='hideBranding')
    response_text = sgqlc.types.Field(String, graphql_name='responseText')
    submit_text = sgqlc.types.Field(String, graphql_name='submitText')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    redirect_url = sgqlc.types.Field(String, graphql_name='redirectURL')
    snapshot_url = sgqlc.types.Field(String, graphql_name='snapshotURL')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutFormsInput', graphql_name='createdBy')
    form_tags = sgqlc.types.Field(FormTagUpdateManyWithoutFormInput, graphql_name='formTags')
    form_fields = sgqlc.types.Field(FormFieldUpdateManyWithoutFormInput, graphql_name='formFields')
    form_users = sgqlc.types.Field('FormUserUpdateManyWithoutFormInput', graphql_name='formUsers')
    todo_list = sgqlc.types.Field('TodoListUpdateOneWithoutFormsInput', graphql_name='todoList')


class FormUpdateWithoutTodoListDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'description', 'is_active', 'theme', 'primary_color', 'hide_branding', 'response_text', 'submit_text', 'image_url', 'redirect_url', 'snapshot_url', 'created_by', 'form_tags', 'form_fields', 'form_users', 'project')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    description = sgqlc.types.Field(String, graphql_name='description')
    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    primary_color = sgqlc.types.Field(String, graphql_name='primaryColor')
    hide_branding = sgqlc.types.Field(Boolean, graphql_name='hideBranding')
    response_text = sgqlc.types.Field(String, graphql_name='responseText')
    submit_text = sgqlc.types.Field(String, graphql_name='submitText')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    redirect_url = sgqlc.types.Field(String, graphql_name='redirectURL')
    snapshot_url = sgqlc.types.Field(String, graphql_name='snapshotURL')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutFormsInput', graphql_name='createdBy')
    form_tags = sgqlc.types.Field(FormTagUpdateManyWithoutFormInput, graphql_name='formTags')
    form_fields = sgqlc.types.Field(FormFieldUpdateManyWithoutFormInput, graphql_name='formFields')
    form_users = sgqlc.types.Field('FormUserUpdateManyWithoutFormInput', graphql_name='formUsers')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutFormsInput', graphql_name='project')


class FormUpsertWithWhereUniqueWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('FormWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(FormUpdateWithoutCreatedByDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(FormCreateWithoutCreatedByInput), graphql_name='create')


class FormUpsertWithWhereUniqueWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('FormWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(FormUpdateWithoutProjectDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(FormCreateWithoutProjectInput), graphql_name='create')


class FormUpsertWithWhereUniqueWithoutTodoListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('FormWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(FormUpdateWithoutTodoListDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(FormCreateWithoutTodoListInput), graphql_name='create')


class FormUpsertWithoutFormFieldsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(FormUpdateWithoutFormFieldsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(FormCreateWithoutFormFieldsInput), graphql_name='create')


class FormUpsertWithoutFormTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(FormUpdateWithoutFormTagsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(FormCreateWithoutFormTagsInput), graphql_name='create')


class FormUpsertWithoutFormUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(FormUpdateWithoutFormUsersDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(FormCreateWithoutFormUsersInput), graphql_name='create')


class FormUserCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'form', 'user')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    form = sgqlc.types.Field(sgqlc.types.non_null(FormCreateOneWithoutFormUsersInput), graphql_name='form')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutFormUsersInput'), graphql_name='user')


class FormUserCreateManyWithoutFormInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUserCreateWithoutFormInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUserWhereUniqueInput')), graphql_name='connect')


class FormUserCreateManyWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUserCreateWithoutUserInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUserWhereUniqueInput')), graphql_name='connect')


class FormUserCreateWithoutFormInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'user')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutFormUsersInput'), graphql_name='user')


class FormUserCreateWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'form')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    form = sgqlc.types.Field(sgqlc.types.non_null(FormCreateOneWithoutFormUsersInput), graphql_name='form')


class FormUserScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUserScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUserScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUserScalarWhereInput')), graphql_name='NOT')


class FormUserSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('FormUserWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUserSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUserSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUserSubscriptionWhereInput')), graphql_name='NOT')


class FormUserUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'form', 'user')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    form = sgqlc.types.Field(FormUpdateOneRequiredWithoutFormUsersInput, graphql_name='form')
    user = sgqlc.types.Field('UserUpdateOneRequiredWithoutFormUsersInput', graphql_name='user')


class FormUserUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid',)
    uid = sgqlc.types.Field(String, graphql_name='uid')


class FormUserUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid',)
    uid = sgqlc.types.Field(String, graphql_name='uid')


class FormUserUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(FormUserScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(FormUserUpdateManyDataInput), graphql_name='data')


class FormUserUpdateManyWithoutFormInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FormUserCreateWithoutFormInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUserWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUserWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUserWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUserWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUserUpdateWithWhereUniqueWithoutFormInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUserUpsertWithWhereUniqueWithoutFormInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FormUserScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FormUserUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class FormUserUpdateManyWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FormUserCreateWithoutUserInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUserWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUserWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUserWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUserWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUserUpdateWithWhereUniqueWithoutUserInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUserUpsertWithWhereUniqueWithoutUserInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FormUserScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FormUserUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class FormUserUpdateWithWhereUniqueWithoutFormInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('FormUserWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('FormUserUpdateWithoutFormDataInput'), graphql_name='data')


class FormUserUpdateWithWhereUniqueWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('FormUserWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('FormUserUpdateWithoutUserDataInput'), graphql_name='data')


class FormUserUpdateWithoutFormDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'user')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    user = sgqlc.types.Field('UserUpdateOneRequiredWithoutFormUsersInput', graphql_name='user')


class FormUserUpdateWithoutUserDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'form')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    form = sgqlc.types.Field(FormUpdateOneRequiredWithoutFormUsersInput, graphql_name='form')


class FormUserUpsertWithWhereUniqueWithoutFormInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('FormUserWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(FormUserUpdateWithoutFormDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(FormUserCreateWithoutFormInput), graphql_name='create')


class FormUserUpsertWithWhereUniqueWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('FormUserWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(FormUserUpdateWithoutUserDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(FormUserCreateWithoutUserInput), graphql_name='create')


class FormUserWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'form', 'user', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    form = sgqlc.types.Field('FormWhereInput', graphql_name='form')
    user = sgqlc.types.Field('UserWhereInput', graphql_name='user')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUserWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUserWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUserWhereInput')), graphql_name='NOT')


class FormUserWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class FormWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'title', 'title_not', 'title_in', 'title_not_in', 'title_lt', 'title_lte', 'title_gt', 'title_gte', 'title_contains', 'title_not_contains', 'title_starts_with', 'title_not_starts_with', 'title_ends_with', 'title_not_ends_with', 'description', 'description_not', 'description_in', 'description_not_in', 'description_lt', 'description_lte', 'description_gt', 'description_gte', 'description_contains', 'description_not_contains', 'description_starts_with', 'description_not_starts_with', 'description_ends_with', 'description_not_ends_with', 'is_active', 'is_active_not', 'theme', 'theme_not', 'theme_in', 'theme_not_in', 'theme_lt', 'theme_lte', 'theme_gt', 'theme_gte', 'theme_contains', 'theme_not_contains', 'theme_starts_with', 'theme_not_starts_with', 'theme_ends_with', 'theme_not_ends_with', 'primary_color', 'primary_color_not', 'primary_color_in', 'primary_color_not_in', 'primary_color_lt', 'primary_color_lte', 'primary_color_gt', 'primary_color_gte', 'primary_color_contains', 'primary_color_not_contains', 'primary_color_starts_with', 'primary_color_not_starts_with', 'primary_color_ends_with', 'primary_color_not_ends_with', 'hide_branding', 'hide_branding_not', 'response_text', 'response_text_not', 'response_text_in', 'response_text_not_in', 'response_text_lt', 'response_text_lte', 'response_text_gt', 'response_text_gte', 'response_text_contains', 'response_text_not_contains', 'response_text_starts_with', 'response_text_not_starts_with', 'response_text_ends_with', 'response_text_not_ends_with', 'submit_text', 'submit_text_not', 'submit_text_in', 'submit_text_not_in', 'submit_text_lt', 'submit_text_lte', 'submit_text_gt', 'submit_text_gte', 'submit_text_contains', 'submit_text_not_contains', 'submit_text_starts_with', 'submit_text_not_starts_with', 'submit_text_ends_with', 'submit_text_not_ends_with', 'image_url', 'image_url_not', 'image_url_in', 'image_url_not_in', 'image_url_lt', 'image_url_lte', 'image_url_gt', 'image_url_gte', 'image_url_contains', 'image_url_not_contains', 'image_url_starts_with', 'image_url_not_starts_with', 'image_url_ends_with', 'image_url_not_ends_with', 'redirect_url', 'redirect_url_not', 'redirect_url_in', 'redirect_url_not_in', 'redirect_url_lt', 'redirect_url_lte', 'redirect_url_gt', 'redirect_url_gte', 'redirect_url_contains', 'redirect_url_not_contains', 'redirect_url_starts_with', 'redirect_url_not_starts_with', 'redirect_url_ends_with', 'redirect_url_not_ends_with', 'snapshot_url', 'snapshot_url_not', 'snapshot_url_in', 'snapshot_url_not_in', 'snapshot_url_lt', 'snapshot_url_lte', 'snapshot_url_gt', 'snapshot_url_gte', 'snapshot_url_contains', 'snapshot_url_not_contains', 'snapshot_url_starts_with', 'snapshot_url_not_starts_with', 'snapshot_url_ends_with', 'snapshot_url_not_ends_with', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'created_by', 'form_tags_every', 'form_tags_some', 'form_tags_none', 'form_fields_every', 'form_fields_some', 'form_fields_none', 'form_users_every', 'form_users_some', 'form_users_none', 'todo_list', 'project', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    title = sgqlc.types.Field(String, graphql_name='title')
    title_not = sgqlc.types.Field(String, graphql_name='title_not')
    title_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_in')
    title_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_not_in')
    title_lt = sgqlc.types.Field(String, graphql_name='title_lt')
    title_lte = sgqlc.types.Field(String, graphql_name='title_lte')
    title_gt = sgqlc.types.Field(String, graphql_name='title_gt')
    title_gte = sgqlc.types.Field(String, graphql_name='title_gte')
    title_contains = sgqlc.types.Field(String, graphql_name='title_contains')
    title_not_contains = sgqlc.types.Field(String, graphql_name='title_not_contains')
    title_starts_with = sgqlc.types.Field(String, graphql_name='title_starts_with')
    title_not_starts_with = sgqlc.types.Field(String, graphql_name='title_not_starts_with')
    title_ends_with = sgqlc.types.Field(String, graphql_name='title_ends_with')
    title_not_ends_with = sgqlc.types.Field(String, graphql_name='title_not_ends_with')
    description = sgqlc.types.Field(String, graphql_name='description')
    description_not = sgqlc.types.Field(String, graphql_name='description_not')
    description_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='description_in')
    description_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='description_not_in')
    description_lt = sgqlc.types.Field(String, graphql_name='description_lt')
    description_lte = sgqlc.types.Field(String, graphql_name='description_lte')
    description_gt = sgqlc.types.Field(String, graphql_name='description_gt')
    description_gte = sgqlc.types.Field(String, graphql_name='description_gte')
    description_contains = sgqlc.types.Field(String, graphql_name='description_contains')
    description_not_contains = sgqlc.types.Field(String, graphql_name='description_not_contains')
    description_starts_with = sgqlc.types.Field(String, graphql_name='description_starts_with')
    description_not_starts_with = sgqlc.types.Field(String, graphql_name='description_not_starts_with')
    description_ends_with = sgqlc.types.Field(String, graphql_name='description_ends_with')
    description_not_ends_with = sgqlc.types.Field(String, graphql_name='description_not_ends_with')
    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    is_active_not = sgqlc.types.Field(Boolean, graphql_name='isActive_not')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    theme_not = sgqlc.types.Field(String, graphql_name='theme_not')
    theme_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='theme_in')
    theme_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='theme_not_in')
    theme_lt = sgqlc.types.Field(String, graphql_name='theme_lt')
    theme_lte = sgqlc.types.Field(String, graphql_name='theme_lte')
    theme_gt = sgqlc.types.Field(String, graphql_name='theme_gt')
    theme_gte = sgqlc.types.Field(String, graphql_name='theme_gte')
    theme_contains = sgqlc.types.Field(String, graphql_name='theme_contains')
    theme_not_contains = sgqlc.types.Field(String, graphql_name='theme_not_contains')
    theme_starts_with = sgqlc.types.Field(String, graphql_name='theme_starts_with')
    theme_not_starts_with = sgqlc.types.Field(String, graphql_name='theme_not_starts_with')
    theme_ends_with = sgqlc.types.Field(String, graphql_name='theme_ends_with')
    theme_not_ends_with = sgqlc.types.Field(String, graphql_name='theme_not_ends_with')
    primary_color = sgqlc.types.Field(String, graphql_name='primaryColor')
    primary_color_not = sgqlc.types.Field(String, graphql_name='primaryColor_not')
    primary_color_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='primaryColor_in')
    primary_color_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='primaryColor_not_in')
    primary_color_lt = sgqlc.types.Field(String, graphql_name='primaryColor_lt')
    primary_color_lte = sgqlc.types.Field(String, graphql_name='primaryColor_lte')
    primary_color_gt = sgqlc.types.Field(String, graphql_name='primaryColor_gt')
    primary_color_gte = sgqlc.types.Field(String, graphql_name='primaryColor_gte')
    primary_color_contains = sgqlc.types.Field(String, graphql_name='primaryColor_contains')
    primary_color_not_contains = sgqlc.types.Field(String, graphql_name='primaryColor_not_contains')
    primary_color_starts_with = sgqlc.types.Field(String, graphql_name='primaryColor_starts_with')
    primary_color_not_starts_with = sgqlc.types.Field(String, graphql_name='primaryColor_not_starts_with')
    primary_color_ends_with = sgqlc.types.Field(String, graphql_name='primaryColor_ends_with')
    primary_color_not_ends_with = sgqlc.types.Field(String, graphql_name='primaryColor_not_ends_with')
    hide_branding = sgqlc.types.Field(Boolean, graphql_name='hideBranding')
    hide_branding_not = sgqlc.types.Field(Boolean, graphql_name='hideBranding_not')
    response_text = sgqlc.types.Field(String, graphql_name='responseText')
    response_text_not = sgqlc.types.Field(String, graphql_name='responseText_not')
    response_text_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='responseText_in')
    response_text_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='responseText_not_in')
    response_text_lt = sgqlc.types.Field(String, graphql_name='responseText_lt')
    response_text_lte = sgqlc.types.Field(String, graphql_name='responseText_lte')
    response_text_gt = sgqlc.types.Field(String, graphql_name='responseText_gt')
    response_text_gte = sgqlc.types.Field(String, graphql_name='responseText_gte')
    response_text_contains = sgqlc.types.Field(String, graphql_name='responseText_contains')
    response_text_not_contains = sgqlc.types.Field(String, graphql_name='responseText_not_contains')
    response_text_starts_with = sgqlc.types.Field(String, graphql_name='responseText_starts_with')
    response_text_not_starts_with = sgqlc.types.Field(String, graphql_name='responseText_not_starts_with')
    response_text_ends_with = sgqlc.types.Field(String, graphql_name='responseText_ends_with')
    response_text_not_ends_with = sgqlc.types.Field(String, graphql_name='responseText_not_ends_with')
    submit_text = sgqlc.types.Field(String, graphql_name='submitText')
    submit_text_not = sgqlc.types.Field(String, graphql_name='submitText_not')
    submit_text_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='submitText_in')
    submit_text_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='submitText_not_in')
    submit_text_lt = sgqlc.types.Field(String, graphql_name='submitText_lt')
    submit_text_lte = sgqlc.types.Field(String, graphql_name='submitText_lte')
    submit_text_gt = sgqlc.types.Field(String, graphql_name='submitText_gt')
    submit_text_gte = sgqlc.types.Field(String, graphql_name='submitText_gte')
    submit_text_contains = sgqlc.types.Field(String, graphql_name='submitText_contains')
    submit_text_not_contains = sgqlc.types.Field(String, graphql_name='submitText_not_contains')
    submit_text_starts_with = sgqlc.types.Field(String, graphql_name='submitText_starts_with')
    submit_text_not_starts_with = sgqlc.types.Field(String, graphql_name='submitText_not_starts_with')
    submit_text_ends_with = sgqlc.types.Field(String, graphql_name='submitText_ends_with')
    submit_text_not_ends_with = sgqlc.types.Field(String, graphql_name='submitText_not_ends_with')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    image_url_not = sgqlc.types.Field(String, graphql_name='imageURL_not')
    image_url_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='imageURL_in')
    image_url_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='imageURL_not_in')
    image_url_lt = sgqlc.types.Field(String, graphql_name='imageURL_lt')
    image_url_lte = sgqlc.types.Field(String, graphql_name='imageURL_lte')
    image_url_gt = sgqlc.types.Field(String, graphql_name='imageURL_gt')
    image_url_gte = sgqlc.types.Field(String, graphql_name='imageURL_gte')
    image_url_contains = sgqlc.types.Field(String, graphql_name='imageURL_contains')
    image_url_not_contains = sgqlc.types.Field(String, graphql_name='imageURL_not_contains')
    image_url_starts_with = sgqlc.types.Field(String, graphql_name='imageURL_starts_with')
    image_url_not_starts_with = sgqlc.types.Field(String, graphql_name='imageURL_not_starts_with')
    image_url_ends_with = sgqlc.types.Field(String, graphql_name='imageURL_ends_with')
    image_url_not_ends_with = sgqlc.types.Field(String, graphql_name='imageURL_not_ends_with')
    redirect_url = sgqlc.types.Field(String, graphql_name='redirectURL')
    redirect_url_not = sgqlc.types.Field(String, graphql_name='redirectURL_not')
    redirect_url_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='redirectURL_in')
    redirect_url_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='redirectURL_not_in')
    redirect_url_lt = sgqlc.types.Field(String, graphql_name='redirectURL_lt')
    redirect_url_lte = sgqlc.types.Field(String, graphql_name='redirectURL_lte')
    redirect_url_gt = sgqlc.types.Field(String, graphql_name='redirectURL_gt')
    redirect_url_gte = sgqlc.types.Field(String, graphql_name='redirectURL_gte')
    redirect_url_contains = sgqlc.types.Field(String, graphql_name='redirectURL_contains')
    redirect_url_not_contains = sgqlc.types.Field(String, graphql_name='redirectURL_not_contains')
    redirect_url_starts_with = sgqlc.types.Field(String, graphql_name='redirectURL_starts_with')
    redirect_url_not_starts_with = sgqlc.types.Field(String, graphql_name='redirectURL_not_starts_with')
    redirect_url_ends_with = sgqlc.types.Field(String, graphql_name='redirectURL_ends_with')
    redirect_url_not_ends_with = sgqlc.types.Field(String, graphql_name='redirectURL_not_ends_with')
    snapshot_url = sgqlc.types.Field(String, graphql_name='snapshotURL')
    snapshot_url_not = sgqlc.types.Field(String, graphql_name='snapshotURL_not')
    snapshot_url_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='snapshotURL_in')
    snapshot_url_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='snapshotURL_not_in')
    snapshot_url_lt = sgqlc.types.Field(String, graphql_name='snapshotURL_lt')
    snapshot_url_lte = sgqlc.types.Field(String, graphql_name='snapshotURL_lte')
    snapshot_url_gt = sgqlc.types.Field(String, graphql_name='snapshotURL_gt')
    snapshot_url_gte = sgqlc.types.Field(String, graphql_name='snapshotURL_gte')
    snapshot_url_contains = sgqlc.types.Field(String, graphql_name='snapshotURL_contains')
    snapshot_url_not_contains = sgqlc.types.Field(String, graphql_name='snapshotURL_not_contains')
    snapshot_url_starts_with = sgqlc.types.Field(String, graphql_name='snapshotURL_starts_with')
    snapshot_url_not_starts_with = sgqlc.types.Field(String, graphql_name='snapshotURL_not_starts_with')
    snapshot_url_ends_with = sgqlc.types.Field(String, graphql_name='snapshotURL_ends_with')
    snapshot_url_not_ends_with = sgqlc.types.Field(String, graphql_name='snapshotURL_not_ends_with')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    created_by = sgqlc.types.Field('UserWhereInput', graphql_name='createdBy')
    form_tags_every = sgqlc.types.Field(FormTagWhereInput, graphql_name='formTags_every')
    form_tags_some = sgqlc.types.Field(FormTagWhereInput, graphql_name='formTags_some')
    form_tags_none = sgqlc.types.Field(FormTagWhereInput, graphql_name='formTags_none')
    form_fields_every = sgqlc.types.Field(FormFieldWhereInput, graphql_name='formFields_every')
    form_fields_some = sgqlc.types.Field(FormFieldWhereInput, graphql_name='formFields_some')
    form_fields_none = sgqlc.types.Field(FormFieldWhereInput, graphql_name='formFields_none')
    form_users_every = sgqlc.types.Field(FormUserWhereInput, graphql_name='formUsers_every')
    form_users_some = sgqlc.types.Field(FormUserWhereInput, graphql_name='formUsers_some')
    form_users_none = sgqlc.types.Field(FormUserWhereInput, graphql_name='formUsers_none')
    todo_list = sgqlc.types.Field('TodoListWhereInput', graphql_name='todoList')
    project = sgqlc.types.Field('ProjectWhereInput', graphql_name='project')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormWhereInput')), graphql_name='NOT')


class FormWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class FormulaDisplayCurrencyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('code', 'name')
    code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='code')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')


class FormulaDisplayInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('type', 'currency', 'precision', 'function')
    type = sgqlc.types.Field(sgqlc.types.non_null(FormulaDisplayType), graphql_name='type')
    currency = sgqlc.types.Field(FormulaDisplayCurrencyInput, graphql_name='currency')
    precision = sgqlc.types.Field(Float, graphql_name='precision')
    function = sgqlc.types.Field(ChartFunction, graphql_name='function')


class FormulaInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('logic', 'display')
    logic = sgqlc.types.Field(sgqlc.types.non_null('FormulaLogicInput'), graphql_name='logic')
    display = sgqlc.types.Field(sgqlc.types.non_null(FormulaDisplayInput), graphql_name='display')


class FormulaLogicInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('text', 'html')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')


class GenerateAISummaryInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('todo_id',)
    todo_id = sgqlc.types.Field(String, graphql_name='todoId')


class GetTodoAssigneeListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id', 'todo_id', 'after', 'before', 'first', 'last', 'order_by', 'skip', 'search')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    todo_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoId')
    after = sgqlc.types.Field(String, graphql_name='after')
    before = sgqlc.types.Field(String, graphql_name='before')
    first = sgqlc.types.Field(Int, graphql_name='first')
    last = sgqlc.types.Field(Int, graphql_name='last')
    order_by = sgqlc.types.Field(UserOrderByInput, graphql_name='orderBy')
    skip = sgqlc.types.Field(Int, graphql_name='skip')
    search = sgqlc.types.Field(String, graphql_name='search')


class GetTodoListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('todo_list_id', 'skip', 'last', 'first', 'after', 'before', 'order_by')
    todo_list_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoListId')
    skip = sgqlc.types.Field(Int, graphql_name='skip')
    last = sgqlc.types.Field(Int, graphql_name='last')
    first = sgqlc.types.Field(Int, graphql_name='first')
    after = sgqlc.types.Field(String, graphql_name='after')
    before = sgqlc.types.Field(String, graphql_name='before')
    order_by = sgqlc.types.Field(TodoOrderByInput, graphql_name='orderBy')


class GetTodoListListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id', 'skip', 'last', 'first', 'after', 'before', 'order_by')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    skip = sgqlc.types.Field(Int, graphql_name='skip')
    last = sgqlc.types.Field(Int, graphql_name='last')
    first = sgqlc.types.Field(Int, graphql_name='first')
    after = sgqlc.types.Field(String, graphql_name='after')
    before = sgqlc.types.Field(String, graphql_name='before')
    order_by = sgqlc.types.Field(TodoListOrderByInput, graphql_name='orderBy')


class GoogleMapsSettingsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('is_enabled', 'api_key')
    is_enabled = sgqlc.types.Field(Boolean, graphql_name='isEnabled')
    api_key = sgqlc.types.Field(String, graphql_name='apiKey')


class GrantLicenseInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id', 'plan_id', 'activation_email')
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')
    plan_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='planId')
    activation_email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='activationEmail')


class HideProjectEmailsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id', 'hide_from_roles')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    hide_from_roles = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(UserAccessLevel))), graphql_name='hideFromRoles')


class HttpAuthorizationApiKeyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('key', 'value', 'pass_by')
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='key')
    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='value')
    pass_by = sgqlc.types.Field(HttpAuthorizationApiKeyPassBy, graphql_name='passBy')


class HttpAuthorizationBasicAuthInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('username', 'password')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    password = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='password')


class HttpHeaderInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('key', 'value')
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='key')
    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='value')


class HttpParameterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('key', 'value')
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='key')
    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='value')


class ImageCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'thumbnail', 'small', 'medium', 'large', 'original')
    id = sgqlc.types.Field(ID, graphql_name='id')
    thumbnail = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='thumbnail')
    small = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='small')
    medium = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='medium')
    large = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='large')
    original = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='original')


class ImageCreateOneInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(ImageCreateInput, graphql_name='create')
    connect = sgqlc.types.Field('ImageWhereUniqueInput', graphql_name='connect')


class ImageInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('thumbnail', 'small', 'medium', 'large', 'original')
    thumbnail = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='thumbnail')
    small = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='small')
    medium = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='medium')
    large = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='large')
    original = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='original')


class ImageSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('ImageWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ImageSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ImageSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ImageSubscriptionWhereInput')), graphql_name='NOT')


class ImageUpdateDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('thumbnail', 'small', 'medium', 'large', 'original')
    thumbnail = sgqlc.types.Field(String, graphql_name='thumbnail')
    small = sgqlc.types.Field(String, graphql_name='small')
    medium = sgqlc.types.Field(String, graphql_name='medium')
    large = sgqlc.types.Field(String, graphql_name='large')
    original = sgqlc.types.Field(String, graphql_name='original')


class ImageUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('thumbnail', 'small', 'medium', 'large', 'original')
    thumbnail = sgqlc.types.Field(String, graphql_name='thumbnail')
    small = sgqlc.types.Field(String, graphql_name='small')
    medium = sgqlc.types.Field(String, graphql_name='medium')
    large = sgqlc.types.Field(String, graphql_name='large')
    original = sgqlc.types.Field(String, graphql_name='original')


class ImageUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('thumbnail', 'small', 'medium', 'large', 'original')
    thumbnail = sgqlc.types.Field(String, graphql_name='thumbnail')
    small = sgqlc.types.Field(String, graphql_name='small')
    medium = sgqlc.types.Field(String, graphql_name='medium')
    large = sgqlc.types.Field(String, graphql_name='large')
    original = sgqlc.types.Field(String, graphql_name='original')


class ImageUpdateOneInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(ImageCreateInput, graphql_name='create')
    update = sgqlc.types.Field(ImageUpdateDataInput, graphql_name='update')
    upsert = sgqlc.types.Field('ImageUpsertNestedInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('ImageWhereUniqueInput', graphql_name='connect')


class ImageUpsertNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(ImageUpdateDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ImageCreateInput), graphql_name='create')


class ImageWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'thumbnail', 'thumbnail_not', 'thumbnail_in', 'thumbnail_not_in', 'thumbnail_lt', 'thumbnail_lte', 'thumbnail_gt', 'thumbnail_gte', 'thumbnail_contains', 'thumbnail_not_contains', 'thumbnail_starts_with', 'thumbnail_not_starts_with', 'thumbnail_ends_with', 'thumbnail_not_ends_with', 'small', 'small_not', 'small_in', 'small_not_in', 'small_lt', 'small_lte', 'small_gt', 'small_gte', 'small_contains', 'small_not_contains', 'small_starts_with', 'small_not_starts_with', 'small_ends_with', 'small_not_ends_with', 'medium', 'medium_not', 'medium_in', 'medium_not_in', 'medium_lt', 'medium_lte', 'medium_gt', 'medium_gte', 'medium_contains', 'medium_not_contains', 'medium_starts_with', 'medium_not_starts_with', 'medium_ends_with', 'medium_not_ends_with', 'large', 'large_not', 'large_in', 'large_not_in', 'large_lt', 'large_lte', 'large_gt', 'large_gte', 'large_contains', 'large_not_contains', 'large_starts_with', 'large_not_starts_with', 'large_ends_with', 'large_not_ends_with', 'original', 'original_not', 'original_in', 'original_not_in', 'original_lt', 'original_lte', 'original_gt', 'original_gte', 'original_contains', 'original_not_contains', 'original_starts_with', 'original_not_starts_with', 'original_ends_with', 'original_not_ends_with', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    thumbnail = sgqlc.types.Field(String, graphql_name='thumbnail')
    thumbnail_not = sgqlc.types.Field(String, graphql_name='thumbnail_not')
    thumbnail_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='thumbnail_in')
    thumbnail_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='thumbnail_not_in')
    thumbnail_lt = sgqlc.types.Field(String, graphql_name='thumbnail_lt')
    thumbnail_lte = sgqlc.types.Field(String, graphql_name='thumbnail_lte')
    thumbnail_gt = sgqlc.types.Field(String, graphql_name='thumbnail_gt')
    thumbnail_gte = sgqlc.types.Field(String, graphql_name='thumbnail_gte')
    thumbnail_contains = sgqlc.types.Field(String, graphql_name='thumbnail_contains')
    thumbnail_not_contains = sgqlc.types.Field(String, graphql_name='thumbnail_not_contains')
    thumbnail_starts_with = sgqlc.types.Field(String, graphql_name='thumbnail_starts_with')
    thumbnail_not_starts_with = sgqlc.types.Field(String, graphql_name='thumbnail_not_starts_with')
    thumbnail_ends_with = sgqlc.types.Field(String, graphql_name='thumbnail_ends_with')
    thumbnail_not_ends_with = sgqlc.types.Field(String, graphql_name='thumbnail_not_ends_with')
    small = sgqlc.types.Field(String, graphql_name='small')
    small_not = sgqlc.types.Field(String, graphql_name='small_not')
    small_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='small_in')
    small_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='small_not_in')
    small_lt = sgqlc.types.Field(String, graphql_name='small_lt')
    small_lte = sgqlc.types.Field(String, graphql_name='small_lte')
    small_gt = sgqlc.types.Field(String, graphql_name='small_gt')
    small_gte = sgqlc.types.Field(String, graphql_name='small_gte')
    small_contains = sgqlc.types.Field(String, graphql_name='small_contains')
    small_not_contains = sgqlc.types.Field(String, graphql_name='small_not_contains')
    small_starts_with = sgqlc.types.Field(String, graphql_name='small_starts_with')
    small_not_starts_with = sgqlc.types.Field(String, graphql_name='small_not_starts_with')
    small_ends_with = sgqlc.types.Field(String, graphql_name='small_ends_with')
    small_not_ends_with = sgqlc.types.Field(String, graphql_name='small_not_ends_with')
    medium = sgqlc.types.Field(String, graphql_name='medium')
    medium_not = sgqlc.types.Field(String, graphql_name='medium_not')
    medium_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='medium_in')
    medium_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='medium_not_in')
    medium_lt = sgqlc.types.Field(String, graphql_name='medium_lt')
    medium_lte = sgqlc.types.Field(String, graphql_name='medium_lte')
    medium_gt = sgqlc.types.Field(String, graphql_name='medium_gt')
    medium_gte = sgqlc.types.Field(String, graphql_name='medium_gte')
    medium_contains = sgqlc.types.Field(String, graphql_name='medium_contains')
    medium_not_contains = sgqlc.types.Field(String, graphql_name='medium_not_contains')
    medium_starts_with = sgqlc.types.Field(String, graphql_name='medium_starts_with')
    medium_not_starts_with = sgqlc.types.Field(String, graphql_name='medium_not_starts_with')
    medium_ends_with = sgqlc.types.Field(String, graphql_name='medium_ends_with')
    medium_not_ends_with = sgqlc.types.Field(String, graphql_name='medium_not_ends_with')
    large = sgqlc.types.Field(String, graphql_name='large')
    large_not = sgqlc.types.Field(String, graphql_name='large_not')
    large_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='large_in')
    large_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='large_not_in')
    large_lt = sgqlc.types.Field(String, graphql_name='large_lt')
    large_lte = sgqlc.types.Field(String, graphql_name='large_lte')
    large_gt = sgqlc.types.Field(String, graphql_name='large_gt')
    large_gte = sgqlc.types.Field(String, graphql_name='large_gte')
    large_contains = sgqlc.types.Field(String, graphql_name='large_contains')
    large_not_contains = sgqlc.types.Field(String, graphql_name='large_not_contains')
    large_starts_with = sgqlc.types.Field(String, graphql_name='large_starts_with')
    large_not_starts_with = sgqlc.types.Field(String, graphql_name='large_not_starts_with')
    large_ends_with = sgqlc.types.Field(String, graphql_name='large_ends_with')
    large_not_ends_with = sgqlc.types.Field(String, graphql_name='large_not_ends_with')
    original = sgqlc.types.Field(String, graphql_name='original')
    original_not = sgqlc.types.Field(String, graphql_name='original_not')
    original_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='original_in')
    original_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='original_not_in')
    original_lt = sgqlc.types.Field(String, graphql_name='original_lt')
    original_lte = sgqlc.types.Field(String, graphql_name='original_lte')
    original_gt = sgqlc.types.Field(String, graphql_name='original_gt')
    original_gte = sgqlc.types.Field(String, graphql_name='original_gte')
    original_contains = sgqlc.types.Field(String, graphql_name='original_contains')
    original_not_contains = sgqlc.types.Field(String, graphql_name='original_not_contains')
    original_starts_with = sgqlc.types.Field(String, graphql_name='original_starts_with')
    original_not_starts_with = sgqlc.types.Field(String, graphql_name='original_not_starts_with')
    original_ends_with = sgqlc.types.Field(String, graphql_name='original_ends_with')
    original_not_ends_with = sgqlc.types.Field(String, graphql_name='original_not_ends_with')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ImageWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ImageWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ImageWhereInput')), graphql_name='NOT')


class ImageWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id',)
    id = sgqlc.types.Field(ID, graphql_name='id')


class ImportTodosInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('s3_key', 'headers', 'project_id', 'use_rust_import')
    s3_key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='s3Key')
    headers = sgqlc.types.Field(sgqlc.types.non_null(JSON), graphql_name='headers')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    use_rust_import = sgqlc.types.Field(Boolean, graphql_name='useRustImport')


class InvitationCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'email', 'access_level', 'project', 'invited_by', 'activity', 'expired_at')
    id = sgqlc.types.Field(ID, graphql_name='id')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    access_level = sgqlc.types.Field(sgqlc.types.non_null(UserAccessLevel), graphql_name='accessLevel')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutInvitationsInput'), graphql_name='project')
    invited_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutInvitationsInput'), graphql_name='invitedBy')
    activity = sgqlc.types.Field(ActivityCreateOneInput, graphql_name='activity')
    expired_at = sgqlc.types.Field(DateTime, graphql_name='expiredAt')


class InvitationCreateManyWithoutInvitedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InvitationCreateWithoutInvitedByInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InvitationWhereUniqueInput')), graphql_name='connect')


class InvitationCreateManyWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InvitationCreateWithoutProjectInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InvitationWhereUniqueInput')), graphql_name='connect')


class InvitationCreateWithoutInvitedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'email', 'access_level', 'project', 'activity', 'expired_at')
    id = sgqlc.types.Field(ID, graphql_name='id')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    access_level = sgqlc.types.Field(sgqlc.types.non_null(UserAccessLevel), graphql_name='accessLevel')
    project = sgqlc.types.Field(sgqlc.types.non_null('ProjectCreateOneWithoutInvitationsInput'), graphql_name='project')
    activity = sgqlc.types.Field(ActivityCreateOneInput, graphql_name='activity')
    expired_at = sgqlc.types.Field(DateTime, graphql_name='expiredAt')


class InvitationCreateWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'email', 'access_level', 'invited_by', 'activity', 'expired_at')
    id = sgqlc.types.Field(ID, graphql_name='id')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    access_level = sgqlc.types.Field(sgqlc.types.non_null(UserAccessLevel), graphql_name='accessLevel')
    invited_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutInvitationsInput'), graphql_name='invitedBy')
    activity = sgqlc.types.Field(ActivityCreateOneInput, graphql_name='activity')
    expired_at = sgqlc.types.Field(DateTime, graphql_name='expiredAt')


class InvitationScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'email', 'email_not', 'email_in', 'email_not_in', 'email_lt', 'email_lte', 'email_gt', 'email_gte', 'email_contains', 'email_not_contains', 'email_starts_with', 'email_not_starts_with', 'email_ends_with', 'email_not_ends_with', 'access_level', 'access_level_not', 'access_level_in', 'access_level_not_in', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'expired_at', 'expired_at_not', 'expired_at_in', 'expired_at_not_in', 'expired_at_lt', 'expired_at_lte', 'expired_at_gt', 'expired_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    email = sgqlc.types.Field(String, graphql_name='email')
    email_not = sgqlc.types.Field(String, graphql_name='email_not')
    email_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='email_in')
    email_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='email_not_in')
    email_lt = sgqlc.types.Field(String, graphql_name='email_lt')
    email_lte = sgqlc.types.Field(String, graphql_name='email_lte')
    email_gt = sgqlc.types.Field(String, graphql_name='email_gt')
    email_gte = sgqlc.types.Field(String, graphql_name='email_gte')
    email_contains = sgqlc.types.Field(String, graphql_name='email_contains')
    email_not_contains = sgqlc.types.Field(String, graphql_name='email_not_contains')
    email_starts_with = sgqlc.types.Field(String, graphql_name='email_starts_with')
    email_not_starts_with = sgqlc.types.Field(String, graphql_name='email_not_starts_with')
    email_ends_with = sgqlc.types.Field(String, graphql_name='email_ends_with')
    email_not_ends_with = sgqlc.types.Field(String, graphql_name='email_not_ends_with')
    access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='accessLevel')
    access_level_not = sgqlc.types.Field(UserAccessLevel, graphql_name='accessLevel_not')
    access_level_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(UserAccessLevel)), graphql_name='accessLevel_in')
    access_level_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(UserAccessLevel)), graphql_name='accessLevel_not_in')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    expired_at = sgqlc.types.Field(DateTime, graphql_name='expiredAt')
    expired_at_not = sgqlc.types.Field(DateTime, graphql_name='expiredAt_not')
    expired_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='expiredAt_in')
    expired_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='expiredAt_not_in')
    expired_at_lt = sgqlc.types.Field(DateTime, graphql_name='expiredAt_lt')
    expired_at_lte = sgqlc.types.Field(DateTime, graphql_name='expiredAt_lte')
    expired_at_gt = sgqlc.types.Field(DateTime, graphql_name='expiredAt_gt')
    expired_at_gte = sgqlc.types.Field(DateTime, graphql_name='expiredAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InvitationScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InvitationScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InvitationScalarWhereInput')), graphql_name='NOT')


class InvitationSignUpInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('email', 'code', 'first_name', 'last_name', 'job_title', 'phone_number')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='code')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    job_title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='jobTitle')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')


class InvitationSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('InvitationWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InvitationSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InvitationSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InvitationSubscriptionWhereInput')), graphql_name='NOT')


class InvitationUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('email', 'access_level', 'project', 'invited_by', 'activity', 'expired_at')
    email = sgqlc.types.Field(String, graphql_name='email')
    access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='accessLevel')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutInvitationsInput', graphql_name='project')
    invited_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutInvitationsInput', graphql_name='invitedBy')
    activity = sgqlc.types.Field(ActivityUpdateOneInput, graphql_name='activity')
    expired_at = sgqlc.types.Field(DateTime, graphql_name='expiredAt')


class InvitationUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('email', 'access_level', 'expired_at')
    email = sgqlc.types.Field(String, graphql_name='email')
    access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='accessLevel')
    expired_at = sgqlc.types.Field(DateTime, graphql_name='expiredAt')


class InvitationUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('email', 'access_level', 'expired_at')
    email = sgqlc.types.Field(String, graphql_name='email')
    access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='accessLevel')
    expired_at = sgqlc.types.Field(DateTime, graphql_name='expiredAt')


class InvitationUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(InvitationScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(InvitationUpdateManyDataInput), graphql_name='data')


class InvitationUpdateManyWithoutInvitedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(InvitationCreateWithoutInvitedByInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InvitationWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InvitationWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InvitationWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InvitationWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InvitationUpdateWithWhereUniqueWithoutInvitedByInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InvitationUpsertWithWhereUniqueWithoutInvitedByInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(InvitationScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(InvitationUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class InvitationUpdateManyWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(InvitationCreateWithoutProjectInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InvitationWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InvitationWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InvitationWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InvitationWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InvitationUpdateWithWhereUniqueWithoutProjectInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InvitationUpsertWithWhereUniqueWithoutProjectInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(InvitationScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(InvitationUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class InvitationUpdateWithWhereUniqueWithoutInvitedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('InvitationWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('InvitationUpdateWithoutInvitedByDataInput'), graphql_name='data')


class InvitationUpdateWithWhereUniqueWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('InvitationWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('InvitationUpdateWithoutProjectDataInput'), graphql_name='data')


class InvitationUpdateWithoutInvitedByDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('email', 'access_level', 'project', 'activity', 'expired_at')
    email = sgqlc.types.Field(String, graphql_name='email')
    access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='accessLevel')
    project = sgqlc.types.Field('ProjectUpdateOneRequiredWithoutInvitationsInput', graphql_name='project')
    activity = sgqlc.types.Field(ActivityUpdateOneInput, graphql_name='activity')
    expired_at = sgqlc.types.Field(DateTime, graphql_name='expiredAt')


class InvitationUpdateWithoutProjectDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('email', 'access_level', 'invited_by', 'activity', 'expired_at')
    email = sgqlc.types.Field(String, graphql_name='email')
    access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='accessLevel')
    invited_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutInvitationsInput', graphql_name='invitedBy')
    activity = sgqlc.types.Field(ActivityUpdateOneInput, graphql_name='activity')
    expired_at = sgqlc.types.Field(DateTime, graphql_name='expiredAt')


class InvitationUpsertWithWhereUniqueWithoutInvitedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('InvitationWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(InvitationUpdateWithoutInvitedByDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(InvitationCreateWithoutInvitedByInput), graphql_name='create')


class InvitationUpsertWithWhereUniqueWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('InvitationWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(InvitationUpdateWithoutProjectDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(InvitationCreateWithoutProjectInput), graphql_name='create')


class InvitationWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'email', 'email_not', 'email_in', 'email_not_in', 'email_lt', 'email_lte', 'email_gt', 'email_gte', 'email_contains', 'email_not_contains', 'email_starts_with', 'email_not_starts_with', 'email_ends_with', 'email_not_ends_with', 'access_level', 'access_level_not', 'access_level_in', 'access_level_not_in', 'project', 'invited_by', 'activity', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'expired_at', 'expired_at_not', 'expired_at_in', 'expired_at_not_in', 'expired_at_lt', 'expired_at_lte', 'expired_at_gt', 'expired_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    email = sgqlc.types.Field(String, graphql_name='email')
    email_not = sgqlc.types.Field(String, graphql_name='email_not')
    email_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='email_in')
    email_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='email_not_in')
    email_lt = sgqlc.types.Field(String, graphql_name='email_lt')
    email_lte = sgqlc.types.Field(String, graphql_name='email_lte')
    email_gt = sgqlc.types.Field(String, graphql_name='email_gt')
    email_gte = sgqlc.types.Field(String, graphql_name='email_gte')
    email_contains = sgqlc.types.Field(String, graphql_name='email_contains')
    email_not_contains = sgqlc.types.Field(String, graphql_name='email_not_contains')
    email_starts_with = sgqlc.types.Field(String, graphql_name='email_starts_with')
    email_not_starts_with = sgqlc.types.Field(String, graphql_name='email_not_starts_with')
    email_ends_with = sgqlc.types.Field(String, graphql_name='email_ends_with')
    email_not_ends_with = sgqlc.types.Field(String, graphql_name='email_not_ends_with')
    access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='accessLevel')
    access_level_not = sgqlc.types.Field(UserAccessLevel, graphql_name='accessLevel_not')
    access_level_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(UserAccessLevel)), graphql_name='accessLevel_in')
    access_level_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(UserAccessLevel)), graphql_name='accessLevel_not_in')
    project = sgqlc.types.Field('ProjectWhereInput', graphql_name='project')
    invited_by = sgqlc.types.Field('UserWhereInput', graphql_name='invitedBy')
    activity = sgqlc.types.Field(ActivityWhereInput, graphql_name='activity')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    expired_at = sgqlc.types.Field(DateTime, graphql_name='expiredAt')
    expired_at_not = sgqlc.types.Field(DateTime, graphql_name='expiredAt_not')
    expired_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='expiredAt_in')
    expired_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='expiredAt_not_in')
    expired_at_lt = sgqlc.types.Field(DateTime, graphql_name='expiredAt_lt')
    expired_at_lte = sgqlc.types.Field(DateTime, graphql_name='expiredAt_lte')
    expired_at_gt = sgqlc.types.Field(DateTime, graphql_name='expiredAt_gt')
    expired_at_gte = sgqlc.types.Field(DateTime, graphql_name='expiredAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InvitationWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InvitationWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('InvitationWhereInput')), graphql_name='NOT')


class InvitationWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id',)
    id = sgqlc.types.Field(ID, graphql_name='id')


class InviteUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('email', 'access_level', 'project_id', 'project_ids', 'company_id', 'role_id')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    access_level = sgqlc.types.Field(sgqlc.types.non_null(UserAccessLevel), graphql_name='accessLevel')
    project_id = sgqlc.types.Field(String, graphql_name='projectId')
    project_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='projectIds')
    company_id = sgqlc.types.Field(String, graphql_name='companyId')
    role_id = sgqlc.types.Field(String, graphql_name='roleId')


class LinkCompanyLicenseInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id', 'license_id')
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')
    license_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='licenseId')


class LinkCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'url', 'position', 'members_only', 'created_by', 'company', 'description')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    members_only = sgqlc.types.Field(Boolean, graphql_name='membersOnly')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutLinksInput'), graphql_name='createdBy')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutLinksInput), graphql_name='company')
    description = sgqlc.types.Field(String, graphql_name='description')


class LinkCreateManyWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LinkCreateWithoutCompanyInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LinkWhereUniqueInput')), graphql_name='connect')


class LinkCreateManyWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LinkCreateWithoutCreatedByInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LinkWhereUniqueInput')), graphql_name='connect')


class LinkCreateWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'url', 'position', 'members_only', 'created_by', 'description')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    members_only = sgqlc.types.Field(Boolean, graphql_name='membersOnly')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutLinksInput'), graphql_name='createdBy')
    description = sgqlc.types.Field(String, graphql_name='description')


class LinkCreateWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'url', 'position', 'members_only', 'company', 'description')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    members_only = sgqlc.types.Field(Boolean, graphql_name='membersOnly')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutLinksInput), graphql_name='company')
    description = sgqlc.types.Field(String, graphql_name='description')


class LinkFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id',)
    company_id = sgqlc.types.Field(String, graphql_name='companyId')


class LinkScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'title', 'title_not', 'title_in', 'title_not_in', 'title_lt', 'title_lte', 'title_gt', 'title_gte', 'title_contains', 'title_not_contains', 'title_starts_with', 'title_not_starts_with', 'title_ends_with', 'title_not_ends_with', 'url', 'url_not', 'url_in', 'url_not_in', 'url_lt', 'url_lte', 'url_gt', 'url_gte', 'url_contains', 'url_not_contains', 'url_starts_with', 'url_not_starts_with', 'url_ends_with', 'url_not_ends_with', 'position', 'position_not', 'position_in', 'position_not_in', 'position_lt', 'position_lte', 'position_gt', 'position_gte', 'members_only', 'members_only_not', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'description', 'description_not', 'description_in', 'description_not_in', 'description_lt', 'description_lte', 'description_gt', 'description_gte', 'description_contains', 'description_not_contains', 'description_starts_with', 'description_not_starts_with', 'description_ends_with', 'description_not_ends_with', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    title = sgqlc.types.Field(String, graphql_name='title')
    title_not = sgqlc.types.Field(String, graphql_name='title_not')
    title_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_in')
    title_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_not_in')
    title_lt = sgqlc.types.Field(String, graphql_name='title_lt')
    title_lte = sgqlc.types.Field(String, graphql_name='title_lte')
    title_gt = sgqlc.types.Field(String, graphql_name='title_gt')
    title_gte = sgqlc.types.Field(String, graphql_name='title_gte')
    title_contains = sgqlc.types.Field(String, graphql_name='title_contains')
    title_not_contains = sgqlc.types.Field(String, graphql_name='title_not_contains')
    title_starts_with = sgqlc.types.Field(String, graphql_name='title_starts_with')
    title_not_starts_with = sgqlc.types.Field(String, graphql_name='title_not_starts_with')
    title_ends_with = sgqlc.types.Field(String, graphql_name='title_ends_with')
    title_not_ends_with = sgqlc.types.Field(String, graphql_name='title_not_ends_with')
    url = sgqlc.types.Field(String, graphql_name='url')
    url_not = sgqlc.types.Field(String, graphql_name='url_not')
    url_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='url_in')
    url_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='url_not_in')
    url_lt = sgqlc.types.Field(String, graphql_name='url_lt')
    url_lte = sgqlc.types.Field(String, graphql_name='url_lte')
    url_gt = sgqlc.types.Field(String, graphql_name='url_gt')
    url_gte = sgqlc.types.Field(String, graphql_name='url_gte')
    url_contains = sgqlc.types.Field(String, graphql_name='url_contains')
    url_not_contains = sgqlc.types.Field(String, graphql_name='url_not_contains')
    url_starts_with = sgqlc.types.Field(String, graphql_name='url_starts_with')
    url_not_starts_with = sgqlc.types.Field(String, graphql_name='url_not_starts_with')
    url_ends_with = sgqlc.types.Field(String, graphql_name='url_ends_with')
    url_not_ends_with = sgqlc.types.Field(String, graphql_name='url_not_ends_with')
    position = sgqlc.types.Field(Float, graphql_name='position')
    position_not = sgqlc.types.Field(Float, graphql_name='position_not')
    position_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_in')
    position_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_not_in')
    position_lt = sgqlc.types.Field(Float, graphql_name='position_lt')
    position_lte = sgqlc.types.Field(Float, graphql_name='position_lte')
    position_gt = sgqlc.types.Field(Float, graphql_name='position_gt')
    position_gte = sgqlc.types.Field(Float, graphql_name='position_gte')
    members_only = sgqlc.types.Field(Boolean, graphql_name='membersOnly')
    members_only_not = sgqlc.types.Field(Boolean, graphql_name='membersOnly_not')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    description = sgqlc.types.Field(String, graphql_name='description')
    description_not = sgqlc.types.Field(String, graphql_name='description_not')
    description_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='description_in')
    description_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='description_not_in')
    description_lt = sgqlc.types.Field(String, graphql_name='description_lt')
    description_lte = sgqlc.types.Field(String, graphql_name='description_lte')
    description_gt = sgqlc.types.Field(String, graphql_name='description_gt')
    description_gte = sgqlc.types.Field(String, graphql_name='description_gte')
    description_contains = sgqlc.types.Field(String, graphql_name='description_contains')
    description_not_contains = sgqlc.types.Field(String, graphql_name='description_not_contains')
    description_starts_with = sgqlc.types.Field(String, graphql_name='description_starts_with')
    description_not_starts_with = sgqlc.types.Field(String, graphql_name='description_not_starts_with')
    description_ends_with = sgqlc.types.Field(String, graphql_name='description_ends_with')
    description_not_ends_with = sgqlc.types.Field(String, graphql_name='description_not_ends_with')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LinkScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LinkScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LinkScalarWhereInput')), graphql_name='NOT')


class LinkSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('LinkWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LinkSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LinkSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LinkSubscriptionWhereInput')), graphql_name='NOT')


class LinkUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'url', 'position', 'members_only', 'created_by', 'company', 'description')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    url = sgqlc.types.Field(String, graphql_name='url')
    position = sgqlc.types.Field(Float, graphql_name='position')
    members_only = sgqlc.types.Field(Boolean, graphql_name='membersOnly')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutLinksInput', graphql_name='createdBy')
    company = sgqlc.types.Field(CompanyUpdateOneRequiredWithoutLinksInput, graphql_name='company')
    description = sgqlc.types.Field(String, graphql_name='description')


class LinkUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'url', 'position', 'members_only', 'description')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    url = sgqlc.types.Field(String, graphql_name='url')
    position = sgqlc.types.Field(Float, graphql_name='position')
    members_only = sgqlc.types.Field(Boolean, graphql_name='membersOnly')
    description = sgqlc.types.Field(String, graphql_name='description')


class LinkUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'url', 'position', 'members_only', 'description')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    url = sgqlc.types.Field(String, graphql_name='url')
    position = sgqlc.types.Field(Float, graphql_name='position')
    members_only = sgqlc.types.Field(Boolean, graphql_name='membersOnly')
    description = sgqlc.types.Field(String, graphql_name='description')


class LinkUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(LinkScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(LinkUpdateManyDataInput), graphql_name='data')


class LinkUpdateManyWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(LinkCreateWithoutCompanyInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LinkWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LinkWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LinkWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LinkWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LinkUpdateWithWhereUniqueWithoutCompanyInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LinkUpsertWithWhereUniqueWithoutCompanyInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(LinkScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(LinkUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class LinkUpdateManyWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(LinkCreateWithoutCreatedByInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LinkWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LinkWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LinkWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LinkWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LinkUpdateWithWhereUniqueWithoutCreatedByInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LinkUpsertWithWhereUniqueWithoutCreatedByInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(LinkScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(LinkUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class LinkUpdateWithWhereUniqueWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('LinkWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('LinkUpdateWithoutCompanyDataInput'), graphql_name='data')


class LinkUpdateWithWhereUniqueWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('LinkWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('LinkUpdateWithoutCreatedByDataInput'), graphql_name='data')


class LinkUpdateWithoutCompanyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'url', 'position', 'members_only', 'created_by', 'description')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    url = sgqlc.types.Field(String, graphql_name='url')
    position = sgqlc.types.Field(Float, graphql_name='position')
    members_only = sgqlc.types.Field(Boolean, graphql_name='membersOnly')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutLinksInput', graphql_name='createdBy')
    description = sgqlc.types.Field(String, graphql_name='description')


class LinkUpdateWithoutCreatedByDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'url', 'position', 'members_only', 'company', 'description')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    url = sgqlc.types.Field(String, graphql_name='url')
    position = sgqlc.types.Field(Float, graphql_name='position')
    members_only = sgqlc.types.Field(Boolean, graphql_name='membersOnly')
    company = sgqlc.types.Field(CompanyUpdateOneRequiredWithoutLinksInput, graphql_name='company')
    description = sgqlc.types.Field(String, graphql_name='description')


class LinkUpsertWithWhereUniqueWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('LinkWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(LinkUpdateWithoutCompanyDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(LinkCreateWithoutCompanyInput), graphql_name='create')


class LinkUpsertWithWhereUniqueWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('LinkWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(LinkUpdateWithoutCreatedByDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(LinkCreateWithoutCreatedByInput), graphql_name='create')


class LinkWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'title', 'title_not', 'title_in', 'title_not_in', 'title_lt', 'title_lte', 'title_gt', 'title_gte', 'title_contains', 'title_not_contains', 'title_starts_with', 'title_not_starts_with', 'title_ends_with', 'title_not_ends_with', 'url', 'url_not', 'url_in', 'url_not_in', 'url_lt', 'url_lte', 'url_gt', 'url_gte', 'url_contains', 'url_not_contains', 'url_starts_with', 'url_not_starts_with', 'url_ends_with', 'url_not_ends_with', 'position', 'position_not', 'position_in', 'position_not_in', 'position_lt', 'position_lte', 'position_gt', 'position_gte', 'members_only', 'members_only_not', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'created_by', 'company', 'description', 'description_not', 'description_in', 'description_not_in', 'description_lt', 'description_lte', 'description_gt', 'description_gte', 'description_contains', 'description_not_contains', 'description_starts_with', 'description_not_starts_with', 'description_ends_with', 'description_not_ends_with', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    title = sgqlc.types.Field(String, graphql_name='title')
    title_not = sgqlc.types.Field(String, graphql_name='title_not')
    title_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_in')
    title_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_not_in')
    title_lt = sgqlc.types.Field(String, graphql_name='title_lt')
    title_lte = sgqlc.types.Field(String, graphql_name='title_lte')
    title_gt = sgqlc.types.Field(String, graphql_name='title_gt')
    title_gte = sgqlc.types.Field(String, graphql_name='title_gte')
    title_contains = sgqlc.types.Field(String, graphql_name='title_contains')
    title_not_contains = sgqlc.types.Field(String, graphql_name='title_not_contains')
    title_starts_with = sgqlc.types.Field(String, graphql_name='title_starts_with')
    title_not_starts_with = sgqlc.types.Field(String, graphql_name='title_not_starts_with')
    title_ends_with = sgqlc.types.Field(String, graphql_name='title_ends_with')
    title_not_ends_with = sgqlc.types.Field(String, graphql_name='title_not_ends_with')
    url = sgqlc.types.Field(String, graphql_name='url')
    url_not = sgqlc.types.Field(String, graphql_name='url_not')
    url_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='url_in')
    url_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='url_not_in')
    url_lt = sgqlc.types.Field(String, graphql_name='url_lt')
    url_lte = sgqlc.types.Field(String, graphql_name='url_lte')
    url_gt = sgqlc.types.Field(String, graphql_name='url_gt')
    url_gte = sgqlc.types.Field(String, graphql_name='url_gte')
    url_contains = sgqlc.types.Field(String, graphql_name='url_contains')
    url_not_contains = sgqlc.types.Field(String, graphql_name='url_not_contains')
    url_starts_with = sgqlc.types.Field(String, graphql_name='url_starts_with')
    url_not_starts_with = sgqlc.types.Field(String, graphql_name='url_not_starts_with')
    url_ends_with = sgqlc.types.Field(String, graphql_name='url_ends_with')
    url_not_ends_with = sgqlc.types.Field(String, graphql_name='url_not_ends_with')
    position = sgqlc.types.Field(Float, graphql_name='position')
    position_not = sgqlc.types.Field(Float, graphql_name='position_not')
    position_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_in')
    position_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_not_in')
    position_lt = sgqlc.types.Field(Float, graphql_name='position_lt')
    position_lte = sgqlc.types.Field(Float, graphql_name='position_lte')
    position_gt = sgqlc.types.Field(Float, graphql_name='position_gt')
    position_gte = sgqlc.types.Field(Float, graphql_name='position_gte')
    members_only = sgqlc.types.Field(Boolean, graphql_name='membersOnly')
    members_only_not = sgqlc.types.Field(Boolean, graphql_name='membersOnly_not')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    created_by = sgqlc.types.Field('UserWhereInput', graphql_name='createdBy')
    company = sgqlc.types.Field(CompanyWhereInput, graphql_name='company')
    description = sgqlc.types.Field(String, graphql_name='description')
    description_not = sgqlc.types.Field(String, graphql_name='description_not')
    description_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='description_in')
    description_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='description_not_in')
    description_lt = sgqlc.types.Field(String, graphql_name='description_lt')
    description_lte = sgqlc.types.Field(String, graphql_name='description_lte')
    description_gt = sgqlc.types.Field(String, graphql_name='description_gt')
    description_gte = sgqlc.types.Field(String, graphql_name='description_gte')
    description_contains = sgqlc.types.Field(String, graphql_name='description_contains')
    description_not_contains = sgqlc.types.Field(String, graphql_name='description_not_contains')
    description_starts_with = sgqlc.types.Field(String, graphql_name='description_starts_with')
    description_not_starts_with = sgqlc.types.Field(String, graphql_name='description_not_starts_with')
    description_ends_with = sgqlc.types.Field(String, graphql_name='description_ends_with')
    description_not_ends_with = sgqlc.types.Field(String, graphql_name='description_not_ends_with')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LinkWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LinkWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('LinkWhereInput')), graphql_name='NOT')


class LinkWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class MarkActivityAsReadInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('activity_id', 'status_update_id', 'discussion_id', 'comment_id', 'todo_id', 'todo_list_id')
    activity_id = sgqlc.types.Field(String, graphql_name='activityId')
    status_update_id = sgqlc.types.Field(String, graphql_name='statusUpdateId')
    discussion_id = sgqlc.types.Field(String, graphql_name='discussionId')
    comment_id = sgqlc.types.Field(String, graphql_name='commentId')
    todo_id = sgqlc.types.Field(String, graphql_name='todoId')
    todo_list_id = sgqlc.types.Field(String, graphql_name='todoListId')


class MarkActivityAsUnreadInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('activity_id', 'status_update_id', 'discussion_id', 'comment_id', 'todo_id', 'todo_list_id')
    activity_id = sgqlc.types.Field(String, graphql_name='activityId')
    status_update_id = sgqlc.types.Field(String, graphql_name='statusUpdateId')
    discussion_id = sgqlc.types.Field(String, graphql_name='discussionId')
    comment_id = sgqlc.types.Field(String, graphql_name='commentId')
    todo_id = sgqlc.types.Field(String, graphql_name='todoId')
    todo_list_id = sgqlc.types.Field(String, graphql_name='todoListId')


class MarkAllActivityAsReadInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id', 'project_id')
    company_id = sgqlc.types.Field(String, graphql_name='companyId')
    project_id = sgqlc.types.Field(String, graphql_name='projectId')


class MarkAllActivityAsSeenInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id', 'project_id')
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')
    project_id = sgqlc.types.Field(String, graphql_name='projectId')


class MarkAllActivityAsUnreadInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id', 'project_id')
    company_id = sgqlc.types.Field(String, graphql_name='companyId')
    project_id = sgqlc.types.Field(String, graphql_name='projectId')


class MarkMentionAsReadInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mention_id',)
    mention_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='mentionId')


class MarkMentionAsUnreadInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mention_id',)
    mention_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='mentionId')


class MentionFilter(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('type', 'project_id', 'is_read')
    type = sgqlc.types.Field(MentionType, graphql_name='type')
    project_id = sgqlc.types.Field(String, graphql_name='projectId')
    is_read = sgqlc.types.Field(Boolean, graphql_name='isRead')


class MoveTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('todo_id', 'todo_list_id')
    todo_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoId')
    todo_list_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoListId')


class NotificationOptionCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'company_user_notification_option', 'description', 'position')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(NotificationOptionName), graphql_name='name')
    company_user_notification_option = sgqlc.types.Field(CompanyUserNotificationOptionCreateManyWithoutNotificationOptionInput, graphql_name='companyUserNotificationOption')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    position = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='position')


class NotificationOptionCreateOneWithoutCompanyUserNotificationOptionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('NotificationOptionCreateWithoutCompanyUserNotificationOptionInput', graphql_name='create')
    connect = sgqlc.types.Field('NotificationOptionWhereUniqueInput', graphql_name='connect')


class NotificationOptionCreateWithoutCompanyUserNotificationOptionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'description', 'position')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(NotificationOptionName), graphql_name='name')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    position = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='position')


class NotificationOptionSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('NotificationOptionWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('NotificationOptionSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('NotificationOptionSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('NotificationOptionSubscriptionWhereInput')), graphql_name='NOT')


class NotificationOptionUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'company_user_notification_option', 'description', 'position')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(NotificationOptionName, graphql_name='name')
    company_user_notification_option = sgqlc.types.Field(CompanyUserNotificationOptionUpdateManyWithoutNotificationOptionInput, graphql_name='companyUserNotificationOption')
    description = sgqlc.types.Field(String, graphql_name='description')
    position = sgqlc.types.Field(Int, graphql_name='position')


class NotificationOptionUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'description', 'position')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(NotificationOptionName, graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    position = sgqlc.types.Field(Int, graphql_name='position')


class NotificationOptionUpdateOneRequiredWithoutCompanyUserNotificationOptionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(NotificationOptionCreateWithoutCompanyUserNotificationOptionInput, graphql_name='create')
    update = sgqlc.types.Field('NotificationOptionUpdateWithoutCompanyUserNotificationOptionDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('NotificationOptionUpsertWithoutCompanyUserNotificationOptionInput', graphql_name='upsert')
    connect = sgqlc.types.Field('NotificationOptionWhereUniqueInput', graphql_name='connect')


class NotificationOptionUpdateWithoutCompanyUserNotificationOptionDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'description', 'position')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(NotificationOptionName, graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    position = sgqlc.types.Field(Int, graphql_name='position')


class NotificationOptionUpsertWithoutCompanyUserNotificationOptionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(NotificationOptionUpdateWithoutCompanyUserNotificationOptionDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(NotificationOptionCreateWithoutCompanyUserNotificationOptionInput), graphql_name='create')


class NotificationOptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'name', 'name_not', 'name_in', 'name_not_in', 'company_user_notification_option_every', 'company_user_notification_option_some', 'company_user_notification_option_none', 'description', 'description_not', 'description_in', 'description_not_in', 'description_lt', 'description_lte', 'description_gt', 'description_gte', 'description_contains', 'description_not_contains', 'description_starts_with', 'description_not_starts_with', 'description_ends_with', 'description_not_ends_with', 'position', 'position_not', 'position_in', 'position_not_in', 'position_lt', 'position_lte', 'position_gt', 'position_gte', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    name = sgqlc.types.Field(NotificationOptionName, graphql_name='name')
    name_not = sgqlc.types.Field(NotificationOptionName, graphql_name='name_not')
    name_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(NotificationOptionName)), graphql_name='name_in')
    name_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(NotificationOptionName)), graphql_name='name_not_in')
    company_user_notification_option_every = sgqlc.types.Field(CompanyUserNotificationOptionWhereInput, graphql_name='companyUserNotificationOption_every')
    company_user_notification_option_some = sgqlc.types.Field(CompanyUserNotificationOptionWhereInput, graphql_name='companyUserNotificationOption_some')
    company_user_notification_option_none = sgqlc.types.Field(CompanyUserNotificationOptionWhereInput, graphql_name='companyUserNotificationOption_none')
    description = sgqlc.types.Field(String, graphql_name='description')
    description_not = sgqlc.types.Field(String, graphql_name='description_not')
    description_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='description_in')
    description_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='description_not_in')
    description_lt = sgqlc.types.Field(String, graphql_name='description_lt')
    description_lte = sgqlc.types.Field(String, graphql_name='description_lte')
    description_gt = sgqlc.types.Field(String, graphql_name='description_gt')
    description_gte = sgqlc.types.Field(String, graphql_name='description_gte')
    description_contains = sgqlc.types.Field(String, graphql_name='description_contains')
    description_not_contains = sgqlc.types.Field(String, graphql_name='description_not_contains')
    description_starts_with = sgqlc.types.Field(String, graphql_name='description_starts_with')
    description_not_starts_with = sgqlc.types.Field(String, graphql_name='description_not_starts_with')
    description_ends_with = sgqlc.types.Field(String, graphql_name='description_ends_with')
    description_not_ends_with = sgqlc.types.Field(String, graphql_name='description_not_ends_with')
    position = sgqlc.types.Field(Int, graphql_name='position')
    position_not = sgqlc.types.Field(Int, graphql_name='position_not')
    position_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Int)), graphql_name='position_in')
    position_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Int)), graphql_name='position_not_in')
    position_lt = sgqlc.types.Field(Int, graphql_name='position_lt')
    position_lte = sgqlc.types.Field(Int, graphql_name='position_lte')
    position_gt = sgqlc.types.Field(Int, graphql_name='position_gt')
    position_gte = sgqlc.types.Field(Int, graphql_name='position_gte')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('NotificationOptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('NotificationOptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('NotificationOptionWhereInput')), graphql_name='NOT')


class NotificationOptionWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(NotificationOptionName, graphql_name='name')


class OAuthConnectionFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id',)
    project_id = sgqlc.types.Field(String, graphql_name='projectId')


class PersonalAccessTokenCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'secret', 'scopes', 'expired_at', 'last_used_at', 'user')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    secret = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='secret')
    scopes = sgqlc.types.Field(String, graphql_name='scopes')
    expired_at = sgqlc.types.Field(DateTime, graphql_name='expiredAt')
    last_used_at = sgqlc.types.Field(DateTime, graphql_name='lastUsedAt')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutPersonalAccessTokensInput'), graphql_name='user')


class PersonalAccessTokenCreateManyWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PersonalAccessTokenCreateWithoutUserInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PersonalAccessTokenWhereUniqueInput')), graphql_name='connect')


class PersonalAccessTokenCreateWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'secret', 'scopes', 'expired_at', 'last_used_at')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    secret = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='secret')
    scopes = sgqlc.types.Field(String, graphql_name='scopes')
    expired_at = sgqlc.types.Field(DateTime, graphql_name='expiredAt')
    last_used_at = sgqlc.types.Field(DateTime, graphql_name='lastUsedAt')


class PersonalAccessTokenScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'name', 'name_not', 'name_in', 'name_not_in', 'name_lt', 'name_lte', 'name_gt', 'name_gte', 'name_contains', 'name_not_contains', 'name_starts_with', 'name_not_starts_with', 'name_ends_with', 'name_not_ends_with', 'secret', 'secret_not', 'secret_in', 'secret_not_in', 'secret_lt', 'secret_lte', 'secret_gt', 'secret_gte', 'secret_contains', 'secret_not_contains', 'secret_starts_with', 'secret_not_starts_with', 'secret_ends_with', 'secret_not_ends_with', 'scopes', 'scopes_not', 'scopes_in', 'scopes_not_in', 'scopes_lt', 'scopes_lte', 'scopes_gt', 'scopes_gte', 'scopes_contains', 'scopes_not_contains', 'scopes_starts_with', 'scopes_not_starts_with', 'scopes_ends_with', 'scopes_not_ends_with', 'expired_at', 'expired_at_not', 'expired_at_in', 'expired_at_not_in', 'expired_at_lt', 'expired_at_lte', 'expired_at_gt', 'expired_at_gte', 'last_used_at', 'last_used_at_not', 'last_used_at_in', 'last_used_at_not_in', 'last_used_at_lt', 'last_used_at_lte', 'last_used_at_gt', 'last_used_at_gte', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    name = sgqlc.types.Field(String, graphql_name='name')
    name_not = sgqlc.types.Field(String, graphql_name='name_not')
    name_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='name_in')
    name_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='name_not_in')
    name_lt = sgqlc.types.Field(String, graphql_name='name_lt')
    name_lte = sgqlc.types.Field(String, graphql_name='name_lte')
    name_gt = sgqlc.types.Field(String, graphql_name='name_gt')
    name_gte = sgqlc.types.Field(String, graphql_name='name_gte')
    name_contains = sgqlc.types.Field(String, graphql_name='name_contains')
    name_not_contains = sgqlc.types.Field(String, graphql_name='name_not_contains')
    name_starts_with = sgqlc.types.Field(String, graphql_name='name_starts_with')
    name_not_starts_with = sgqlc.types.Field(String, graphql_name='name_not_starts_with')
    name_ends_with = sgqlc.types.Field(String, graphql_name='name_ends_with')
    name_not_ends_with = sgqlc.types.Field(String, graphql_name='name_not_ends_with')
    secret = sgqlc.types.Field(String, graphql_name='secret')
    secret_not = sgqlc.types.Field(String, graphql_name='secret_not')
    secret_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='secret_in')
    secret_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='secret_not_in')
    secret_lt = sgqlc.types.Field(String, graphql_name='secret_lt')
    secret_lte = sgqlc.types.Field(String, graphql_name='secret_lte')
    secret_gt = sgqlc.types.Field(String, graphql_name='secret_gt')
    secret_gte = sgqlc.types.Field(String, graphql_name='secret_gte')
    secret_contains = sgqlc.types.Field(String, graphql_name='secret_contains')
    secret_not_contains = sgqlc.types.Field(String, graphql_name='secret_not_contains')
    secret_starts_with = sgqlc.types.Field(String, graphql_name='secret_starts_with')
    secret_not_starts_with = sgqlc.types.Field(String, graphql_name='secret_not_starts_with')
    secret_ends_with = sgqlc.types.Field(String, graphql_name='secret_ends_with')
    secret_not_ends_with = sgqlc.types.Field(String, graphql_name='secret_not_ends_with')
    scopes = sgqlc.types.Field(String, graphql_name='scopes')
    scopes_not = sgqlc.types.Field(String, graphql_name='scopes_not')
    scopes_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='scopes_in')
    scopes_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='scopes_not_in')
    scopes_lt = sgqlc.types.Field(String, graphql_name='scopes_lt')
    scopes_lte = sgqlc.types.Field(String, graphql_name='scopes_lte')
    scopes_gt = sgqlc.types.Field(String, graphql_name='scopes_gt')
    scopes_gte = sgqlc.types.Field(String, graphql_name='scopes_gte')
    scopes_contains = sgqlc.types.Field(String, graphql_name='scopes_contains')
    scopes_not_contains = sgqlc.types.Field(String, graphql_name='scopes_not_contains')
    scopes_starts_with = sgqlc.types.Field(String, graphql_name='scopes_starts_with')
    scopes_not_starts_with = sgqlc.types.Field(String, graphql_name='scopes_not_starts_with')
    scopes_ends_with = sgqlc.types.Field(String, graphql_name='scopes_ends_with')
    scopes_not_ends_with = sgqlc.types.Field(String, graphql_name='scopes_not_ends_with')
    expired_at = sgqlc.types.Field(DateTime, graphql_name='expiredAt')
    expired_at_not = sgqlc.types.Field(DateTime, graphql_name='expiredAt_not')
    expired_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='expiredAt_in')
    expired_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='expiredAt_not_in')
    expired_at_lt = sgqlc.types.Field(DateTime, graphql_name='expiredAt_lt')
    expired_at_lte = sgqlc.types.Field(DateTime, graphql_name='expiredAt_lte')
    expired_at_gt = sgqlc.types.Field(DateTime, graphql_name='expiredAt_gt')
    expired_at_gte = sgqlc.types.Field(DateTime, graphql_name='expiredAt_gte')
    last_used_at = sgqlc.types.Field(DateTime, graphql_name='lastUsedAt')
    last_used_at_not = sgqlc.types.Field(DateTime, graphql_name='lastUsedAt_not')
    last_used_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='lastUsedAt_in')
    last_used_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='lastUsedAt_not_in')
    last_used_at_lt = sgqlc.types.Field(DateTime, graphql_name='lastUsedAt_lt')
    last_used_at_lte = sgqlc.types.Field(DateTime, graphql_name='lastUsedAt_lte')
    last_used_at_gt = sgqlc.types.Field(DateTime, graphql_name='lastUsedAt_gt')
    last_used_at_gte = sgqlc.types.Field(DateTime, graphql_name='lastUsedAt_gte')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PersonalAccessTokenScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PersonalAccessTokenScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PersonalAccessTokenScalarWhereInput')), graphql_name='NOT')


class PersonalAccessTokenSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('PersonalAccessTokenWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PersonalAccessTokenSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PersonalAccessTokenSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PersonalAccessTokenSubscriptionWhereInput')), graphql_name='NOT')


class PersonalAccessTokenUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'secret', 'scopes', 'expired_at', 'last_used_at', 'user')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    secret = sgqlc.types.Field(String, graphql_name='secret')
    scopes = sgqlc.types.Field(String, graphql_name='scopes')
    expired_at = sgqlc.types.Field(DateTime, graphql_name='expiredAt')
    last_used_at = sgqlc.types.Field(DateTime, graphql_name='lastUsedAt')
    user = sgqlc.types.Field('UserUpdateOneRequiredWithoutPersonalAccessTokensInput', graphql_name='user')


class PersonalAccessTokenUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'secret', 'scopes', 'expired_at', 'last_used_at')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    secret = sgqlc.types.Field(String, graphql_name='secret')
    scopes = sgqlc.types.Field(String, graphql_name='scopes')
    expired_at = sgqlc.types.Field(DateTime, graphql_name='expiredAt')
    last_used_at = sgqlc.types.Field(DateTime, graphql_name='lastUsedAt')


class PersonalAccessTokenUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'secret', 'scopes', 'expired_at', 'last_used_at')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    secret = sgqlc.types.Field(String, graphql_name='secret')
    scopes = sgqlc.types.Field(String, graphql_name='scopes')
    expired_at = sgqlc.types.Field(DateTime, graphql_name='expiredAt')
    last_used_at = sgqlc.types.Field(DateTime, graphql_name='lastUsedAt')


class PersonalAccessTokenUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(PersonalAccessTokenScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(PersonalAccessTokenUpdateManyDataInput), graphql_name='data')


class PersonalAccessTokenUpdateManyWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(PersonalAccessTokenCreateWithoutUserInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PersonalAccessTokenWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PersonalAccessTokenWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PersonalAccessTokenWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PersonalAccessTokenWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PersonalAccessTokenUpdateWithWhereUniqueWithoutUserInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PersonalAccessTokenUpsertWithWhereUniqueWithoutUserInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(PersonalAccessTokenScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(PersonalAccessTokenUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class PersonalAccessTokenUpdateWithWhereUniqueWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('PersonalAccessTokenWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('PersonalAccessTokenUpdateWithoutUserDataInput'), graphql_name='data')


class PersonalAccessTokenUpdateWithoutUserDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'secret', 'scopes', 'expired_at', 'last_used_at')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    secret = sgqlc.types.Field(String, graphql_name='secret')
    scopes = sgqlc.types.Field(String, graphql_name='scopes')
    expired_at = sgqlc.types.Field(DateTime, graphql_name='expiredAt')
    last_used_at = sgqlc.types.Field(DateTime, graphql_name='lastUsedAt')


class PersonalAccessTokenUpsertWithWhereUniqueWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('PersonalAccessTokenWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(PersonalAccessTokenUpdateWithoutUserDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(PersonalAccessTokenCreateWithoutUserInput), graphql_name='create')


class PersonalAccessTokenWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'name', 'name_not', 'name_in', 'name_not_in', 'name_lt', 'name_lte', 'name_gt', 'name_gte', 'name_contains', 'name_not_contains', 'name_starts_with', 'name_not_starts_with', 'name_ends_with', 'name_not_ends_with', 'secret', 'secret_not', 'secret_in', 'secret_not_in', 'secret_lt', 'secret_lte', 'secret_gt', 'secret_gte', 'secret_contains', 'secret_not_contains', 'secret_starts_with', 'secret_not_starts_with', 'secret_ends_with', 'secret_not_ends_with', 'scopes', 'scopes_not', 'scopes_in', 'scopes_not_in', 'scopes_lt', 'scopes_lte', 'scopes_gt', 'scopes_gte', 'scopes_contains', 'scopes_not_contains', 'scopes_starts_with', 'scopes_not_starts_with', 'scopes_ends_with', 'scopes_not_ends_with', 'expired_at', 'expired_at_not', 'expired_at_in', 'expired_at_not_in', 'expired_at_lt', 'expired_at_lte', 'expired_at_gt', 'expired_at_gte', 'last_used_at', 'last_used_at_not', 'last_used_at_in', 'last_used_at_not_in', 'last_used_at_lt', 'last_used_at_lte', 'last_used_at_gt', 'last_used_at_gte', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'user', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    name = sgqlc.types.Field(String, graphql_name='name')
    name_not = sgqlc.types.Field(String, graphql_name='name_not')
    name_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='name_in')
    name_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='name_not_in')
    name_lt = sgqlc.types.Field(String, graphql_name='name_lt')
    name_lte = sgqlc.types.Field(String, graphql_name='name_lte')
    name_gt = sgqlc.types.Field(String, graphql_name='name_gt')
    name_gte = sgqlc.types.Field(String, graphql_name='name_gte')
    name_contains = sgqlc.types.Field(String, graphql_name='name_contains')
    name_not_contains = sgqlc.types.Field(String, graphql_name='name_not_contains')
    name_starts_with = sgqlc.types.Field(String, graphql_name='name_starts_with')
    name_not_starts_with = sgqlc.types.Field(String, graphql_name='name_not_starts_with')
    name_ends_with = sgqlc.types.Field(String, graphql_name='name_ends_with')
    name_not_ends_with = sgqlc.types.Field(String, graphql_name='name_not_ends_with')
    secret = sgqlc.types.Field(String, graphql_name='secret')
    secret_not = sgqlc.types.Field(String, graphql_name='secret_not')
    secret_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='secret_in')
    secret_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='secret_not_in')
    secret_lt = sgqlc.types.Field(String, graphql_name='secret_lt')
    secret_lte = sgqlc.types.Field(String, graphql_name='secret_lte')
    secret_gt = sgqlc.types.Field(String, graphql_name='secret_gt')
    secret_gte = sgqlc.types.Field(String, graphql_name='secret_gte')
    secret_contains = sgqlc.types.Field(String, graphql_name='secret_contains')
    secret_not_contains = sgqlc.types.Field(String, graphql_name='secret_not_contains')
    secret_starts_with = sgqlc.types.Field(String, graphql_name='secret_starts_with')
    secret_not_starts_with = sgqlc.types.Field(String, graphql_name='secret_not_starts_with')
    secret_ends_with = sgqlc.types.Field(String, graphql_name='secret_ends_with')
    secret_not_ends_with = sgqlc.types.Field(String, graphql_name='secret_not_ends_with')
    scopes = sgqlc.types.Field(String, graphql_name='scopes')
    scopes_not = sgqlc.types.Field(String, graphql_name='scopes_not')
    scopes_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='scopes_in')
    scopes_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='scopes_not_in')
    scopes_lt = sgqlc.types.Field(String, graphql_name='scopes_lt')
    scopes_lte = sgqlc.types.Field(String, graphql_name='scopes_lte')
    scopes_gt = sgqlc.types.Field(String, graphql_name='scopes_gt')
    scopes_gte = sgqlc.types.Field(String, graphql_name='scopes_gte')
    scopes_contains = sgqlc.types.Field(String, graphql_name='scopes_contains')
    scopes_not_contains = sgqlc.types.Field(String, graphql_name='scopes_not_contains')
    scopes_starts_with = sgqlc.types.Field(String, graphql_name='scopes_starts_with')
    scopes_not_starts_with = sgqlc.types.Field(String, graphql_name='scopes_not_starts_with')
    scopes_ends_with = sgqlc.types.Field(String, graphql_name='scopes_ends_with')
    scopes_not_ends_with = sgqlc.types.Field(String, graphql_name='scopes_not_ends_with')
    expired_at = sgqlc.types.Field(DateTime, graphql_name='expiredAt')
    expired_at_not = sgqlc.types.Field(DateTime, graphql_name='expiredAt_not')
    expired_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='expiredAt_in')
    expired_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='expiredAt_not_in')
    expired_at_lt = sgqlc.types.Field(DateTime, graphql_name='expiredAt_lt')
    expired_at_lte = sgqlc.types.Field(DateTime, graphql_name='expiredAt_lte')
    expired_at_gt = sgqlc.types.Field(DateTime, graphql_name='expiredAt_gt')
    expired_at_gte = sgqlc.types.Field(DateTime, graphql_name='expiredAt_gte')
    last_used_at = sgqlc.types.Field(DateTime, graphql_name='lastUsedAt')
    last_used_at_not = sgqlc.types.Field(DateTime, graphql_name='lastUsedAt_not')
    last_used_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='lastUsedAt_in')
    last_used_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='lastUsedAt_not_in')
    last_used_at_lt = sgqlc.types.Field(DateTime, graphql_name='lastUsedAt_lt')
    last_used_at_lte = sgqlc.types.Field(DateTime, graphql_name='lastUsedAt_lte')
    last_used_at_gt = sgqlc.types.Field(DateTime, graphql_name='lastUsedAt_gt')
    last_used_at_gte = sgqlc.types.Field(DateTime, graphql_name='lastUsedAt_gte')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    user = sgqlc.types.Field('UserWhereInput', graphql_name='user')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PersonalAccessTokenWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PersonalAccessTokenWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PersonalAccessTokenWhereInput')), graphql_name='NOT')


class PersonalAccessTokenWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class PortableDocumentFilter(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id',)
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')


class ProjectCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'slug', 'name', 'description', 'image', 'archived', 'is_template', 'is_official_template', 'category', 'activities', 'company', 'custom_fields', 'discussions', 'files', 'invitations', 'project_users', 'questions', 'status_updates', 'tags', 'todo_lists', 'automations', 'forms', 'documents', 'hide_email_from_roles')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    activities = sgqlc.types.Field(ActivityCreateManyWithoutProjectInput, graphql_name='activities')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutProjectsInput), graphql_name='company')
    custom_fields = sgqlc.types.Field(CustomFieldCreateManyWithoutProjectInput, graphql_name='customFields')
    discussions = sgqlc.types.Field(DiscussionCreateManyWithoutProjectInput, graphql_name='discussions')
    files = sgqlc.types.Field(FileCreateManyWithoutProjectInput, graphql_name='files')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutProjectInput, graphql_name='invitations')
    project_users = sgqlc.types.Field('ProjectUserCreateManyWithoutProjectInput', graphql_name='projectUsers')
    questions = sgqlc.types.Field('QuestionCreateManyWithoutProjectInput', graphql_name='questions')
    status_updates = sgqlc.types.Field('StatusUpdateCreateManyWithoutProjectInput', graphql_name='statusUpdates')
    tags = sgqlc.types.Field('TagCreateManyWithoutProjectInput', graphql_name='tags')
    todo_lists = sgqlc.types.Field('TodoListCreateManyWithoutProjectInput', graphql_name='todoLists')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutProjectInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutProjectInput, graphql_name='forms')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutProjectInput, graphql_name='documents')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectCreateManyWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectCreateWithoutCompanyInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectWhereUniqueInput')), graphql_name='connect')


class ProjectCreateOneWithoutActivitiesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('ProjectCreateWithoutActivitiesInput', graphql_name='create')
    connect = sgqlc.types.Field('ProjectWhereUniqueInput', graphql_name='connect')


class ProjectCreateOneWithoutAutomationsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('ProjectCreateWithoutAutomationsInput', graphql_name='create')
    connect = sgqlc.types.Field('ProjectWhereUniqueInput', graphql_name='connect')


class ProjectCreateOneWithoutCustomFieldsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('ProjectCreateWithoutCustomFieldsInput', graphql_name='create')
    connect = sgqlc.types.Field('ProjectWhereUniqueInput', graphql_name='connect')


class ProjectCreateOneWithoutDiscussionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('ProjectCreateWithoutDiscussionsInput', graphql_name='create')
    connect = sgqlc.types.Field('ProjectWhereUniqueInput', graphql_name='connect')


class ProjectCreateOneWithoutDocumentsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('ProjectCreateWithoutDocumentsInput', graphql_name='create')
    connect = sgqlc.types.Field('ProjectWhereUniqueInput', graphql_name='connect')


class ProjectCreateOneWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('ProjectCreateWithoutFilesInput', graphql_name='create')
    connect = sgqlc.types.Field('ProjectWhereUniqueInput', graphql_name='connect')


class ProjectCreateOneWithoutFormsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('ProjectCreateWithoutFormsInput', graphql_name='create')
    connect = sgqlc.types.Field('ProjectWhereUniqueInput', graphql_name='connect')


class ProjectCreateOneWithoutInvitationsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('ProjectCreateWithoutInvitationsInput', graphql_name='create')
    connect = sgqlc.types.Field('ProjectWhereUniqueInput', graphql_name='connect')


class ProjectCreateOneWithoutProjectUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('ProjectCreateWithoutProjectUsersInput', graphql_name='create')
    connect = sgqlc.types.Field('ProjectWhereUniqueInput', graphql_name='connect')


class ProjectCreateOneWithoutQuestionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('ProjectCreateWithoutQuestionsInput', graphql_name='create')
    connect = sgqlc.types.Field('ProjectWhereUniqueInput', graphql_name='connect')


class ProjectCreateOneWithoutStatusUpdatesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('ProjectCreateWithoutStatusUpdatesInput', graphql_name='create')
    connect = sgqlc.types.Field('ProjectWhereUniqueInput', graphql_name='connect')


class ProjectCreateOneWithoutTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('ProjectCreateWithoutTagsInput', graphql_name='create')
    connect = sgqlc.types.Field('ProjectWhereUniqueInput', graphql_name='connect')


class ProjectCreateOneWithoutTodoListsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('ProjectCreateWithoutTodoListsInput', graphql_name='create')
    connect = sgqlc.types.Field('ProjectWhereUniqueInput', graphql_name='connect')


class ProjectCreateWithoutActivitiesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'slug', 'name', 'description', 'image', 'archived', 'is_template', 'is_official_template', 'category', 'company', 'custom_fields', 'discussions', 'files', 'invitations', 'project_users', 'questions', 'status_updates', 'tags', 'todo_lists', 'automations', 'forms', 'documents', 'hide_email_from_roles')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutProjectsInput), graphql_name='company')
    custom_fields = sgqlc.types.Field(CustomFieldCreateManyWithoutProjectInput, graphql_name='customFields')
    discussions = sgqlc.types.Field(DiscussionCreateManyWithoutProjectInput, graphql_name='discussions')
    files = sgqlc.types.Field(FileCreateManyWithoutProjectInput, graphql_name='files')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutProjectInput, graphql_name='invitations')
    project_users = sgqlc.types.Field('ProjectUserCreateManyWithoutProjectInput', graphql_name='projectUsers')
    questions = sgqlc.types.Field('QuestionCreateManyWithoutProjectInput', graphql_name='questions')
    status_updates = sgqlc.types.Field('StatusUpdateCreateManyWithoutProjectInput', graphql_name='statusUpdates')
    tags = sgqlc.types.Field('TagCreateManyWithoutProjectInput', graphql_name='tags')
    todo_lists = sgqlc.types.Field('TodoListCreateManyWithoutProjectInput', graphql_name='todoLists')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutProjectInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutProjectInput, graphql_name='forms')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutProjectInput, graphql_name='documents')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectCreateWithoutAutomationsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'slug', 'name', 'description', 'image', 'archived', 'is_template', 'is_official_template', 'category', 'activities', 'company', 'custom_fields', 'discussions', 'files', 'invitations', 'project_users', 'questions', 'status_updates', 'tags', 'todo_lists', 'forms', 'documents', 'hide_email_from_roles')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    activities = sgqlc.types.Field(ActivityCreateManyWithoutProjectInput, graphql_name='activities')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutProjectsInput), graphql_name='company')
    custom_fields = sgqlc.types.Field(CustomFieldCreateManyWithoutProjectInput, graphql_name='customFields')
    discussions = sgqlc.types.Field(DiscussionCreateManyWithoutProjectInput, graphql_name='discussions')
    files = sgqlc.types.Field(FileCreateManyWithoutProjectInput, graphql_name='files')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutProjectInput, graphql_name='invitations')
    project_users = sgqlc.types.Field('ProjectUserCreateManyWithoutProjectInput', graphql_name='projectUsers')
    questions = sgqlc.types.Field('QuestionCreateManyWithoutProjectInput', graphql_name='questions')
    status_updates = sgqlc.types.Field('StatusUpdateCreateManyWithoutProjectInput', graphql_name='statusUpdates')
    tags = sgqlc.types.Field('TagCreateManyWithoutProjectInput', graphql_name='tags')
    todo_lists = sgqlc.types.Field('TodoListCreateManyWithoutProjectInput', graphql_name='todoLists')
    forms = sgqlc.types.Field(FormCreateManyWithoutProjectInput, graphql_name='forms')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutProjectInput, graphql_name='documents')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectCreateWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'slug', 'name', 'description', 'image', 'archived', 'is_template', 'is_official_template', 'category', 'activities', 'custom_fields', 'discussions', 'files', 'invitations', 'project_users', 'questions', 'status_updates', 'tags', 'todo_lists', 'automations', 'forms', 'documents', 'hide_email_from_roles')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    activities = sgqlc.types.Field(ActivityCreateManyWithoutProjectInput, graphql_name='activities')
    custom_fields = sgqlc.types.Field(CustomFieldCreateManyWithoutProjectInput, graphql_name='customFields')
    discussions = sgqlc.types.Field(DiscussionCreateManyWithoutProjectInput, graphql_name='discussions')
    files = sgqlc.types.Field(FileCreateManyWithoutProjectInput, graphql_name='files')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutProjectInput, graphql_name='invitations')
    project_users = sgqlc.types.Field('ProjectUserCreateManyWithoutProjectInput', graphql_name='projectUsers')
    questions = sgqlc.types.Field('QuestionCreateManyWithoutProjectInput', graphql_name='questions')
    status_updates = sgqlc.types.Field('StatusUpdateCreateManyWithoutProjectInput', graphql_name='statusUpdates')
    tags = sgqlc.types.Field('TagCreateManyWithoutProjectInput', graphql_name='tags')
    todo_lists = sgqlc.types.Field('TodoListCreateManyWithoutProjectInput', graphql_name='todoLists')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutProjectInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutProjectInput, graphql_name='forms')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutProjectInput, graphql_name='documents')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectCreateWithoutCustomFieldsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'slug', 'name', 'description', 'image', 'archived', 'is_template', 'is_official_template', 'category', 'activities', 'company', 'discussions', 'files', 'invitations', 'project_users', 'questions', 'status_updates', 'tags', 'todo_lists', 'automations', 'forms', 'documents', 'hide_email_from_roles')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    activities = sgqlc.types.Field(ActivityCreateManyWithoutProjectInput, graphql_name='activities')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutProjectsInput), graphql_name='company')
    discussions = sgqlc.types.Field(DiscussionCreateManyWithoutProjectInput, graphql_name='discussions')
    files = sgqlc.types.Field(FileCreateManyWithoutProjectInput, graphql_name='files')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutProjectInput, graphql_name='invitations')
    project_users = sgqlc.types.Field('ProjectUserCreateManyWithoutProjectInput', graphql_name='projectUsers')
    questions = sgqlc.types.Field('QuestionCreateManyWithoutProjectInput', graphql_name='questions')
    status_updates = sgqlc.types.Field('StatusUpdateCreateManyWithoutProjectInput', graphql_name='statusUpdates')
    tags = sgqlc.types.Field('TagCreateManyWithoutProjectInput', graphql_name='tags')
    todo_lists = sgqlc.types.Field('TodoListCreateManyWithoutProjectInput', graphql_name='todoLists')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutProjectInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutProjectInput, graphql_name='forms')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutProjectInput, graphql_name='documents')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectCreateWithoutDiscussionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'slug', 'name', 'description', 'image', 'archived', 'is_template', 'is_official_template', 'category', 'activities', 'company', 'custom_fields', 'files', 'invitations', 'project_users', 'questions', 'status_updates', 'tags', 'todo_lists', 'automations', 'forms', 'documents', 'hide_email_from_roles')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    activities = sgqlc.types.Field(ActivityCreateManyWithoutProjectInput, graphql_name='activities')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutProjectsInput), graphql_name='company')
    custom_fields = sgqlc.types.Field(CustomFieldCreateManyWithoutProjectInput, graphql_name='customFields')
    files = sgqlc.types.Field(FileCreateManyWithoutProjectInput, graphql_name='files')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutProjectInput, graphql_name='invitations')
    project_users = sgqlc.types.Field('ProjectUserCreateManyWithoutProjectInput', graphql_name='projectUsers')
    questions = sgqlc.types.Field('QuestionCreateManyWithoutProjectInput', graphql_name='questions')
    status_updates = sgqlc.types.Field('StatusUpdateCreateManyWithoutProjectInput', graphql_name='statusUpdates')
    tags = sgqlc.types.Field('TagCreateManyWithoutProjectInput', graphql_name='tags')
    todo_lists = sgqlc.types.Field('TodoListCreateManyWithoutProjectInput', graphql_name='todoLists')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutProjectInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutProjectInput, graphql_name='forms')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutProjectInput, graphql_name='documents')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectCreateWithoutDocumentsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'slug', 'name', 'description', 'image', 'archived', 'is_template', 'is_official_template', 'category', 'activities', 'company', 'custom_fields', 'discussions', 'files', 'invitations', 'project_users', 'questions', 'status_updates', 'tags', 'todo_lists', 'automations', 'forms', 'hide_email_from_roles')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    activities = sgqlc.types.Field(ActivityCreateManyWithoutProjectInput, graphql_name='activities')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutProjectsInput), graphql_name='company')
    custom_fields = sgqlc.types.Field(CustomFieldCreateManyWithoutProjectInput, graphql_name='customFields')
    discussions = sgqlc.types.Field(DiscussionCreateManyWithoutProjectInput, graphql_name='discussions')
    files = sgqlc.types.Field(FileCreateManyWithoutProjectInput, graphql_name='files')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutProjectInput, graphql_name='invitations')
    project_users = sgqlc.types.Field('ProjectUserCreateManyWithoutProjectInput', graphql_name='projectUsers')
    questions = sgqlc.types.Field('QuestionCreateManyWithoutProjectInput', graphql_name='questions')
    status_updates = sgqlc.types.Field('StatusUpdateCreateManyWithoutProjectInput', graphql_name='statusUpdates')
    tags = sgqlc.types.Field('TagCreateManyWithoutProjectInput', graphql_name='tags')
    todo_lists = sgqlc.types.Field('TodoListCreateManyWithoutProjectInput', graphql_name='todoLists')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutProjectInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutProjectInput, graphql_name='forms')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectCreateWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'slug', 'name', 'description', 'image', 'archived', 'is_template', 'is_official_template', 'category', 'activities', 'company', 'custom_fields', 'discussions', 'invitations', 'project_users', 'questions', 'status_updates', 'tags', 'todo_lists', 'automations', 'forms', 'documents', 'hide_email_from_roles')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    activities = sgqlc.types.Field(ActivityCreateManyWithoutProjectInput, graphql_name='activities')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutProjectsInput), graphql_name='company')
    custom_fields = sgqlc.types.Field(CustomFieldCreateManyWithoutProjectInput, graphql_name='customFields')
    discussions = sgqlc.types.Field(DiscussionCreateManyWithoutProjectInput, graphql_name='discussions')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutProjectInput, graphql_name='invitations')
    project_users = sgqlc.types.Field('ProjectUserCreateManyWithoutProjectInput', graphql_name='projectUsers')
    questions = sgqlc.types.Field('QuestionCreateManyWithoutProjectInput', graphql_name='questions')
    status_updates = sgqlc.types.Field('StatusUpdateCreateManyWithoutProjectInput', graphql_name='statusUpdates')
    tags = sgqlc.types.Field('TagCreateManyWithoutProjectInput', graphql_name='tags')
    todo_lists = sgqlc.types.Field('TodoListCreateManyWithoutProjectInput', graphql_name='todoLists')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutProjectInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutProjectInput, graphql_name='forms')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutProjectInput, graphql_name='documents')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectCreateWithoutFormsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'slug', 'name', 'description', 'image', 'archived', 'is_template', 'is_official_template', 'category', 'activities', 'company', 'custom_fields', 'discussions', 'files', 'invitations', 'project_users', 'questions', 'status_updates', 'tags', 'todo_lists', 'automations', 'documents', 'hide_email_from_roles')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    activities = sgqlc.types.Field(ActivityCreateManyWithoutProjectInput, graphql_name='activities')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutProjectsInput), graphql_name='company')
    custom_fields = sgqlc.types.Field(CustomFieldCreateManyWithoutProjectInput, graphql_name='customFields')
    discussions = sgqlc.types.Field(DiscussionCreateManyWithoutProjectInput, graphql_name='discussions')
    files = sgqlc.types.Field(FileCreateManyWithoutProjectInput, graphql_name='files')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutProjectInput, graphql_name='invitations')
    project_users = sgqlc.types.Field('ProjectUserCreateManyWithoutProjectInput', graphql_name='projectUsers')
    questions = sgqlc.types.Field('QuestionCreateManyWithoutProjectInput', graphql_name='questions')
    status_updates = sgqlc.types.Field('StatusUpdateCreateManyWithoutProjectInput', graphql_name='statusUpdates')
    tags = sgqlc.types.Field('TagCreateManyWithoutProjectInput', graphql_name='tags')
    todo_lists = sgqlc.types.Field('TodoListCreateManyWithoutProjectInput', graphql_name='todoLists')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutProjectInput, graphql_name='automations')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutProjectInput, graphql_name='documents')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectCreateWithoutInvitationsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'slug', 'name', 'description', 'image', 'archived', 'is_template', 'is_official_template', 'category', 'activities', 'company', 'custom_fields', 'discussions', 'files', 'project_users', 'questions', 'status_updates', 'tags', 'todo_lists', 'automations', 'forms', 'documents', 'hide_email_from_roles')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    activities = sgqlc.types.Field(ActivityCreateManyWithoutProjectInput, graphql_name='activities')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutProjectsInput), graphql_name='company')
    custom_fields = sgqlc.types.Field(CustomFieldCreateManyWithoutProjectInput, graphql_name='customFields')
    discussions = sgqlc.types.Field(DiscussionCreateManyWithoutProjectInput, graphql_name='discussions')
    files = sgqlc.types.Field(FileCreateManyWithoutProjectInput, graphql_name='files')
    project_users = sgqlc.types.Field('ProjectUserCreateManyWithoutProjectInput', graphql_name='projectUsers')
    questions = sgqlc.types.Field('QuestionCreateManyWithoutProjectInput', graphql_name='questions')
    status_updates = sgqlc.types.Field('StatusUpdateCreateManyWithoutProjectInput', graphql_name='statusUpdates')
    tags = sgqlc.types.Field('TagCreateManyWithoutProjectInput', graphql_name='tags')
    todo_lists = sgqlc.types.Field('TodoListCreateManyWithoutProjectInput', graphql_name='todoLists')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutProjectInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutProjectInput, graphql_name='forms')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutProjectInput, graphql_name='documents')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectCreateWithoutProjectUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'slug', 'name', 'description', 'image', 'archived', 'is_template', 'is_official_template', 'category', 'activities', 'company', 'custom_fields', 'discussions', 'files', 'invitations', 'questions', 'status_updates', 'tags', 'todo_lists', 'automations', 'forms', 'documents', 'hide_email_from_roles')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    activities = sgqlc.types.Field(ActivityCreateManyWithoutProjectInput, graphql_name='activities')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutProjectsInput), graphql_name='company')
    custom_fields = sgqlc.types.Field(CustomFieldCreateManyWithoutProjectInput, graphql_name='customFields')
    discussions = sgqlc.types.Field(DiscussionCreateManyWithoutProjectInput, graphql_name='discussions')
    files = sgqlc.types.Field(FileCreateManyWithoutProjectInput, graphql_name='files')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutProjectInput, graphql_name='invitations')
    questions = sgqlc.types.Field('QuestionCreateManyWithoutProjectInput', graphql_name='questions')
    status_updates = sgqlc.types.Field('StatusUpdateCreateManyWithoutProjectInput', graphql_name='statusUpdates')
    tags = sgqlc.types.Field('TagCreateManyWithoutProjectInput', graphql_name='tags')
    todo_lists = sgqlc.types.Field('TodoListCreateManyWithoutProjectInput', graphql_name='todoLists')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutProjectInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutProjectInput, graphql_name='forms')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutProjectInput, graphql_name='documents')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectCreateWithoutQuestionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'slug', 'name', 'description', 'image', 'archived', 'is_template', 'is_official_template', 'category', 'activities', 'company', 'custom_fields', 'discussions', 'files', 'invitations', 'project_users', 'status_updates', 'tags', 'todo_lists', 'automations', 'forms', 'documents', 'hide_email_from_roles')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    activities = sgqlc.types.Field(ActivityCreateManyWithoutProjectInput, graphql_name='activities')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutProjectsInput), graphql_name='company')
    custom_fields = sgqlc.types.Field(CustomFieldCreateManyWithoutProjectInput, graphql_name='customFields')
    discussions = sgqlc.types.Field(DiscussionCreateManyWithoutProjectInput, graphql_name='discussions')
    files = sgqlc.types.Field(FileCreateManyWithoutProjectInput, graphql_name='files')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutProjectInput, graphql_name='invitations')
    project_users = sgqlc.types.Field('ProjectUserCreateManyWithoutProjectInput', graphql_name='projectUsers')
    status_updates = sgqlc.types.Field('StatusUpdateCreateManyWithoutProjectInput', graphql_name='statusUpdates')
    tags = sgqlc.types.Field('TagCreateManyWithoutProjectInput', graphql_name='tags')
    todo_lists = sgqlc.types.Field('TodoListCreateManyWithoutProjectInput', graphql_name='todoLists')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutProjectInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutProjectInput, graphql_name='forms')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutProjectInput, graphql_name='documents')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectCreateWithoutStatusUpdatesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'slug', 'name', 'description', 'image', 'archived', 'is_template', 'is_official_template', 'category', 'activities', 'company', 'custom_fields', 'discussions', 'files', 'invitations', 'project_users', 'questions', 'tags', 'todo_lists', 'automations', 'forms', 'documents', 'hide_email_from_roles')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    activities = sgqlc.types.Field(ActivityCreateManyWithoutProjectInput, graphql_name='activities')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutProjectsInput), graphql_name='company')
    custom_fields = sgqlc.types.Field(CustomFieldCreateManyWithoutProjectInput, graphql_name='customFields')
    discussions = sgqlc.types.Field(DiscussionCreateManyWithoutProjectInput, graphql_name='discussions')
    files = sgqlc.types.Field(FileCreateManyWithoutProjectInput, graphql_name='files')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutProjectInput, graphql_name='invitations')
    project_users = sgqlc.types.Field('ProjectUserCreateManyWithoutProjectInput', graphql_name='projectUsers')
    questions = sgqlc.types.Field('QuestionCreateManyWithoutProjectInput', graphql_name='questions')
    tags = sgqlc.types.Field('TagCreateManyWithoutProjectInput', graphql_name='tags')
    todo_lists = sgqlc.types.Field('TodoListCreateManyWithoutProjectInput', graphql_name='todoLists')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutProjectInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutProjectInput, graphql_name='forms')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutProjectInput, graphql_name='documents')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectCreateWithoutTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'slug', 'name', 'description', 'image', 'archived', 'is_template', 'is_official_template', 'category', 'activities', 'company', 'custom_fields', 'discussions', 'files', 'invitations', 'project_users', 'questions', 'status_updates', 'todo_lists', 'automations', 'forms', 'documents', 'hide_email_from_roles')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    activities = sgqlc.types.Field(ActivityCreateManyWithoutProjectInput, graphql_name='activities')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutProjectsInput), graphql_name='company')
    custom_fields = sgqlc.types.Field(CustomFieldCreateManyWithoutProjectInput, graphql_name='customFields')
    discussions = sgqlc.types.Field(DiscussionCreateManyWithoutProjectInput, graphql_name='discussions')
    files = sgqlc.types.Field(FileCreateManyWithoutProjectInput, graphql_name='files')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutProjectInput, graphql_name='invitations')
    project_users = sgqlc.types.Field('ProjectUserCreateManyWithoutProjectInput', graphql_name='projectUsers')
    questions = sgqlc.types.Field('QuestionCreateManyWithoutProjectInput', graphql_name='questions')
    status_updates = sgqlc.types.Field('StatusUpdateCreateManyWithoutProjectInput', graphql_name='statusUpdates')
    todo_lists = sgqlc.types.Field('TodoListCreateManyWithoutProjectInput', graphql_name='todoLists')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutProjectInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutProjectInput, graphql_name='forms')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutProjectInput, graphql_name='documents')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectCreateWithoutTodoListsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'slug', 'name', 'description', 'image', 'archived', 'is_template', 'is_official_template', 'category', 'activities', 'company', 'custom_fields', 'discussions', 'files', 'invitations', 'project_users', 'questions', 'status_updates', 'tags', 'automations', 'forms', 'documents', 'hide_email_from_roles')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    activities = sgqlc.types.Field(ActivityCreateManyWithoutProjectInput, graphql_name='activities')
    company = sgqlc.types.Field(sgqlc.types.non_null(CompanyCreateOneWithoutProjectsInput), graphql_name='company')
    custom_fields = sgqlc.types.Field(CustomFieldCreateManyWithoutProjectInput, graphql_name='customFields')
    discussions = sgqlc.types.Field(DiscussionCreateManyWithoutProjectInput, graphql_name='discussions')
    files = sgqlc.types.Field(FileCreateManyWithoutProjectInput, graphql_name='files')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutProjectInput, graphql_name='invitations')
    project_users = sgqlc.types.Field('ProjectUserCreateManyWithoutProjectInput', graphql_name='projectUsers')
    questions = sgqlc.types.Field('QuestionCreateManyWithoutProjectInput', graphql_name='questions')
    status_updates = sgqlc.types.Field('StatusUpdateCreateManyWithoutProjectInput', graphql_name='statusUpdates')
    tags = sgqlc.types.Field('TagCreateManyWithoutProjectInput', graphql_name='tags')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutProjectInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutProjectInput, graphql_name='forms')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutProjectInput, graphql_name='documents')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectFeatureInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('type', 'enabled')
    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='type')
    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='enabled')


class ProjectFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_ids', 'q')
    company_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='companyIds')
    q = sgqlc.types.Field(String, graphql_name='q')


class ProjectListFilter(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_ids', 'ids', 'archived', 'is_template', 'search', 'folder_id')
    company_ids = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='companyIds')
    ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='ids')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    search = sgqlc.types.Field(String, graphql_name='search')
    folder_id = sgqlc.types.Field(String, graphql_name='folderId')


class ProjectScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'slug', 'slug_not', 'slug_in', 'slug_not_in', 'slug_lt', 'slug_lte', 'slug_gt', 'slug_gte', 'slug_contains', 'slug_not_contains', 'slug_starts_with', 'slug_not_starts_with', 'slug_ends_with', 'slug_not_ends_with', 'name', 'name_not', 'name_in', 'name_not_in', 'name_lt', 'name_lte', 'name_gt', 'name_gte', 'name_contains', 'name_not_contains', 'name_starts_with', 'name_not_starts_with', 'name_ends_with', 'name_not_ends_with', 'description', 'description_not', 'description_in', 'description_not_in', 'description_lt', 'description_lte', 'description_gt', 'description_gte', 'description_contains', 'description_not_contains', 'description_starts_with', 'description_not_starts_with', 'description_ends_with', 'description_not_ends_with', 'archived', 'archived_not', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'is_template', 'is_template_not', 'is_official_template', 'is_official_template_not', 'category', 'category_not', 'category_in', 'category_not_in', 'hide_email_from_roles', 'hide_email_from_roles_not', 'hide_email_from_roles_in', 'hide_email_from_roles_not_in', 'hide_email_from_roles_lt', 'hide_email_from_roles_lte', 'hide_email_from_roles_gt', 'hide_email_from_roles_gte', 'hide_email_from_roles_contains', 'hide_email_from_roles_not_contains', 'hide_email_from_roles_starts_with', 'hide_email_from_roles_not_starts_with', 'hide_email_from_roles_ends_with', 'hide_email_from_roles_not_ends_with', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    slug_not = sgqlc.types.Field(String, graphql_name='slug_not')
    slug_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='slug_in')
    slug_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='slug_not_in')
    slug_lt = sgqlc.types.Field(String, graphql_name='slug_lt')
    slug_lte = sgqlc.types.Field(String, graphql_name='slug_lte')
    slug_gt = sgqlc.types.Field(String, graphql_name='slug_gt')
    slug_gte = sgqlc.types.Field(String, graphql_name='slug_gte')
    slug_contains = sgqlc.types.Field(String, graphql_name='slug_contains')
    slug_not_contains = sgqlc.types.Field(String, graphql_name='slug_not_contains')
    slug_starts_with = sgqlc.types.Field(String, graphql_name='slug_starts_with')
    slug_not_starts_with = sgqlc.types.Field(String, graphql_name='slug_not_starts_with')
    slug_ends_with = sgqlc.types.Field(String, graphql_name='slug_ends_with')
    slug_not_ends_with = sgqlc.types.Field(String, graphql_name='slug_not_ends_with')
    name = sgqlc.types.Field(String, graphql_name='name')
    name_not = sgqlc.types.Field(String, graphql_name='name_not')
    name_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='name_in')
    name_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='name_not_in')
    name_lt = sgqlc.types.Field(String, graphql_name='name_lt')
    name_lte = sgqlc.types.Field(String, graphql_name='name_lte')
    name_gt = sgqlc.types.Field(String, graphql_name='name_gt')
    name_gte = sgqlc.types.Field(String, graphql_name='name_gte')
    name_contains = sgqlc.types.Field(String, graphql_name='name_contains')
    name_not_contains = sgqlc.types.Field(String, graphql_name='name_not_contains')
    name_starts_with = sgqlc.types.Field(String, graphql_name='name_starts_with')
    name_not_starts_with = sgqlc.types.Field(String, graphql_name='name_not_starts_with')
    name_ends_with = sgqlc.types.Field(String, graphql_name='name_ends_with')
    name_not_ends_with = sgqlc.types.Field(String, graphql_name='name_not_ends_with')
    description = sgqlc.types.Field(String, graphql_name='description')
    description_not = sgqlc.types.Field(String, graphql_name='description_not')
    description_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='description_in')
    description_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='description_not_in')
    description_lt = sgqlc.types.Field(String, graphql_name='description_lt')
    description_lte = sgqlc.types.Field(String, graphql_name='description_lte')
    description_gt = sgqlc.types.Field(String, graphql_name='description_gt')
    description_gte = sgqlc.types.Field(String, graphql_name='description_gte')
    description_contains = sgqlc.types.Field(String, graphql_name='description_contains')
    description_not_contains = sgqlc.types.Field(String, graphql_name='description_not_contains')
    description_starts_with = sgqlc.types.Field(String, graphql_name='description_starts_with')
    description_not_starts_with = sgqlc.types.Field(String, graphql_name='description_not_starts_with')
    description_ends_with = sgqlc.types.Field(String, graphql_name='description_ends_with')
    description_not_ends_with = sgqlc.types.Field(String, graphql_name='description_not_ends_with')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    archived_not = sgqlc.types.Field(Boolean, graphql_name='archived_not')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_template_not = sgqlc.types.Field(Boolean, graphql_name='isTemplate_not')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    is_official_template_not = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate_not')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    category_not = sgqlc.types.Field(ProjectCategory, graphql_name='category_not')
    category_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ProjectCategory)), graphql_name='category_in')
    category_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ProjectCategory)), graphql_name='category_not_in')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')
    hide_email_from_roles_not = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles_not')
    hide_email_from_roles_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='hideEmailFromRoles_in')
    hide_email_from_roles_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='hideEmailFromRoles_not_in')
    hide_email_from_roles_lt = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles_lt')
    hide_email_from_roles_lte = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles_lte')
    hide_email_from_roles_gt = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles_gt')
    hide_email_from_roles_gte = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles_gte')
    hide_email_from_roles_contains = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles_contains')
    hide_email_from_roles_not_contains = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles_not_contains')
    hide_email_from_roles_starts_with = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles_starts_with')
    hide_email_from_roles_not_starts_with = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles_not_starts_with')
    hide_email_from_roles_ends_with = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles_ends_with')
    hide_email_from_roles_not_ends_with = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles_not_ends_with')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectScalarWhereInput')), graphql_name='NOT')


class ProjectSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('ProjectWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectSubscriptionWhereInput')), graphql_name='NOT')


class ProjectUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'slug', 'name', 'description', 'image', 'archived', 'is_template', 'is_official_template', 'category', 'activities', 'company', 'custom_fields', 'discussions', 'files', 'invitations', 'project_users', 'questions', 'status_updates', 'tags', 'todo_lists', 'automations', 'forms', 'documents', 'hide_email_from_roles')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    name = sgqlc.types.Field(String, graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    activities = sgqlc.types.Field(ActivityUpdateManyWithoutProjectInput, graphql_name='activities')
    company = sgqlc.types.Field(CompanyUpdateOneRequiredWithoutProjectsInput, graphql_name='company')
    custom_fields = sgqlc.types.Field(CustomFieldUpdateManyWithoutProjectInput, graphql_name='customFields')
    discussions = sgqlc.types.Field(DiscussionUpdateManyWithoutProjectInput, graphql_name='discussions')
    files = sgqlc.types.Field(FileUpdateManyWithoutProjectInput, graphql_name='files')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutProjectInput, graphql_name='invitations')
    project_users = sgqlc.types.Field('ProjectUserUpdateManyWithoutProjectInput', graphql_name='projectUsers')
    questions = sgqlc.types.Field('QuestionUpdateManyWithoutProjectInput', graphql_name='questions')
    status_updates = sgqlc.types.Field('StatusUpdateUpdateManyWithoutProjectInput', graphql_name='statusUpdates')
    tags = sgqlc.types.Field('TagUpdateManyWithoutProjectInput', graphql_name='tags')
    todo_lists = sgqlc.types.Field('TodoListUpdateManyWithoutProjectInput', graphql_name='todoLists')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutProjectInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutProjectInput, graphql_name='forms')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutProjectInput, graphql_name='documents')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'slug', 'name', 'description', 'archived', 'is_template', 'is_official_template', 'category', 'hide_email_from_roles')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    name = sgqlc.types.Field(String, graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'slug', 'name', 'description', 'archived', 'is_template', 'is_official_template', 'category', 'hide_email_from_roles')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    name = sgqlc.types.Field(String, graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(ProjectScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(ProjectUpdateManyDataInput), graphql_name='data')


class ProjectUpdateManyWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ProjectCreateWithoutCompanyInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUpdateWithWhereUniqueWithoutCompanyInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUpsertWithWhereUniqueWithoutCompanyInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ProjectScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ProjectUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class ProjectUpdateOneRequiredWithoutAutomationsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(ProjectCreateWithoutAutomationsInput, graphql_name='create')
    update = sgqlc.types.Field('ProjectUpdateWithoutAutomationsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('ProjectUpsertWithoutAutomationsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('ProjectWhereUniqueInput', graphql_name='connect')


class ProjectUpdateOneRequiredWithoutCustomFieldsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(ProjectCreateWithoutCustomFieldsInput, graphql_name='create')
    update = sgqlc.types.Field('ProjectUpdateWithoutCustomFieldsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('ProjectUpsertWithoutCustomFieldsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('ProjectWhereUniqueInput', graphql_name='connect')


class ProjectUpdateOneRequiredWithoutDiscussionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(ProjectCreateWithoutDiscussionsInput, graphql_name='create')
    update = sgqlc.types.Field('ProjectUpdateWithoutDiscussionsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('ProjectUpsertWithoutDiscussionsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('ProjectWhereUniqueInput', graphql_name='connect')


class ProjectUpdateOneRequiredWithoutDocumentsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(ProjectCreateWithoutDocumentsInput, graphql_name='create')
    update = sgqlc.types.Field('ProjectUpdateWithoutDocumentsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('ProjectUpsertWithoutDocumentsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('ProjectWhereUniqueInput', graphql_name='connect')


class ProjectUpdateOneRequiredWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(ProjectCreateWithoutFilesInput, graphql_name='create')
    update = sgqlc.types.Field('ProjectUpdateWithoutFilesDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('ProjectUpsertWithoutFilesInput', graphql_name='upsert')
    connect = sgqlc.types.Field('ProjectWhereUniqueInput', graphql_name='connect')


class ProjectUpdateOneRequiredWithoutFormsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(ProjectCreateWithoutFormsInput, graphql_name='create')
    update = sgqlc.types.Field('ProjectUpdateWithoutFormsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('ProjectUpsertWithoutFormsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('ProjectWhereUniqueInput', graphql_name='connect')


class ProjectUpdateOneRequiredWithoutInvitationsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(ProjectCreateWithoutInvitationsInput, graphql_name='create')
    update = sgqlc.types.Field('ProjectUpdateWithoutInvitationsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('ProjectUpsertWithoutInvitationsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('ProjectWhereUniqueInput', graphql_name='connect')


class ProjectUpdateOneRequiredWithoutProjectUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(ProjectCreateWithoutProjectUsersInput, graphql_name='create')
    update = sgqlc.types.Field('ProjectUpdateWithoutProjectUsersDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('ProjectUpsertWithoutProjectUsersInput', graphql_name='upsert')
    connect = sgqlc.types.Field('ProjectWhereUniqueInput', graphql_name='connect')


class ProjectUpdateOneRequiredWithoutQuestionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(ProjectCreateWithoutQuestionsInput, graphql_name='create')
    update = sgqlc.types.Field('ProjectUpdateWithoutQuestionsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('ProjectUpsertWithoutQuestionsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('ProjectWhereUniqueInput', graphql_name='connect')


class ProjectUpdateOneRequiredWithoutStatusUpdatesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(ProjectCreateWithoutStatusUpdatesInput, graphql_name='create')
    update = sgqlc.types.Field('ProjectUpdateWithoutStatusUpdatesDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('ProjectUpsertWithoutStatusUpdatesInput', graphql_name='upsert')
    connect = sgqlc.types.Field('ProjectWhereUniqueInput', graphql_name='connect')


class ProjectUpdateOneRequiredWithoutTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(ProjectCreateWithoutTagsInput, graphql_name='create')
    update = sgqlc.types.Field('ProjectUpdateWithoutTagsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('ProjectUpsertWithoutTagsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('ProjectWhereUniqueInput', graphql_name='connect')


class ProjectUpdateOneRequiredWithoutTodoListsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(ProjectCreateWithoutTodoListsInput, graphql_name='create')
    update = sgqlc.types.Field('ProjectUpdateWithoutTodoListsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('ProjectUpsertWithoutTodoListsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('ProjectWhereUniqueInput', graphql_name='connect')


class ProjectUpdateOneWithoutActivitiesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(ProjectCreateWithoutActivitiesInput, graphql_name='create')
    update = sgqlc.types.Field('ProjectUpdateWithoutActivitiesDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('ProjectUpsertWithoutActivitiesInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('ProjectWhereUniqueInput', graphql_name='connect')


class ProjectUpdateWithWhereUniqueWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('ProjectWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('ProjectUpdateWithoutCompanyDataInput'), graphql_name='data')


class ProjectUpdateWithoutActivitiesDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'slug', 'name', 'description', 'image', 'archived', 'is_template', 'is_official_template', 'category', 'company', 'custom_fields', 'discussions', 'files', 'invitations', 'project_users', 'questions', 'status_updates', 'tags', 'todo_lists', 'automations', 'forms', 'documents', 'hide_email_from_roles')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    name = sgqlc.types.Field(String, graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    company = sgqlc.types.Field(CompanyUpdateOneRequiredWithoutProjectsInput, graphql_name='company')
    custom_fields = sgqlc.types.Field(CustomFieldUpdateManyWithoutProjectInput, graphql_name='customFields')
    discussions = sgqlc.types.Field(DiscussionUpdateManyWithoutProjectInput, graphql_name='discussions')
    files = sgqlc.types.Field(FileUpdateManyWithoutProjectInput, graphql_name='files')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutProjectInput, graphql_name='invitations')
    project_users = sgqlc.types.Field('ProjectUserUpdateManyWithoutProjectInput', graphql_name='projectUsers')
    questions = sgqlc.types.Field('QuestionUpdateManyWithoutProjectInput', graphql_name='questions')
    status_updates = sgqlc.types.Field('StatusUpdateUpdateManyWithoutProjectInput', graphql_name='statusUpdates')
    tags = sgqlc.types.Field('TagUpdateManyWithoutProjectInput', graphql_name='tags')
    todo_lists = sgqlc.types.Field('TodoListUpdateManyWithoutProjectInput', graphql_name='todoLists')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutProjectInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutProjectInput, graphql_name='forms')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutProjectInput, graphql_name='documents')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectUpdateWithoutAutomationsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'slug', 'name', 'description', 'image', 'archived', 'is_template', 'is_official_template', 'category', 'activities', 'company', 'custom_fields', 'discussions', 'files', 'invitations', 'project_users', 'questions', 'status_updates', 'tags', 'todo_lists', 'forms', 'documents', 'hide_email_from_roles')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    name = sgqlc.types.Field(String, graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    activities = sgqlc.types.Field(ActivityUpdateManyWithoutProjectInput, graphql_name='activities')
    company = sgqlc.types.Field(CompanyUpdateOneRequiredWithoutProjectsInput, graphql_name='company')
    custom_fields = sgqlc.types.Field(CustomFieldUpdateManyWithoutProjectInput, graphql_name='customFields')
    discussions = sgqlc.types.Field(DiscussionUpdateManyWithoutProjectInput, graphql_name='discussions')
    files = sgqlc.types.Field(FileUpdateManyWithoutProjectInput, graphql_name='files')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutProjectInput, graphql_name='invitations')
    project_users = sgqlc.types.Field('ProjectUserUpdateManyWithoutProjectInput', graphql_name='projectUsers')
    questions = sgqlc.types.Field('QuestionUpdateManyWithoutProjectInput', graphql_name='questions')
    status_updates = sgqlc.types.Field('StatusUpdateUpdateManyWithoutProjectInput', graphql_name='statusUpdates')
    tags = sgqlc.types.Field('TagUpdateManyWithoutProjectInput', graphql_name='tags')
    todo_lists = sgqlc.types.Field('TodoListUpdateManyWithoutProjectInput', graphql_name='todoLists')
    forms = sgqlc.types.Field(FormUpdateManyWithoutProjectInput, graphql_name='forms')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutProjectInput, graphql_name='documents')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectUpdateWithoutCompanyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'slug', 'name', 'description', 'image', 'archived', 'is_template', 'is_official_template', 'category', 'activities', 'custom_fields', 'discussions', 'files', 'invitations', 'project_users', 'questions', 'status_updates', 'tags', 'todo_lists', 'automations', 'forms', 'documents', 'hide_email_from_roles')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    name = sgqlc.types.Field(String, graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    activities = sgqlc.types.Field(ActivityUpdateManyWithoutProjectInput, graphql_name='activities')
    custom_fields = sgqlc.types.Field(CustomFieldUpdateManyWithoutProjectInput, graphql_name='customFields')
    discussions = sgqlc.types.Field(DiscussionUpdateManyWithoutProjectInput, graphql_name='discussions')
    files = sgqlc.types.Field(FileUpdateManyWithoutProjectInput, graphql_name='files')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutProjectInput, graphql_name='invitations')
    project_users = sgqlc.types.Field('ProjectUserUpdateManyWithoutProjectInput', graphql_name='projectUsers')
    questions = sgqlc.types.Field('QuestionUpdateManyWithoutProjectInput', graphql_name='questions')
    status_updates = sgqlc.types.Field('StatusUpdateUpdateManyWithoutProjectInput', graphql_name='statusUpdates')
    tags = sgqlc.types.Field('TagUpdateManyWithoutProjectInput', graphql_name='tags')
    todo_lists = sgqlc.types.Field('TodoListUpdateManyWithoutProjectInput', graphql_name='todoLists')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutProjectInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutProjectInput, graphql_name='forms')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutProjectInput, graphql_name='documents')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectUpdateWithoutCustomFieldsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'slug', 'name', 'description', 'image', 'archived', 'is_template', 'is_official_template', 'category', 'activities', 'company', 'discussions', 'files', 'invitations', 'project_users', 'questions', 'status_updates', 'tags', 'todo_lists', 'automations', 'forms', 'documents', 'hide_email_from_roles')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    name = sgqlc.types.Field(String, graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    activities = sgqlc.types.Field(ActivityUpdateManyWithoutProjectInput, graphql_name='activities')
    company = sgqlc.types.Field(CompanyUpdateOneRequiredWithoutProjectsInput, graphql_name='company')
    discussions = sgqlc.types.Field(DiscussionUpdateManyWithoutProjectInput, graphql_name='discussions')
    files = sgqlc.types.Field(FileUpdateManyWithoutProjectInput, graphql_name='files')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutProjectInput, graphql_name='invitations')
    project_users = sgqlc.types.Field('ProjectUserUpdateManyWithoutProjectInput', graphql_name='projectUsers')
    questions = sgqlc.types.Field('QuestionUpdateManyWithoutProjectInput', graphql_name='questions')
    status_updates = sgqlc.types.Field('StatusUpdateUpdateManyWithoutProjectInput', graphql_name='statusUpdates')
    tags = sgqlc.types.Field('TagUpdateManyWithoutProjectInput', graphql_name='tags')
    todo_lists = sgqlc.types.Field('TodoListUpdateManyWithoutProjectInput', graphql_name='todoLists')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutProjectInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutProjectInput, graphql_name='forms')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutProjectInput, graphql_name='documents')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectUpdateWithoutDiscussionsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'slug', 'name', 'description', 'image', 'archived', 'is_template', 'is_official_template', 'category', 'activities', 'company', 'custom_fields', 'files', 'invitations', 'project_users', 'questions', 'status_updates', 'tags', 'todo_lists', 'automations', 'forms', 'documents', 'hide_email_from_roles')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    name = sgqlc.types.Field(String, graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    activities = sgqlc.types.Field(ActivityUpdateManyWithoutProjectInput, graphql_name='activities')
    company = sgqlc.types.Field(CompanyUpdateOneRequiredWithoutProjectsInput, graphql_name='company')
    custom_fields = sgqlc.types.Field(CustomFieldUpdateManyWithoutProjectInput, graphql_name='customFields')
    files = sgqlc.types.Field(FileUpdateManyWithoutProjectInput, graphql_name='files')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutProjectInput, graphql_name='invitations')
    project_users = sgqlc.types.Field('ProjectUserUpdateManyWithoutProjectInput', graphql_name='projectUsers')
    questions = sgqlc.types.Field('QuestionUpdateManyWithoutProjectInput', graphql_name='questions')
    status_updates = sgqlc.types.Field('StatusUpdateUpdateManyWithoutProjectInput', graphql_name='statusUpdates')
    tags = sgqlc.types.Field('TagUpdateManyWithoutProjectInput', graphql_name='tags')
    todo_lists = sgqlc.types.Field('TodoListUpdateManyWithoutProjectInput', graphql_name='todoLists')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutProjectInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutProjectInput, graphql_name='forms')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutProjectInput, graphql_name='documents')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectUpdateWithoutDocumentsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'slug', 'name', 'description', 'image', 'archived', 'is_template', 'is_official_template', 'category', 'activities', 'company', 'custom_fields', 'discussions', 'files', 'invitations', 'project_users', 'questions', 'status_updates', 'tags', 'todo_lists', 'automations', 'forms', 'hide_email_from_roles')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    name = sgqlc.types.Field(String, graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    activities = sgqlc.types.Field(ActivityUpdateManyWithoutProjectInput, graphql_name='activities')
    company = sgqlc.types.Field(CompanyUpdateOneRequiredWithoutProjectsInput, graphql_name='company')
    custom_fields = sgqlc.types.Field(CustomFieldUpdateManyWithoutProjectInput, graphql_name='customFields')
    discussions = sgqlc.types.Field(DiscussionUpdateManyWithoutProjectInput, graphql_name='discussions')
    files = sgqlc.types.Field(FileUpdateManyWithoutProjectInput, graphql_name='files')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutProjectInput, graphql_name='invitations')
    project_users = sgqlc.types.Field('ProjectUserUpdateManyWithoutProjectInput', graphql_name='projectUsers')
    questions = sgqlc.types.Field('QuestionUpdateManyWithoutProjectInput', graphql_name='questions')
    status_updates = sgqlc.types.Field('StatusUpdateUpdateManyWithoutProjectInput', graphql_name='statusUpdates')
    tags = sgqlc.types.Field('TagUpdateManyWithoutProjectInput', graphql_name='tags')
    todo_lists = sgqlc.types.Field('TodoListUpdateManyWithoutProjectInput', graphql_name='todoLists')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutProjectInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutProjectInput, graphql_name='forms')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectUpdateWithoutFilesDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'slug', 'name', 'description', 'image', 'archived', 'is_template', 'is_official_template', 'category', 'activities', 'company', 'custom_fields', 'discussions', 'invitations', 'project_users', 'questions', 'status_updates', 'tags', 'todo_lists', 'automations', 'forms', 'documents', 'hide_email_from_roles')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    name = sgqlc.types.Field(String, graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    activities = sgqlc.types.Field(ActivityUpdateManyWithoutProjectInput, graphql_name='activities')
    company = sgqlc.types.Field(CompanyUpdateOneRequiredWithoutProjectsInput, graphql_name='company')
    custom_fields = sgqlc.types.Field(CustomFieldUpdateManyWithoutProjectInput, graphql_name='customFields')
    discussions = sgqlc.types.Field(DiscussionUpdateManyWithoutProjectInput, graphql_name='discussions')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutProjectInput, graphql_name='invitations')
    project_users = sgqlc.types.Field('ProjectUserUpdateManyWithoutProjectInput', graphql_name='projectUsers')
    questions = sgqlc.types.Field('QuestionUpdateManyWithoutProjectInput', graphql_name='questions')
    status_updates = sgqlc.types.Field('StatusUpdateUpdateManyWithoutProjectInput', graphql_name='statusUpdates')
    tags = sgqlc.types.Field('TagUpdateManyWithoutProjectInput', graphql_name='tags')
    todo_lists = sgqlc.types.Field('TodoListUpdateManyWithoutProjectInput', graphql_name='todoLists')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutProjectInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutProjectInput, graphql_name='forms')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutProjectInput, graphql_name='documents')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectUpdateWithoutFormsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'slug', 'name', 'description', 'image', 'archived', 'is_template', 'is_official_template', 'category', 'activities', 'company', 'custom_fields', 'discussions', 'files', 'invitations', 'project_users', 'questions', 'status_updates', 'tags', 'todo_lists', 'automations', 'documents', 'hide_email_from_roles')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    name = sgqlc.types.Field(String, graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    activities = sgqlc.types.Field(ActivityUpdateManyWithoutProjectInput, graphql_name='activities')
    company = sgqlc.types.Field(CompanyUpdateOneRequiredWithoutProjectsInput, graphql_name='company')
    custom_fields = sgqlc.types.Field(CustomFieldUpdateManyWithoutProjectInput, graphql_name='customFields')
    discussions = sgqlc.types.Field(DiscussionUpdateManyWithoutProjectInput, graphql_name='discussions')
    files = sgqlc.types.Field(FileUpdateManyWithoutProjectInput, graphql_name='files')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutProjectInput, graphql_name='invitations')
    project_users = sgqlc.types.Field('ProjectUserUpdateManyWithoutProjectInput', graphql_name='projectUsers')
    questions = sgqlc.types.Field('QuestionUpdateManyWithoutProjectInput', graphql_name='questions')
    status_updates = sgqlc.types.Field('StatusUpdateUpdateManyWithoutProjectInput', graphql_name='statusUpdates')
    tags = sgqlc.types.Field('TagUpdateManyWithoutProjectInput', graphql_name='tags')
    todo_lists = sgqlc.types.Field('TodoListUpdateManyWithoutProjectInput', graphql_name='todoLists')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutProjectInput, graphql_name='automations')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutProjectInput, graphql_name='documents')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectUpdateWithoutInvitationsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'slug', 'name', 'description', 'image', 'archived', 'is_template', 'is_official_template', 'category', 'activities', 'company', 'custom_fields', 'discussions', 'files', 'project_users', 'questions', 'status_updates', 'tags', 'todo_lists', 'automations', 'forms', 'documents', 'hide_email_from_roles')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    name = sgqlc.types.Field(String, graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    activities = sgqlc.types.Field(ActivityUpdateManyWithoutProjectInput, graphql_name='activities')
    company = sgqlc.types.Field(CompanyUpdateOneRequiredWithoutProjectsInput, graphql_name='company')
    custom_fields = sgqlc.types.Field(CustomFieldUpdateManyWithoutProjectInput, graphql_name='customFields')
    discussions = sgqlc.types.Field(DiscussionUpdateManyWithoutProjectInput, graphql_name='discussions')
    files = sgqlc.types.Field(FileUpdateManyWithoutProjectInput, graphql_name='files')
    project_users = sgqlc.types.Field('ProjectUserUpdateManyWithoutProjectInput', graphql_name='projectUsers')
    questions = sgqlc.types.Field('QuestionUpdateManyWithoutProjectInput', graphql_name='questions')
    status_updates = sgqlc.types.Field('StatusUpdateUpdateManyWithoutProjectInput', graphql_name='statusUpdates')
    tags = sgqlc.types.Field('TagUpdateManyWithoutProjectInput', graphql_name='tags')
    todo_lists = sgqlc.types.Field('TodoListUpdateManyWithoutProjectInput', graphql_name='todoLists')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutProjectInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutProjectInput, graphql_name='forms')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutProjectInput, graphql_name='documents')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectUpdateWithoutProjectUsersDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'slug', 'name', 'description', 'image', 'archived', 'is_template', 'is_official_template', 'category', 'activities', 'company', 'custom_fields', 'discussions', 'files', 'invitations', 'questions', 'status_updates', 'tags', 'todo_lists', 'automations', 'forms', 'documents', 'hide_email_from_roles')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    name = sgqlc.types.Field(String, graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    activities = sgqlc.types.Field(ActivityUpdateManyWithoutProjectInput, graphql_name='activities')
    company = sgqlc.types.Field(CompanyUpdateOneRequiredWithoutProjectsInput, graphql_name='company')
    custom_fields = sgqlc.types.Field(CustomFieldUpdateManyWithoutProjectInput, graphql_name='customFields')
    discussions = sgqlc.types.Field(DiscussionUpdateManyWithoutProjectInput, graphql_name='discussions')
    files = sgqlc.types.Field(FileUpdateManyWithoutProjectInput, graphql_name='files')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutProjectInput, graphql_name='invitations')
    questions = sgqlc.types.Field('QuestionUpdateManyWithoutProjectInput', graphql_name='questions')
    status_updates = sgqlc.types.Field('StatusUpdateUpdateManyWithoutProjectInput', graphql_name='statusUpdates')
    tags = sgqlc.types.Field('TagUpdateManyWithoutProjectInput', graphql_name='tags')
    todo_lists = sgqlc.types.Field('TodoListUpdateManyWithoutProjectInput', graphql_name='todoLists')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutProjectInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutProjectInput, graphql_name='forms')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutProjectInput, graphql_name='documents')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectUpdateWithoutQuestionsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'slug', 'name', 'description', 'image', 'archived', 'is_template', 'is_official_template', 'category', 'activities', 'company', 'custom_fields', 'discussions', 'files', 'invitations', 'project_users', 'status_updates', 'tags', 'todo_lists', 'automations', 'forms', 'documents', 'hide_email_from_roles')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    name = sgqlc.types.Field(String, graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    activities = sgqlc.types.Field(ActivityUpdateManyWithoutProjectInput, graphql_name='activities')
    company = sgqlc.types.Field(CompanyUpdateOneRequiredWithoutProjectsInput, graphql_name='company')
    custom_fields = sgqlc.types.Field(CustomFieldUpdateManyWithoutProjectInput, graphql_name='customFields')
    discussions = sgqlc.types.Field(DiscussionUpdateManyWithoutProjectInput, graphql_name='discussions')
    files = sgqlc.types.Field(FileUpdateManyWithoutProjectInput, graphql_name='files')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutProjectInput, graphql_name='invitations')
    project_users = sgqlc.types.Field('ProjectUserUpdateManyWithoutProjectInput', graphql_name='projectUsers')
    status_updates = sgqlc.types.Field('StatusUpdateUpdateManyWithoutProjectInput', graphql_name='statusUpdates')
    tags = sgqlc.types.Field('TagUpdateManyWithoutProjectInput', graphql_name='tags')
    todo_lists = sgqlc.types.Field('TodoListUpdateManyWithoutProjectInput', graphql_name='todoLists')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutProjectInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutProjectInput, graphql_name='forms')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutProjectInput, graphql_name='documents')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectUpdateWithoutStatusUpdatesDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'slug', 'name', 'description', 'image', 'archived', 'is_template', 'is_official_template', 'category', 'activities', 'company', 'custom_fields', 'discussions', 'files', 'invitations', 'project_users', 'questions', 'tags', 'todo_lists', 'automations', 'forms', 'documents', 'hide_email_from_roles')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    name = sgqlc.types.Field(String, graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    activities = sgqlc.types.Field(ActivityUpdateManyWithoutProjectInput, graphql_name='activities')
    company = sgqlc.types.Field(CompanyUpdateOneRequiredWithoutProjectsInput, graphql_name='company')
    custom_fields = sgqlc.types.Field(CustomFieldUpdateManyWithoutProjectInput, graphql_name='customFields')
    discussions = sgqlc.types.Field(DiscussionUpdateManyWithoutProjectInput, graphql_name='discussions')
    files = sgqlc.types.Field(FileUpdateManyWithoutProjectInput, graphql_name='files')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutProjectInput, graphql_name='invitations')
    project_users = sgqlc.types.Field('ProjectUserUpdateManyWithoutProjectInput', graphql_name='projectUsers')
    questions = sgqlc.types.Field('QuestionUpdateManyWithoutProjectInput', graphql_name='questions')
    tags = sgqlc.types.Field('TagUpdateManyWithoutProjectInput', graphql_name='tags')
    todo_lists = sgqlc.types.Field('TodoListUpdateManyWithoutProjectInput', graphql_name='todoLists')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutProjectInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutProjectInput, graphql_name='forms')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutProjectInput, graphql_name='documents')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectUpdateWithoutTagsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'slug', 'name', 'description', 'image', 'archived', 'is_template', 'is_official_template', 'category', 'activities', 'company', 'custom_fields', 'discussions', 'files', 'invitations', 'project_users', 'questions', 'status_updates', 'todo_lists', 'automations', 'forms', 'documents', 'hide_email_from_roles')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    name = sgqlc.types.Field(String, graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    activities = sgqlc.types.Field(ActivityUpdateManyWithoutProjectInput, graphql_name='activities')
    company = sgqlc.types.Field(CompanyUpdateOneRequiredWithoutProjectsInput, graphql_name='company')
    custom_fields = sgqlc.types.Field(CustomFieldUpdateManyWithoutProjectInput, graphql_name='customFields')
    discussions = sgqlc.types.Field(DiscussionUpdateManyWithoutProjectInput, graphql_name='discussions')
    files = sgqlc.types.Field(FileUpdateManyWithoutProjectInput, graphql_name='files')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutProjectInput, graphql_name='invitations')
    project_users = sgqlc.types.Field('ProjectUserUpdateManyWithoutProjectInput', graphql_name='projectUsers')
    questions = sgqlc.types.Field('QuestionUpdateManyWithoutProjectInput', graphql_name='questions')
    status_updates = sgqlc.types.Field('StatusUpdateUpdateManyWithoutProjectInput', graphql_name='statusUpdates')
    todo_lists = sgqlc.types.Field('TodoListUpdateManyWithoutProjectInput', graphql_name='todoLists')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutProjectInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutProjectInput, graphql_name='forms')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutProjectInput, graphql_name='documents')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectUpdateWithoutTodoListsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'slug', 'name', 'description', 'image', 'archived', 'is_template', 'is_official_template', 'category', 'activities', 'company', 'custom_fields', 'discussions', 'files', 'invitations', 'project_users', 'questions', 'status_updates', 'tags', 'automations', 'forms', 'documents', 'hide_email_from_roles')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    name = sgqlc.types.Field(String, graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    activities = sgqlc.types.Field(ActivityUpdateManyWithoutProjectInput, graphql_name='activities')
    company = sgqlc.types.Field(CompanyUpdateOneRequiredWithoutProjectsInput, graphql_name='company')
    custom_fields = sgqlc.types.Field(CustomFieldUpdateManyWithoutProjectInput, graphql_name='customFields')
    discussions = sgqlc.types.Field(DiscussionUpdateManyWithoutProjectInput, graphql_name='discussions')
    files = sgqlc.types.Field(FileUpdateManyWithoutProjectInput, graphql_name='files')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutProjectInput, graphql_name='invitations')
    project_users = sgqlc.types.Field('ProjectUserUpdateManyWithoutProjectInput', graphql_name='projectUsers')
    questions = sgqlc.types.Field('QuestionUpdateManyWithoutProjectInput', graphql_name='questions')
    status_updates = sgqlc.types.Field('StatusUpdateUpdateManyWithoutProjectInput', graphql_name='statusUpdates')
    tags = sgqlc.types.Field('TagUpdateManyWithoutProjectInput', graphql_name='tags')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutProjectInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutProjectInput, graphql_name='forms')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutProjectInput, graphql_name='documents')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectUpsertWithWhereUniqueWithoutCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('ProjectWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(ProjectUpdateWithoutCompanyDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateWithoutCompanyInput), graphql_name='create')


class ProjectUpsertWithoutActivitiesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(ProjectUpdateWithoutActivitiesDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateWithoutActivitiesInput), graphql_name='create')


class ProjectUpsertWithoutAutomationsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(ProjectUpdateWithoutAutomationsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateWithoutAutomationsInput), graphql_name='create')


class ProjectUpsertWithoutCustomFieldsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(ProjectUpdateWithoutCustomFieldsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateWithoutCustomFieldsInput), graphql_name='create')


class ProjectUpsertWithoutDiscussionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(ProjectUpdateWithoutDiscussionsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateWithoutDiscussionsInput), graphql_name='create')


class ProjectUpsertWithoutDocumentsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(ProjectUpdateWithoutDocumentsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateWithoutDocumentsInput), graphql_name='create')


class ProjectUpsertWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(ProjectUpdateWithoutFilesDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateWithoutFilesInput), graphql_name='create')


class ProjectUpsertWithoutFormsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(ProjectUpdateWithoutFormsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateWithoutFormsInput), graphql_name='create')


class ProjectUpsertWithoutInvitationsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(ProjectUpdateWithoutInvitationsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateWithoutInvitationsInput), graphql_name='create')


class ProjectUpsertWithoutProjectUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(ProjectUpdateWithoutProjectUsersDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateWithoutProjectUsersInput), graphql_name='create')


class ProjectUpsertWithoutQuestionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(ProjectUpdateWithoutQuestionsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateWithoutQuestionsInput), graphql_name='create')


class ProjectUpsertWithoutStatusUpdatesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(ProjectUpdateWithoutStatusUpdatesDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateWithoutStatusUpdatesInput), graphql_name='create')


class ProjectUpsertWithoutTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(ProjectUpdateWithoutTagsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateWithoutTagsInput), graphql_name='create')


class ProjectUpsertWithoutTodoListsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(ProjectUpdateWithoutTodoListsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateWithoutTodoListsInput), graphql_name='create')


class ProjectUserCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'project', 'user', 'project_user_folders', 'level', 'allow_notification', 'position', 'last_accessed_at')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    project = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateOneWithoutProjectUsersInput), graphql_name='project')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutProjectUsersInput'), graphql_name='user')
    project_user_folders = sgqlc.types.Field('ProjectUserFolderCreateManyWithoutProjectUserInput', graphql_name='projectUserFolders')
    level = sgqlc.types.Field(sgqlc.types.non_null(UserAccessLevel), graphql_name='level')
    allow_notification = sgqlc.types.Field(Boolean, graphql_name='allowNotification')
    position = sgqlc.types.Field(Float, graphql_name='position')
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')


class ProjectUserCreateManyWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserCreateWithoutProjectInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserWhereUniqueInput')), graphql_name='connect')


class ProjectUserCreateManyWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserCreateWithoutUserInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserWhereUniqueInput')), graphql_name='connect')


class ProjectUserCreateOneWithoutProjectUserFoldersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('ProjectUserCreateWithoutProjectUserFoldersInput', graphql_name='create')
    connect = sgqlc.types.Field('ProjectUserWhereUniqueInput', graphql_name='connect')


class ProjectUserCreateWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'user', 'project_user_folders', 'level', 'allow_notification', 'position', 'last_accessed_at')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutProjectUsersInput'), graphql_name='user')
    project_user_folders = sgqlc.types.Field('ProjectUserFolderCreateManyWithoutProjectUserInput', graphql_name='projectUserFolders')
    level = sgqlc.types.Field(sgqlc.types.non_null(UserAccessLevel), graphql_name='level')
    allow_notification = sgqlc.types.Field(Boolean, graphql_name='allowNotification')
    position = sgqlc.types.Field(Float, graphql_name='position')
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')


class ProjectUserCreateWithoutProjectUserFoldersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'project', 'user', 'level', 'allow_notification', 'position', 'last_accessed_at')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    project = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateOneWithoutProjectUsersInput), graphql_name='project')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutProjectUsersInput'), graphql_name='user')
    level = sgqlc.types.Field(sgqlc.types.non_null(UserAccessLevel), graphql_name='level')
    allow_notification = sgqlc.types.Field(Boolean, graphql_name='allowNotification')
    position = sgqlc.types.Field(Float, graphql_name='position')
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')


class ProjectUserCreateWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'project', 'project_user_folders', 'level', 'allow_notification', 'position', 'last_accessed_at')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    project = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateOneWithoutProjectUsersInput), graphql_name='project')
    project_user_folders = sgqlc.types.Field('ProjectUserFolderCreateManyWithoutProjectUserInput', graphql_name='projectUserFolders')
    level = sgqlc.types.Field(sgqlc.types.non_null(UserAccessLevel), graphql_name='level')
    allow_notification = sgqlc.types.Field(Boolean, graphql_name='allowNotification')
    position = sgqlc.types.Field(Float, graphql_name='position')
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')


class ProjectUserFolderCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'folder', 'project_user', 'position')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    folder = sgqlc.types.Field(sgqlc.types.non_null(FolderCreateOneWithoutProjectUserFoldersInput), graphql_name='folder')
    project_user = sgqlc.types.Field(sgqlc.types.non_null(ProjectUserCreateOneWithoutProjectUserFoldersInput), graphql_name='projectUser')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')


class ProjectUserFolderCreateManyWithoutFolderInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserFolderCreateWithoutFolderInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserFolderWhereUniqueInput')), graphql_name='connect')


class ProjectUserFolderCreateManyWithoutProjectUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserFolderCreateWithoutProjectUserInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserFolderWhereUniqueInput')), graphql_name='connect')


class ProjectUserFolderCreateWithoutFolderInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'project_user', 'position')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    project_user = sgqlc.types.Field(sgqlc.types.non_null(ProjectUserCreateOneWithoutProjectUserFoldersInput), graphql_name='projectUser')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')


class ProjectUserFolderCreateWithoutProjectUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'folder', 'position')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    folder = sgqlc.types.Field(sgqlc.types.non_null(FolderCreateOneWithoutProjectUserFoldersInput), graphql_name='folder')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')


class ProjectUserFolderScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'position', 'position_not', 'position_in', 'position_not_in', 'position_lt', 'position_lte', 'position_gt', 'position_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    position = sgqlc.types.Field(Float, graphql_name='position')
    position_not = sgqlc.types.Field(Float, graphql_name='position_not')
    position_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_in')
    position_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_not_in')
    position_lt = sgqlc.types.Field(Float, graphql_name='position_lt')
    position_lte = sgqlc.types.Field(Float, graphql_name='position_lte')
    position_gt = sgqlc.types.Field(Float, graphql_name='position_gt')
    position_gte = sgqlc.types.Field(Float, graphql_name='position_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserFolderScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserFolderScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserFolderScalarWhereInput')), graphql_name='NOT')


class ProjectUserFolderSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('ProjectUserFolderWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserFolderSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserFolderSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserFolderSubscriptionWhereInput')), graphql_name='NOT')


class ProjectUserFolderUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'folder', 'project_user', 'position')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    folder = sgqlc.types.Field(FolderUpdateOneRequiredWithoutProjectUserFoldersInput, graphql_name='folder')
    project_user = sgqlc.types.Field('ProjectUserUpdateOneRequiredWithoutProjectUserFoldersInput', graphql_name='projectUser')
    position = sgqlc.types.Field(Float, graphql_name='position')


class ProjectUserFolderUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')


class ProjectUserFolderUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')


class ProjectUserFolderUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(ProjectUserFolderScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(ProjectUserFolderUpdateManyDataInput), graphql_name='data')


class ProjectUserFolderUpdateManyWithoutFolderInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ProjectUserFolderCreateWithoutFolderInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserFolderWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserFolderWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserFolderWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserFolderWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserFolderUpdateWithWhereUniqueWithoutFolderInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserFolderUpsertWithWhereUniqueWithoutFolderInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ProjectUserFolderScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ProjectUserFolderUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class ProjectUserFolderUpdateManyWithoutProjectUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ProjectUserFolderCreateWithoutProjectUserInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserFolderWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserFolderWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserFolderWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserFolderWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserFolderUpdateWithWhereUniqueWithoutProjectUserInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserFolderUpsertWithWhereUniqueWithoutProjectUserInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ProjectUserFolderScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ProjectUserFolderUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class ProjectUserFolderUpdateWithWhereUniqueWithoutFolderInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('ProjectUserFolderWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('ProjectUserFolderUpdateWithoutFolderDataInput'), graphql_name='data')


class ProjectUserFolderUpdateWithWhereUniqueWithoutProjectUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('ProjectUserFolderWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('ProjectUserFolderUpdateWithoutProjectUserDataInput'), graphql_name='data')


class ProjectUserFolderUpdateWithoutFolderDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'project_user', 'position')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    project_user = sgqlc.types.Field('ProjectUserUpdateOneRequiredWithoutProjectUserFoldersInput', graphql_name='projectUser')
    position = sgqlc.types.Field(Float, graphql_name='position')


class ProjectUserFolderUpdateWithoutProjectUserDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'folder', 'position')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    folder = sgqlc.types.Field(FolderUpdateOneRequiredWithoutProjectUserFoldersInput, graphql_name='folder')
    position = sgqlc.types.Field(Float, graphql_name='position')


class ProjectUserFolderUpsertWithWhereUniqueWithoutFolderInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('ProjectUserFolderWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(ProjectUserFolderUpdateWithoutFolderDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ProjectUserFolderCreateWithoutFolderInput), graphql_name='create')


class ProjectUserFolderUpsertWithWhereUniqueWithoutProjectUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('ProjectUserFolderWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(ProjectUserFolderUpdateWithoutProjectUserDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ProjectUserFolderCreateWithoutProjectUserInput), graphql_name='create')


class ProjectUserFolderWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'folder', 'project_user', 'position', 'position_not', 'position_in', 'position_not_in', 'position_lt', 'position_lte', 'position_gt', 'position_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    folder = sgqlc.types.Field(FolderWhereInput, graphql_name='folder')
    project_user = sgqlc.types.Field('ProjectUserWhereInput', graphql_name='projectUser')
    position = sgqlc.types.Field(Float, graphql_name='position')
    position_not = sgqlc.types.Field(Float, graphql_name='position_not')
    position_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_in')
    position_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_not_in')
    position_lt = sgqlc.types.Field(Float, graphql_name='position_lt')
    position_lte = sgqlc.types.Field(Float, graphql_name='position_lte')
    position_gt = sgqlc.types.Field(Float, graphql_name='position_gt')
    position_gte = sgqlc.types.Field(Float, graphql_name='position_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserFolderWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserFolderWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserFolderWhereInput')), graphql_name='NOT')


class ProjectUserFolderWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class ProjectUserRoleFilter(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id',)
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')


class ProjectUserScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'level', 'level_not', 'level_in', 'level_not_in', 'allow_notification', 'allow_notification_not', 'position', 'position_not', 'position_in', 'position_not_in', 'position_lt', 'position_lte', 'position_gt', 'position_gte', 'last_accessed_at', 'last_accessed_at_not', 'last_accessed_at_in', 'last_accessed_at_not_in', 'last_accessed_at_lt', 'last_accessed_at_lte', 'last_accessed_at_gt', 'last_accessed_at_gte', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    level = sgqlc.types.Field(UserAccessLevel, graphql_name='level')
    level_not = sgqlc.types.Field(UserAccessLevel, graphql_name='level_not')
    level_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(UserAccessLevel)), graphql_name='level_in')
    level_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(UserAccessLevel)), graphql_name='level_not_in')
    allow_notification = sgqlc.types.Field(Boolean, graphql_name='allowNotification')
    allow_notification_not = sgqlc.types.Field(Boolean, graphql_name='allowNotification_not')
    position = sgqlc.types.Field(Float, graphql_name='position')
    position_not = sgqlc.types.Field(Float, graphql_name='position_not')
    position_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_in')
    position_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_not_in')
    position_lt = sgqlc.types.Field(Float, graphql_name='position_lt')
    position_lte = sgqlc.types.Field(Float, graphql_name='position_lte')
    position_gt = sgqlc.types.Field(Float, graphql_name='position_gt')
    position_gte = sgqlc.types.Field(Float, graphql_name='position_gte')
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')
    last_accessed_at_not = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt_not')
    last_accessed_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='lastAccessedAt_in')
    last_accessed_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='lastAccessedAt_not_in')
    last_accessed_at_lt = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt_lt')
    last_accessed_at_lte = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt_lte')
    last_accessed_at_gt = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt_gt')
    last_accessed_at_gte = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt_gte')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserScalarWhereInput')), graphql_name='NOT')


class ProjectUserSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('ProjectUserWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserSubscriptionWhereInput')), graphql_name='NOT')


class ProjectUserUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'project', 'user', 'project_user_folders', 'level', 'allow_notification', 'position', 'last_accessed_at')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    project = sgqlc.types.Field(ProjectUpdateOneRequiredWithoutProjectUsersInput, graphql_name='project')
    user = sgqlc.types.Field('UserUpdateOneRequiredWithoutProjectUsersInput', graphql_name='user')
    project_user_folders = sgqlc.types.Field(ProjectUserFolderUpdateManyWithoutProjectUserInput, graphql_name='projectUserFolders')
    level = sgqlc.types.Field(UserAccessLevel, graphql_name='level')
    allow_notification = sgqlc.types.Field(Boolean, graphql_name='allowNotification')
    position = sgqlc.types.Field(Float, graphql_name='position')
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')


class ProjectUserUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'level', 'allow_notification', 'position', 'last_accessed_at')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    level = sgqlc.types.Field(UserAccessLevel, graphql_name='level')
    allow_notification = sgqlc.types.Field(Boolean, graphql_name='allowNotification')
    position = sgqlc.types.Field(Float, graphql_name='position')
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')


class ProjectUserUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'level', 'allow_notification', 'position', 'last_accessed_at')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    level = sgqlc.types.Field(UserAccessLevel, graphql_name='level')
    allow_notification = sgqlc.types.Field(Boolean, graphql_name='allowNotification')
    position = sgqlc.types.Field(Float, graphql_name='position')
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')


class ProjectUserUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(ProjectUserScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(ProjectUserUpdateManyDataInput), graphql_name='data')


class ProjectUserUpdateManyWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ProjectUserCreateWithoutProjectInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserUpdateWithWhereUniqueWithoutProjectInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserUpsertWithWhereUniqueWithoutProjectInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ProjectUserScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ProjectUserUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class ProjectUserUpdateManyWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ProjectUserCreateWithoutUserInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserUpdateWithWhereUniqueWithoutUserInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserUpsertWithWhereUniqueWithoutUserInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ProjectUserScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ProjectUserUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class ProjectUserUpdateOneRequiredWithoutProjectUserFoldersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(ProjectUserCreateWithoutProjectUserFoldersInput, graphql_name='create')
    update = sgqlc.types.Field('ProjectUserUpdateWithoutProjectUserFoldersDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('ProjectUserUpsertWithoutProjectUserFoldersInput', graphql_name='upsert')
    connect = sgqlc.types.Field('ProjectUserWhereUniqueInput', graphql_name='connect')


class ProjectUserUpdateWithWhereUniqueWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('ProjectUserWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('ProjectUserUpdateWithoutProjectDataInput'), graphql_name='data')


class ProjectUserUpdateWithWhereUniqueWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('ProjectUserWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('ProjectUserUpdateWithoutUserDataInput'), graphql_name='data')


class ProjectUserUpdateWithoutProjectDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'user', 'project_user_folders', 'level', 'allow_notification', 'position', 'last_accessed_at')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    user = sgqlc.types.Field('UserUpdateOneRequiredWithoutProjectUsersInput', graphql_name='user')
    project_user_folders = sgqlc.types.Field(ProjectUserFolderUpdateManyWithoutProjectUserInput, graphql_name='projectUserFolders')
    level = sgqlc.types.Field(UserAccessLevel, graphql_name='level')
    allow_notification = sgqlc.types.Field(Boolean, graphql_name='allowNotification')
    position = sgqlc.types.Field(Float, graphql_name='position')
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')


class ProjectUserUpdateWithoutProjectUserFoldersDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'project', 'user', 'level', 'allow_notification', 'position', 'last_accessed_at')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    project = sgqlc.types.Field(ProjectUpdateOneRequiredWithoutProjectUsersInput, graphql_name='project')
    user = sgqlc.types.Field('UserUpdateOneRequiredWithoutProjectUsersInput', graphql_name='user')
    level = sgqlc.types.Field(UserAccessLevel, graphql_name='level')
    allow_notification = sgqlc.types.Field(Boolean, graphql_name='allowNotification')
    position = sgqlc.types.Field(Float, graphql_name='position')
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')


class ProjectUserUpdateWithoutUserDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'project', 'project_user_folders', 'level', 'allow_notification', 'position', 'last_accessed_at')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    project = sgqlc.types.Field(ProjectUpdateOneRequiredWithoutProjectUsersInput, graphql_name='project')
    project_user_folders = sgqlc.types.Field(ProjectUserFolderUpdateManyWithoutProjectUserInput, graphql_name='projectUserFolders')
    level = sgqlc.types.Field(UserAccessLevel, graphql_name='level')
    allow_notification = sgqlc.types.Field(Boolean, graphql_name='allowNotification')
    position = sgqlc.types.Field(Float, graphql_name='position')
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')


class ProjectUserUpsertWithWhereUniqueWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('ProjectUserWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(ProjectUserUpdateWithoutProjectDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ProjectUserCreateWithoutProjectInput), graphql_name='create')


class ProjectUserUpsertWithWhereUniqueWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('ProjectUserWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(ProjectUserUpdateWithoutUserDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ProjectUserCreateWithoutUserInput), graphql_name='create')


class ProjectUserUpsertWithoutProjectUserFoldersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(ProjectUserUpdateWithoutProjectUserFoldersDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(ProjectUserCreateWithoutProjectUserFoldersInput), graphql_name='create')


class ProjectUserWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'project', 'user', 'project_user_folders_every', 'project_user_folders_some', 'project_user_folders_none', 'level', 'level_not', 'level_in', 'level_not_in', 'allow_notification', 'allow_notification_not', 'position', 'position_not', 'position_in', 'position_not_in', 'position_lt', 'position_lte', 'position_gt', 'position_gte', 'last_accessed_at', 'last_accessed_at_not', 'last_accessed_at_in', 'last_accessed_at_not_in', 'last_accessed_at_lt', 'last_accessed_at_lte', 'last_accessed_at_gt', 'last_accessed_at_gte', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    project = sgqlc.types.Field('ProjectWhereInput', graphql_name='project')
    user = sgqlc.types.Field('UserWhereInput', graphql_name='user')
    project_user_folders_every = sgqlc.types.Field(ProjectUserFolderWhereInput, graphql_name='projectUserFolders_every')
    project_user_folders_some = sgqlc.types.Field(ProjectUserFolderWhereInput, graphql_name='projectUserFolders_some')
    project_user_folders_none = sgqlc.types.Field(ProjectUserFolderWhereInput, graphql_name='projectUserFolders_none')
    level = sgqlc.types.Field(UserAccessLevel, graphql_name='level')
    level_not = sgqlc.types.Field(UserAccessLevel, graphql_name='level_not')
    level_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(UserAccessLevel)), graphql_name='level_in')
    level_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(UserAccessLevel)), graphql_name='level_not_in')
    allow_notification = sgqlc.types.Field(Boolean, graphql_name='allowNotification')
    allow_notification_not = sgqlc.types.Field(Boolean, graphql_name='allowNotification_not')
    position = sgqlc.types.Field(Float, graphql_name='position')
    position_not = sgqlc.types.Field(Float, graphql_name='position_not')
    position_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_in')
    position_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_not_in')
    position_lt = sgqlc.types.Field(Float, graphql_name='position_lt')
    position_lte = sgqlc.types.Field(Float, graphql_name='position_lte')
    position_gt = sgqlc.types.Field(Float, graphql_name='position_gt')
    position_gte = sgqlc.types.Field(Float, graphql_name='position_gte')
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')
    last_accessed_at_not = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt_not')
    last_accessed_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='lastAccessedAt_in')
    last_accessed_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='lastAccessedAt_not_in')
    last_accessed_at_lt = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt_lt')
    last_accessed_at_lte = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt_lte')
    last_accessed_at_gt = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt_gt')
    last_accessed_at_gte = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt_gte')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserWhereInput')), graphql_name='NOT')


class ProjectUserWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class ProjectWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'slug', 'slug_not', 'slug_in', 'slug_not_in', 'slug_lt', 'slug_lte', 'slug_gt', 'slug_gte', 'slug_contains', 'slug_not_contains', 'slug_starts_with', 'slug_not_starts_with', 'slug_ends_with', 'slug_not_ends_with', 'name', 'name_not', 'name_in', 'name_not_in', 'name_lt', 'name_lte', 'name_gt', 'name_gte', 'name_contains', 'name_not_contains', 'name_starts_with', 'name_not_starts_with', 'name_ends_with', 'name_not_ends_with', 'description', 'description_not', 'description_in', 'description_not_in', 'description_lt', 'description_lte', 'description_gt', 'description_gte', 'description_contains', 'description_not_contains', 'description_starts_with', 'description_not_starts_with', 'description_ends_with', 'description_not_ends_with', 'image', 'archived', 'archived_not', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'is_template', 'is_template_not', 'is_official_template', 'is_official_template_not', 'category', 'category_not', 'category_in', 'category_not_in', 'activities_every', 'activities_some', 'activities_none', 'company', 'custom_fields_every', 'custom_fields_some', 'custom_fields_none', 'discussions_every', 'discussions_some', 'discussions_none', 'files_every', 'files_some', 'files_none', 'invitations_every', 'invitations_some', 'invitations_none', 'project_users_every', 'project_users_some', 'project_users_none', 'questions_every', 'questions_some', 'questions_none', 'status_updates_every', 'status_updates_some', 'status_updates_none', 'tags_every', 'tags_some', 'tags_none', 'todo_lists_every', 'todo_lists_some', 'todo_lists_none', 'automations_every', 'automations_some', 'automations_none', 'forms_every', 'forms_some', 'forms_none', 'documents_every', 'documents_some', 'documents_none', 'hide_email_from_roles', 'hide_email_from_roles_not', 'hide_email_from_roles_in', 'hide_email_from_roles_not_in', 'hide_email_from_roles_lt', 'hide_email_from_roles_lte', 'hide_email_from_roles_gt', 'hide_email_from_roles_gte', 'hide_email_from_roles_contains', 'hide_email_from_roles_not_contains', 'hide_email_from_roles_starts_with', 'hide_email_from_roles_not_starts_with', 'hide_email_from_roles_ends_with', 'hide_email_from_roles_not_ends_with', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    slug = sgqlc.types.Field(String, graphql_name='slug')
    slug_not = sgqlc.types.Field(String, graphql_name='slug_not')
    slug_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='slug_in')
    slug_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='slug_not_in')
    slug_lt = sgqlc.types.Field(String, graphql_name='slug_lt')
    slug_lte = sgqlc.types.Field(String, graphql_name='slug_lte')
    slug_gt = sgqlc.types.Field(String, graphql_name='slug_gt')
    slug_gte = sgqlc.types.Field(String, graphql_name='slug_gte')
    slug_contains = sgqlc.types.Field(String, graphql_name='slug_contains')
    slug_not_contains = sgqlc.types.Field(String, graphql_name='slug_not_contains')
    slug_starts_with = sgqlc.types.Field(String, graphql_name='slug_starts_with')
    slug_not_starts_with = sgqlc.types.Field(String, graphql_name='slug_not_starts_with')
    slug_ends_with = sgqlc.types.Field(String, graphql_name='slug_ends_with')
    slug_not_ends_with = sgqlc.types.Field(String, graphql_name='slug_not_ends_with')
    name = sgqlc.types.Field(String, graphql_name='name')
    name_not = sgqlc.types.Field(String, graphql_name='name_not')
    name_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='name_in')
    name_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='name_not_in')
    name_lt = sgqlc.types.Field(String, graphql_name='name_lt')
    name_lte = sgqlc.types.Field(String, graphql_name='name_lte')
    name_gt = sgqlc.types.Field(String, graphql_name='name_gt')
    name_gte = sgqlc.types.Field(String, graphql_name='name_gte')
    name_contains = sgqlc.types.Field(String, graphql_name='name_contains')
    name_not_contains = sgqlc.types.Field(String, graphql_name='name_not_contains')
    name_starts_with = sgqlc.types.Field(String, graphql_name='name_starts_with')
    name_not_starts_with = sgqlc.types.Field(String, graphql_name='name_not_starts_with')
    name_ends_with = sgqlc.types.Field(String, graphql_name='name_ends_with')
    name_not_ends_with = sgqlc.types.Field(String, graphql_name='name_not_ends_with')
    description = sgqlc.types.Field(String, graphql_name='description')
    description_not = sgqlc.types.Field(String, graphql_name='description_not')
    description_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='description_in')
    description_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='description_not_in')
    description_lt = sgqlc.types.Field(String, graphql_name='description_lt')
    description_lte = sgqlc.types.Field(String, graphql_name='description_lte')
    description_gt = sgqlc.types.Field(String, graphql_name='description_gt')
    description_gte = sgqlc.types.Field(String, graphql_name='description_gte')
    description_contains = sgqlc.types.Field(String, graphql_name='description_contains')
    description_not_contains = sgqlc.types.Field(String, graphql_name='description_not_contains')
    description_starts_with = sgqlc.types.Field(String, graphql_name='description_starts_with')
    description_not_starts_with = sgqlc.types.Field(String, graphql_name='description_not_starts_with')
    description_ends_with = sgqlc.types.Field(String, graphql_name='description_ends_with')
    description_not_ends_with = sgqlc.types.Field(String, graphql_name='description_not_ends_with')
    image = sgqlc.types.Field(ImageWhereInput, graphql_name='image')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    archived_not = sgqlc.types.Field(Boolean, graphql_name='archived_not')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_template_not = sgqlc.types.Field(Boolean, graphql_name='isTemplate_not')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    is_official_template_not = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate_not')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    category_not = sgqlc.types.Field(ProjectCategory, graphql_name='category_not')
    category_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ProjectCategory)), graphql_name='category_in')
    category_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ProjectCategory)), graphql_name='category_not_in')
    activities_every = sgqlc.types.Field(ActivityWhereInput, graphql_name='activities_every')
    activities_some = sgqlc.types.Field(ActivityWhereInput, graphql_name='activities_some')
    activities_none = sgqlc.types.Field(ActivityWhereInput, graphql_name='activities_none')
    company = sgqlc.types.Field(CompanyWhereInput, graphql_name='company')
    custom_fields_every = sgqlc.types.Field(CustomFieldWhereInput, graphql_name='customFields_every')
    custom_fields_some = sgqlc.types.Field(CustomFieldWhereInput, graphql_name='customFields_some')
    custom_fields_none = sgqlc.types.Field(CustomFieldWhereInput, graphql_name='customFields_none')
    discussions_every = sgqlc.types.Field(DiscussionWhereInput, graphql_name='discussions_every')
    discussions_some = sgqlc.types.Field(DiscussionWhereInput, graphql_name='discussions_some')
    discussions_none = sgqlc.types.Field(DiscussionWhereInput, graphql_name='discussions_none')
    files_every = sgqlc.types.Field(FileWhereInput, graphql_name='files_every')
    files_some = sgqlc.types.Field(FileWhereInput, graphql_name='files_some')
    files_none = sgqlc.types.Field(FileWhereInput, graphql_name='files_none')
    invitations_every = sgqlc.types.Field(InvitationWhereInput, graphql_name='invitations_every')
    invitations_some = sgqlc.types.Field(InvitationWhereInput, graphql_name='invitations_some')
    invitations_none = sgqlc.types.Field(InvitationWhereInput, graphql_name='invitations_none')
    project_users_every = sgqlc.types.Field(ProjectUserWhereInput, graphql_name='projectUsers_every')
    project_users_some = sgqlc.types.Field(ProjectUserWhereInput, graphql_name='projectUsers_some')
    project_users_none = sgqlc.types.Field(ProjectUserWhereInput, graphql_name='projectUsers_none')
    questions_every = sgqlc.types.Field('QuestionWhereInput', graphql_name='questions_every')
    questions_some = sgqlc.types.Field('QuestionWhereInput', graphql_name='questions_some')
    questions_none = sgqlc.types.Field('QuestionWhereInput', graphql_name='questions_none')
    status_updates_every = sgqlc.types.Field('StatusUpdateWhereInput', graphql_name='statusUpdates_every')
    status_updates_some = sgqlc.types.Field('StatusUpdateWhereInput', graphql_name='statusUpdates_some')
    status_updates_none = sgqlc.types.Field('StatusUpdateWhereInput', graphql_name='statusUpdates_none')
    tags_every = sgqlc.types.Field('TagWhereInput', graphql_name='tags_every')
    tags_some = sgqlc.types.Field('TagWhereInput', graphql_name='tags_some')
    tags_none = sgqlc.types.Field('TagWhereInput', graphql_name='tags_none')
    todo_lists_every = sgqlc.types.Field('TodoListWhereInput', graphql_name='todoLists_every')
    todo_lists_some = sgqlc.types.Field('TodoListWhereInput', graphql_name='todoLists_some')
    todo_lists_none = sgqlc.types.Field('TodoListWhereInput', graphql_name='todoLists_none')
    automations_every = sgqlc.types.Field(AutomationWhereInput, graphql_name='automations_every')
    automations_some = sgqlc.types.Field(AutomationWhereInput, graphql_name='automations_some')
    automations_none = sgqlc.types.Field(AutomationWhereInput, graphql_name='automations_none')
    forms_every = sgqlc.types.Field(FormWhereInput, graphql_name='forms_every')
    forms_some = sgqlc.types.Field(FormWhereInput, graphql_name='forms_some')
    forms_none = sgqlc.types.Field(FormWhereInput, graphql_name='forms_none')
    documents_every = sgqlc.types.Field(DocumentWhereInput, graphql_name='documents_every')
    documents_some = sgqlc.types.Field(DocumentWhereInput, graphql_name='documents_some')
    documents_none = sgqlc.types.Field(DocumentWhereInput, graphql_name='documents_none')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')
    hide_email_from_roles_not = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles_not')
    hide_email_from_roles_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='hideEmailFromRoles_in')
    hide_email_from_roles_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='hideEmailFromRoles_not_in')
    hide_email_from_roles_lt = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles_lt')
    hide_email_from_roles_lte = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles_lte')
    hide_email_from_roles_gt = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles_gt')
    hide_email_from_roles_gte = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles_gte')
    hide_email_from_roles_contains = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles_contains')
    hide_email_from_roles_not_contains = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles_not_contains')
    hide_email_from_roles_starts_with = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles_starts_with')
    hide_email_from_roles_not_starts_with = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles_not_starts_with')
    hide_email_from_roles_ends_with = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles_ends_with')
    hide_email_from_roles_not_ends_with = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles_not_ends_with')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectWhereInput')), graphql_name='NOT')


class ProjectWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'slug')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    slug = sgqlc.types.Field(String, graphql_name='slug')


class QuestionCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'frequency', 'days', 'time', 'status', 'question_users', 'status_updates', 'created_by', 'project', 'activity')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    frequency = sgqlc.types.Field(sgqlc.types.non_null(QuestionFrequency), graphql_name='frequency')
    days = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='days')
    time = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='time')
    status = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='status')
    question_users = sgqlc.types.Field('QuestionUserCreateManyWithoutQuestionInput', graphql_name='questionUsers')
    status_updates = sgqlc.types.Field('StatusUpdateCreateManyWithoutQuestionInput', graphql_name='statusUpdates')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutQuestionsInput'), graphql_name='createdBy')
    project = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateOneWithoutQuestionsInput), graphql_name='project')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutQuestionInput, graphql_name='activity')


class QuestionCreateManyWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionCreateWithoutCreatedByInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionWhereUniqueInput')), graphql_name='connect')


class QuestionCreateManyWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionCreateWithoutProjectInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionWhereUniqueInput')), graphql_name='connect')


class QuestionCreateOneWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('QuestionCreateWithoutActivityInput', graphql_name='create')
    connect = sgqlc.types.Field('QuestionWhereUniqueInput', graphql_name='connect')


class QuestionCreateOneWithoutQuestionUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('QuestionCreateWithoutQuestionUsersInput', graphql_name='create')
    connect = sgqlc.types.Field('QuestionWhereUniqueInput', graphql_name='connect')


class QuestionCreateOneWithoutStatusUpdatesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('QuestionCreateWithoutStatusUpdatesInput', graphql_name='create')
    connect = sgqlc.types.Field('QuestionWhereUniqueInput', graphql_name='connect')


class QuestionCreateWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'frequency', 'days', 'time', 'status', 'question_users', 'status_updates', 'created_by', 'project')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    frequency = sgqlc.types.Field(sgqlc.types.non_null(QuestionFrequency), graphql_name='frequency')
    days = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='days')
    time = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='time')
    status = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='status')
    question_users = sgqlc.types.Field('QuestionUserCreateManyWithoutQuestionInput', graphql_name='questionUsers')
    status_updates = sgqlc.types.Field('StatusUpdateCreateManyWithoutQuestionInput', graphql_name='statusUpdates')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutQuestionsInput'), graphql_name='createdBy')
    project = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateOneWithoutQuestionsInput), graphql_name='project')


class QuestionCreateWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'frequency', 'days', 'time', 'status', 'question_users', 'status_updates', 'project', 'activity')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    frequency = sgqlc.types.Field(sgqlc.types.non_null(QuestionFrequency), graphql_name='frequency')
    days = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='days')
    time = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='time')
    status = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='status')
    question_users = sgqlc.types.Field('QuestionUserCreateManyWithoutQuestionInput', graphql_name='questionUsers')
    status_updates = sgqlc.types.Field('StatusUpdateCreateManyWithoutQuestionInput', graphql_name='statusUpdates')
    project = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateOneWithoutQuestionsInput), graphql_name='project')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutQuestionInput, graphql_name='activity')


class QuestionCreateWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'frequency', 'days', 'time', 'status', 'question_users', 'status_updates', 'created_by', 'activity')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    frequency = sgqlc.types.Field(sgqlc.types.non_null(QuestionFrequency), graphql_name='frequency')
    days = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='days')
    time = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='time')
    status = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='status')
    question_users = sgqlc.types.Field('QuestionUserCreateManyWithoutQuestionInput', graphql_name='questionUsers')
    status_updates = sgqlc.types.Field('StatusUpdateCreateManyWithoutQuestionInput', graphql_name='statusUpdates')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutQuestionsInput'), graphql_name='createdBy')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutQuestionInput, graphql_name='activity')


class QuestionCreateWithoutQuestionUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'frequency', 'days', 'time', 'status', 'status_updates', 'created_by', 'project', 'activity')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    frequency = sgqlc.types.Field(sgqlc.types.non_null(QuestionFrequency), graphql_name='frequency')
    days = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='days')
    time = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='time')
    status = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='status')
    status_updates = sgqlc.types.Field('StatusUpdateCreateManyWithoutQuestionInput', graphql_name='statusUpdates')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutQuestionsInput'), graphql_name='createdBy')
    project = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateOneWithoutQuestionsInput), graphql_name='project')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutQuestionInput, graphql_name='activity')


class QuestionCreateWithoutStatusUpdatesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'frequency', 'days', 'time', 'status', 'question_users', 'created_by', 'project', 'activity')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    frequency = sgqlc.types.Field(sgqlc.types.non_null(QuestionFrequency), graphql_name='frequency')
    days = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='days')
    time = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='time')
    status = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='status')
    question_users = sgqlc.types.Field('QuestionUserCreateManyWithoutQuestionInput', graphql_name='questionUsers')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutQuestionsInput'), graphql_name='createdBy')
    project = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateOneWithoutQuestionsInput), graphql_name='project')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutQuestionInput, graphql_name='activity')


class QuestionScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'title', 'title_not', 'title_in', 'title_not_in', 'title_lt', 'title_lte', 'title_gt', 'title_gte', 'title_contains', 'title_not_contains', 'title_starts_with', 'title_not_starts_with', 'title_ends_with', 'title_not_ends_with', 'frequency', 'frequency_not', 'frequency_in', 'frequency_not_in', 'days', 'days_not', 'days_in', 'days_not_in', 'days_lt', 'days_lte', 'days_gt', 'days_gte', 'days_contains', 'days_not_contains', 'days_starts_with', 'days_not_starts_with', 'days_ends_with', 'days_not_ends_with', 'time', 'time_not', 'time_in', 'time_not_in', 'time_lt', 'time_lte', 'time_gt', 'time_gte', 'time_contains', 'time_not_contains', 'time_starts_with', 'time_not_starts_with', 'time_ends_with', 'time_not_ends_with', 'status', 'status_not', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    title = sgqlc.types.Field(String, graphql_name='title')
    title_not = sgqlc.types.Field(String, graphql_name='title_not')
    title_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_in')
    title_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_not_in')
    title_lt = sgqlc.types.Field(String, graphql_name='title_lt')
    title_lte = sgqlc.types.Field(String, graphql_name='title_lte')
    title_gt = sgqlc.types.Field(String, graphql_name='title_gt')
    title_gte = sgqlc.types.Field(String, graphql_name='title_gte')
    title_contains = sgqlc.types.Field(String, graphql_name='title_contains')
    title_not_contains = sgqlc.types.Field(String, graphql_name='title_not_contains')
    title_starts_with = sgqlc.types.Field(String, graphql_name='title_starts_with')
    title_not_starts_with = sgqlc.types.Field(String, graphql_name='title_not_starts_with')
    title_ends_with = sgqlc.types.Field(String, graphql_name='title_ends_with')
    title_not_ends_with = sgqlc.types.Field(String, graphql_name='title_not_ends_with')
    frequency = sgqlc.types.Field(QuestionFrequency, graphql_name='frequency')
    frequency_not = sgqlc.types.Field(QuestionFrequency, graphql_name='frequency_not')
    frequency_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(QuestionFrequency)), graphql_name='frequency_in')
    frequency_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(QuestionFrequency)), graphql_name='frequency_not_in')
    days = sgqlc.types.Field(String, graphql_name='days')
    days_not = sgqlc.types.Field(String, graphql_name='days_not')
    days_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='days_in')
    days_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='days_not_in')
    days_lt = sgqlc.types.Field(String, graphql_name='days_lt')
    days_lte = sgqlc.types.Field(String, graphql_name='days_lte')
    days_gt = sgqlc.types.Field(String, graphql_name='days_gt')
    days_gte = sgqlc.types.Field(String, graphql_name='days_gte')
    days_contains = sgqlc.types.Field(String, graphql_name='days_contains')
    days_not_contains = sgqlc.types.Field(String, graphql_name='days_not_contains')
    days_starts_with = sgqlc.types.Field(String, graphql_name='days_starts_with')
    days_not_starts_with = sgqlc.types.Field(String, graphql_name='days_not_starts_with')
    days_ends_with = sgqlc.types.Field(String, graphql_name='days_ends_with')
    days_not_ends_with = sgqlc.types.Field(String, graphql_name='days_not_ends_with')
    time = sgqlc.types.Field(String, graphql_name='time')
    time_not = sgqlc.types.Field(String, graphql_name='time_not')
    time_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='time_in')
    time_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='time_not_in')
    time_lt = sgqlc.types.Field(String, graphql_name='time_lt')
    time_lte = sgqlc.types.Field(String, graphql_name='time_lte')
    time_gt = sgqlc.types.Field(String, graphql_name='time_gt')
    time_gte = sgqlc.types.Field(String, graphql_name='time_gte')
    time_contains = sgqlc.types.Field(String, graphql_name='time_contains')
    time_not_contains = sgqlc.types.Field(String, graphql_name='time_not_contains')
    time_starts_with = sgqlc.types.Field(String, graphql_name='time_starts_with')
    time_not_starts_with = sgqlc.types.Field(String, graphql_name='time_not_starts_with')
    time_ends_with = sgqlc.types.Field(String, graphql_name='time_ends_with')
    time_not_ends_with = sgqlc.types.Field(String, graphql_name='time_not_ends_with')
    status = sgqlc.types.Field(Boolean, graphql_name='status')
    status_not = sgqlc.types.Field(Boolean, graphql_name='status_not')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionScalarWhereInput')), graphql_name='NOT')


class QuestionSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('QuestionWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionSubscriptionWhereInput')), graphql_name='NOT')


class QuestionUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'frequency', 'days', 'time', 'status', 'question_users', 'status_updates', 'created_by', 'project', 'activity')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    frequency = sgqlc.types.Field(QuestionFrequency, graphql_name='frequency')
    days = sgqlc.types.Field(String, graphql_name='days')
    time = sgqlc.types.Field(String, graphql_name='time')
    status = sgqlc.types.Field(Boolean, graphql_name='status')
    question_users = sgqlc.types.Field('QuestionUserUpdateManyWithoutQuestionInput', graphql_name='questionUsers')
    status_updates = sgqlc.types.Field('StatusUpdateUpdateManyWithoutQuestionInput', graphql_name='statusUpdates')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutQuestionsInput', graphql_name='createdBy')
    project = sgqlc.types.Field(ProjectUpdateOneRequiredWithoutQuestionsInput, graphql_name='project')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutQuestionInput, graphql_name='activity')


class QuestionUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'frequency', 'days', 'time', 'status')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    frequency = sgqlc.types.Field(QuestionFrequency, graphql_name='frequency')
    days = sgqlc.types.Field(String, graphql_name='days')
    time = sgqlc.types.Field(String, graphql_name='time')
    status = sgqlc.types.Field(Boolean, graphql_name='status')


class QuestionUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'frequency', 'days', 'time', 'status')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    frequency = sgqlc.types.Field(QuestionFrequency, graphql_name='frequency')
    days = sgqlc.types.Field(String, graphql_name='days')
    time = sgqlc.types.Field(String, graphql_name='time')
    status = sgqlc.types.Field(Boolean, graphql_name='status')


class QuestionUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(QuestionScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(QuestionUpdateManyDataInput), graphql_name='data')


class QuestionUpdateManyWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(QuestionCreateWithoutCreatedByInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionUpdateWithWhereUniqueWithoutCreatedByInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionUpsertWithWhereUniqueWithoutCreatedByInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(QuestionScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(QuestionUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class QuestionUpdateManyWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(QuestionCreateWithoutProjectInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionUpdateWithWhereUniqueWithoutProjectInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionUpsertWithWhereUniqueWithoutProjectInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(QuestionScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(QuestionUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class QuestionUpdateOneRequiredWithoutQuestionUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(QuestionCreateWithoutQuestionUsersInput, graphql_name='create')
    update = sgqlc.types.Field('QuestionUpdateWithoutQuestionUsersDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('QuestionUpsertWithoutQuestionUsersInput', graphql_name='upsert')
    connect = sgqlc.types.Field('QuestionWhereUniqueInput', graphql_name='connect')


class QuestionUpdateOneWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(QuestionCreateWithoutActivityInput, graphql_name='create')
    update = sgqlc.types.Field('QuestionUpdateWithoutActivityDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('QuestionUpsertWithoutActivityInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('QuestionWhereUniqueInput', graphql_name='connect')


class QuestionUpdateOneWithoutStatusUpdatesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(QuestionCreateWithoutStatusUpdatesInput, graphql_name='create')
    update = sgqlc.types.Field('QuestionUpdateWithoutStatusUpdatesDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('QuestionUpsertWithoutStatusUpdatesInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('QuestionWhereUniqueInput', graphql_name='connect')


class QuestionUpdateWithWhereUniqueWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('QuestionWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('QuestionUpdateWithoutCreatedByDataInput'), graphql_name='data')


class QuestionUpdateWithWhereUniqueWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('QuestionWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('QuestionUpdateWithoutProjectDataInput'), graphql_name='data')


class QuestionUpdateWithoutActivityDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'frequency', 'days', 'time', 'status', 'question_users', 'status_updates', 'created_by', 'project')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    frequency = sgqlc.types.Field(QuestionFrequency, graphql_name='frequency')
    days = sgqlc.types.Field(String, graphql_name='days')
    time = sgqlc.types.Field(String, graphql_name='time')
    status = sgqlc.types.Field(Boolean, graphql_name='status')
    question_users = sgqlc.types.Field('QuestionUserUpdateManyWithoutQuestionInput', graphql_name='questionUsers')
    status_updates = sgqlc.types.Field('StatusUpdateUpdateManyWithoutQuestionInput', graphql_name='statusUpdates')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutQuestionsInput', graphql_name='createdBy')
    project = sgqlc.types.Field(ProjectUpdateOneRequiredWithoutQuestionsInput, graphql_name='project')


class QuestionUpdateWithoutCreatedByDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'frequency', 'days', 'time', 'status', 'question_users', 'status_updates', 'project', 'activity')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    frequency = sgqlc.types.Field(QuestionFrequency, graphql_name='frequency')
    days = sgqlc.types.Field(String, graphql_name='days')
    time = sgqlc.types.Field(String, graphql_name='time')
    status = sgqlc.types.Field(Boolean, graphql_name='status')
    question_users = sgqlc.types.Field('QuestionUserUpdateManyWithoutQuestionInput', graphql_name='questionUsers')
    status_updates = sgqlc.types.Field('StatusUpdateUpdateManyWithoutQuestionInput', graphql_name='statusUpdates')
    project = sgqlc.types.Field(ProjectUpdateOneRequiredWithoutQuestionsInput, graphql_name='project')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutQuestionInput, graphql_name='activity')


class QuestionUpdateWithoutProjectDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'frequency', 'days', 'time', 'status', 'question_users', 'status_updates', 'created_by', 'activity')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    frequency = sgqlc.types.Field(QuestionFrequency, graphql_name='frequency')
    days = sgqlc.types.Field(String, graphql_name='days')
    time = sgqlc.types.Field(String, graphql_name='time')
    status = sgqlc.types.Field(Boolean, graphql_name='status')
    question_users = sgqlc.types.Field('QuestionUserUpdateManyWithoutQuestionInput', graphql_name='questionUsers')
    status_updates = sgqlc.types.Field('StatusUpdateUpdateManyWithoutQuestionInput', graphql_name='statusUpdates')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutQuestionsInput', graphql_name='createdBy')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutQuestionInput, graphql_name='activity')


class QuestionUpdateWithoutQuestionUsersDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'frequency', 'days', 'time', 'status', 'status_updates', 'created_by', 'project', 'activity')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    frequency = sgqlc.types.Field(QuestionFrequency, graphql_name='frequency')
    days = sgqlc.types.Field(String, graphql_name='days')
    time = sgqlc.types.Field(String, graphql_name='time')
    status = sgqlc.types.Field(Boolean, graphql_name='status')
    status_updates = sgqlc.types.Field('StatusUpdateUpdateManyWithoutQuestionInput', graphql_name='statusUpdates')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutQuestionsInput', graphql_name='createdBy')
    project = sgqlc.types.Field(ProjectUpdateOneRequiredWithoutQuestionsInput, graphql_name='project')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutQuestionInput, graphql_name='activity')


class QuestionUpdateWithoutStatusUpdatesDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'frequency', 'days', 'time', 'status', 'question_users', 'created_by', 'project', 'activity')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    frequency = sgqlc.types.Field(QuestionFrequency, graphql_name='frequency')
    days = sgqlc.types.Field(String, graphql_name='days')
    time = sgqlc.types.Field(String, graphql_name='time')
    status = sgqlc.types.Field(Boolean, graphql_name='status')
    question_users = sgqlc.types.Field('QuestionUserUpdateManyWithoutQuestionInput', graphql_name='questionUsers')
    created_by = sgqlc.types.Field('UserUpdateOneRequiredWithoutQuestionsInput', graphql_name='createdBy')
    project = sgqlc.types.Field(ProjectUpdateOneRequiredWithoutQuestionsInput, graphql_name='project')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutQuestionInput, graphql_name='activity')


class QuestionUpsertWithWhereUniqueWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('QuestionWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(QuestionUpdateWithoutCreatedByDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(QuestionCreateWithoutCreatedByInput), graphql_name='create')


class QuestionUpsertWithWhereUniqueWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('QuestionWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(QuestionUpdateWithoutProjectDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(QuestionCreateWithoutProjectInput), graphql_name='create')


class QuestionUpsertWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(QuestionUpdateWithoutActivityDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(QuestionCreateWithoutActivityInput), graphql_name='create')


class QuestionUpsertWithoutQuestionUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(QuestionUpdateWithoutQuestionUsersDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(QuestionCreateWithoutQuestionUsersInput), graphql_name='create')


class QuestionUpsertWithoutStatusUpdatesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(QuestionUpdateWithoutStatusUpdatesDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(QuestionCreateWithoutStatusUpdatesInput), graphql_name='create')


class QuestionUserCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'question', 'user')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    question = sgqlc.types.Field(sgqlc.types.non_null(QuestionCreateOneWithoutQuestionUsersInput), graphql_name='question')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutQuestionUsersInput'), graphql_name='user')


class QuestionUserCreateManyWithoutQuestionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionUserCreateWithoutQuestionInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionUserWhereUniqueInput')), graphql_name='connect')


class QuestionUserCreateManyWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionUserCreateWithoutUserInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionUserWhereUniqueInput')), graphql_name='connect')


class QuestionUserCreateWithoutQuestionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'user')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutQuestionUsersInput'), graphql_name='user')


class QuestionUserCreateWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'question')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    question = sgqlc.types.Field(sgqlc.types.non_null(QuestionCreateOneWithoutQuestionUsersInput), graphql_name='question')


class QuestionUserScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionUserScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionUserScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionUserScalarWhereInput')), graphql_name='NOT')


class QuestionUserSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('QuestionUserWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionUserSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionUserSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionUserSubscriptionWhereInput')), graphql_name='NOT')


class QuestionUserUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'question', 'user')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    question = sgqlc.types.Field(QuestionUpdateOneRequiredWithoutQuestionUsersInput, graphql_name='question')
    user = sgqlc.types.Field('UserUpdateOneRequiredWithoutQuestionUsersInput', graphql_name='user')


class QuestionUserUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid',)
    uid = sgqlc.types.Field(String, graphql_name='uid')


class QuestionUserUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid',)
    uid = sgqlc.types.Field(String, graphql_name='uid')


class QuestionUserUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(QuestionUserScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(QuestionUserUpdateManyDataInput), graphql_name='data')


class QuestionUserUpdateManyWithoutQuestionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(QuestionUserCreateWithoutQuestionInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionUserWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionUserWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionUserWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionUserWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionUserUpdateWithWhereUniqueWithoutQuestionInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionUserUpsertWithWhereUniqueWithoutQuestionInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(QuestionUserScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(QuestionUserUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class QuestionUserUpdateManyWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(QuestionUserCreateWithoutUserInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionUserWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionUserWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionUserWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionUserWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionUserUpdateWithWhereUniqueWithoutUserInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionUserUpsertWithWhereUniqueWithoutUserInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(QuestionUserScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(QuestionUserUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class QuestionUserUpdateWithWhereUniqueWithoutQuestionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('QuestionUserWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('QuestionUserUpdateWithoutQuestionDataInput'), graphql_name='data')


class QuestionUserUpdateWithWhereUniqueWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('QuestionUserWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('QuestionUserUpdateWithoutUserDataInput'), graphql_name='data')


class QuestionUserUpdateWithoutQuestionDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'user')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    user = sgqlc.types.Field('UserUpdateOneRequiredWithoutQuestionUsersInput', graphql_name='user')


class QuestionUserUpdateWithoutUserDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'question')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    question = sgqlc.types.Field(QuestionUpdateOneRequiredWithoutQuestionUsersInput, graphql_name='question')


class QuestionUserUpsertWithWhereUniqueWithoutQuestionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('QuestionUserWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(QuestionUserUpdateWithoutQuestionDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(QuestionUserCreateWithoutQuestionInput), graphql_name='create')


class QuestionUserUpsertWithWhereUniqueWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('QuestionUserWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(QuestionUserUpdateWithoutUserDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(QuestionUserCreateWithoutUserInput), graphql_name='create')


class QuestionUserWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'question', 'user', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    question = sgqlc.types.Field('QuestionWhereInput', graphql_name='question')
    user = sgqlc.types.Field('UserWhereInput', graphql_name='user')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionUserWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionUserWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionUserWhereInput')), graphql_name='NOT')


class QuestionUserWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class QuestionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'title', 'title_not', 'title_in', 'title_not_in', 'title_lt', 'title_lte', 'title_gt', 'title_gte', 'title_contains', 'title_not_contains', 'title_starts_with', 'title_not_starts_with', 'title_ends_with', 'title_not_ends_with', 'frequency', 'frequency_not', 'frequency_in', 'frequency_not_in', 'days', 'days_not', 'days_in', 'days_not_in', 'days_lt', 'days_lte', 'days_gt', 'days_gte', 'days_contains', 'days_not_contains', 'days_starts_with', 'days_not_starts_with', 'days_ends_with', 'days_not_ends_with', 'time', 'time_not', 'time_in', 'time_not_in', 'time_lt', 'time_lte', 'time_gt', 'time_gte', 'time_contains', 'time_not_contains', 'time_starts_with', 'time_not_starts_with', 'time_ends_with', 'time_not_ends_with', 'status', 'status_not', 'question_users_every', 'question_users_some', 'question_users_none', 'status_updates_every', 'status_updates_some', 'status_updates_none', 'created_by', 'project', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'activity', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    title = sgqlc.types.Field(String, graphql_name='title')
    title_not = sgqlc.types.Field(String, graphql_name='title_not')
    title_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_in')
    title_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_not_in')
    title_lt = sgqlc.types.Field(String, graphql_name='title_lt')
    title_lte = sgqlc.types.Field(String, graphql_name='title_lte')
    title_gt = sgqlc.types.Field(String, graphql_name='title_gt')
    title_gte = sgqlc.types.Field(String, graphql_name='title_gte')
    title_contains = sgqlc.types.Field(String, graphql_name='title_contains')
    title_not_contains = sgqlc.types.Field(String, graphql_name='title_not_contains')
    title_starts_with = sgqlc.types.Field(String, graphql_name='title_starts_with')
    title_not_starts_with = sgqlc.types.Field(String, graphql_name='title_not_starts_with')
    title_ends_with = sgqlc.types.Field(String, graphql_name='title_ends_with')
    title_not_ends_with = sgqlc.types.Field(String, graphql_name='title_not_ends_with')
    frequency = sgqlc.types.Field(QuestionFrequency, graphql_name='frequency')
    frequency_not = sgqlc.types.Field(QuestionFrequency, graphql_name='frequency_not')
    frequency_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(QuestionFrequency)), graphql_name='frequency_in')
    frequency_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(QuestionFrequency)), graphql_name='frequency_not_in')
    days = sgqlc.types.Field(String, graphql_name='days')
    days_not = sgqlc.types.Field(String, graphql_name='days_not')
    days_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='days_in')
    days_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='days_not_in')
    days_lt = sgqlc.types.Field(String, graphql_name='days_lt')
    days_lte = sgqlc.types.Field(String, graphql_name='days_lte')
    days_gt = sgqlc.types.Field(String, graphql_name='days_gt')
    days_gte = sgqlc.types.Field(String, graphql_name='days_gte')
    days_contains = sgqlc.types.Field(String, graphql_name='days_contains')
    days_not_contains = sgqlc.types.Field(String, graphql_name='days_not_contains')
    days_starts_with = sgqlc.types.Field(String, graphql_name='days_starts_with')
    days_not_starts_with = sgqlc.types.Field(String, graphql_name='days_not_starts_with')
    days_ends_with = sgqlc.types.Field(String, graphql_name='days_ends_with')
    days_not_ends_with = sgqlc.types.Field(String, graphql_name='days_not_ends_with')
    time = sgqlc.types.Field(String, graphql_name='time')
    time_not = sgqlc.types.Field(String, graphql_name='time_not')
    time_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='time_in')
    time_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='time_not_in')
    time_lt = sgqlc.types.Field(String, graphql_name='time_lt')
    time_lte = sgqlc.types.Field(String, graphql_name='time_lte')
    time_gt = sgqlc.types.Field(String, graphql_name='time_gt')
    time_gte = sgqlc.types.Field(String, graphql_name='time_gte')
    time_contains = sgqlc.types.Field(String, graphql_name='time_contains')
    time_not_contains = sgqlc.types.Field(String, graphql_name='time_not_contains')
    time_starts_with = sgqlc.types.Field(String, graphql_name='time_starts_with')
    time_not_starts_with = sgqlc.types.Field(String, graphql_name='time_not_starts_with')
    time_ends_with = sgqlc.types.Field(String, graphql_name='time_ends_with')
    time_not_ends_with = sgqlc.types.Field(String, graphql_name='time_not_ends_with')
    status = sgqlc.types.Field(Boolean, graphql_name='status')
    status_not = sgqlc.types.Field(Boolean, graphql_name='status_not')
    question_users_every = sgqlc.types.Field(QuestionUserWhereInput, graphql_name='questionUsers_every')
    question_users_some = sgqlc.types.Field(QuestionUserWhereInput, graphql_name='questionUsers_some')
    question_users_none = sgqlc.types.Field(QuestionUserWhereInput, graphql_name='questionUsers_none')
    status_updates_every = sgqlc.types.Field('StatusUpdateWhereInput', graphql_name='statusUpdates_every')
    status_updates_some = sgqlc.types.Field('StatusUpdateWhereInput', graphql_name='statusUpdates_some')
    status_updates_none = sgqlc.types.Field('StatusUpdateWhereInput', graphql_name='statusUpdates_none')
    created_by = sgqlc.types.Field('UserWhereInput', graphql_name='createdBy')
    project = sgqlc.types.Field(ProjectWhereInput, graphql_name='project')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    activity = sgqlc.types.Field(ActivityWhereInput, graphql_name='activity')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionWhereInput')), graphql_name='NOT')


class QuestionWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class ReactivateCompanySubscriptionPlanInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id',)
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')


class RecalculateChartsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('chart_ids',)
    chart_ids = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='chartIds')


class RecordTagFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('enabled', 'allowed_tag_ids', 'denied_tag_ids')
    enabled = sgqlc.types.Field(Boolean, graphql_name='enabled')
    allowed_tag_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='allowedTagIds')
    denied_tag_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='deniedTagIds')


class RemoveCompanyUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id', 'user_id')
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='userId')


class RemoveProjectFromTemplatesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id',)
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')


class RemoveProjectUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id', 'user_id')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='userId')


class RemoveTodoAssigneesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('todo_id', 'assignee_ids')
    todo_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoId')
    assignee_ids = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='assigneeIds')


class RepeatingTodoEndInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('type', 'on', 'after')
    type = sgqlc.types.Field(sgqlc.types.non_null(RepeatingTodoEndType), graphql_name='type')
    on = sgqlc.types.Field(DateTime, graphql_name='on')
    after = sgqlc.types.Field(Int, graphql_name='after')


class RepeatingTodoIntervalInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('count', 'type', 'days', 'month')
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')
    type = sgqlc.types.Field(sgqlc.types.non_null(RepeatingTodoIntervalType), graphql_name='type')
    days = sgqlc.types.Field(sgqlc.types.list_of(RepeatingTodoDayType), graphql_name='days')
    month = sgqlc.types.Field(RepeatingTodoMonthType, graphql_name='month')


class RevokeLicenseInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id',)
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')


class SecurityCodeCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'email', 'code', 'category', 'category_ref', 'expired_at')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='code')
    category = sgqlc.types.Field(sgqlc.types.non_null(SecurityCodeCategory), graphql_name='category')
    category_ref = sgqlc.types.Field(String, graphql_name='categoryRef')
    expired_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='expiredAt')


class SecurityCodeSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('SecurityCodeWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SecurityCodeSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SecurityCodeSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SecurityCodeSubscriptionWhereInput')), graphql_name='NOT')


class SecurityCodeUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'email', 'code', 'category', 'category_ref', 'expired_at')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    email = sgqlc.types.Field(String, graphql_name='email')
    code = sgqlc.types.Field(String, graphql_name='code')
    category = sgqlc.types.Field(SecurityCodeCategory, graphql_name='category')
    category_ref = sgqlc.types.Field(String, graphql_name='categoryRef')
    expired_at = sgqlc.types.Field(DateTime, graphql_name='expiredAt')


class SecurityCodeUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'email', 'code', 'category', 'category_ref', 'expired_at')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    email = sgqlc.types.Field(String, graphql_name='email')
    code = sgqlc.types.Field(String, graphql_name='code')
    category = sgqlc.types.Field(SecurityCodeCategory, graphql_name='category')
    category_ref = sgqlc.types.Field(String, graphql_name='categoryRef')
    expired_at = sgqlc.types.Field(DateTime, graphql_name='expiredAt')


class SecurityCodeWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'email', 'email_not', 'email_in', 'email_not_in', 'email_lt', 'email_lte', 'email_gt', 'email_gte', 'email_contains', 'email_not_contains', 'email_starts_with', 'email_not_starts_with', 'email_ends_with', 'email_not_ends_with', 'code', 'code_not', 'code_in', 'code_not_in', 'code_lt', 'code_lte', 'code_gt', 'code_gte', 'code_contains', 'code_not_contains', 'code_starts_with', 'code_not_starts_with', 'code_ends_with', 'code_not_ends_with', 'category', 'category_not', 'category_in', 'category_not_in', 'category_ref', 'category_ref_not', 'category_ref_in', 'category_ref_not_in', 'category_ref_lt', 'category_ref_lte', 'category_ref_gt', 'category_ref_gte', 'category_ref_contains', 'category_ref_not_contains', 'category_ref_starts_with', 'category_ref_not_starts_with', 'category_ref_ends_with', 'category_ref_not_ends_with', 'expired_at', 'expired_at_not', 'expired_at_in', 'expired_at_not_in', 'expired_at_lt', 'expired_at_lte', 'expired_at_gt', 'expired_at_gte', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    email = sgqlc.types.Field(String, graphql_name='email')
    email_not = sgqlc.types.Field(String, graphql_name='email_not')
    email_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='email_in')
    email_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='email_not_in')
    email_lt = sgqlc.types.Field(String, graphql_name='email_lt')
    email_lte = sgqlc.types.Field(String, graphql_name='email_lte')
    email_gt = sgqlc.types.Field(String, graphql_name='email_gt')
    email_gte = sgqlc.types.Field(String, graphql_name='email_gte')
    email_contains = sgqlc.types.Field(String, graphql_name='email_contains')
    email_not_contains = sgqlc.types.Field(String, graphql_name='email_not_contains')
    email_starts_with = sgqlc.types.Field(String, graphql_name='email_starts_with')
    email_not_starts_with = sgqlc.types.Field(String, graphql_name='email_not_starts_with')
    email_ends_with = sgqlc.types.Field(String, graphql_name='email_ends_with')
    email_not_ends_with = sgqlc.types.Field(String, graphql_name='email_not_ends_with')
    code = sgqlc.types.Field(String, graphql_name='code')
    code_not = sgqlc.types.Field(String, graphql_name='code_not')
    code_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='code_in')
    code_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='code_not_in')
    code_lt = sgqlc.types.Field(String, graphql_name='code_lt')
    code_lte = sgqlc.types.Field(String, graphql_name='code_lte')
    code_gt = sgqlc.types.Field(String, graphql_name='code_gt')
    code_gte = sgqlc.types.Field(String, graphql_name='code_gte')
    code_contains = sgqlc.types.Field(String, graphql_name='code_contains')
    code_not_contains = sgqlc.types.Field(String, graphql_name='code_not_contains')
    code_starts_with = sgqlc.types.Field(String, graphql_name='code_starts_with')
    code_not_starts_with = sgqlc.types.Field(String, graphql_name='code_not_starts_with')
    code_ends_with = sgqlc.types.Field(String, graphql_name='code_ends_with')
    code_not_ends_with = sgqlc.types.Field(String, graphql_name='code_not_ends_with')
    category = sgqlc.types.Field(SecurityCodeCategory, graphql_name='category')
    category_not = sgqlc.types.Field(SecurityCodeCategory, graphql_name='category_not')
    category_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(SecurityCodeCategory)), graphql_name='category_in')
    category_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(SecurityCodeCategory)), graphql_name='category_not_in')
    category_ref = sgqlc.types.Field(String, graphql_name='categoryRef')
    category_ref_not = sgqlc.types.Field(String, graphql_name='categoryRef_not')
    category_ref_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='categoryRef_in')
    category_ref_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='categoryRef_not_in')
    category_ref_lt = sgqlc.types.Field(String, graphql_name='categoryRef_lt')
    category_ref_lte = sgqlc.types.Field(String, graphql_name='categoryRef_lte')
    category_ref_gt = sgqlc.types.Field(String, graphql_name='categoryRef_gt')
    category_ref_gte = sgqlc.types.Field(String, graphql_name='categoryRef_gte')
    category_ref_contains = sgqlc.types.Field(String, graphql_name='categoryRef_contains')
    category_ref_not_contains = sgqlc.types.Field(String, graphql_name='categoryRef_not_contains')
    category_ref_starts_with = sgqlc.types.Field(String, graphql_name='categoryRef_starts_with')
    category_ref_not_starts_with = sgqlc.types.Field(String, graphql_name='categoryRef_not_starts_with')
    category_ref_ends_with = sgqlc.types.Field(String, graphql_name='categoryRef_ends_with')
    category_ref_not_ends_with = sgqlc.types.Field(String, graphql_name='categoryRef_not_ends_with')
    expired_at = sgqlc.types.Field(DateTime, graphql_name='expiredAt')
    expired_at_not = sgqlc.types.Field(DateTime, graphql_name='expiredAt_not')
    expired_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='expiredAt_in')
    expired_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='expiredAt_not_in')
    expired_at_lt = sgqlc.types.Field(DateTime, graphql_name='expiredAt_lt')
    expired_at_lte = sgqlc.types.Field(DateTime, graphql_name='expiredAt_lte')
    expired_at_gt = sgqlc.types.Field(DateTime, graphql_name='expiredAt_gt')
    expired_at_gte = sgqlc.types.Field(DateTime, graphql_name='expiredAt_gte')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SecurityCodeWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SecurityCodeWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SecurityCodeWhereInput')), graphql_name='NOT')


class SecurityCodeWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class SendTestEmailInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('email', 'email_template_id')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    email_template_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='emailTemplateId')


class SetChecklistItemAssigneesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('checklist_item_id', 'assignee_ids')
    checklist_item_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='checklistItemId')
    assignee_ids = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='assigneeIds')


class SetFileFolderInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('file_ids', 'folder_id')
    file_ids = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='fileIds')
    folder_id = sgqlc.types.Field(String, graphql_name='folderId')


class SetParentFolderInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('folder_ids', 'parent_folder_id')
    folder_ids = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='folderIds')
    parent_folder_id = sgqlc.types.Field(String, graphql_name='parentFolderId')


class SetProjectFolderInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id', 'folder_id', 'position')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    folder_id = sgqlc.types.Field(String, graphql_name='folderId')
    position = sgqlc.types.Field(Float, graphql_name='position')


class SetTodoAssigneesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('todo_id', 'assignee_ids')
    todo_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoId')
    assignee_ids = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='assigneeIds')


class SetTodoCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('todo_id', 'custom_field_id', 'region_code', 'currency', 'country_codes', 'text', 'number', 'checked', 'latitude', 'longitude', 'start_date', 'end_date', 'timezone', 'custom_field_option_id', 'custom_field_option_ids', 'custom_field_reference_todo_ids')
    todo_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoId')
    custom_field_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='customFieldId')
    region_code = sgqlc.types.Field(String, graphql_name='regionCode')
    currency = sgqlc.types.Field(String, graphql_name='currency')
    country_codes = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='countryCodes')
    text = sgqlc.types.Field(String, graphql_name='text')
    number = sgqlc.types.Field(Float, graphql_name='number')
    checked = sgqlc.types.Field(Boolean, graphql_name='checked')
    latitude = sgqlc.types.Field(Float, graphql_name='latitude')
    longitude = sgqlc.types.Field(Float, graphql_name='longitude')
    start_date = sgqlc.types.Field(DateTime, graphql_name='startDate')
    end_date = sgqlc.types.Field(DateTime, graphql_name='endDate')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    custom_field_option_id = sgqlc.types.Field(String, graphql_name='customFieldOptionId')
    custom_field_option_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='customFieldOptionIds')
    custom_field_reference_todo_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='customFieldReferenceTodoIds')


class SetTodoReminderInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('todo_id', 'remind_date')
    todo_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoId')
    remind_date = sgqlc.types.Field(DateTime, graphql_name='remindDate')


class SetTodoTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('todo_id', 'tag_ids', 'tag_titles')
    todo_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoId')
    tag_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='tagIds')
    tag_titles = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='tagTitles')


class SignInInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('email', 'code', 'legacy')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='code')
    legacy = sgqlc.types.Field(Boolean, graphql_name='legacy')


class SignUpInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('first_name', 'last_name', 'job_title', 'email', 'code', 'company_name', 'company_slug', 'project_name', 'phone_number')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='code')
    company_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyName')
    company_slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companySlug')
    project_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectName')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')


class StatusUpdateCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'html', 'text', 'date', 'category', 'user', 'activity', 'project', 'comments', 'files', 'question')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    date = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='date')
    category = sgqlc.types.Field(sgqlc.types.non_null(StatusUpdateCategory), graphql_name='category')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneInput'), graphql_name='user')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutStatusUpdateInput, graphql_name='activity')
    project = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateOneWithoutStatusUpdatesInput), graphql_name='project')
    comments = sgqlc.types.Field(CommentCreateManyWithoutStatusUpdateInput, graphql_name='comments')
    files = sgqlc.types.Field(FileCreateManyWithoutStatusUpdateInput, graphql_name='files')
    question = sgqlc.types.Field(QuestionCreateOneWithoutStatusUpdatesInput, graphql_name='question')


class StatusUpdateCreateManyWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StatusUpdateCreateWithoutProjectInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StatusUpdateWhereUniqueInput')), graphql_name='connect')


class StatusUpdateCreateManyWithoutQuestionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StatusUpdateCreateWithoutQuestionInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StatusUpdateWhereUniqueInput')), graphql_name='connect')


class StatusUpdateCreateOneWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('StatusUpdateCreateWithoutActivityInput', graphql_name='create')
    connect = sgqlc.types.Field('StatusUpdateWhereUniqueInput', graphql_name='connect')


class StatusUpdateCreateOneWithoutCommentsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('StatusUpdateCreateWithoutCommentsInput', graphql_name='create')
    connect = sgqlc.types.Field('StatusUpdateWhereUniqueInput', graphql_name='connect')


class StatusUpdateCreateOneWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('StatusUpdateCreateWithoutFilesInput', graphql_name='create')
    connect = sgqlc.types.Field('StatusUpdateWhereUniqueInput', graphql_name='connect')


class StatusUpdateCreateWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'html', 'text', 'date', 'category', 'user', 'project', 'comments', 'files', 'question')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    date = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='date')
    category = sgqlc.types.Field(sgqlc.types.non_null(StatusUpdateCategory), graphql_name='category')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneInput'), graphql_name='user')
    project = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateOneWithoutStatusUpdatesInput), graphql_name='project')
    comments = sgqlc.types.Field(CommentCreateManyWithoutStatusUpdateInput, graphql_name='comments')
    files = sgqlc.types.Field(FileCreateManyWithoutStatusUpdateInput, graphql_name='files')
    question = sgqlc.types.Field(QuestionCreateOneWithoutStatusUpdatesInput, graphql_name='question')


class StatusUpdateCreateWithoutCommentsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'html', 'text', 'date', 'category', 'user', 'activity', 'project', 'files', 'question')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    date = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='date')
    category = sgqlc.types.Field(sgqlc.types.non_null(StatusUpdateCategory), graphql_name='category')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneInput'), graphql_name='user')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutStatusUpdateInput, graphql_name='activity')
    project = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateOneWithoutStatusUpdatesInput), graphql_name='project')
    files = sgqlc.types.Field(FileCreateManyWithoutStatusUpdateInput, graphql_name='files')
    question = sgqlc.types.Field(QuestionCreateOneWithoutStatusUpdatesInput, graphql_name='question')


class StatusUpdateCreateWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'html', 'text', 'date', 'category', 'user', 'activity', 'project', 'comments', 'question')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    date = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='date')
    category = sgqlc.types.Field(sgqlc.types.non_null(StatusUpdateCategory), graphql_name='category')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneInput'), graphql_name='user')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutStatusUpdateInput, graphql_name='activity')
    project = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateOneWithoutStatusUpdatesInput), graphql_name='project')
    comments = sgqlc.types.Field(CommentCreateManyWithoutStatusUpdateInput, graphql_name='comments')
    question = sgqlc.types.Field(QuestionCreateOneWithoutStatusUpdatesInput, graphql_name='question')


class StatusUpdateCreateWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'html', 'text', 'date', 'category', 'user', 'activity', 'comments', 'files', 'question')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    date = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='date')
    category = sgqlc.types.Field(sgqlc.types.non_null(StatusUpdateCategory), graphql_name='category')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneInput'), graphql_name='user')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutStatusUpdateInput, graphql_name='activity')
    comments = sgqlc.types.Field(CommentCreateManyWithoutStatusUpdateInput, graphql_name='comments')
    files = sgqlc.types.Field(FileCreateManyWithoutStatusUpdateInput, graphql_name='files')
    question = sgqlc.types.Field(QuestionCreateOneWithoutStatusUpdatesInput, graphql_name='question')


class StatusUpdateCreateWithoutQuestionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'html', 'text', 'date', 'category', 'user', 'activity', 'project', 'comments', 'files')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    date = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='date')
    category = sgqlc.types.Field(sgqlc.types.non_null(StatusUpdateCategory), graphql_name='category')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneInput'), graphql_name='user')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutStatusUpdateInput, graphql_name='activity')
    project = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateOneWithoutStatusUpdatesInput), graphql_name='project')
    comments = sgqlc.types.Field(CommentCreateManyWithoutStatusUpdateInput, graphql_name='comments')
    files = sgqlc.types.Field(FileCreateManyWithoutStatusUpdateInput, graphql_name='files')


class StatusUpdateScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'html', 'html_not', 'html_in', 'html_not_in', 'html_lt', 'html_lte', 'html_gt', 'html_gte', 'html_contains', 'html_not_contains', 'html_starts_with', 'html_not_starts_with', 'html_ends_with', 'html_not_ends_with', 'text', 'text_not', 'text_in', 'text_not_in', 'text_lt', 'text_lte', 'text_gt', 'text_gte', 'text_contains', 'text_not_contains', 'text_starts_with', 'text_not_starts_with', 'text_ends_with', 'text_not_ends_with', 'date', 'date_not', 'date_in', 'date_not_in', 'date_lt', 'date_lte', 'date_gt', 'date_gte', 'category', 'category_not', 'category_in', 'category_not_in', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    html = sgqlc.types.Field(String, graphql_name='html')
    html_not = sgqlc.types.Field(String, graphql_name='html_not')
    html_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='html_in')
    html_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='html_not_in')
    html_lt = sgqlc.types.Field(String, graphql_name='html_lt')
    html_lte = sgqlc.types.Field(String, graphql_name='html_lte')
    html_gt = sgqlc.types.Field(String, graphql_name='html_gt')
    html_gte = sgqlc.types.Field(String, graphql_name='html_gte')
    html_contains = sgqlc.types.Field(String, graphql_name='html_contains')
    html_not_contains = sgqlc.types.Field(String, graphql_name='html_not_contains')
    html_starts_with = sgqlc.types.Field(String, graphql_name='html_starts_with')
    html_not_starts_with = sgqlc.types.Field(String, graphql_name='html_not_starts_with')
    html_ends_with = sgqlc.types.Field(String, graphql_name='html_ends_with')
    html_not_ends_with = sgqlc.types.Field(String, graphql_name='html_not_ends_with')
    text = sgqlc.types.Field(String, graphql_name='text')
    text_not = sgqlc.types.Field(String, graphql_name='text_not')
    text_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='text_in')
    text_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='text_not_in')
    text_lt = sgqlc.types.Field(String, graphql_name='text_lt')
    text_lte = sgqlc.types.Field(String, graphql_name='text_lte')
    text_gt = sgqlc.types.Field(String, graphql_name='text_gt')
    text_gte = sgqlc.types.Field(String, graphql_name='text_gte')
    text_contains = sgqlc.types.Field(String, graphql_name='text_contains')
    text_not_contains = sgqlc.types.Field(String, graphql_name='text_not_contains')
    text_starts_with = sgqlc.types.Field(String, graphql_name='text_starts_with')
    text_not_starts_with = sgqlc.types.Field(String, graphql_name='text_not_starts_with')
    text_ends_with = sgqlc.types.Field(String, graphql_name='text_ends_with')
    text_not_ends_with = sgqlc.types.Field(String, graphql_name='text_not_ends_with')
    date = sgqlc.types.Field(DateTime, graphql_name='date')
    date_not = sgqlc.types.Field(DateTime, graphql_name='date_not')
    date_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='date_in')
    date_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='date_not_in')
    date_lt = sgqlc.types.Field(DateTime, graphql_name='date_lt')
    date_lte = sgqlc.types.Field(DateTime, graphql_name='date_lte')
    date_gt = sgqlc.types.Field(DateTime, graphql_name='date_gt')
    date_gte = sgqlc.types.Field(DateTime, graphql_name='date_gte')
    category = sgqlc.types.Field(StatusUpdateCategory, graphql_name='category')
    category_not = sgqlc.types.Field(StatusUpdateCategory, graphql_name='category_not')
    category_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(StatusUpdateCategory)), graphql_name='category_in')
    category_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(StatusUpdateCategory)), graphql_name='category_not_in')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StatusUpdateScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StatusUpdateScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StatusUpdateScalarWhereInput')), graphql_name='NOT')


class StatusUpdateSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('StatusUpdateWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StatusUpdateSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StatusUpdateSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StatusUpdateSubscriptionWhereInput')), graphql_name='NOT')


class StatusUpdateUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'html', 'text', 'date', 'category', 'user', 'activity', 'project', 'comments', 'files', 'question')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    html = sgqlc.types.Field(String, graphql_name='html')
    text = sgqlc.types.Field(String, graphql_name='text')
    date = sgqlc.types.Field(DateTime, graphql_name='date')
    category = sgqlc.types.Field(StatusUpdateCategory, graphql_name='category')
    user = sgqlc.types.Field('UserUpdateOneRequiredInput', graphql_name='user')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutStatusUpdateInput, graphql_name='activity')
    project = sgqlc.types.Field(ProjectUpdateOneRequiredWithoutStatusUpdatesInput, graphql_name='project')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutStatusUpdateInput, graphql_name='comments')
    files = sgqlc.types.Field(FileUpdateManyWithoutStatusUpdateInput, graphql_name='files')
    question = sgqlc.types.Field(QuestionUpdateOneWithoutStatusUpdatesInput, graphql_name='question')


class StatusUpdateUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'html', 'text', 'date', 'category')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    html = sgqlc.types.Field(String, graphql_name='html')
    text = sgqlc.types.Field(String, graphql_name='text')
    date = sgqlc.types.Field(DateTime, graphql_name='date')
    category = sgqlc.types.Field(StatusUpdateCategory, graphql_name='category')


class StatusUpdateUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'html', 'text', 'date', 'category')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    html = sgqlc.types.Field(String, graphql_name='html')
    text = sgqlc.types.Field(String, graphql_name='text')
    date = sgqlc.types.Field(DateTime, graphql_name='date')
    category = sgqlc.types.Field(StatusUpdateCategory, graphql_name='category')


class StatusUpdateUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(StatusUpdateScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(StatusUpdateUpdateManyDataInput), graphql_name='data')


class StatusUpdateUpdateManyWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(StatusUpdateCreateWithoutProjectInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StatusUpdateWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StatusUpdateWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StatusUpdateWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StatusUpdateWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StatusUpdateUpdateWithWhereUniqueWithoutProjectInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StatusUpdateUpsertWithWhereUniqueWithoutProjectInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(StatusUpdateScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(StatusUpdateUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class StatusUpdateUpdateManyWithoutQuestionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(StatusUpdateCreateWithoutQuestionInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StatusUpdateWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StatusUpdateWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StatusUpdateWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StatusUpdateWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StatusUpdateUpdateWithWhereUniqueWithoutQuestionInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StatusUpdateUpsertWithWhereUniqueWithoutQuestionInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(StatusUpdateScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(StatusUpdateUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class StatusUpdateUpdateOneWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(StatusUpdateCreateWithoutActivityInput, graphql_name='create')
    update = sgqlc.types.Field('StatusUpdateUpdateWithoutActivityDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('StatusUpdateUpsertWithoutActivityInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('StatusUpdateWhereUniqueInput', graphql_name='connect')


class StatusUpdateUpdateOneWithoutCommentsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(StatusUpdateCreateWithoutCommentsInput, graphql_name='create')
    update = sgqlc.types.Field('StatusUpdateUpdateWithoutCommentsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('StatusUpdateUpsertWithoutCommentsInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('StatusUpdateWhereUniqueInput', graphql_name='connect')


class StatusUpdateUpdateOneWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(StatusUpdateCreateWithoutFilesInput, graphql_name='create')
    update = sgqlc.types.Field('StatusUpdateUpdateWithoutFilesDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('StatusUpdateUpsertWithoutFilesInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('StatusUpdateWhereUniqueInput', graphql_name='connect')


class StatusUpdateUpdateWithWhereUniqueWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('StatusUpdateWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('StatusUpdateUpdateWithoutProjectDataInput'), graphql_name='data')


class StatusUpdateUpdateWithWhereUniqueWithoutQuestionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('StatusUpdateWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('StatusUpdateUpdateWithoutQuestionDataInput'), graphql_name='data')


class StatusUpdateUpdateWithoutActivityDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'html', 'text', 'date', 'category', 'user', 'project', 'comments', 'files', 'question')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    html = sgqlc.types.Field(String, graphql_name='html')
    text = sgqlc.types.Field(String, graphql_name='text')
    date = sgqlc.types.Field(DateTime, graphql_name='date')
    category = sgqlc.types.Field(StatusUpdateCategory, graphql_name='category')
    user = sgqlc.types.Field('UserUpdateOneRequiredInput', graphql_name='user')
    project = sgqlc.types.Field(ProjectUpdateOneRequiredWithoutStatusUpdatesInput, graphql_name='project')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutStatusUpdateInput, graphql_name='comments')
    files = sgqlc.types.Field(FileUpdateManyWithoutStatusUpdateInput, graphql_name='files')
    question = sgqlc.types.Field(QuestionUpdateOneWithoutStatusUpdatesInput, graphql_name='question')


class StatusUpdateUpdateWithoutCommentsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'html', 'text', 'date', 'category', 'user', 'activity', 'project', 'files', 'question')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    html = sgqlc.types.Field(String, graphql_name='html')
    text = sgqlc.types.Field(String, graphql_name='text')
    date = sgqlc.types.Field(DateTime, graphql_name='date')
    category = sgqlc.types.Field(StatusUpdateCategory, graphql_name='category')
    user = sgqlc.types.Field('UserUpdateOneRequiredInput', graphql_name='user')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutStatusUpdateInput, graphql_name='activity')
    project = sgqlc.types.Field(ProjectUpdateOneRequiredWithoutStatusUpdatesInput, graphql_name='project')
    files = sgqlc.types.Field(FileUpdateManyWithoutStatusUpdateInput, graphql_name='files')
    question = sgqlc.types.Field(QuestionUpdateOneWithoutStatusUpdatesInput, graphql_name='question')


class StatusUpdateUpdateWithoutFilesDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'html', 'text', 'date', 'category', 'user', 'activity', 'project', 'comments', 'question')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    html = sgqlc.types.Field(String, graphql_name='html')
    text = sgqlc.types.Field(String, graphql_name='text')
    date = sgqlc.types.Field(DateTime, graphql_name='date')
    category = sgqlc.types.Field(StatusUpdateCategory, graphql_name='category')
    user = sgqlc.types.Field('UserUpdateOneRequiredInput', graphql_name='user')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutStatusUpdateInput, graphql_name='activity')
    project = sgqlc.types.Field(ProjectUpdateOneRequiredWithoutStatusUpdatesInput, graphql_name='project')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutStatusUpdateInput, graphql_name='comments')
    question = sgqlc.types.Field(QuestionUpdateOneWithoutStatusUpdatesInput, graphql_name='question')


class StatusUpdateUpdateWithoutProjectDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'html', 'text', 'date', 'category', 'user', 'activity', 'comments', 'files', 'question')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    html = sgqlc.types.Field(String, graphql_name='html')
    text = sgqlc.types.Field(String, graphql_name='text')
    date = sgqlc.types.Field(DateTime, graphql_name='date')
    category = sgqlc.types.Field(StatusUpdateCategory, graphql_name='category')
    user = sgqlc.types.Field('UserUpdateOneRequiredInput', graphql_name='user')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutStatusUpdateInput, graphql_name='activity')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutStatusUpdateInput, graphql_name='comments')
    files = sgqlc.types.Field(FileUpdateManyWithoutStatusUpdateInput, graphql_name='files')
    question = sgqlc.types.Field(QuestionUpdateOneWithoutStatusUpdatesInput, graphql_name='question')


class StatusUpdateUpdateWithoutQuestionDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'html', 'text', 'date', 'category', 'user', 'activity', 'project', 'comments', 'files')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    html = sgqlc.types.Field(String, graphql_name='html')
    text = sgqlc.types.Field(String, graphql_name='text')
    date = sgqlc.types.Field(DateTime, graphql_name='date')
    category = sgqlc.types.Field(StatusUpdateCategory, graphql_name='category')
    user = sgqlc.types.Field('UserUpdateOneRequiredInput', graphql_name='user')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutStatusUpdateInput, graphql_name='activity')
    project = sgqlc.types.Field(ProjectUpdateOneRequiredWithoutStatusUpdatesInput, graphql_name='project')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutStatusUpdateInput, graphql_name='comments')
    files = sgqlc.types.Field(FileUpdateManyWithoutStatusUpdateInput, graphql_name='files')


class StatusUpdateUpsertWithWhereUniqueWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('StatusUpdateWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(StatusUpdateUpdateWithoutProjectDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(StatusUpdateCreateWithoutProjectInput), graphql_name='create')


class StatusUpdateUpsertWithWhereUniqueWithoutQuestionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('StatusUpdateWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(StatusUpdateUpdateWithoutQuestionDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(StatusUpdateCreateWithoutQuestionInput), graphql_name='create')


class StatusUpdateUpsertWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(StatusUpdateUpdateWithoutActivityDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(StatusUpdateCreateWithoutActivityInput), graphql_name='create')


class StatusUpdateUpsertWithoutCommentsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(StatusUpdateUpdateWithoutCommentsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(StatusUpdateCreateWithoutCommentsInput), graphql_name='create')


class StatusUpdateUpsertWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(StatusUpdateUpdateWithoutFilesDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(StatusUpdateCreateWithoutFilesInput), graphql_name='create')


class StatusUpdateWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'html', 'html_not', 'html_in', 'html_not_in', 'html_lt', 'html_lte', 'html_gt', 'html_gte', 'html_contains', 'html_not_contains', 'html_starts_with', 'html_not_starts_with', 'html_ends_with', 'html_not_ends_with', 'text', 'text_not', 'text_in', 'text_not_in', 'text_lt', 'text_lte', 'text_gt', 'text_gte', 'text_contains', 'text_not_contains', 'text_starts_with', 'text_not_starts_with', 'text_ends_with', 'text_not_ends_with', 'date', 'date_not', 'date_in', 'date_not_in', 'date_lt', 'date_lte', 'date_gt', 'date_gte', 'category', 'category_not', 'category_in', 'category_not_in', 'user', 'activity', 'project', 'comments_every', 'comments_some', 'comments_none', 'files_every', 'files_some', 'files_none', 'question', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    html = sgqlc.types.Field(String, graphql_name='html')
    html_not = sgqlc.types.Field(String, graphql_name='html_not')
    html_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='html_in')
    html_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='html_not_in')
    html_lt = sgqlc.types.Field(String, graphql_name='html_lt')
    html_lte = sgqlc.types.Field(String, graphql_name='html_lte')
    html_gt = sgqlc.types.Field(String, graphql_name='html_gt')
    html_gte = sgqlc.types.Field(String, graphql_name='html_gte')
    html_contains = sgqlc.types.Field(String, graphql_name='html_contains')
    html_not_contains = sgqlc.types.Field(String, graphql_name='html_not_contains')
    html_starts_with = sgqlc.types.Field(String, graphql_name='html_starts_with')
    html_not_starts_with = sgqlc.types.Field(String, graphql_name='html_not_starts_with')
    html_ends_with = sgqlc.types.Field(String, graphql_name='html_ends_with')
    html_not_ends_with = sgqlc.types.Field(String, graphql_name='html_not_ends_with')
    text = sgqlc.types.Field(String, graphql_name='text')
    text_not = sgqlc.types.Field(String, graphql_name='text_not')
    text_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='text_in')
    text_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='text_not_in')
    text_lt = sgqlc.types.Field(String, graphql_name='text_lt')
    text_lte = sgqlc.types.Field(String, graphql_name='text_lte')
    text_gt = sgqlc.types.Field(String, graphql_name='text_gt')
    text_gte = sgqlc.types.Field(String, graphql_name='text_gte')
    text_contains = sgqlc.types.Field(String, graphql_name='text_contains')
    text_not_contains = sgqlc.types.Field(String, graphql_name='text_not_contains')
    text_starts_with = sgqlc.types.Field(String, graphql_name='text_starts_with')
    text_not_starts_with = sgqlc.types.Field(String, graphql_name='text_not_starts_with')
    text_ends_with = sgqlc.types.Field(String, graphql_name='text_ends_with')
    text_not_ends_with = sgqlc.types.Field(String, graphql_name='text_not_ends_with')
    date = sgqlc.types.Field(DateTime, graphql_name='date')
    date_not = sgqlc.types.Field(DateTime, graphql_name='date_not')
    date_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='date_in')
    date_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='date_not_in')
    date_lt = sgqlc.types.Field(DateTime, graphql_name='date_lt')
    date_lte = sgqlc.types.Field(DateTime, graphql_name='date_lte')
    date_gt = sgqlc.types.Field(DateTime, graphql_name='date_gt')
    date_gte = sgqlc.types.Field(DateTime, graphql_name='date_gte')
    category = sgqlc.types.Field(StatusUpdateCategory, graphql_name='category')
    category_not = sgqlc.types.Field(StatusUpdateCategory, graphql_name='category_not')
    category_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(StatusUpdateCategory)), graphql_name='category_in')
    category_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(StatusUpdateCategory)), graphql_name='category_not_in')
    user = sgqlc.types.Field('UserWhereInput', graphql_name='user')
    activity = sgqlc.types.Field(ActivityWhereInput, graphql_name='activity')
    project = sgqlc.types.Field(ProjectWhereInput, graphql_name='project')
    comments_every = sgqlc.types.Field(CommentWhereInput, graphql_name='comments_every')
    comments_some = sgqlc.types.Field(CommentWhereInput, graphql_name='comments_some')
    comments_none = sgqlc.types.Field(CommentWhereInput, graphql_name='comments_none')
    files_every = sgqlc.types.Field(FileWhereInput, graphql_name='files_every')
    files_some = sgqlc.types.Field(FileWhereInput, graphql_name='files_some')
    files_none = sgqlc.types.Field(FileWhereInput, graphql_name='files_none')
    question = sgqlc.types.Field(QuestionWhereInput, graphql_name='question')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StatusUpdateWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StatusUpdateWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StatusUpdateWhereInput')), graphql_name='NOT')


class StatusUpdateWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class SubmitFormFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('form_field_id', 'custom_field_id', 'value')
    form_field_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='formFieldId')
    custom_field_id = sgqlc.types.Field(String, graphql_name='customFieldId')
    value = sgqlc.types.Field(JSON, graphql_name='value')


class SubmitFormInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('form_token', 'form_id', 'form_field_input')
    form_token = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='formToken')
    form_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='formId')
    form_field_input = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(SubmitFormFieldInput))), graphql_name='formFieldInput')


class SubscribeToChartFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('dashboard_id', 'todo_filter')
    dashboard_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='dashboardId')
    todo_filter = sgqlc.types.Field('TodoFilterInput', graphql_name='todoFilter')


class SubscribeToChatFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id',)
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')


class SubscribeToCustomFieldOptionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('custom_field_id',)
    custom_field_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='customFieldId')


class SubscribeToDashboardFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id', 'project_id')
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')
    project_id = sgqlc.types.Field(String, graphql_name='projectId')


class SubscribeToDocumentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id', 'wiki')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    wiki = sgqlc.types.Field(Boolean, graphql_name='wiki')


class SubscribeToFormFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id', 'project_id')
    company_id = sgqlc.types.Field(String, graphql_name='companyId')
    project_id = sgqlc.types.Field(String, graphql_name='projectId')


class SubscribeToOAuthConnectionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id',)
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')


class SubscribeToProjectUserRoleInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id', 'user_id')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='userId')


class SubscribeToTodoActionFilter(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('todo_id',)
    todo_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoId')


class SubscribeToTodoFilter(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id', 'project_id', 'todo_id', 'user_id', 'started_at', 'dued_at')
    company_id = sgqlc.types.Field(String, graphql_name='companyId')
    project_id = sgqlc.types.Field(String, graphql_name='projectId')
    todo_id = sgqlc.types.Field(String, graphql_name='todoId')
    user_id = sgqlc.types.Field(String, graphql_name='userId')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')


class TagCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'color', 'project', 'todo_tags', 'form_tags', 'automation_trigger_tags', 'automation_action_tags')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='color')
    project = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateOneWithoutTagsInput), graphql_name='project')
    todo_tags = sgqlc.types.Field('TodoTagCreateManyWithoutTagInput', graphql_name='todoTags')
    form_tags = sgqlc.types.Field(FormTagCreateManyWithoutTagInput, graphql_name='formTags')
    automation_trigger_tags = sgqlc.types.Field(AutomationTriggerTagCreateManyWithoutTagInput, graphql_name='automationTriggerTags')
    automation_action_tags = sgqlc.types.Field(AutomationActionTagCreateManyWithoutTagInput, graphql_name='automationActionTags')


class TagCreateManyWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TagCreateWithoutProjectInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TagWhereUniqueInput')), graphql_name='connect')


class TagCreateOneWithoutAutomationActionTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('TagCreateWithoutAutomationActionTagsInput', graphql_name='create')
    connect = sgqlc.types.Field('TagWhereUniqueInput', graphql_name='connect')


class TagCreateOneWithoutAutomationTriggerTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('TagCreateWithoutAutomationTriggerTagsInput', graphql_name='create')
    connect = sgqlc.types.Field('TagWhereUniqueInput', graphql_name='connect')


class TagCreateOneWithoutFormTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('TagCreateWithoutFormTagsInput', graphql_name='create')
    connect = sgqlc.types.Field('TagWhereUniqueInput', graphql_name='connect')


class TagCreateOneWithoutTodoTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('TagCreateWithoutTodoTagsInput', graphql_name='create')
    connect = sgqlc.types.Field('TagWhereUniqueInput', graphql_name='connect')


class TagCreateWithoutAutomationActionTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'color', 'project', 'todo_tags', 'form_tags', 'automation_trigger_tags')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='color')
    project = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateOneWithoutTagsInput), graphql_name='project')
    todo_tags = sgqlc.types.Field('TodoTagCreateManyWithoutTagInput', graphql_name='todoTags')
    form_tags = sgqlc.types.Field(FormTagCreateManyWithoutTagInput, graphql_name='formTags')
    automation_trigger_tags = sgqlc.types.Field(AutomationTriggerTagCreateManyWithoutTagInput, graphql_name='automationTriggerTags')


class TagCreateWithoutAutomationTriggerTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'color', 'project', 'todo_tags', 'form_tags', 'automation_action_tags')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='color')
    project = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateOneWithoutTagsInput), graphql_name='project')
    todo_tags = sgqlc.types.Field('TodoTagCreateManyWithoutTagInput', graphql_name='todoTags')
    form_tags = sgqlc.types.Field(FormTagCreateManyWithoutTagInput, graphql_name='formTags')
    automation_action_tags = sgqlc.types.Field(AutomationActionTagCreateManyWithoutTagInput, graphql_name='automationActionTags')


class TagCreateWithoutFormTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'color', 'project', 'todo_tags', 'automation_trigger_tags', 'automation_action_tags')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='color')
    project = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateOneWithoutTagsInput), graphql_name='project')
    todo_tags = sgqlc.types.Field('TodoTagCreateManyWithoutTagInput', graphql_name='todoTags')
    automation_trigger_tags = sgqlc.types.Field(AutomationTriggerTagCreateManyWithoutTagInput, graphql_name='automationTriggerTags')
    automation_action_tags = sgqlc.types.Field(AutomationActionTagCreateManyWithoutTagInput, graphql_name='automationActionTags')


class TagCreateWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'color', 'todo_tags', 'form_tags', 'automation_trigger_tags', 'automation_action_tags')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='color')
    todo_tags = sgqlc.types.Field('TodoTagCreateManyWithoutTagInput', graphql_name='todoTags')
    form_tags = sgqlc.types.Field(FormTagCreateManyWithoutTagInput, graphql_name='formTags')
    automation_trigger_tags = sgqlc.types.Field(AutomationTriggerTagCreateManyWithoutTagInput, graphql_name='automationTriggerTags')
    automation_action_tags = sgqlc.types.Field(AutomationActionTagCreateManyWithoutTagInput, graphql_name='automationActionTags')


class TagCreateWithoutTodoTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'color', 'project', 'form_tags', 'automation_trigger_tags', 'automation_action_tags')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='color')
    project = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateOneWithoutTagsInput), graphql_name='project')
    form_tags = sgqlc.types.Field(FormTagCreateManyWithoutTagInput, graphql_name='formTags')
    automation_trigger_tags = sgqlc.types.Field(AutomationTriggerTagCreateManyWithoutTagInput, graphql_name='automationTriggerTags')
    automation_action_tags = sgqlc.types.Field(AutomationActionTagCreateManyWithoutTagInput, graphql_name='automationActionTags')


class TagListFilter(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_ids', 'exclude_archived_projects', 'search', 'titles', 'colors', 'tag_ids')
    project_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='projectIds')
    exclude_archived_projects = sgqlc.types.Field(Boolean, graphql_name='excludeArchivedProjects')
    search = sgqlc.types.Field(String, graphql_name='search')
    titles = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='titles')
    colors = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='colors')
    tag_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='tagIds')


class TagScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'title', 'title_not', 'title_in', 'title_not_in', 'title_lt', 'title_lte', 'title_gt', 'title_gte', 'title_contains', 'title_not_contains', 'title_starts_with', 'title_not_starts_with', 'title_ends_with', 'title_not_ends_with', 'color', 'color_not', 'color_in', 'color_not_in', 'color_lt', 'color_lte', 'color_gt', 'color_gte', 'color_contains', 'color_not_contains', 'color_starts_with', 'color_not_starts_with', 'color_ends_with', 'color_not_ends_with', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    title = sgqlc.types.Field(String, graphql_name='title')
    title_not = sgqlc.types.Field(String, graphql_name='title_not')
    title_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_in')
    title_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_not_in')
    title_lt = sgqlc.types.Field(String, graphql_name='title_lt')
    title_lte = sgqlc.types.Field(String, graphql_name='title_lte')
    title_gt = sgqlc.types.Field(String, graphql_name='title_gt')
    title_gte = sgqlc.types.Field(String, graphql_name='title_gte')
    title_contains = sgqlc.types.Field(String, graphql_name='title_contains')
    title_not_contains = sgqlc.types.Field(String, graphql_name='title_not_contains')
    title_starts_with = sgqlc.types.Field(String, graphql_name='title_starts_with')
    title_not_starts_with = sgqlc.types.Field(String, graphql_name='title_not_starts_with')
    title_ends_with = sgqlc.types.Field(String, graphql_name='title_ends_with')
    title_not_ends_with = sgqlc.types.Field(String, graphql_name='title_not_ends_with')
    color = sgqlc.types.Field(String, graphql_name='color')
    color_not = sgqlc.types.Field(String, graphql_name='color_not')
    color_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='color_in')
    color_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='color_not_in')
    color_lt = sgqlc.types.Field(String, graphql_name='color_lt')
    color_lte = sgqlc.types.Field(String, graphql_name='color_lte')
    color_gt = sgqlc.types.Field(String, graphql_name='color_gt')
    color_gte = sgqlc.types.Field(String, graphql_name='color_gte')
    color_contains = sgqlc.types.Field(String, graphql_name='color_contains')
    color_not_contains = sgqlc.types.Field(String, graphql_name='color_not_contains')
    color_starts_with = sgqlc.types.Field(String, graphql_name='color_starts_with')
    color_not_starts_with = sgqlc.types.Field(String, graphql_name='color_not_starts_with')
    color_ends_with = sgqlc.types.Field(String, graphql_name='color_ends_with')
    color_not_ends_with = sgqlc.types.Field(String, graphql_name='color_not_ends_with')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TagScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TagScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TagScalarWhereInput')), graphql_name='NOT')


class TagSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('TagWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TagSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TagSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TagSubscriptionWhereInput')), graphql_name='NOT')


class TagUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'color', 'project', 'todo_tags', 'form_tags', 'automation_trigger_tags', 'automation_action_tags')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(String, graphql_name='color')
    project = sgqlc.types.Field(ProjectUpdateOneRequiredWithoutTagsInput, graphql_name='project')
    todo_tags = sgqlc.types.Field('TodoTagUpdateManyWithoutTagInput', graphql_name='todoTags')
    form_tags = sgqlc.types.Field(FormTagUpdateManyWithoutTagInput, graphql_name='formTags')
    automation_trigger_tags = sgqlc.types.Field(AutomationTriggerTagUpdateManyWithoutTagInput, graphql_name='automationTriggerTags')
    automation_action_tags = sgqlc.types.Field(AutomationActionTagUpdateManyWithoutTagInput, graphql_name='automationActionTags')


class TagUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'color')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(String, graphql_name='color')


class TagUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'color')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(String, graphql_name='color')


class TagUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(TagScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(TagUpdateManyDataInput), graphql_name='data')


class TagUpdateManyWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TagCreateWithoutProjectInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TagWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TagWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TagWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TagWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TagUpdateWithWhereUniqueWithoutProjectInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TagUpsertWithWhereUniqueWithoutProjectInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TagScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TagUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class TagUpdateOneRequiredWithoutAutomationActionTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(TagCreateWithoutAutomationActionTagsInput, graphql_name='create')
    update = sgqlc.types.Field('TagUpdateWithoutAutomationActionTagsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('TagUpsertWithoutAutomationActionTagsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('TagWhereUniqueInput', graphql_name='connect')


class TagUpdateOneRequiredWithoutAutomationTriggerTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(TagCreateWithoutAutomationTriggerTagsInput, graphql_name='create')
    update = sgqlc.types.Field('TagUpdateWithoutAutomationTriggerTagsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('TagUpsertWithoutAutomationTriggerTagsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('TagWhereUniqueInput', graphql_name='connect')


class TagUpdateOneRequiredWithoutFormTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(TagCreateWithoutFormTagsInput, graphql_name='create')
    update = sgqlc.types.Field('TagUpdateWithoutFormTagsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('TagUpsertWithoutFormTagsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('TagWhereUniqueInput', graphql_name='connect')


class TagUpdateOneRequiredWithoutTodoTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(TagCreateWithoutTodoTagsInput, graphql_name='create')
    update = sgqlc.types.Field('TagUpdateWithoutTodoTagsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('TagUpsertWithoutTodoTagsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('TagWhereUniqueInput', graphql_name='connect')


class TagUpdateWithWhereUniqueWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('TagWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('TagUpdateWithoutProjectDataInput'), graphql_name='data')


class TagUpdateWithoutAutomationActionTagsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'color', 'project', 'todo_tags', 'form_tags', 'automation_trigger_tags')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(String, graphql_name='color')
    project = sgqlc.types.Field(ProjectUpdateOneRequiredWithoutTagsInput, graphql_name='project')
    todo_tags = sgqlc.types.Field('TodoTagUpdateManyWithoutTagInput', graphql_name='todoTags')
    form_tags = sgqlc.types.Field(FormTagUpdateManyWithoutTagInput, graphql_name='formTags')
    automation_trigger_tags = sgqlc.types.Field(AutomationTriggerTagUpdateManyWithoutTagInput, graphql_name='automationTriggerTags')


class TagUpdateWithoutAutomationTriggerTagsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'color', 'project', 'todo_tags', 'form_tags', 'automation_action_tags')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(String, graphql_name='color')
    project = sgqlc.types.Field(ProjectUpdateOneRequiredWithoutTagsInput, graphql_name='project')
    todo_tags = sgqlc.types.Field('TodoTagUpdateManyWithoutTagInput', graphql_name='todoTags')
    form_tags = sgqlc.types.Field(FormTagUpdateManyWithoutTagInput, graphql_name='formTags')
    automation_action_tags = sgqlc.types.Field(AutomationActionTagUpdateManyWithoutTagInput, graphql_name='automationActionTags')


class TagUpdateWithoutFormTagsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'color', 'project', 'todo_tags', 'automation_trigger_tags', 'automation_action_tags')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(String, graphql_name='color')
    project = sgqlc.types.Field(ProjectUpdateOneRequiredWithoutTagsInput, graphql_name='project')
    todo_tags = sgqlc.types.Field('TodoTagUpdateManyWithoutTagInput', graphql_name='todoTags')
    automation_trigger_tags = sgqlc.types.Field(AutomationTriggerTagUpdateManyWithoutTagInput, graphql_name='automationTriggerTags')
    automation_action_tags = sgqlc.types.Field(AutomationActionTagUpdateManyWithoutTagInput, graphql_name='automationActionTags')


class TagUpdateWithoutProjectDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'color', 'todo_tags', 'form_tags', 'automation_trigger_tags', 'automation_action_tags')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(String, graphql_name='color')
    todo_tags = sgqlc.types.Field('TodoTagUpdateManyWithoutTagInput', graphql_name='todoTags')
    form_tags = sgqlc.types.Field(FormTagUpdateManyWithoutTagInput, graphql_name='formTags')
    automation_trigger_tags = sgqlc.types.Field(AutomationTriggerTagUpdateManyWithoutTagInput, graphql_name='automationTriggerTags')
    automation_action_tags = sgqlc.types.Field(AutomationActionTagUpdateManyWithoutTagInput, graphql_name='automationActionTags')


class TagUpdateWithoutTodoTagsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'title', 'color', 'project', 'form_tags', 'automation_trigger_tags', 'automation_action_tags')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(String, graphql_name='color')
    project = sgqlc.types.Field(ProjectUpdateOneRequiredWithoutTagsInput, graphql_name='project')
    form_tags = sgqlc.types.Field(FormTagUpdateManyWithoutTagInput, graphql_name='formTags')
    automation_trigger_tags = sgqlc.types.Field(AutomationTriggerTagUpdateManyWithoutTagInput, graphql_name='automationTriggerTags')
    automation_action_tags = sgqlc.types.Field(AutomationActionTagUpdateManyWithoutTagInput, graphql_name='automationActionTags')


class TagUpsertWithWhereUniqueWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('TagWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(TagUpdateWithoutProjectDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TagCreateWithoutProjectInput), graphql_name='create')


class TagUpsertWithoutAutomationActionTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(TagUpdateWithoutAutomationActionTagsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TagCreateWithoutAutomationActionTagsInput), graphql_name='create')


class TagUpsertWithoutAutomationTriggerTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(TagUpdateWithoutAutomationTriggerTagsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TagCreateWithoutAutomationTriggerTagsInput), graphql_name='create')


class TagUpsertWithoutFormTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(TagUpdateWithoutFormTagsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TagCreateWithoutFormTagsInput), graphql_name='create')


class TagUpsertWithoutTodoTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(TagUpdateWithoutTodoTagsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TagCreateWithoutTodoTagsInput), graphql_name='create')


class TagWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'title', 'title_not', 'title_in', 'title_not_in', 'title_lt', 'title_lte', 'title_gt', 'title_gte', 'title_contains', 'title_not_contains', 'title_starts_with', 'title_not_starts_with', 'title_ends_with', 'title_not_ends_with', 'color', 'color_not', 'color_in', 'color_not_in', 'color_lt', 'color_lte', 'color_gt', 'color_gte', 'color_contains', 'color_not_contains', 'color_starts_with', 'color_not_starts_with', 'color_ends_with', 'color_not_ends_with', 'project', 'todo_tags_every', 'todo_tags_some', 'todo_tags_none', 'form_tags_every', 'form_tags_some', 'form_tags_none', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'automation_trigger_tags_every', 'automation_trigger_tags_some', 'automation_trigger_tags_none', 'automation_action_tags_every', 'automation_action_tags_some', 'automation_action_tags_none', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    title = sgqlc.types.Field(String, graphql_name='title')
    title_not = sgqlc.types.Field(String, graphql_name='title_not')
    title_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_in')
    title_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_not_in')
    title_lt = sgqlc.types.Field(String, graphql_name='title_lt')
    title_lte = sgqlc.types.Field(String, graphql_name='title_lte')
    title_gt = sgqlc.types.Field(String, graphql_name='title_gt')
    title_gte = sgqlc.types.Field(String, graphql_name='title_gte')
    title_contains = sgqlc.types.Field(String, graphql_name='title_contains')
    title_not_contains = sgqlc.types.Field(String, graphql_name='title_not_contains')
    title_starts_with = sgqlc.types.Field(String, graphql_name='title_starts_with')
    title_not_starts_with = sgqlc.types.Field(String, graphql_name='title_not_starts_with')
    title_ends_with = sgqlc.types.Field(String, graphql_name='title_ends_with')
    title_not_ends_with = sgqlc.types.Field(String, graphql_name='title_not_ends_with')
    color = sgqlc.types.Field(String, graphql_name='color')
    color_not = sgqlc.types.Field(String, graphql_name='color_not')
    color_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='color_in')
    color_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='color_not_in')
    color_lt = sgqlc.types.Field(String, graphql_name='color_lt')
    color_lte = sgqlc.types.Field(String, graphql_name='color_lte')
    color_gt = sgqlc.types.Field(String, graphql_name='color_gt')
    color_gte = sgqlc.types.Field(String, graphql_name='color_gte')
    color_contains = sgqlc.types.Field(String, graphql_name='color_contains')
    color_not_contains = sgqlc.types.Field(String, graphql_name='color_not_contains')
    color_starts_with = sgqlc.types.Field(String, graphql_name='color_starts_with')
    color_not_starts_with = sgqlc.types.Field(String, graphql_name='color_not_starts_with')
    color_ends_with = sgqlc.types.Field(String, graphql_name='color_ends_with')
    color_not_ends_with = sgqlc.types.Field(String, graphql_name='color_not_ends_with')
    project = sgqlc.types.Field(ProjectWhereInput, graphql_name='project')
    todo_tags_every = sgqlc.types.Field('TodoTagWhereInput', graphql_name='todoTags_every')
    todo_tags_some = sgqlc.types.Field('TodoTagWhereInput', graphql_name='todoTags_some')
    todo_tags_none = sgqlc.types.Field('TodoTagWhereInput', graphql_name='todoTags_none')
    form_tags_every = sgqlc.types.Field(FormTagWhereInput, graphql_name='formTags_every')
    form_tags_some = sgqlc.types.Field(FormTagWhereInput, graphql_name='formTags_some')
    form_tags_none = sgqlc.types.Field(FormTagWhereInput, graphql_name='formTags_none')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    automation_trigger_tags_every = sgqlc.types.Field(AutomationTriggerTagWhereInput, graphql_name='automationTriggerTags_every')
    automation_trigger_tags_some = sgqlc.types.Field(AutomationTriggerTagWhereInput, graphql_name='automationTriggerTags_some')
    automation_trigger_tags_none = sgqlc.types.Field(AutomationTriggerTagWhereInput, graphql_name='automationTriggerTags_none')
    automation_action_tags_every = sgqlc.types.Field(AutomationActionTagWhereInput, graphql_name='automationActionTags_every')
    automation_action_tags_some = sgqlc.types.Field(AutomationActionTagWhereInput, graphql_name='automationActionTags_some')
    automation_action_tags_none = sgqlc.types.Field(AutomationActionTagWhereInput, graphql_name='automationActionTags_none')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TagWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TagWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TagWhereInput')), graphql_name='NOT')


class TagWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class TemplateFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id', 'template_id', 'is_official_template', 'category')
    company_id = sgqlc.types.Field(String, graphql_name='companyId')
    template_id = sgqlc.types.Field(String, graphql_name='templateId')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')


class TodoActionCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'todo', 'user', 'type', 'new_value', 'old_value', 'affected_by', 'custom_field', 'automated')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    todo = sgqlc.types.Field(sgqlc.types.non_null('TodoCreateOneWithoutActionsInput'), graphql_name='todo')
    user = sgqlc.types.Field('UserCreateOneInput', graphql_name='user')
    type = sgqlc.types.Field(sgqlc.types.non_null(TodoActionType), graphql_name='type')
    new_value = sgqlc.types.Field(String, graphql_name='newValue')
    old_value = sgqlc.types.Field(String, graphql_name='oldValue')
    affected_by = sgqlc.types.Field('UserCreateOneInput', graphql_name='affectedBy')
    custom_field = sgqlc.types.Field(CustomFieldCreateOneWithoutTodoActionsInput, graphql_name='customField')
    automated = sgqlc.types.Field(Boolean, graphql_name='automated')


class TodoActionCreateManyWithoutCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoActionCreateWithoutCustomFieldInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoActionWhereUniqueInput')), graphql_name='connect')


class TodoActionCreateManyWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoActionCreateWithoutTodoInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoActionWhereUniqueInput')), graphql_name='connect')


class TodoActionCreateWithoutCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'todo', 'user', 'type', 'new_value', 'old_value', 'affected_by', 'automated')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    todo = sgqlc.types.Field(sgqlc.types.non_null('TodoCreateOneWithoutActionsInput'), graphql_name='todo')
    user = sgqlc.types.Field('UserCreateOneInput', graphql_name='user')
    type = sgqlc.types.Field(sgqlc.types.non_null(TodoActionType), graphql_name='type')
    new_value = sgqlc.types.Field(String, graphql_name='newValue')
    old_value = sgqlc.types.Field(String, graphql_name='oldValue')
    affected_by = sgqlc.types.Field('UserCreateOneInput', graphql_name='affectedBy')
    automated = sgqlc.types.Field(Boolean, graphql_name='automated')


class TodoActionCreateWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'user', 'type', 'new_value', 'old_value', 'affected_by', 'custom_field', 'automated')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    user = sgqlc.types.Field('UserCreateOneInput', graphql_name='user')
    type = sgqlc.types.Field(sgqlc.types.non_null(TodoActionType), graphql_name='type')
    new_value = sgqlc.types.Field(String, graphql_name='newValue')
    old_value = sgqlc.types.Field(String, graphql_name='oldValue')
    affected_by = sgqlc.types.Field('UserCreateOneInput', graphql_name='affectedBy')
    custom_field = sgqlc.types.Field(CustomFieldCreateOneWithoutTodoActionsInput, graphql_name='customField')
    automated = sgqlc.types.Field(Boolean, graphql_name='automated')


class TodoActionScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'type', 'type_not', 'type_in', 'type_not_in', 'new_value', 'new_value_not', 'new_value_in', 'new_value_not_in', 'new_value_lt', 'new_value_lte', 'new_value_gt', 'new_value_gte', 'new_value_contains', 'new_value_not_contains', 'new_value_starts_with', 'new_value_not_starts_with', 'new_value_ends_with', 'new_value_not_ends_with', 'old_value', 'old_value_not', 'old_value_in', 'old_value_not_in', 'old_value_lt', 'old_value_lte', 'old_value_gt', 'old_value_gte', 'old_value_contains', 'old_value_not_contains', 'old_value_starts_with', 'old_value_not_starts_with', 'old_value_ends_with', 'old_value_not_ends_with', 'automated', 'automated_not', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    type = sgqlc.types.Field(TodoActionType, graphql_name='type')
    type_not = sgqlc.types.Field(TodoActionType, graphql_name='type_not')
    type_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoActionType)), graphql_name='type_in')
    type_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoActionType)), graphql_name='type_not_in')
    new_value = sgqlc.types.Field(String, graphql_name='newValue')
    new_value_not = sgqlc.types.Field(String, graphql_name='newValue_not')
    new_value_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='newValue_in')
    new_value_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='newValue_not_in')
    new_value_lt = sgqlc.types.Field(String, graphql_name='newValue_lt')
    new_value_lte = sgqlc.types.Field(String, graphql_name='newValue_lte')
    new_value_gt = sgqlc.types.Field(String, graphql_name='newValue_gt')
    new_value_gte = sgqlc.types.Field(String, graphql_name='newValue_gte')
    new_value_contains = sgqlc.types.Field(String, graphql_name='newValue_contains')
    new_value_not_contains = sgqlc.types.Field(String, graphql_name='newValue_not_contains')
    new_value_starts_with = sgqlc.types.Field(String, graphql_name='newValue_starts_with')
    new_value_not_starts_with = sgqlc.types.Field(String, graphql_name='newValue_not_starts_with')
    new_value_ends_with = sgqlc.types.Field(String, graphql_name='newValue_ends_with')
    new_value_not_ends_with = sgqlc.types.Field(String, graphql_name='newValue_not_ends_with')
    old_value = sgqlc.types.Field(String, graphql_name='oldValue')
    old_value_not = sgqlc.types.Field(String, graphql_name='oldValue_not')
    old_value_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='oldValue_in')
    old_value_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='oldValue_not_in')
    old_value_lt = sgqlc.types.Field(String, graphql_name='oldValue_lt')
    old_value_lte = sgqlc.types.Field(String, graphql_name='oldValue_lte')
    old_value_gt = sgqlc.types.Field(String, graphql_name='oldValue_gt')
    old_value_gte = sgqlc.types.Field(String, graphql_name='oldValue_gte')
    old_value_contains = sgqlc.types.Field(String, graphql_name='oldValue_contains')
    old_value_not_contains = sgqlc.types.Field(String, graphql_name='oldValue_not_contains')
    old_value_starts_with = sgqlc.types.Field(String, graphql_name='oldValue_starts_with')
    old_value_not_starts_with = sgqlc.types.Field(String, graphql_name='oldValue_not_starts_with')
    old_value_ends_with = sgqlc.types.Field(String, graphql_name='oldValue_ends_with')
    old_value_not_ends_with = sgqlc.types.Field(String, graphql_name='oldValue_not_ends_with')
    automated = sgqlc.types.Field(Boolean, graphql_name='automated')
    automated_not = sgqlc.types.Field(Boolean, graphql_name='automated_not')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoActionScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoActionScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoActionScalarWhereInput')), graphql_name='NOT')


class TodoActionSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('TodoActionWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoActionSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoActionSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoActionSubscriptionWhereInput')), graphql_name='NOT')


class TodoActionUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'todo', 'user', 'type', 'new_value', 'old_value', 'affected_by', 'custom_field', 'automated')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    todo = sgqlc.types.Field('TodoUpdateOneRequiredWithoutActionsInput', graphql_name='todo')
    user = sgqlc.types.Field('UserUpdateOneInput', graphql_name='user')
    type = sgqlc.types.Field(TodoActionType, graphql_name='type')
    new_value = sgqlc.types.Field(String, graphql_name='newValue')
    old_value = sgqlc.types.Field(String, graphql_name='oldValue')
    affected_by = sgqlc.types.Field('UserUpdateOneInput', graphql_name='affectedBy')
    custom_field = sgqlc.types.Field(CustomFieldUpdateOneWithoutTodoActionsInput, graphql_name='customField')
    automated = sgqlc.types.Field(Boolean, graphql_name='automated')


class TodoActionUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'type', 'new_value', 'old_value', 'automated')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    type = sgqlc.types.Field(TodoActionType, graphql_name='type')
    new_value = sgqlc.types.Field(String, graphql_name='newValue')
    old_value = sgqlc.types.Field(String, graphql_name='oldValue')
    automated = sgqlc.types.Field(Boolean, graphql_name='automated')


class TodoActionUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'type', 'new_value', 'old_value', 'automated')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    type = sgqlc.types.Field(TodoActionType, graphql_name='type')
    new_value = sgqlc.types.Field(String, graphql_name='newValue')
    old_value = sgqlc.types.Field(String, graphql_name='oldValue')
    automated = sgqlc.types.Field(Boolean, graphql_name='automated')


class TodoActionUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(TodoActionScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(TodoActionUpdateManyDataInput), graphql_name='data')


class TodoActionUpdateManyWithoutCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoActionCreateWithoutCustomFieldInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoActionWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoActionWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoActionWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoActionWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoActionUpdateWithWhereUniqueWithoutCustomFieldInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoActionUpsertWithWhereUniqueWithoutCustomFieldInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoActionScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoActionUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class TodoActionUpdateManyWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoActionCreateWithoutTodoInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoActionWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoActionWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoActionWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoActionWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoActionUpdateWithWhereUniqueWithoutTodoInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoActionUpsertWithWhereUniqueWithoutTodoInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoActionScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoActionUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class TodoActionUpdateWithWhereUniqueWithoutCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('TodoActionWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('TodoActionUpdateWithoutCustomFieldDataInput'), graphql_name='data')


class TodoActionUpdateWithWhereUniqueWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('TodoActionWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('TodoActionUpdateWithoutTodoDataInput'), graphql_name='data')


class TodoActionUpdateWithoutCustomFieldDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'todo', 'user', 'type', 'new_value', 'old_value', 'affected_by', 'automated')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    todo = sgqlc.types.Field('TodoUpdateOneRequiredWithoutActionsInput', graphql_name='todo')
    user = sgqlc.types.Field('UserUpdateOneInput', graphql_name='user')
    type = sgqlc.types.Field(TodoActionType, graphql_name='type')
    new_value = sgqlc.types.Field(String, graphql_name='newValue')
    old_value = sgqlc.types.Field(String, graphql_name='oldValue')
    affected_by = sgqlc.types.Field('UserUpdateOneInput', graphql_name='affectedBy')
    automated = sgqlc.types.Field(Boolean, graphql_name='automated')


class TodoActionUpdateWithoutTodoDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'user', 'type', 'new_value', 'old_value', 'affected_by', 'custom_field', 'automated')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    user = sgqlc.types.Field('UserUpdateOneInput', graphql_name='user')
    type = sgqlc.types.Field(TodoActionType, graphql_name='type')
    new_value = sgqlc.types.Field(String, graphql_name='newValue')
    old_value = sgqlc.types.Field(String, graphql_name='oldValue')
    affected_by = sgqlc.types.Field('UserUpdateOneInput', graphql_name='affectedBy')
    custom_field = sgqlc.types.Field(CustomFieldUpdateOneWithoutTodoActionsInput, graphql_name='customField')
    automated = sgqlc.types.Field(Boolean, graphql_name='automated')


class TodoActionUpsertWithWhereUniqueWithoutCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('TodoActionWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoActionUpdateWithoutCustomFieldDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoActionCreateWithoutCustomFieldInput), graphql_name='create')


class TodoActionUpsertWithWhereUniqueWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('TodoActionWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoActionUpdateWithoutTodoDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoActionCreateWithoutTodoInput), graphql_name='create')


class TodoActionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'todo', 'user', 'type', 'type_not', 'type_in', 'type_not_in', 'new_value', 'new_value_not', 'new_value_in', 'new_value_not_in', 'new_value_lt', 'new_value_lte', 'new_value_gt', 'new_value_gte', 'new_value_contains', 'new_value_not_contains', 'new_value_starts_with', 'new_value_not_starts_with', 'new_value_ends_with', 'new_value_not_ends_with', 'old_value', 'old_value_not', 'old_value_in', 'old_value_not_in', 'old_value_lt', 'old_value_lte', 'old_value_gt', 'old_value_gte', 'old_value_contains', 'old_value_not_contains', 'old_value_starts_with', 'old_value_not_starts_with', 'old_value_ends_with', 'old_value_not_ends_with', 'affected_by', 'custom_field', 'automated', 'automated_not', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    todo = sgqlc.types.Field('TodoWhereInput', graphql_name='todo')
    user = sgqlc.types.Field('UserWhereInput', graphql_name='user')
    type = sgqlc.types.Field(TodoActionType, graphql_name='type')
    type_not = sgqlc.types.Field(TodoActionType, graphql_name='type_not')
    type_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoActionType)), graphql_name='type_in')
    type_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoActionType)), graphql_name='type_not_in')
    new_value = sgqlc.types.Field(String, graphql_name='newValue')
    new_value_not = sgqlc.types.Field(String, graphql_name='newValue_not')
    new_value_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='newValue_in')
    new_value_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='newValue_not_in')
    new_value_lt = sgqlc.types.Field(String, graphql_name='newValue_lt')
    new_value_lte = sgqlc.types.Field(String, graphql_name='newValue_lte')
    new_value_gt = sgqlc.types.Field(String, graphql_name='newValue_gt')
    new_value_gte = sgqlc.types.Field(String, graphql_name='newValue_gte')
    new_value_contains = sgqlc.types.Field(String, graphql_name='newValue_contains')
    new_value_not_contains = sgqlc.types.Field(String, graphql_name='newValue_not_contains')
    new_value_starts_with = sgqlc.types.Field(String, graphql_name='newValue_starts_with')
    new_value_not_starts_with = sgqlc.types.Field(String, graphql_name='newValue_not_starts_with')
    new_value_ends_with = sgqlc.types.Field(String, graphql_name='newValue_ends_with')
    new_value_not_ends_with = sgqlc.types.Field(String, graphql_name='newValue_not_ends_with')
    old_value = sgqlc.types.Field(String, graphql_name='oldValue')
    old_value_not = sgqlc.types.Field(String, graphql_name='oldValue_not')
    old_value_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='oldValue_in')
    old_value_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='oldValue_not_in')
    old_value_lt = sgqlc.types.Field(String, graphql_name='oldValue_lt')
    old_value_lte = sgqlc.types.Field(String, graphql_name='oldValue_lte')
    old_value_gt = sgqlc.types.Field(String, graphql_name='oldValue_gt')
    old_value_gte = sgqlc.types.Field(String, graphql_name='oldValue_gte')
    old_value_contains = sgqlc.types.Field(String, graphql_name='oldValue_contains')
    old_value_not_contains = sgqlc.types.Field(String, graphql_name='oldValue_not_contains')
    old_value_starts_with = sgqlc.types.Field(String, graphql_name='oldValue_starts_with')
    old_value_not_starts_with = sgqlc.types.Field(String, graphql_name='oldValue_not_starts_with')
    old_value_ends_with = sgqlc.types.Field(String, graphql_name='oldValue_ends_with')
    old_value_not_ends_with = sgqlc.types.Field(String, graphql_name='oldValue_not_ends_with')
    affected_by = sgqlc.types.Field('UserWhereInput', graphql_name='affectedBy')
    custom_field = sgqlc.types.Field(CustomFieldWhereInput, graphql_name='customField')
    automated = sgqlc.types.Field(Boolean, graphql_name='automated')
    automated_not = sgqlc.types.Field(Boolean, graphql_name='automated_not')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoActionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoActionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoActionWhereInput')), graphql_name='NOT')


class TodoActionWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class TodoActionsFilter(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id', 'project_id', 'todo_id')
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    todo_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoId')


class TodoActivityFilter(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id', 'project_id', 'todo_id', 'type')
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    todo_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoId')
    type = sgqlc.types.Field(TodoActivityFilterType, graphql_name='type')


class TodoActivityOrderBy(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('created_at', 'updated_at')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(OrderBy), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(OrderBy), graphql_name='updatedAt')


class TodoCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'position', 'title', 'started_at', 'dued_at', 'timezone', 'text', 'html', 'archived', 'done', 'todo_list', 'todo_users', 'activity', 'created_by', 'comments', 'actions', 'todo_tags', 'todo_custom_fields', 'files', 'checklists')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    text = sgqlc.types.Field(String, graphql_name='text')
    html = sgqlc.types.Field(String, graphql_name='html')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    todo_list = sgqlc.types.Field(sgqlc.types.non_null('TodoListCreateOneWithoutTodosInput'), graphql_name='todoList')
    todo_users = sgqlc.types.Field('TodoUserCreateManyWithoutTodoInput', graphql_name='todoUsers')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutTodoInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserCreateOneWithoutTodosInput', graphql_name='createdBy')
    comments = sgqlc.types.Field(CommentCreateManyWithoutTodoInput, graphql_name='comments')
    actions = sgqlc.types.Field(TodoActionCreateManyWithoutTodoInput, graphql_name='actions')
    todo_tags = sgqlc.types.Field('TodoTagCreateManyWithoutTodoInput', graphql_name='todoTags')
    todo_custom_fields = sgqlc.types.Field('TodoCustomFieldCreateManyWithoutTodoInput', graphql_name='todoCustomFields')
    files = sgqlc.types.Field(FileCreateManyWithoutTodoInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutTodoInput, graphql_name='checklists')


class TodoCreateManyWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCreateWithoutCreatedByInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoWhereUniqueInput')), graphql_name='connect')


class TodoCreateManyWithoutTodoListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCreateWithoutTodoListInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoWhereUniqueInput')), graphql_name='connect')


class TodoCreateOneWithoutActionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('TodoCreateWithoutActionsInput', graphql_name='create')
    connect = sgqlc.types.Field('TodoWhereUniqueInput', graphql_name='connect')


class TodoCreateOneWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('TodoCreateWithoutActivityInput', graphql_name='create')
    connect = sgqlc.types.Field('TodoWhereUniqueInput', graphql_name='connect')


class TodoCreateOneWithoutChecklistsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('TodoCreateWithoutChecklistsInput', graphql_name='create')
    connect = sgqlc.types.Field('TodoWhereUniqueInput', graphql_name='connect')


class TodoCreateOneWithoutCommentsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('TodoCreateWithoutCommentsInput', graphql_name='create')
    connect = sgqlc.types.Field('TodoWhereUniqueInput', graphql_name='connect')


class TodoCreateOneWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('TodoCreateWithoutFilesInput', graphql_name='create')
    connect = sgqlc.types.Field('TodoWhereUniqueInput', graphql_name='connect')


class TodoCreateOneWithoutTodoCustomFieldsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('TodoCreateWithoutTodoCustomFieldsInput', graphql_name='create')
    connect = sgqlc.types.Field('TodoWhereUniqueInput', graphql_name='connect')


class TodoCreateOneWithoutTodoTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('TodoCreateWithoutTodoTagsInput', graphql_name='create')
    connect = sgqlc.types.Field('TodoWhereUniqueInput', graphql_name='connect')


class TodoCreateOneWithoutTodoUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('TodoCreateWithoutTodoUsersInput', graphql_name='create')
    connect = sgqlc.types.Field('TodoWhereUniqueInput', graphql_name='connect')


class TodoCreateWithoutActionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'position', 'title', 'started_at', 'dued_at', 'timezone', 'text', 'html', 'archived', 'done', 'todo_list', 'todo_users', 'activity', 'created_by', 'comments', 'todo_tags', 'todo_custom_fields', 'files', 'checklists')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    text = sgqlc.types.Field(String, graphql_name='text')
    html = sgqlc.types.Field(String, graphql_name='html')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    todo_list = sgqlc.types.Field(sgqlc.types.non_null('TodoListCreateOneWithoutTodosInput'), graphql_name='todoList')
    todo_users = sgqlc.types.Field('TodoUserCreateManyWithoutTodoInput', graphql_name='todoUsers')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutTodoInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserCreateOneWithoutTodosInput', graphql_name='createdBy')
    comments = sgqlc.types.Field(CommentCreateManyWithoutTodoInput, graphql_name='comments')
    todo_tags = sgqlc.types.Field('TodoTagCreateManyWithoutTodoInput', graphql_name='todoTags')
    todo_custom_fields = sgqlc.types.Field('TodoCustomFieldCreateManyWithoutTodoInput', graphql_name='todoCustomFields')
    files = sgqlc.types.Field(FileCreateManyWithoutTodoInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutTodoInput, graphql_name='checklists')


class TodoCreateWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'position', 'title', 'started_at', 'dued_at', 'timezone', 'text', 'html', 'archived', 'done', 'todo_list', 'todo_users', 'created_by', 'comments', 'actions', 'todo_tags', 'todo_custom_fields', 'files', 'checklists')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    text = sgqlc.types.Field(String, graphql_name='text')
    html = sgqlc.types.Field(String, graphql_name='html')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    todo_list = sgqlc.types.Field(sgqlc.types.non_null('TodoListCreateOneWithoutTodosInput'), graphql_name='todoList')
    todo_users = sgqlc.types.Field('TodoUserCreateManyWithoutTodoInput', graphql_name='todoUsers')
    created_by = sgqlc.types.Field('UserCreateOneWithoutTodosInput', graphql_name='createdBy')
    comments = sgqlc.types.Field(CommentCreateManyWithoutTodoInput, graphql_name='comments')
    actions = sgqlc.types.Field(TodoActionCreateManyWithoutTodoInput, graphql_name='actions')
    todo_tags = sgqlc.types.Field('TodoTagCreateManyWithoutTodoInput', graphql_name='todoTags')
    todo_custom_fields = sgqlc.types.Field('TodoCustomFieldCreateManyWithoutTodoInput', graphql_name='todoCustomFields')
    files = sgqlc.types.Field(FileCreateManyWithoutTodoInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutTodoInput, graphql_name='checklists')


class TodoCreateWithoutChecklistsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'position', 'title', 'started_at', 'dued_at', 'timezone', 'text', 'html', 'archived', 'done', 'todo_list', 'todo_users', 'activity', 'created_by', 'comments', 'actions', 'todo_tags', 'todo_custom_fields', 'files')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    text = sgqlc.types.Field(String, graphql_name='text')
    html = sgqlc.types.Field(String, graphql_name='html')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    todo_list = sgqlc.types.Field(sgqlc.types.non_null('TodoListCreateOneWithoutTodosInput'), graphql_name='todoList')
    todo_users = sgqlc.types.Field('TodoUserCreateManyWithoutTodoInput', graphql_name='todoUsers')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutTodoInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserCreateOneWithoutTodosInput', graphql_name='createdBy')
    comments = sgqlc.types.Field(CommentCreateManyWithoutTodoInput, graphql_name='comments')
    actions = sgqlc.types.Field(TodoActionCreateManyWithoutTodoInput, graphql_name='actions')
    todo_tags = sgqlc.types.Field('TodoTagCreateManyWithoutTodoInput', graphql_name='todoTags')
    todo_custom_fields = sgqlc.types.Field('TodoCustomFieldCreateManyWithoutTodoInput', graphql_name='todoCustomFields')
    files = sgqlc.types.Field(FileCreateManyWithoutTodoInput, graphql_name='files')


class TodoCreateWithoutCommentsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'position', 'title', 'started_at', 'dued_at', 'timezone', 'text', 'html', 'archived', 'done', 'todo_list', 'todo_users', 'activity', 'created_by', 'actions', 'todo_tags', 'todo_custom_fields', 'files', 'checklists')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    text = sgqlc.types.Field(String, graphql_name='text')
    html = sgqlc.types.Field(String, graphql_name='html')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    todo_list = sgqlc.types.Field(sgqlc.types.non_null('TodoListCreateOneWithoutTodosInput'), graphql_name='todoList')
    todo_users = sgqlc.types.Field('TodoUserCreateManyWithoutTodoInput', graphql_name='todoUsers')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutTodoInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserCreateOneWithoutTodosInput', graphql_name='createdBy')
    actions = sgqlc.types.Field(TodoActionCreateManyWithoutTodoInput, graphql_name='actions')
    todo_tags = sgqlc.types.Field('TodoTagCreateManyWithoutTodoInput', graphql_name='todoTags')
    todo_custom_fields = sgqlc.types.Field('TodoCustomFieldCreateManyWithoutTodoInput', graphql_name='todoCustomFields')
    files = sgqlc.types.Field(FileCreateManyWithoutTodoInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutTodoInput, graphql_name='checklists')


class TodoCreateWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'position', 'title', 'started_at', 'dued_at', 'timezone', 'text', 'html', 'archived', 'done', 'todo_list', 'todo_users', 'activity', 'comments', 'actions', 'todo_tags', 'todo_custom_fields', 'files', 'checklists')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    text = sgqlc.types.Field(String, graphql_name='text')
    html = sgqlc.types.Field(String, graphql_name='html')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    todo_list = sgqlc.types.Field(sgqlc.types.non_null('TodoListCreateOneWithoutTodosInput'), graphql_name='todoList')
    todo_users = sgqlc.types.Field('TodoUserCreateManyWithoutTodoInput', graphql_name='todoUsers')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutTodoInput, graphql_name='activity')
    comments = sgqlc.types.Field(CommentCreateManyWithoutTodoInput, graphql_name='comments')
    actions = sgqlc.types.Field(TodoActionCreateManyWithoutTodoInput, graphql_name='actions')
    todo_tags = sgqlc.types.Field('TodoTagCreateManyWithoutTodoInput', graphql_name='todoTags')
    todo_custom_fields = sgqlc.types.Field('TodoCustomFieldCreateManyWithoutTodoInput', graphql_name='todoCustomFields')
    files = sgqlc.types.Field(FileCreateManyWithoutTodoInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutTodoInput, graphql_name='checklists')


class TodoCreateWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'position', 'title', 'started_at', 'dued_at', 'timezone', 'text', 'html', 'archived', 'done', 'todo_list', 'todo_users', 'activity', 'created_by', 'comments', 'actions', 'todo_tags', 'todo_custom_fields', 'checklists')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    text = sgqlc.types.Field(String, graphql_name='text')
    html = sgqlc.types.Field(String, graphql_name='html')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    todo_list = sgqlc.types.Field(sgqlc.types.non_null('TodoListCreateOneWithoutTodosInput'), graphql_name='todoList')
    todo_users = sgqlc.types.Field('TodoUserCreateManyWithoutTodoInput', graphql_name='todoUsers')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutTodoInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserCreateOneWithoutTodosInput', graphql_name='createdBy')
    comments = sgqlc.types.Field(CommentCreateManyWithoutTodoInput, graphql_name='comments')
    actions = sgqlc.types.Field(TodoActionCreateManyWithoutTodoInput, graphql_name='actions')
    todo_tags = sgqlc.types.Field('TodoTagCreateManyWithoutTodoInput', graphql_name='todoTags')
    todo_custom_fields = sgqlc.types.Field('TodoCustomFieldCreateManyWithoutTodoInput', graphql_name='todoCustomFields')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutTodoInput, graphql_name='checklists')


class TodoCreateWithoutTodoCustomFieldsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'position', 'title', 'started_at', 'dued_at', 'timezone', 'text', 'html', 'archived', 'done', 'todo_list', 'todo_users', 'activity', 'created_by', 'comments', 'actions', 'todo_tags', 'files', 'checklists')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    text = sgqlc.types.Field(String, graphql_name='text')
    html = sgqlc.types.Field(String, graphql_name='html')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    todo_list = sgqlc.types.Field(sgqlc.types.non_null('TodoListCreateOneWithoutTodosInput'), graphql_name='todoList')
    todo_users = sgqlc.types.Field('TodoUserCreateManyWithoutTodoInput', graphql_name='todoUsers')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutTodoInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserCreateOneWithoutTodosInput', graphql_name='createdBy')
    comments = sgqlc.types.Field(CommentCreateManyWithoutTodoInput, graphql_name='comments')
    actions = sgqlc.types.Field(TodoActionCreateManyWithoutTodoInput, graphql_name='actions')
    todo_tags = sgqlc.types.Field('TodoTagCreateManyWithoutTodoInput', graphql_name='todoTags')
    files = sgqlc.types.Field(FileCreateManyWithoutTodoInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutTodoInput, graphql_name='checklists')


class TodoCreateWithoutTodoListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'position', 'title', 'started_at', 'dued_at', 'timezone', 'text', 'html', 'archived', 'done', 'todo_users', 'activity', 'created_by', 'comments', 'actions', 'todo_tags', 'todo_custom_fields', 'files', 'checklists')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    text = sgqlc.types.Field(String, graphql_name='text')
    html = sgqlc.types.Field(String, graphql_name='html')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    todo_users = sgqlc.types.Field('TodoUserCreateManyWithoutTodoInput', graphql_name='todoUsers')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutTodoInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserCreateOneWithoutTodosInput', graphql_name='createdBy')
    comments = sgqlc.types.Field(CommentCreateManyWithoutTodoInput, graphql_name='comments')
    actions = sgqlc.types.Field(TodoActionCreateManyWithoutTodoInput, graphql_name='actions')
    todo_tags = sgqlc.types.Field('TodoTagCreateManyWithoutTodoInput', graphql_name='todoTags')
    todo_custom_fields = sgqlc.types.Field('TodoCustomFieldCreateManyWithoutTodoInput', graphql_name='todoCustomFields')
    files = sgqlc.types.Field(FileCreateManyWithoutTodoInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutTodoInput, graphql_name='checklists')


class TodoCreateWithoutTodoTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'position', 'title', 'started_at', 'dued_at', 'timezone', 'text', 'html', 'archived', 'done', 'todo_list', 'todo_users', 'activity', 'created_by', 'comments', 'actions', 'todo_custom_fields', 'files', 'checklists')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    text = sgqlc.types.Field(String, graphql_name='text')
    html = sgqlc.types.Field(String, graphql_name='html')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    todo_list = sgqlc.types.Field(sgqlc.types.non_null('TodoListCreateOneWithoutTodosInput'), graphql_name='todoList')
    todo_users = sgqlc.types.Field('TodoUserCreateManyWithoutTodoInput', graphql_name='todoUsers')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutTodoInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserCreateOneWithoutTodosInput', graphql_name='createdBy')
    comments = sgqlc.types.Field(CommentCreateManyWithoutTodoInput, graphql_name='comments')
    actions = sgqlc.types.Field(TodoActionCreateManyWithoutTodoInput, graphql_name='actions')
    todo_custom_fields = sgqlc.types.Field('TodoCustomFieldCreateManyWithoutTodoInput', graphql_name='todoCustomFields')
    files = sgqlc.types.Field(FileCreateManyWithoutTodoInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutTodoInput, graphql_name='checklists')


class TodoCreateWithoutTodoUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'position', 'title', 'started_at', 'dued_at', 'timezone', 'text', 'html', 'archived', 'done', 'todo_list', 'activity', 'created_by', 'comments', 'actions', 'todo_tags', 'todo_custom_fields', 'files', 'checklists')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    text = sgqlc.types.Field(String, graphql_name='text')
    html = sgqlc.types.Field(String, graphql_name='html')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    todo_list = sgqlc.types.Field(sgqlc.types.non_null('TodoListCreateOneWithoutTodosInput'), graphql_name='todoList')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutTodoInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserCreateOneWithoutTodosInput', graphql_name='createdBy')
    comments = sgqlc.types.Field(CommentCreateManyWithoutTodoInput, graphql_name='comments')
    actions = sgqlc.types.Field(TodoActionCreateManyWithoutTodoInput, graphql_name='actions')
    todo_tags = sgqlc.types.Field('TodoTagCreateManyWithoutTodoInput', graphql_name='todoTags')
    todo_custom_fields = sgqlc.types.Field('TodoCustomFieldCreateManyWithoutTodoInput', graphql_name='todoCustomFields')
    files = sgqlc.types.Field(FileCreateManyWithoutTodoInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutTodoInput, graphql_name='checklists')


class TodoCustomFieldCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'todo', 'custom_field', 'number', 'text', 'region_code', 'country_codes', 'checked', 'latitude', 'longitude', 'custom_field_option', 'todo_custom_field_options', 'todo_custom_field_files')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    todo = sgqlc.types.Field(sgqlc.types.non_null(TodoCreateOneWithoutTodoCustomFieldsInput), graphql_name='todo')
    custom_field = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldCreateOneWithoutTodoCustomFieldsInput), graphql_name='customField')
    number = sgqlc.types.Field(Float, graphql_name='number')
    text = sgqlc.types.Field(String, graphql_name='text')
    region_code = sgqlc.types.Field(String, graphql_name='regionCode')
    country_codes = sgqlc.types.Field(String, graphql_name='countryCodes')
    checked = sgqlc.types.Field(Boolean, graphql_name='checked')
    latitude = sgqlc.types.Field(Float, graphql_name='latitude')
    longitude = sgqlc.types.Field(Float, graphql_name='longitude')
    custom_field_option = sgqlc.types.Field(CustomFieldOptionCreateOneWithoutTodoCustomFieldInput, graphql_name='customFieldOption')
    todo_custom_field_options = sgqlc.types.Field('TodoCustomFieldOptionCreateManyWithoutTodoCustomFieldInput', graphql_name='todoCustomFieldOptions')
    todo_custom_field_files = sgqlc.types.Field('TodoCustomFieldFileCreateManyWithoutTodoCustomFieldInput', graphql_name='todoCustomFieldFiles')


class TodoCustomFieldCreateManyWithoutCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldCreateWithoutCustomFieldInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldWhereUniqueInput')), graphql_name='connect')


class TodoCustomFieldCreateManyWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldCreateWithoutTodoInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldWhereUniqueInput')), graphql_name='connect')


class TodoCustomFieldCreateOneWithoutCustomFieldOptionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('TodoCustomFieldCreateWithoutCustomFieldOptionInput', graphql_name='create')
    connect = sgqlc.types.Field('TodoCustomFieldWhereUniqueInput', graphql_name='connect')


class TodoCustomFieldCreateOneWithoutTodoCustomFieldFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('TodoCustomFieldCreateWithoutTodoCustomFieldFilesInput', graphql_name='create')
    connect = sgqlc.types.Field('TodoCustomFieldWhereUniqueInput', graphql_name='connect')


class TodoCustomFieldCreateOneWithoutTodoCustomFieldOptionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('TodoCustomFieldCreateWithoutTodoCustomFieldOptionsInput', graphql_name='create')
    connect = sgqlc.types.Field('TodoCustomFieldWhereUniqueInput', graphql_name='connect')


class TodoCustomFieldCreateWithoutCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'todo', 'number', 'text', 'region_code', 'country_codes', 'checked', 'latitude', 'longitude', 'custom_field_option', 'todo_custom_field_options', 'todo_custom_field_files')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    todo = sgqlc.types.Field(sgqlc.types.non_null(TodoCreateOneWithoutTodoCustomFieldsInput), graphql_name='todo')
    number = sgqlc.types.Field(Float, graphql_name='number')
    text = sgqlc.types.Field(String, graphql_name='text')
    region_code = sgqlc.types.Field(String, graphql_name='regionCode')
    country_codes = sgqlc.types.Field(String, graphql_name='countryCodes')
    checked = sgqlc.types.Field(Boolean, graphql_name='checked')
    latitude = sgqlc.types.Field(Float, graphql_name='latitude')
    longitude = sgqlc.types.Field(Float, graphql_name='longitude')
    custom_field_option = sgqlc.types.Field(CustomFieldOptionCreateOneWithoutTodoCustomFieldInput, graphql_name='customFieldOption')
    todo_custom_field_options = sgqlc.types.Field('TodoCustomFieldOptionCreateManyWithoutTodoCustomFieldInput', graphql_name='todoCustomFieldOptions')
    todo_custom_field_files = sgqlc.types.Field('TodoCustomFieldFileCreateManyWithoutTodoCustomFieldInput', graphql_name='todoCustomFieldFiles')


class TodoCustomFieldCreateWithoutCustomFieldOptionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'todo', 'custom_field', 'number', 'text', 'region_code', 'country_codes', 'checked', 'latitude', 'longitude', 'todo_custom_field_options', 'todo_custom_field_files')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    todo = sgqlc.types.Field(sgqlc.types.non_null(TodoCreateOneWithoutTodoCustomFieldsInput), graphql_name='todo')
    custom_field = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldCreateOneWithoutTodoCustomFieldsInput), graphql_name='customField')
    number = sgqlc.types.Field(Float, graphql_name='number')
    text = sgqlc.types.Field(String, graphql_name='text')
    region_code = sgqlc.types.Field(String, graphql_name='regionCode')
    country_codes = sgqlc.types.Field(String, graphql_name='countryCodes')
    checked = sgqlc.types.Field(Boolean, graphql_name='checked')
    latitude = sgqlc.types.Field(Float, graphql_name='latitude')
    longitude = sgqlc.types.Field(Float, graphql_name='longitude')
    todo_custom_field_options = sgqlc.types.Field('TodoCustomFieldOptionCreateManyWithoutTodoCustomFieldInput', graphql_name='todoCustomFieldOptions')
    todo_custom_field_files = sgqlc.types.Field('TodoCustomFieldFileCreateManyWithoutTodoCustomFieldInput', graphql_name='todoCustomFieldFiles')


class TodoCustomFieldCreateWithoutTodoCustomFieldFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'todo', 'custom_field', 'number', 'text', 'region_code', 'country_codes', 'checked', 'latitude', 'longitude', 'custom_field_option', 'todo_custom_field_options')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    todo = sgqlc.types.Field(sgqlc.types.non_null(TodoCreateOneWithoutTodoCustomFieldsInput), graphql_name='todo')
    custom_field = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldCreateOneWithoutTodoCustomFieldsInput), graphql_name='customField')
    number = sgqlc.types.Field(Float, graphql_name='number')
    text = sgqlc.types.Field(String, graphql_name='text')
    region_code = sgqlc.types.Field(String, graphql_name='regionCode')
    country_codes = sgqlc.types.Field(String, graphql_name='countryCodes')
    checked = sgqlc.types.Field(Boolean, graphql_name='checked')
    latitude = sgqlc.types.Field(Float, graphql_name='latitude')
    longitude = sgqlc.types.Field(Float, graphql_name='longitude')
    custom_field_option = sgqlc.types.Field(CustomFieldOptionCreateOneWithoutTodoCustomFieldInput, graphql_name='customFieldOption')
    todo_custom_field_options = sgqlc.types.Field('TodoCustomFieldOptionCreateManyWithoutTodoCustomFieldInput', graphql_name='todoCustomFieldOptions')


class TodoCustomFieldCreateWithoutTodoCustomFieldOptionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'todo', 'custom_field', 'number', 'text', 'region_code', 'country_codes', 'checked', 'latitude', 'longitude', 'custom_field_option', 'todo_custom_field_files')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    todo = sgqlc.types.Field(sgqlc.types.non_null(TodoCreateOneWithoutTodoCustomFieldsInput), graphql_name='todo')
    custom_field = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldCreateOneWithoutTodoCustomFieldsInput), graphql_name='customField')
    number = sgqlc.types.Field(Float, graphql_name='number')
    text = sgqlc.types.Field(String, graphql_name='text')
    region_code = sgqlc.types.Field(String, graphql_name='regionCode')
    country_codes = sgqlc.types.Field(String, graphql_name='countryCodes')
    checked = sgqlc.types.Field(Boolean, graphql_name='checked')
    latitude = sgqlc.types.Field(Float, graphql_name='latitude')
    longitude = sgqlc.types.Field(Float, graphql_name='longitude')
    custom_field_option = sgqlc.types.Field(CustomFieldOptionCreateOneWithoutTodoCustomFieldInput, graphql_name='customFieldOption')
    todo_custom_field_files = sgqlc.types.Field('TodoCustomFieldFileCreateManyWithoutTodoCustomFieldInput', graphql_name='todoCustomFieldFiles')


class TodoCustomFieldCreateWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'custom_field', 'number', 'text', 'region_code', 'country_codes', 'checked', 'latitude', 'longitude', 'custom_field_option', 'todo_custom_field_options', 'todo_custom_field_files')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    custom_field = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldCreateOneWithoutTodoCustomFieldsInput), graphql_name='customField')
    number = sgqlc.types.Field(Float, graphql_name='number')
    text = sgqlc.types.Field(String, graphql_name='text')
    region_code = sgqlc.types.Field(String, graphql_name='regionCode')
    country_codes = sgqlc.types.Field(String, graphql_name='countryCodes')
    checked = sgqlc.types.Field(Boolean, graphql_name='checked')
    latitude = sgqlc.types.Field(Float, graphql_name='latitude')
    longitude = sgqlc.types.Field(Float, graphql_name='longitude')
    custom_field_option = sgqlc.types.Field(CustomFieldOptionCreateOneWithoutTodoCustomFieldInput, graphql_name='customFieldOption')
    todo_custom_field_options = sgqlc.types.Field('TodoCustomFieldOptionCreateManyWithoutTodoCustomFieldInput', graphql_name='todoCustomFieldOptions')
    todo_custom_field_files = sgqlc.types.Field('TodoCustomFieldFileCreateManyWithoutTodoCustomFieldInput', graphql_name='todoCustomFieldFiles')


class TodoCustomFieldFileCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'todo_custom_field', 'file', 'position')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    todo_custom_field = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomFieldCreateOneWithoutTodoCustomFieldFilesInput), graphql_name='todoCustomField')
    file = sgqlc.types.Field(sgqlc.types.non_null(FileCreateOneWithoutTodoCustomFieldFileInput), graphql_name='file')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')


class TodoCustomFieldFileCreateManyWithoutTodoCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldFileCreateWithoutTodoCustomFieldInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldFileWhereUniqueInput')), graphql_name='connect')


class TodoCustomFieldFileCreateOneWithoutFileInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('TodoCustomFieldFileCreateWithoutFileInput', graphql_name='create')
    connect = sgqlc.types.Field('TodoCustomFieldFileWhereUniqueInput', graphql_name='connect')


class TodoCustomFieldFileCreateWithoutFileInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'todo_custom_field', 'position')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    todo_custom_field = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomFieldCreateOneWithoutTodoCustomFieldFilesInput), graphql_name='todoCustomField')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')


class TodoCustomFieldFileCreateWithoutTodoCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'file', 'position')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    file = sgqlc.types.Field(sgqlc.types.non_null(FileCreateOneWithoutTodoCustomFieldFileInput), graphql_name='file')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')


class TodoCustomFieldFileScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'position', 'position_not', 'position_in', 'position_not_in', 'position_lt', 'position_lte', 'position_gt', 'position_gte', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    position = sgqlc.types.Field(Float, graphql_name='position')
    position_not = sgqlc.types.Field(Float, graphql_name='position_not')
    position_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_in')
    position_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_not_in')
    position_lt = sgqlc.types.Field(Float, graphql_name='position_lt')
    position_lte = sgqlc.types.Field(Float, graphql_name='position_lte')
    position_gt = sgqlc.types.Field(Float, graphql_name='position_gt')
    position_gte = sgqlc.types.Field(Float, graphql_name='position_gte')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldFileScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldFileScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldFileScalarWhereInput')), graphql_name='NOT')


class TodoCustomFieldFileSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('TodoCustomFieldFileWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldFileSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldFileSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldFileSubscriptionWhereInput')), graphql_name='NOT')


class TodoCustomFieldFileUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'todo_custom_field', 'file', 'position')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    todo_custom_field = sgqlc.types.Field('TodoCustomFieldUpdateOneRequiredWithoutTodoCustomFieldFilesInput', graphql_name='todoCustomField')
    file = sgqlc.types.Field(FileUpdateOneRequiredWithoutTodoCustomFieldFileInput, graphql_name='file')
    position = sgqlc.types.Field(Float, graphql_name='position')


class TodoCustomFieldFileUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')


class TodoCustomFieldFileUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')


class TodoCustomFieldFileUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomFieldFileScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomFieldFileUpdateManyDataInput), graphql_name='data')


class TodoCustomFieldFileUpdateManyWithoutTodoCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoCustomFieldFileCreateWithoutTodoCustomFieldInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldFileWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldFileWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldFileWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldFileWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldFileUpdateWithWhereUniqueWithoutTodoCustomFieldInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldFileUpsertWithWhereUniqueWithoutTodoCustomFieldInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoCustomFieldFileScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoCustomFieldFileUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class TodoCustomFieldFileUpdateOneWithoutFileInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(TodoCustomFieldFileCreateWithoutFileInput, graphql_name='create')
    update = sgqlc.types.Field('TodoCustomFieldFileUpdateWithoutFileDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('TodoCustomFieldFileUpsertWithoutFileInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('TodoCustomFieldFileWhereUniqueInput', graphql_name='connect')


class TodoCustomFieldFileUpdateWithWhereUniqueWithoutTodoCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('TodoCustomFieldFileWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('TodoCustomFieldFileUpdateWithoutTodoCustomFieldDataInput'), graphql_name='data')


class TodoCustomFieldFileUpdateWithoutFileDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'todo_custom_field', 'position')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    todo_custom_field = sgqlc.types.Field('TodoCustomFieldUpdateOneRequiredWithoutTodoCustomFieldFilesInput', graphql_name='todoCustomField')
    position = sgqlc.types.Field(Float, graphql_name='position')


class TodoCustomFieldFileUpdateWithoutTodoCustomFieldDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'file', 'position')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    file = sgqlc.types.Field(FileUpdateOneRequiredWithoutTodoCustomFieldFileInput, graphql_name='file')
    position = sgqlc.types.Field(Float, graphql_name='position')


class TodoCustomFieldFileUpsertWithWhereUniqueWithoutTodoCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('TodoCustomFieldFileWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomFieldFileUpdateWithoutTodoCustomFieldDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomFieldFileCreateWithoutTodoCustomFieldInput), graphql_name='create')


class TodoCustomFieldFileUpsertWithoutFileInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomFieldFileUpdateWithoutFileDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomFieldFileCreateWithoutFileInput), graphql_name='create')


class TodoCustomFieldFileWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'todo_custom_field', 'file', 'position', 'position_not', 'position_in', 'position_not_in', 'position_lt', 'position_lte', 'position_gt', 'position_gte', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    todo_custom_field = sgqlc.types.Field('TodoCustomFieldWhereInput', graphql_name='todoCustomField')
    file = sgqlc.types.Field(FileWhereInput, graphql_name='file')
    position = sgqlc.types.Field(Float, graphql_name='position')
    position_not = sgqlc.types.Field(Float, graphql_name='position_not')
    position_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_in')
    position_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_not_in')
    position_lt = sgqlc.types.Field(Float, graphql_name='position_lt')
    position_lte = sgqlc.types.Field(Float, graphql_name='position_lte')
    position_gt = sgqlc.types.Field(Float, graphql_name='position_gt')
    position_gte = sgqlc.types.Field(Float, graphql_name='position_gte')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldFileWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldFileWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldFileWhereInput')), graphql_name='NOT')


class TodoCustomFieldFileWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class TodoCustomFieldFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('todo_id',)
    todo_id = sgqlc.types.Field(String, graphql_name='todoId')


class TodoCustomFieldOptionCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'todo_custom_field', 'custom_field_option')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    todo_custom_field = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomFieldCreateOneWithoutTodoCustomFieldOptionsInput), graphql_name='todoCustomField')
    custom_field_option = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldOptionCreateOneWithoutTodoCustomFieldOptionsInput), graphql_name='customFieldOption')


class TodoCustomFieldOptionCreateManyWithoutCustomFieldOptionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldOptionCreateWithoutCustomFieldOptionInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldOptionWhereUniqueInput')), graphql_name='connect')


class TodoCustomFieldOptionCreateManyWithoutTodoCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldOptionCreateWithoutTodoCustomFieldInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldOptionWhereUniqueInput')), graphql_name='connect')


class TodoCustomFieldOptionCreateWithoutCustomFieldOptionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'todo_custom_field')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    todo_custom_field = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomFieldCreateOneWithoutTodoCustomFieldOptionsInput), graphql_name='todoCustomField')


class TodoCustomFieldOptionCreateWithoutTodoCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'custom_field_option')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    custom_field_option = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldOptionCreateOneWithoutTodoCustomFieldOptionsInput), graphql_name='customFieldOption')


class TodoCustomFieldOptionScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldOptionScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldOptionScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldOptionScalarWhereInput')), graphql_name='NOT')


class TodoCustomFieldOptionSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('TodoCustomFieldOptionWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldOptionSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldOptionSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldOptionSubscriptionWhereInput')), graphql_name='NOT')


class TodoCustomFieldOptionUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'todo_custom_field', 'custom_field_option')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    todo_custom_field = sgqlc.types.Field('TodoCustomFieldUpdateOneRequiredWithoutTodoCustomFieldOptionsInput', graphql_name='todoCustomField')
    custom_field_option = sgqlc.types.Field(CustomFieldOptionUpdateOneRequiredWithoutTodoCustomFieldOptionsInput, graphql_name='customFieldOption')


class TodoCustomFieldOptionUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid',)
    uid = sgqlc.types.Field(String, graphql_name='uid')


class TodoCustomFieldOptionUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid',)
    uid = sgqlc.types.Field(String, graphql_name='uid')


class TodoCustomFieldOptionUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomFieldOptionScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomFieldOptionUpdateManyDataInput), graphql_name='data')


class TodoCustomFieldOptionUpdateManyWithoutCustomFieldOptionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoCustomFieldOptionCreateWithoutCustomFieldOptionInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldOptionWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldOptionWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldOptionWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldOptionWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldOptionUpdateWithWhereUniqueWithoutCustomFieldOptionInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldOptionUpsertWithWhereUniqueWithoutCustomFieldOptionInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoCustomFieldOptionScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoCustomFieldOptionUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class TodoCustomFieldOptionUpdateManyWithoutTodoCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoCustomFieldOptionCreateWithoutTodoCustomFieldInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldOptionWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldOptionWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldOptionWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldOptionWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldOptionUpdateWithWhereUniqueWithoutTodoCustomFieldInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldOptionUpsertWithWhereUniqueWithoutTodoCustomFieldInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoCustomFieldOptionScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoCustomFieldOptionUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class TodoCustomFieldOptionUpdateWithWhereUniqueWithoutCustomFieldOptionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('TodoCustomFieldOptionWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('TodoCustomFieldOptionUpdateWithoutCustomFieldOptionDataInput'), graphql_name='data')


class TodoCustomFieldOptionUpdateWithWhereUniqueWithoutTodoCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('TodoCustomFieldOptionWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('TodoCustomFieldOptionUpdateWithoutTodoCustomFieldDataInput'), graphql_name='data')


class TodoCustomFieldOptionUpdateWithoutCustomFieldOptionDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'todo_custom_field')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    todo_custom_field = sgqlc.types.Field('TodoCustomFieldUpdateOneRequiredWithoutTodoCustomFieldOptionsInput', graphql_name='todoCustomField')


class TodoCustomFieldOptionUpdateWithoutTodoCustomFieldDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'custom_field_option')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    custom_field_option = sgqlc.types.Field(CustomFieldOptionUpdateOneRequiredWithoutTodoCustomFieldOptionsInput, graphql_name='customFieldOption')


class TodoCustomFieldOptionUpsertWithWhereUniqueWithoutCustomFieldOptionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('TodoCustomFieldOptionWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomFieldOptionUpdateWithoutCustomFieldOptionDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomFieldOptionCreateWithoutCustomFieldOptionInput), graphql_name='create')


class TodoCustomFieldOptionUpsertWithWhereUniqueWithoutTodoCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('TodoCustomFieldOptionWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomFieldOptionUpdateWithoutTodoCustomFieldDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomFieldOptionCreateWithoutTodoCustomFieldInput), graphql_name='create')


class TodoCustomFieldOptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'todo_custom_field', 'custom_field_option', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    todo_custom_field = sgqlc.types.Field('TodoCustomFieldWhereInput', graphql_name='todoCustomField')
    custom_field_option = sgqlc.types.Field(CustomFieldOptionWhereInput, graphql_name='customFieldOption')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldOptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldOptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldOptionWhereInput')), graphql_name='NOT')


class TodoCustomFieldOptionWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class TodoCustomFieldScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'number', 'number_not', 'number_in', 'number_not_in', 'number_lt', 'number_lte', 'number_gt', 'number_gte', 'text', 'text_not', 'text_in', 'text_not_in', 'text_lt', 'text_lte', 'text_gt', 'text_gte', 'text_contains', 'text_not_contains', 'text_starts_with', 'text_not_starts_with', 'text_ends_with', 'text_not_ends_with', 'region_code', 'region_code_not', 'region_code_in', 'region_code_not_in', 'region_code_lt', 'region_code_lte', 'region_code_gt', 'region_code_gte', 'region_code_contains', 'region_code_not_contains', 'region_code_starts_with', 'region_code_not_starts_with', 'region_code_ends_with', 'region_code_not_ends_with', 'country_codes', 'country_codes_not', 'country_codes_in', 'country_codes_not_in', 'country_codes_lt', 'country_codes_lte', 'country_codes_gt', 'country_codes_gte', 'country_codes_contains', 'country_codes_not_contains', 'country_codes_starts_with', 'country_codes_not_starts_with', 'country_codes_ends_with', 'country_codes_not_ends_with', 'checked', 'checked_not', 'latitude', 'latitude_not', 'latitude_in', 'latitude_not_in', 'latitude_lt', 'latitude_lte', 'latitude_gt', 'latitude_gte', 'longitude', 'longitude_not', 'longitude_in', 'longitude_not_in', 'longitude_lt', 'longitude_lte', 'longitude_gt', 'longitude_gte', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    number = sgqlc.types.Field(Float, graphql_name='number')
    number_not = sgqlc.types.Field(Float, graphql_name='number_not')
    number_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='number_in')
    number_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='number_not_in')
    number_lt = sgqlc.types.Field(Float, graphql_name='number_lt')
    number_lte = sgqlc.types.Field(Float, graphql_name='number_lte')
    number_gt = sgqlc.types.Field(Float, graphql_name='number_gt')
    number_gte = sgqlc.types.Field(Float, graphql_name='number_gte')
    text = sgqlc.types.Field(String, graphql_name='text')
    text_not = sgqlc.types.Field(String, graphql_name='text_not')
    text_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='text_in')
    text_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='text_not_in')
    text_lt = sgqlc.types.Field(String, graphql_name='text_lt')
    text_lte = sgqlc.types.Field(String, graphql_name='text_lte')
    text_gt = sgqlc.types.Field(String, graphql_name='text_gt')
    text_gte = sgqlc.types.Field(String, graphql_name='text_gte')
    text_contains = sgqlc.types.Field(String, graphql_name='text_contains')
    text_not_contains = sgqlc.types.Field(String, graphql_name='text_not_contains')
    text_starts_with = sgqlc.types.Field(String, graphql_name='text_starts_with')
    text_not_starts_with = sgqlc.types.Field(String, graphql_name='text_not_starts_with')
    text_ends_with = sgqlc.types.Field(String, graphql_name='text_ends_with')
    text_not_ends_with = sgqlc.types.Field(String, graphql_name='text_not_ends_with')
    region_code = sgqlc.types.Field(String, graphql_name='regionCode')
    region_code_not = sgqlc.types.Field(String, graphql_name='regionCode_not')
    region_code_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='regionCode_in')
    region_code_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='regionCode_not_in')
    region_code_lt = sgqlc.types.Field(String, graphql_name='regionCode_lt')
    region_code_lte = sgqlc.types.Field(String, graphql_name='regionCode_lte')
    region_code_gt = sgqlc.types.Field(String, graphql_name='regionCode_gt')
    region_code_gte = sgqlc.types.Field(String, graphql_name='regionCode_gte')
    region_code_contains = sgqlc.types.Field(String, graphql_name='regionCode_contains')
    region_code_not_contains = sgqlc.types.Field(String, graphql_name='regionCode_not_contains')
    region_code_starts_with = sgqlc.types.Field(String, graphql_name='regionCode_starts_with')
    region_code_not_starts_with = sgqlc.types.Field(String, graphql_name='regionCode_not_starts_with')
    region_code_ends_with = sgqlc.types.Field(String, graphql_name='regionCode_ends_with')
    region_code_not_ends_with = sgqlc.types.Field(String, graphql_name='regionCode_not_ends_with')
    country_codes = sgqlc.types.Field(String, graphql_name='countryCodes')
    country_codes_not = sgqlc.types.Field(String, graphql_name='countryCodes_not')
    country_codes_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='countryCodes_in')
    country_codes_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='countryCodes_not_in')
    country_codes_lt = sgqlc.types.Field(String, graphql_name='countryCodes_lt')
    country_codes_lte = sgqlc.types.Field(String, graphql_name='countryCodes_lte')
    country_codes_gt = sgqlc.types.Field(String, graphql_name='countryCodes_gt')
    country_codes_gte = sgqlc.types.Field(String, graphql_name='countryCodes_gte')
    country_codes_contains = sgqlc.types.Field(String, graphql_name='countryCodes_contains')
    country_codes_not_contains = sgqlc.types.Field(String, graphql_name='countryCodes_not_contains')
    country_codes_starts_with = sgqlc.types.Field(String, graphql_name='countryCodes_starts_with')
    country_codes_not_starts_with = sgqlc.types.Field(String, graphql_name='countryCodes_not_starts_with')
    country_codes_ends_with = sgqlc.types.Field(String, graphql_name='countryCodes_ends_with')
    country_codes_not_ends_with = sgqlc.types.Field(String, graphql_name='countryCodes_not_ends_with')
    checked = sgqlc.types.Field(Boolean, graphql_name='checked')
    checked_not = sgqlc.types.Field(Boolean, graphql_name='checked_not')
    latitude = sgqlc.types.Field(Float, graphql_name='latitude')
    latitude_not = sgqlc.types.Field(Float, graphql_name='latitude_not')
    latitude_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='latitude_in')
    latitude_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='latitude_not_in')
    latitude_lt = sgqlc.types.Field(Float, graphql_name='latitude_lt')
    latitude_lte = sgqlc.types.Field(Float, graphql_name='latitude_lte')
    latitude_gt = sgqlc.types.Field(Float, graphql_name='latitude_gt')
    latitude_gte = sgqlc.types.Field(Float, graphql_name='latitude_gte')
    longitude = sgqlc.types.Field(Float, graphql_name='longitude')
    longitude_not = sgqlc.types.Field(Float, graphql_name='longitude_not')
    longitude_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='longitude_in')
    longitude_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='longitude_not_in')
    longitude_lt = sgqlc.types.Field(Float, graphql_name='longitude_lt')
    longitude_lte = sgqlc.types.Field(Float, graphql_name='longitude_lte')
    longitude_gt = sgqlc.types.Field(Float, graphql_name='longitude_gt')
    longitude_gte = sgqlc.types.Field(Float, graphql_name='longitude_gte')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldScalarWhereInput')), graphql_name='NOT')


class TodoCustomFieldSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('TodoCustomFieldWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldSubscriptionWhereInput')), graphql_name='NOT')


class TodoCustomFieldUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'todo', 'custom_field', 'number', 'text', 'region_code', 'country_codes', 'checked', 'latitude', 'longitude', 'custom_field_option', 'todo_custom_field_options', 'todo_custom_field_files')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    todo = sgqlc.types.Field('TodoUpdateOneRequiredWithoutTodoCustomFieldsInput', graphql_name='todo')
    custom_field = sgqlc.types.Field(CustomFieldUpdateOneRequiredWithoutTodoCustomFieldsInput, graphql_name='customField')
    number = sgqlc.types.Field(Float, graphql_name='number')
    text = sgqlc.types.Field(String, graphql_name='text')
    region_code = sgqlc.types.Field(String, graphql_name='regionCode')
    country_codes = sgqlc.types.Field(String, graphql_name='countryCodes')
    checked = sgqlc.types.Field(Boolean, graphql_name='checked')
    latitude = sgqlc.types.Field(Float, graphql_name='latitude')
    longitude = sgqlc.types.Field(Float, graphql_name='longitude')
    custom_field_option = sgqlc.types.Field(CustomFieldOptionUpdateOneWithoutTodoCustomFieldInput, graphql_name='customFieldOption')
    todo_custom_field_options = sgqlc.types.Field(TodoCustomFieldOptionUpdateManyWithoutTodoCustomFieldInput, graphql_name='todoCustomFieldOptions')
    todo_custom_field_files = sgqlc.types.Field(TodoCustomFieldFileUpdateManyWithoutTodoCustomFieldInput, graphql_name='todoCustomFieldFiles')


class TodoCustomFieldUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'number', 'text', 'region_code', 'country_codes', 'checked', 'latitude', 'longitude')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    number = sgqlc.types.Field(Float, graphql_name='number')
    text = sgqlc.types.Field(String, graphql_name='text')
    region_code = sgqlc.types.Field(String, graphql_name='regionCode')
    country_codes = sgqlc.types.Field(String, graphql_name='countryCodes')
    checked = sgqlc.types.Field(Boolean, graphql_name='checked')
    latitude = sgqlc.types.Field(Float, graphql_name='latitude')
    longitude = sgqlc.types.Field(Float, graphql_name='longitude')


class TodoCustomFieldUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'number', 'text', 'region_code', 'country_codes', 'checked', 'latitude', 'longitude')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    number = sgqlc.types.Field(Float, graphql_name='number')
    text = sgqlc.types.Field(String, graphql_name='text')
    region_code = sgqlc.types.Field(String, graphql_name='regionCode')
    country_codes = sgqlc.types.Field(String, graphql_name='countryCodes')
    checked = sgqlc.types.Field(Boolean, graphql_name='checked')
    latitude = sgqlc.types.Field(Float, graphql_name='latitude')
    longitude = sgqlc.types.Field(Float, graphql_name='longitude')


class TodoCustomFieldUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomFieldScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomFieldUpdateManyDataInput), graphql_name='data')


class TodoCustomFieldUpdateManyWithoutCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoCustomFieldCreateWithoutCustomFieldInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldUpdateWithWhereUniqueWithoutCustomFieldInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldUpsertWithWhereUniqueWithoutCustomFieldInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoCustomFieldScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoCustomFieldUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class TodoCustomFieldUpdateManyWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoCustomFieldCreateWithoutTodoInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldUpdateWithWhereUniqueWithoutTodoInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldUpsertWithWhereUniqueWithoutTodoInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoCustomFieldScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoCustomFieldUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class TodoCustomFieldUpdateOneRequiredWithoutTodoCustomFieldFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(TodoCustomFieldCreateWithoutTodoCustomFieldFilesInput, graphql_name='create')
    update = sgqlc.types.Field('TodoCustomFieldUpdateWithoutTodoCustomFieldFilesDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('TodoCustomFieldUpsertWithoutTodoCustomFieldFilesInput', graphql_name='upsert')
    connect = sgqlc.types.Field('TodoCustomFieldWhereUniqueInput', graphql_name='connect')


class TodoCustomFieldUpdateOneRequiredWithoutTodoCustomFieldOptionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(TodoCustomFieldCreateWithoutTodoCustomFieldOptionsInput, graphql_name='create')
    update = sgqlc.types.Field('TodoCustomFieldUpdateWithoutTodoCustomFieldOptionsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('TodoCustomFieldUpsertWithoutTodoCustomFieldOptionsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('TodoCustomFieldWhereUniqueInput', graphql_name='connect')


class TodoCustomFieldUpdateOneWithoutCustomFieldOptionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(TodoCustomFieldCreateWithoutCustomFieldOptionInput, graphql_name='create')
    update = sgqlc.types.Field('TodoCustomFieldUpdateWithoutCustomFieldOptionDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('TodoCustomFieldUpsertWithoutCustomFieldOptionInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('TodoCustomFieldWhereUniqueInput', graphql_name='connect')


class TodoCustomFieldUpdateWithWhereUniqueWithoutCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('TodoCustomFieldWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('TodoCustomFieldUpdateWithoutCustomFieldDataInput'), graphql_name='data')


class TodoCustomFieldUpdateWithWhereUniqueWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('TodoCustomFieldWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('TodoCustomFieldUpdateWithoutTodoDataInput'), graphql_name='data')


class TodoCustomFieldUpdateWithoutCustomFieldDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'todo', 'number', 'text', 'region_code', 'country_codes', 'checked', 'latitude', 'longitude', 'custom_field_option', 'todo_custom_field_options', 'todo_custom_field_files')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    todo = sgqlc.types.Field('TodoUpdateOneRequiredWithoutTodoCustomFieldsInput', graphql_name='todo')
    number = sgqlc.types.Field(Float, graphql_name='number')
    text = sgqlc.types.Field(String, graphql_name='text')
    region_code = sgqlc.types.Field(String, graphql_name='regionCode')
    country_codes = sgqlc.types.Field(String, graphql_name='countryCodes')
    checked = sgqlc.types.Field(Boolean, graphql_name='checked')
    latitude = sgqlc.types.Field(Float, graphql_name='latitude')
    longitude = sgqlc.types.Field(Float, graphql_name='longitude')
    custom_field_option = sgqlc.types.Field(CustomFieldOptionUpdateOneWithoutTodoCustomFieldInput, graphql_name='customFieldOption')
    todo_custom_field_options = sgqlc.types.Field(TodoCustomFieldOptionUpdateManyWithoutTodoCustomFieldInput, graphql_name='todoCustomFieldOptions')
    todo_custom_field_files = sgqlc.types.Field(TodoCustomFieldFileUpdateManyWithoutTodoCustomFieldInput, graphql_name='todoCustomFieldFiles')


class TodoCustomFieldUpdateWithoutCustomFieldOptionDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'todo', 'custom_field', 'number', 'text', 'region_code', 'country_codes', 'checked', 'latitude', 'longitude', 'todo_custom_field_options', 'todo_custom_field_files')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    todo = sgqlc.types.Field('TodoUpdateOneRequiredWithoutTodoCustomFieldsInput', graphql_name='todo')
    custom_field = sgqlc.types.Field(CustomFieldUpdateOneRequiredWithoutTodoCustomFieldsInput, graphql_name='customField')
    number = sgqlc.types.Field(Float, graphql_name='number')
    text = sgqlc.types.Field(String, graphql_name='text')
    region_code = sgqlc.types.Field(String, graphql_name='regionCode')
    country_codes = sgqlc.types.Field(String, graphql_name='countryCodes')
    checked = sgqlc.types.Field(Boolean, graphql_name='checked')
    latitude = sgqlc.types.Field(Float, graphql_name='latitude')
    longitude = sgqlc.types.Field(Float, graphql_name='longitude')
    todo_custom_field_options = sgqlc.types.Field(TodoCustomFieldOptionUpdateManyWithoutTodoCustomFieldInput, graphql_name='todoCustomFieldOptions')
    todo_custom_field_files = sgqlc.types.Field(TodoCustomFieldFileUpdateManyWithoutTodoCustomFieldInput, graphql_name='todoCustomFieldFiles')


class TodoCustomFieldUpdateWithoutTodoCustomFieldFilesDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'todo', 'custom_field', 'number', 'text', 'region_code', 'country_codes', 'checked', 'latitude', 'longitude', 'custom_field_option', 'todo_custom_field_options')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    todo = sgqlc.types.Field('TodoUpdateOneRequiredWithoutTodoCustomFieldsInput', graphql_name='todo')
    custom_field = sgqlc.types.Field(CustomFieldUpdateOneRequiredWithoutTodoCustomFieldsInput, graphql_name='customField')
    number = sgqlc.types.Field(Float, graphql_name='number')
    text = sgqlc.types.Field(String, graphql_name='text')
    region_code = sgqlc.types.Field(String, graphql_name='regionCode')
    country_codes = sgqlc.types.Field(String, graphql_name='countryCodes')
    checked = sgqlc.types.Field(Boolean, graphql_name='checked')
    latitude = sgqlc.types.Field(Float, graphql_name='latitude')
    longitude = sgqlc.types.Field(Float, graphql_name='longitude')
    custom_field_option = sgqlc.types.Field(CustomFieldOptionUpdateOneWithoutTodoCustomFieldInput, graphql_name='customFieldOption')
    todo_custom_field_options = sgqlc.types.Field(TodoCustomFieldOptionUpdateManyWithoutTodoCustomFieldInput, graphql_name='todoCustomFieldOptions')


class TodoCustomFieldUpdateWithoutTodoCustomFieldOptionsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'todo', 'custom_field', 'number', 'text', 'region_code', 'country_codes', 'checked', 'latitude', 'longitude', 'custom_field_option', 'todo_custom_field_files')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    todo = sgqlc.types.Field('TodoUpdateOneRequiredWithoutTodoCustomFieldsInput', graphql_name='todo')
    custom_field = sgqlc.types.Field(CustomFieldUpdateOneRequiredWithoutTodoCustomFieldsInput, graphql_name='customField')
    number = sgqlc.types.Field(Float, graphql_name='number')
    text = sgqlc.types.Field(String, graphql_name='text')
    region_code = sgqlc.types.Field(String, graphql_name='regionCode')
    country_codes = sgqlc.types.Field(String, graphql_name='countryCodes')
    checked = sgqlc.types.Field(Boolean, graphql_name='checked')
    latitude = sgqlc.types.Field(Float, graphql_name='latitude')
    longitude = sgqlc.types.Field(Float, graphql_name='longitude')
    custom_field_option = sgqlc.types.Field(CustomFieldOptionUpdateOneWithoutTodoCustomFieldInput, graphql_name='customFieldOption')
    todo_custom_field_files = sgqlc.types.Field(TodoCustomFieldFileUpdateManyWithoutTodoCustomFieldInput, graphql_name='todoCustomFieldFiles')


class TodoCustomFieldUpdateWithoutTodoDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'custom_field', 'number', 'text', 'region_code', 'country_codes', 'checked', 'latitude', 'longitude', 'custom_field_option', 'todo_custom_field_options', 'todo_custom_field_files')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    custom_field = sgqlc.types.Field(CustomFieldUpdateOneRequiredWithoutTodoCustomFieldsInput, graphql_name='customField')
    number = sgqlc.types.Field(Float, graphql_name='number')
    text = sgqlc.types.Field(String, graphql_name='text')
    region_code = sgqlc.types.Field(String, graphql_name='regionCode')
    country_codes = sgqlc.types.Field(String, graphql_name='countryCodes')
    checked = sgqlc.types.Field(Boolean, graphql_name='checked')
    latitude = sgqlc.types.Field(Float, graphql_name='latitude')
    longitude = sgqlc.types.Field(Float, graphql_name='longitude')
    custom_field_option = sgqlc.types.Field(CustomFieldOptionUpdateOneWithoutTodoCustomFieldInput, graphql_name='customFieldOption')
    todo_custom_field_options = sgqlc.types.Field(TodoCustomFieldOptionUpdateManyWithoutTodoCustomFieldInput, graphql_name='todoCustomFieldOptions')
    todo_custom_field_files = sgqlc.types.Field(TodoCustomFieldFileUpdateManyWithoutTodoCustomFieldInput, graphql_name='todoCustomFieldFiles')


class TodoCustomFieldUpsertWithWhereUniqueWithoutCustomFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('TodoCustomFieldWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomFieldUpdateWithoutCustomFieldDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomFieldCreateWithoutCustomFieldInput), graphql_name='create')


class TodoCustomFieldUpsertWithWhereUniqueWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('TodoCustomFieldWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomFieldUpdateWithoutTodoDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomFieldCreateWithoutTodoInput), graphql_name='create')


class TodoCustomFieldUpsertWithoutCustomFieldOptionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomFieldUpdateWithoutCustomFieldOptionDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomFieldCreateWithoutCustomFieldOptionInput), graphql_name='create')


class TodoCustomFieldUpsertWithoutTodoCustomFieldFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomFieldUpdateWithoutTodoCustomFieldFilesDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomFieldCreateWithoutTodoCustomFieldFilesInput), graphql_name='create')


class TodoCustomFieldUpsertWithoutTodoCustomFieldOptionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomFieldUpdateWithoutTodoCustomFieldOptionsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomFieldCreateWithoutTodoCustomFieldOptionsInput), graphql_name='create')


class TodoCustomFieldWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'todo', 'custom_field', 'number', 'number_not', 'number_in', 'number_not_in', 'number_lt', 'number_lte', 'number_gt', 'number_gte', 'text', 'text_not', 'text_in', 'text_not_in', 'text_lt', 'text_lte', 'text_gt', 'text_gte', 'text_contains', 'text_not_contains', 'text_starts_with', 'text_not_starts_with', 'text_ends_with', 'text_not_ends_with', 'region_code', 'region_code_not', 'region_code_in', 'region_code_not_in', 'region_code_lt', 'region_code_lte', 'region_code_gt', 'region_code_gte', 'region_code_contains', 'region_code_not_contains', 'region_code_starts_with', 'region_code_not_starts_with', 'region_code_ends_with', 'region_code_not_ends_with', 'country_codes', 'country_codes_not', 'country_codes_in', 'country_codes_not_in', 'country_codes_lt', 'country_codes_lte', 'country_codes_gt', 'country_codes_gte', 'country_codes_contains', 'country_codes_not_contains', 'country_codes_starts_with', 'country_codes_not_starts_with', 'country_codes_ends_with', 'country_codes_not_ends_with', 'checked', 'checked_not', 'latitude', 'latitude_not', 'latitude_in', 'latitude_not_in', 'latitude_lt', 'latitude_lte', 'latitude_gt', 'latitude_gte', 'longitude', 'longitude_not', 'longitude_in', 'longitude_not_in', 'longitude_lt', 'longitude_lte', 'longitude_gt', 'longitude_gte', 'custom_field_option', 'todo_custom_field_options_every', 'todo_custom_field_options_some', 'todo_custom_field_options_none', 'todo_custom_field_files_every', 'todo_custom_field_files_some', 'todo_custom_field_files_none', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    todo = sgqlc.types.Field('TodoWhereInput', graphql_name='todo')
    custom_field = sgqlc.types.Field(CustomFieldWhereInput, graphql_name='customField')
    number = sgqlc.types.Field(Float, graphql_name='number')
    number_not = sgqlc.types.Field(Float, graphql_name='number_not')
    number_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='number_in')
    number_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='number_not_in')
    number_lt = sgqlc.types.Field(Float, graphql_name='number_lt')
    number_lte = sgqlc.types.Field(Float, graphql_name='number_lte')
    number_gt = sgqlc.types.Field(Float, graphql_name='number_gt')
    number_gte = sgqlc.types.Field(Float, graphql_name='number_gte')
    text = sgqlc.types.Field(String, graphql_name='text')
    text_not = sgqlc.types.Field(String, graphql_name='text_not')
    text_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='text_in')
    text_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='text_not_in')
    text_lt = sgqlc.types.Field(String, graphql_name='text_lt')
    text_lte = sgqlc.types.Field(String, graphql_name='text_lte')
    text_gt = sgqlc.types.Field(String, graphql_name='text_gt')
    text_gte = sgqlc.types.Field(String, graphql_name='text_gte')
    text_contains = sgqlc.types.Field(String, graphql_name='text_contains')
    text_not_contains = sgqlc.types.Field(String, graphql_name='text_not_contains')
    text_starts_with = sgqlc.types.Field(String, graphql_name='text_starts_with')
    text_not_starts_with = sgqlc.types.Field(String, graphql_name='text_not_starts_with')
    text_ends_with = sgqlc.types.Field(String, graphql_name='text_ends_with')
    text_not_ends_with = sgqlc.types.Field(String, graphql_name='text_not_ends_with')
    region_code = sgqlc.types.Field(String, graphql_name='regionCode')
    region_code_not = sgqlc.types.Field(String, graphql_name='regionCode_not')
    region_code_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='regionCode_in')
    region_code_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='regionCode_not_in')
    region_code_lt = sgqlc.types.Field(String, graphql_name='regionCode_lt')
    region_code_lte = sgqlc.types.Field(String, graphql_name='regionCode_lte')
    region_code_gt = sgqlc.types.Field(String, graphql_name='regionCode_gt')
    region_code_gte = sgqlc.types.Field(String, graphql_name='regionCode_gte')
    region_code_contains = sgqlc.types.Field(String, graphql_name='regionCode_contains')
    region_code_not_contains = sgqlc.types.Field(String, graphql_name='regionCode_not_contains')
    region_code_starts_with = sgqlc.types.Field(String, graphql_name='regionCode_starts_with')
    region_code_not_starts_with = sgqlc.types.Field(String, graphql_name='regionCode_not_starts_with')
    region_code_ends_with = sgqlc.types.Field(String, graphql_name='regionCode_ends_with')
    region_code_not_ends_with = sgqlc.types.Field(String, graphql_name='regionCode_not_ends_with')
    country_codes = sgqlc.types.Field(String, graphql_name='countryCodes')
    country_codes_not = sgqlc.types.Field(String, graphql_name='countryCodes_not')
    country_codes_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='countryCodes_in')
    country_codes_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='countryCodes_not_in')
    country_codes_lt = sgqlc.types.Field(String, graphql_name='countryCodes_lt')
    country_codes_lte = sgqlc.types.Field(String, graphql_name='countryCodes_lte')
    country_codes_gt = sgqlc.types.Field(String, graphql_name='countryCodes_gt')
    country_codes_gte = sgqlc.types.Field(String, graphql_name='countryCodes_gte')
    country_codes_contains = sgqlc.types.Field(String, graphql_name='countryCodes_contains')
    country_codes_not_contains = sgqlc.types.Field(String, graphql_name='countryCodes_not_contains')
    country_codes_starts_with = sgqlc.types.Field(String, graphql_name='countryCodes_starts_with')
    country_codes_not_starts_with = sgqlc.types.Field(String, graphql_name='countryCodes_not_starts_with')
    country_codes_ends_with = sgqlc.types.Field(String, graphql_name='countryCodes_ends_with')
    country_codes_not_ends_with = sgqlc.types.Field(String, graphql_name='countryCodes_not_ends_with')
    checked = sgqlc.types.Field(Boolean, graphql_name='checked')
    checked_not = sgqlc.types.Field(Boolean, graphql_name='checked_not')
    latitude = sgqlc.types.Field(Float, graphql_name='latitude')
    latitude_not = sgqlc.types.Field(Float, graphql_name='latitude_not')
    latitude_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='latitude_in')
    latitude_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='latitude_not_in')
    latitude_lt = sgqlc.types.Field(Float, graphql_name='latitude_lt')
    latitude_lte = sgqlc.types.Field(Float, graphql_name='latitude_lte')
    latitude_gt = sgqlc.types.Field(Float, graphql_name='latitude_gt')
    latitude_gte = sgqlc.types.Field(Float, graphql_name='latitude_gte')
    longitude = sgqlc.types.Field(Float, graphql_name='longitude')
    longitude_not = sgqlc.types.Field(Float, graphql_name='longitude_not')
    longitude_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='longitude_in')
    longitude_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='longitude_not_in')
    longitude_lt = sgqlc.types.Field(Float, graphql_name='longitude_lt')
    longitude_lte = sgqlc.types.Field(Float, graphql_name='longitude_lte')
    longitude_gt = sgqlc.types.Field(Float, graphql_name='longitude_gt')
    longitude_gte = sgqlc.types.Field(Float, graphql_name='longitude_gte')
    custom_field_option = sgqlc.types.Field(CustomFieldOptionWhereInput, graphql_name='customFieldOption')
    todo_custom_field_options_every = sgqlc.types.Field(TodoCustomFieldOptionWhereInput, graphql_name='todoCustomFieldOptions_every')
    todo_custom_field_options_some = sgqlc.types.Field(TodoCustomFieldOptionWhereInput, graphql_name='todoCustomFieldOptions_some')
    todo_custom_field_options_none = sgqlc.types.Field(TodoCustomFieldOptionWhereInput, graphql_name='todoCustomFieldOptions_none')
    todo_custom_field_files_every = sgqlc.types.Field(TodoCustomFieldFileWhereInput, graphql_name='todoCustomFieldFiles_every')
    todo_custom_field_files_some = sgqlc.types.Field(TodoCustomFieldFileWhereInput, graphql_name='todoCustomFieldFiles_some')
    todo_custom_field_files_none = sgqlc.types.Field(TodoCustomFieldFileWhereInput, graphql_name='todoCustomFieldFiles_none')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldWhereInput')), graphql_name='NOT')


class TodoCustomFieldWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class TodoFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('type', 'custom_field_id', 'name', 'color', 'todo_fields')
    type = sgqlc.types.Field(sgqlc.types.non_null(TodoFieldType), graphql_name='type')
    custom_field_id = sgqlc.types.Field(String, graphql_name='customFieldId')
    name = sgqlc.types.Field(String, graphql_name='name')
    color = sgqlc.types.Field(String, graphql_name='color')
    todo_fields = sgqlc.types.Field(sgqlc.types.list_of('TodoFieldInput'), graphql_name='todoFields')


class TodoFilterFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('type', 'custom_field_id', 'custom_field_type', 'values', 'op')
    type = sgqlc.types.Field(TodoFilterFieldType, graphql_name='type')
    custom_field_id = sgqlc.types.Field(String, graphql_name='customFieldId')
    custom_field_type = sgqlc.types.Field(CustomFieldType, graphql_name='customFieldType')
    values = sgqlc.types.Field(JSON, graphql_name='values')
    op = sgqlc.types.Field(FilterComparisonOperator, graphql_name='op')


class TodoFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('assignee_ids', 'due_end', 'due_start', 'show_completed', 'project_ids', 'q', 'tag_ids', 'tag_colors', 'tag_titles', 'todo_list_ids', 'todo_list_titles', 'fields', 'op')
    assignee_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='assigneeIds')
    due_end = sgqlc.types.Field(DateTime, graphql_name='dueEnd')
    due_start = sgqlc.types.Field(DateTime, graphql_name='dueStart')
    show_completed = sgqlc.types.Field(Boolean, graphql_name='showCompleted')
    project_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='projectIds')
    q = sgqlc.types.Field(String, graphql_name='q')
    tag_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='tagIds')
    tag_colors = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='tagColors')
    tag_titles = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='tagTitles')
    todo_list_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='todoListIds')
    todo_list_titles = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='todoListTitles')
    fields = sgqlc.types.Field(JSON, graphql_name='fields')
    op = sgqlc.types.Field(FilterLogicalOperator, graphql_name='op')


class TodoListCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'position', 'title', 'project', 'todos', 'activity', 'created_by', 'automation_triggers', 'automation_actions', 'forms')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    project = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateOneWithoutTodoListsInput), graphql_name='project')
    todos = sgqlc.types.Field(TodoCreateManyWithoutTodoListInput, graphql_name='todos')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutTodoListInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserCreateOneWithoutTodoListsInput', graphql_name='createdBy')
    automation_triggers = sgqlc.types.Field(AutomationTriggerCreateManyWithoutTodoListInput, graphql_name='automationTriggers')
    automation_actions = sgqlc.types.Field(AutomationActionCreateManyWithoutTodoListInput, graphql_name='automationActions')
    forms = sgqlc.types.Field(FormCreateManyWithoutTodoListInput, graphql_name='forms')


class TodoListCreateManyWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoListCreateWithoutCreatedByInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoListWhereUniqueInput')), graphql_name='connect')


class TodoListCreateManyWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoListCreateWithoutProjectInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoListWhereUniqueInput')), graphql_name='connect')


class TodoListCreateOneWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('TodoListCreateWithoutActivityInput', graphql_name='create')
    connect = sgqlc.types.Field('TodoListWhereUniqueInput', graphql_name='connect')


class TodoListCreateOneWithoutAutomationActionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('TodoListCreateWithoutAutomationActionsInput', graphql_name='create')
    connect = sgqlc.types.Field('TodoListWhereUniqueInput', graphql_name='connect')


class TodoListCreateOneWithoutAutomationTriggersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('TodoListCreateWithoutAutomationTriggersInput', graphql_name='create')
    connect = sgqlc.types.Field('TodoListWhereUniqueInput', graphql_name='connect')


class TodoListCreateOneWithoutFormsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('TodoListCreateWithoutFormsInput', graphql_name='create')
    connect = sgqlc.types.Field('TodoListWhereUniqueInput', graphql_name='connect')


class TodoListCreateOneWithoutTodosInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('TodoListCreateWithoutTodosInput', graphql_name='create')
    connect = sgqlc.types.Field('TodoListWhereUniqueInput', graphql_name='connect')


class TodoListCreateWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'position', 'title', 'project', 'todos', 'created_by', 'automation_triggers', 'automation_actions', 'forms')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    project = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateOneWithoutTodoListsInput), graphql_name='project')
    todos = sgqlc.types.Field(TodoCreateManyWithoutTodoListInput, graphql_name='todos')
    created_by = sgqlc.types.Field('UserCreateOneWithoutTodoListsInput', graphql_name='createdBy')
    automation_triggers = sgqlc.types.Field(AutomationTriggerCreateManyWithoutTodoListInput, graphql_name='automationTriggers')
    automation_actions = sgqlc.types.Field(AutomationActionCreateManyWithoutTodoListInput, graphql_name='automationActions')
    forms = sgqlc.types.Field(FormCreateManyWithoutTodoListInput, graphql_name='forms')


class TodoListCreateWithoutAutomationActionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'position', 'title', 'project', 'todos', 'activity', 'created_by', 'automation_triggers', 'forms')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    project = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateOneWithoutTodoListsInput), graphql_name='project')
    todos = sgqlc.types.Field(TodoCreateManyWithoutTodoListInput, graphql_name='todos')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutTodoListInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserCreateOneWithoutTodoListsInput', graphql_name='createdBy')
    automation_triggers = sgqlc.types.Field(AutomationTriggerCreateManyWithoutTodoListInput, graphql_name='automationTriggers')
    forms = sgqlc.types.Field(FormCreateManyWithoutTodoListInput, graphql_name='forms')


class TodoListCreateWithoutAutomationTriggersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'position', 'title', 'project', 'todos', 'activity', 'created_by', 'automation_actions', 'forms')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    project = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateOneWithoutTodoListsInput), graphql_name='project')
    todos = sgqlc.types.Field(TodoCreateManyWithoutTodoListInput, graphql_name='todos')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutTodoListInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserCreateOneWithoutTodoListsInput', graphql_name='createdBy')
    automation_actions = sgqlc.types.Field(AutomationActionCreateManyWithoutTodoListInput, graphql_name='automationActions')
    forms = sgqlc.types.Field(FormCreateManyWithoutTodoListInput, graphql_name='forms')


class TodoListCreateWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'position', 'title', 'project', 'todos', 'activity', 'automation_triggers', 'automation_actions', 'forms')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    project = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateOneWithoutTodoListsInput), graphql_name='project')
    todos = sgqlc.types.Field(TodoCreateManyWithoutTodoListInput, graphql_name='todos')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutTodoListInput, graphql_name='activity')
    automation_triggers = sgqlc.types.Field(AutomationTriggerCreateManyWithoutTodoListInput, graphql_name='automationTriggers')
    automation_actions = sgqlc.types.Field(AutomationActionCreateManyWithoutTodoListInput, graphql_name='automationActions')
    forms = sgqlc.types.Field(FormCreateManyWithoutTodoListInput, graphql_name='forms')


class TodoListCreateWithoutFormsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'position', 'title', 'project', 'todos', 'activity', 'created_by', 'automation_triggers', 'automation_actions')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    project = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateOneWithoutTodoListsInput), graphql_name='project')
    todos = sgqlc.types.Field(TodoCreateManyWithoutTodoListInput, graphql_name='todos')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutTodoListInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserCreateOneWithoutTodoListsInput', graphql_name='createdBy')
    automation_triggers = sgqlc.types.Field(AutomationTriggerCreateManyWithoutTodoListInput, graphql_name='automationTriggers')
    automation_actions = sgqlc.types.Field(AutomationActionCreateManyWithoutTodoListInput, graphql_name='automationActions')


class TodoListCreateWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'position', 'title', 'todos', 'activity', 'created_by', 'automation_triggers', 'automation_actions', 'forms')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    todos = sgqlc.types.Field(TodoCreateManyWithoutTodoListInput, graphql_name='todos')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutTodoListInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserCreateOneWithoutTodoListsInput', graphql_name='createdBy')
    automation_triggers = sgqlc.types.Field(AutomationTriggerCreateManyWithoutTodoListInput, graphql_name='automationTriggers')
    automation_actions = sgqlc.types.Field(AutomationActionCreateManyWithoutTodoListInput, graphql_name='automationActions')
    forms = sgqlc.types.Field(FormCreateManyWithoutTodoListInput, graphql_name='forms')


class TodoListCreateWithoutTodosInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'position', 'title', 'project', 'activity', 'created_by', 'automation_triggers', 'automation_actions', 'forms')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    project = sgqlc.types.Field(sgqlc.types.non_null(ProjectCreateOneWithoutTodoListsInput), graphql_name='project')
    activity = sgqlc.types.Field(ActivityCreateOneWithoutTodoListInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserCreateOneWithoutTodoListsInput', graphql_name='createdBy')
    automation_triggers = sgqlc.types.Field(AutomationTriggerCreateManyWithoutTodoListInput, graphql_name='automationTriggers')
    automation_actions = sgqlc.types.Field(AutomationActionCreateManyWithoutTodoListInput, graphql_name='automationActions')
    forms = sgqlc.types.Field(FormCreateManyWithoutTodoListInput, graphql_name='forms')


class TodoListScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'position', 'position_not', 'position_in', 'position_not_in', 'position_lt', 'position_lte', 'position_gt', 'position_gte', 'title', 'title_not', 'title_in', 'title_not_in', 'title_lt', 'title_lte', 'title_gt', 'title_gte', 'title_contains', 'title_not_contains', 'title_starts_with', 'title_not_starts_with', 'title_ends_with', 'title_not_ends_with', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    position = sgqlc.types.Field(Float, graphql_name='position')
    position_not = sgqlc.types.Field(Float, graphql_name='position_not')
    position_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_in')
    position_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_not_in')
    position_lt = sgqlc.types.Field(Float, graphql_name='position_lt')
    position_lte = sgqlc.types.Field(Float, graphql_name='position_lte')
    position_gt = sgqlc.types.Field(Float, graphql_name='position_gt')
    position_gte = sgqlc.types.Field(Float, graphql_name='position_gte')
    title = sgqlc.types.Field(String, graphql_name='title')
    title_not = sgqlc.types.Field(String, graphql_name='title_not')
    title_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_in')
    title_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_not_in')
    title_lt = sgqlc.types.Field(String, graphql_name='title_lt')
    title_lte = sgqlc.types.Field(String, graphql_name='title_lte')
    title_gt = sgqlc.types.Field(String, graphql_name='title_gt')
    title_gte = sgqlc.types.Field(String, graphql_name='title_gte')
    title_contains = sgqlc.types.Field(String, graphql_name='title_contains')
    title_not_contains = sgqlc.types.Field(String, graphql_name='title_not_contains')
    title_starts_with = sgqlc.types.Field(String, graphql_name='title_starts_with')
    title_not_starts_with = sgqlc.types.Field(String, graphql_name='title_not_starts_with')
    title_ends_with = sgqlc.types.Field(String, graphql_name='title_ends_with')
    title_not_ends_with = sgqlc.types.Field(String, graphql_name='title_not_ends_with')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoListScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoListScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoListScalarWhereInput')), graphql_name='NOT')


class TodoListSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('TodoListWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoListSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoListSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoListSubscriptionWhereInput')), graphql_name='NOT')


class TodoListUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position', 'title', 'project', 'todos', 'activity', 'created_by', 'automation_triggers', 'automation_actions', 'forms')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')
    title = sgqlc.types.Field(String, graphql_name='title')
    project = sgqlc.types.Field(ProjectUpdateOneRequiredWithoutTodoListsInput, graphql_name='project')
    todos = sgqlc.types.Field('TodoUpdateManyWithoutTodoListInput', graphql_name='todos')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutTodoListInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserUpdateOneWithoutTodoListsInput', graphql_name='createdBy')
    automation_triggers = sgqlc.types.Field(AutomationTriggerUpdateManyWithoutTodoListInput, graphql_name='automationTriggers')
    automation_actions = sgqlc.types.Field(AutomationActionUpdateManyWithoutTodoListInput, graphql_name='automationActions')
    forms = sgqlc.types.Field(FormUpdateManyWithoutTodoListInput, graphql_name='forms')


class TodoListUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position', 'title')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')
    title = sgqlc.types.Field(String, graphql_name='title')


class TodoListUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position', 'title')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')
    title = sgqlc.types.Field(String, graphql_name='title')


class TodoListUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(TodoListScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(TodoListUpdateManyDataInput), graphql_name='data')


class TodoListUpdateManyWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoListCreateWithoutCreatedByInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoListWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoListWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoListWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoListWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoListUpdateWithWhereUniqueWithoutCreatedByInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoListUpsertWithWhereUniqueWithoutCreatedByInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoListScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoListUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class TodoListUpdateManyWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoListCreateWithoutProjectInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoListWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoListWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoListWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoListWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoListUpdateWithWhereUniqueWithoutProjectInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoListUpsertWithWhereUniqueWithoutProjectInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoListScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoListUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class TodoListUpdateOneRequiredWithoutTodosInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(TodoListCreateWithoutTodosInput, graphql_name='create')
    update = sgqlc.types.Field('TodoListUpdateWithoutTodosDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('TodoListUpsertWithoutTodosInput', graphql_name='upsert')
    connect = sgqlc.types.Field('TodoListWhereUniqueInput', graphql_name='connect')


class TodoListUpdateOneWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(TodoListCreateWithoutActivityInput, graphql_name='create')
    update = sgqlc.types.Field('TodoListUpdateWithoutActivityDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('TodoListUpsertWithoutActivityInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('TodoListWhereUniqueInput', graphql_name='connect')


class TodoListUpdateOneWithoutAutomationActionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(TodoListCreateWithoutAutomationActionsInput, graphql_name='create')
    update = sgqlc.types.Field('TodoListUpdateWithoutAutomationActionsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('TodoListUpsertWithoutAutomationActionsInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('TodoListWhereUniqueInput', graphql_name='connect')


class TodoListUpdateOneWithoutAutomationTriggersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(TodoListCreateWithoutAutomationTriggersInput, graphql_name='create')
    update = sgqlc.types.Field('TodoListUpdateWithoutAutomationTriggersDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('TodoListUpsertWithoutAutomationTriggersInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('TodoListWhereUniqueInput', graphql_name='connect')


class TodoListUpdateOneWithoutFormsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(TodoListCreateWithoutFormsInput, graphql_name='create')
    update = sgqlc.types.Field('TodoListUpdateWithoutFormsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('TodoListUpsertWithoutFormsInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('TodoListWhereUniqueInput', graphql_name='connect')


class TodoListUpdateWithWhereUniqueWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('TodoListWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('TodoListUpdateWithoutCreatedByDataInput'), graphql_name='data')


class TodoListUpdateWithWhereUniqueWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('TodoListWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('TodoListUpdateWithoutProjectDataInput'), graphql_name='data')


class TodoListUpdateWithoutActivityDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position', 'title', 'project', 'todos', 'created_by', 'automation_triggers', 'automation_actions', 'forms')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')
    title = sgqlc.types.Field(String, graphql_name='title')
    project = sgqlc.types.Field(ProjectUpdateOneRequiredWithoutTodoListsInput, graphql_name='project')
    todos = sgqlc.types.Field('TodoUpdateManyWithoutTodoListInput', graphql_name='todos')
    created_by = sgqlc.types.Field('UserUpdateOneWithoutTodoListsInput', graphql_name='createdBy')
    automation_triggers = sgqlc.types.Field(AutomationTriggerUpdateManyWithoutTodoListInput, graphql_name='automationTriggers')
    automation_actions = sgqlc.types.Field(AutomationActionUpdateManyWithoutTodoListInput, graphql_name='automationActions')
    forms = sgqlc.types.Field(FormUpdateManyWithoutTodoListInput, graphql_name='forms')


class TodoListUpdateWithoutAutomationActionsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position', 'title', 'project', 'todos', 'activity', 'created_by', 'automation_triggers', 'forms')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')
    title = sgqlc.types.Field(String, graphql_name='title')
    project = sgqlc.types.Field(ProjectUpdateOneRequiredWithoutTodoListsInput, graphql_name='project')
    todos = sgqlc.types.Field('TodoUpdateManyWithoutTodoListInput', graphql_name='todos')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutTodoListInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserUpdateOneWithoutTodoListsInput', graphql_name='createdBy')
    automation_triggers = sgqlc.types.Field(AutomationTriggerUpdateManyWithoutTodoListInput, graphql_name='automationTriggers')
    forms = sgqlc.types.Field(FormUpdateManyWithoutTodoListInput, graphql_name='forms')


class TodoListUpdateWithoutAutomationTriggersDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position', 'title', 'project', 'todos', 'activity', 'created_by', 'automation_actions', 'forms')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')
    title = sgqlc.types.Field(String, graphql_name='title')
    project = sgqlc.types.Field(ProjectUpdateOneRequiredWithoutTodoListsInput, graphql_name='project')
    todos = sgqlc.types.Field('TodoUpdateManyWithoutTodoListInput', graphql_name='todos')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutTodoListInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserUpdateOneWithoutTodoListsInput', graphql_name='createdBy')
    automation_actions = sgqlc.types.Field(AutomationActionUpdateManyWithoutTodoListInput, graphql_name='automationActions')
    forms = sgqlc.types.Field(FormUpdateManyWithoutTodoListInput, graphql_name='forms')


class TodoListUpdateWithoutCreatedByDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position', 'title', 'project', 'todos', 'activity', 'automation_triggers', 'automation_actions', 'forms')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')
    title = sgqlc.types.Field(String, graphql_name='title')
    project = sgqlc.types.Field(ProjectUpdateOneRequiredWithoutTodoListsInput, graphql_name='project')
    todos = sgqlc.types.Field('TodoUpdateManyWithoutTodoListInput', graphql_name='todos')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutTodoListInput, graphql_name='activity')
    automation_triggers = sgqlc.types.Field(AutomationTriggerUpdateManyWithoutTodoListInput, graphql_name='automationTriggers')
    automation_actions = sgqlc.types.Field(AutomationActionUpdateManyWithoutTodoListInput, graphql_name='automationActions')
    forms = sgqlc.types.Field(FormUpdateManyWithoutTodoListInput, graphql_name='forms')


class TodoListUpdateWithoutFormsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position', 'title', 'project', 'todos', 'activity', 'created_by', 'automation_triggers', 'automation_actions')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')
    title = sgqlc.types.Field(String, graphql_name='title')
    project = sgqlc.types.Field(ProjectUpdateOneRequiredWithoutTodoListsInput, graphql_name='project')
    todos = sgqlc.types.Field('TodoUpdateManyWithoutTodoListInput', graphql_name='todos')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutTodoListInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserUpdateOneWithoutTodoListsInput', graphql_name='createdBy')
    automation_triggers = sgqlc.types.Field(AutomationTriggerUpdateManyWithoutTodoListInput, graphql_name='automationTriggers')
    automation_actions = sgqlc.types.Field(AutomationActionUpdateManyWithoutTodoListInput, graphql_name='automationActions')


class TodoListUpdateWithoutProjectDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position', 'title', 'todos', 'activity', 'created_by', 'automation_triggers', 'automation_actions', 'forms')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')
    title = sgqlc.types.Field(String, graphql_name='title')
    todos = sgqlc.types.Field('TodoUpdateManyWithoutTodoListInput', graphql_name='todos')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutTodoListInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserUpdateOneWithoutTodoListsInput', graphql_name='createdBy')
    automation_triggers = sgqlc.types.Field(AutomationTriggerUpdateManyWithoutTodoListInput, graphql_name='automationTriggers')
    automation_actions = sgqlc.types.Field(AutomationActionUpdateManyWithoutTodoListInput, graphql_name='automationActions')
    forms = sgqlc.types.Field(FormUpdateManyWithoutTodoListInput, graphql_name='forms')


class TodoListUpdateWithoutTodosDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position', 'title', 'project', 'activity', 'created_by', 'automation_triggers', 'automation_actions', 'forms')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')
    title = sgqlc.types.Field(String, graphql_name='title')
    project = sgqlc.types.Field(ProjectUpdateOneRequiredWithoutTodoListsInput, graphql_name='project')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutTodoListInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserUpdateOneWithoutTodoListsInput', graphql_name='createdBy')
    automation_triggers = sgqlc.types.Field(AutomationTriggerUpdateManyWithoutTodoListInput, graphql_name='automationTriggers')
    automation_actions = sgqlc.types.Field(AutomationActionUpdateManyWithoutTodoListInput, graphql_name='automationActions')
    forms = sgqlc.types.Field(FormUpdateManyWithoutTodoListInput, graphql_name='forms')


class TodoListUpsertWithWhereUniqueWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('TodoListWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoListUpdateWithoutCreatedByDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoListCreateWithoutCreatedByInput), graphql_name='create')


class TodoListUpsertWithWhereUniqueWithoutProjectInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('TodoListWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoListUpdateWithoutProjectDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoListCreateWithoutProjectInput), graphql_name='create')


class TodoListUpsertWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoListUpdateWithoutActivityDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoListCreateWithoutActivityInput), graphql_name='create')


class TodoListUpsertWithoutAutomationActionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoListUpdateWithoutAutomationActionsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoListCreateWithoutAutomationActionsInput), graphql_name='create')


class TodoListUpsertWithoutAutomationTriggersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoListUpdateWithoutAutomationTriggersDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoListCreateWithoutAutomationTriggersInput), graphql_name='create')


class TodoListUpsertWithoutFormsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoListUpdateWithoutFormsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoListCreateWithoutFormsInput), graphql_name='create')


class TodoListUpsertWithoutTodosInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoListUpdateWithoutTodosDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoListCreateWithoutTodosInput), graphql_name='create')


class TodoListWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'position', 'position_not', 'position_in', 'position_not_in', 'position_lt', 'position_lte', 'position_gt', 'position_gte', 'title', 'title_not', 'title_in', 'title_not_in', 'title_lt', 'title_lte', 'title_gt', 'title_gte', 'title_contains', 'title_not_contains', 'title_starts_with', 'title_not_starts_with', 'title_ends_with', 'title_not_ends_with', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'project', 'todos_every', 'todos_some', 'todos_none', 'activity', 'created_by', 'automation_triggers_every', 'automation_triggers_some', 'automation_triggers_none', 'automation_actions_every', 'automation_actions_some', 'automation_actions_none', 'forms_every', 'forms_some', 'forms_none', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    position = sgqlc.types.Field(Float, graphql_name='position')
    position_not = sgqlc.types.Field(Float, graphql_name='position_not')
    position_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_in')
    position_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_not_in')
    position_lt = sgqlc.types.Field(Float, graphql_name='position_lt')
    position_lte = sgqlc.types.Field(Float, graphql_name='position_lte')
    position_gt = sgqlc.types.Field(Float, graphql_name='position_gt')
    position_gte = sgqlc.types.Field(Float, graphql_name='position_gte')
    title = sgqlc.types.Field(String, graphql_name='title')
    title_not = sgqlc.types.Field(String, graphql_name='title_not')
    title_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_in')
    title_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_not_in')
    title_lt = sgqlc.types.Field(String, graphql_name='title_lt')
    title_lte = sgqlc.types.Field(String, graphql_name='title_lte')
    title_gt = sgqlc.types.Field(String, graphql_name='title_gt')
    title_gte = sgqlc.types.Field(String, graphql_name='title_gte')
    title_contains = sgqlc.types.Field(String, graphql_name='title_contains')
    title_not_contains = sgqlc.types.Field(String, graphql_name='title_not_contains')
    title_starts_with = sgqlc.types.Field(String, graphql_name='title_starts_with')
    title_not_starts_with = sgqlc.types.Field(String, graphql_name='title_not_starts_with')
    title_ends_with = sgqlc.types.Field(String, graphql_name='title_ends_with')
    title_not_ends_with = sgqlc.types.Field(String, graphql_name='title_not_ends_with')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    project = sgqlc.types.Field(ProjectWhereInput, graphql_name='project')
    todos_every = sgqlc.types.Field('TodoWhereInput', graphql_name='todos_every')
    todos_some = sgqlc.types.Field('TodoWhereInput', graphql_name='todos_some')
    todos_none = sgqlc.types.Field('TodoWhereInput', graphql_name='todos_none')
    activity = sgqlc.types.Field(ActivityWhereInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserWhereInput', graphql_name='createdBy')
    automation_triggers_every = sgqlc.types.Field(AutomationTriggerWhereInput, graphql_name='automationTriggers_every')
    automation_triggers_some = sgqlc.types.Field(AutomationTriggerWhereInput, graphql_name='automationTriggers_some')
    automation_triggers_none = sgqlc.types.Field(AutomationTriggerWhereInput, graphql_name='automationTriggers_none')
    automation_actions_every = sgqlc.types.Field(AutomationActionWhereInput, graphql_name='automationActions_every')
    automation_actions_some = sgqlc.types.Field(AutomationActionWhereInput, graphql_name='automationActions_some')
    automation_actions_none = sgqlc.types.Field(AutomationActionWhereInput, graphql_name='automationActions_none')
    forms_every = sgqlc.types.Field(FormWhereInput, graphql_name='forms_every')
    forms_some = sgqlc.types.Field(FormWhereInput, graphql_name='forms_some')
    forms_none = sgqlc.types.Field(FormWhereInput, graphql_name='forms_none')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoListWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoListWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoListWhereInput')), graphql_name='NOT')


class TodoListWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class TodoListsFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_ids', 'project_ids', 'ids', 'titles', 'search')
    company_ids = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='companyIds')
    project_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='projectIds')
    ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='ids')
    titles = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='titles')
    search = sgqlc.types.Field(String, graphql_name='search')


class TodoScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'position', 'position_not', 'position_in', 'position_not_in', 'position_lt', 'position_lte', 'position_gt', 'position_gte', 'title', 'title_not', 'title_in', 'title_not_in', 'title_lt', 'title_lte', 'title_gt', 'title_gte', 'title_contains', 'title_not_contains', 'title_starts_with', 'title_not_starts_with', 'title_ends_with', 'title_not_ends_with', 'started_at', 'started_at_not', 'started_at_in', 'started_at_not_in', 'started_at_lt', 'started_at_lte', 'started_at_gt', 'started_at_gte', 'dued_at', 'dued_at_not', 'dued_at_in', 'dued_at_not_in', 'dued_at_lt', 'dued_at_lte', 'dued_at_gt', 'dued_at_gte', 'timezone', 'timezone_not', 'timezone_in', 'timezone_not_in', 'timezone_lt', 'timezone_lte', 'timezone_gt', 'timezone_gte', 'timezone_contains', 'timezone_not_contains', 'timezone_starts_with', 'timezone_not_starts_with', 'timezone_ends_with', 'timezone_not_ends_with', 'text', 'text_not', 'text_in', 'text_not_in', 'text_lt', 'text_lte', 'text_gt', 'text_gte', 'text_contains', 'text_not_contains', 'text_starts_with', 'text_not_starts_with', 'text_ends_with', 'text_not_ends_with', 'html', 'html_not', 'html_in', 'html_not_in', 'html_lt', 'html_lte', 'html_gt', 'html_gte', 'html_contains', 'html_not_contains', 'html_starts_with', 'html_not_starts_with', 'html_ends_with', 'html_not_ends_with', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'archived', 'archived_not', 'done', 'done_not', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    position = sgqlc.types.Field(Float, graphql_name='position')
    position_not = sgqlc.types.Field(Float, graphql_name='position_not')
    position_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_in')
    position_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_not_in')
    position_lt = sgqlc.types.Field(Float, graphql_name='position_lt')
    position_lte = sgqlc.types.Field(Float, graphql_name='position_lte')
    position_gt = sgqlc.types.Field(Float, graphql_name='position_gt')
    position_gte = sgqlc.types.Field(Float, graphql_name='position_gte')
    title = sgqlc.types.Field(String, graphql_name='title')
    title_not = sgqlc.types.Field(String, graphql_name='title_not')
    title_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_in')
    title_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_not_in')
    title_lt = sgqlc.types.Field(String, graphql_name='title_lt')
    title_lte = sgqlc.types.Field(String, graphql_name='title_lte')
    title_gt = sgqlc.types.Field(String, graphql_name='title_gt')
    title_gte = sgqlc.types.Field(String, graphql_name='title_gte')
    title_contains = sgqlc.types.Field(String, graphql_name='title_contains')
    title_not_contains = sgqlc.types.Field(String, graphql_name='title_not_contains')
    title_starts_with = sgqlc.types.Field(String, graphql_name='title_starts_with')
    title_not_starts_with = sgqlc.types.Field(String, graphql_name='title_not_starts_with')
    title_ends_with = sgqlc.types.Field(String, graphql_name='title_ends_with')
    title_not_ends_with = sgqlc.types.Field(String, graphql_name='title_not_ends_with')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    started_at_not = sgqlc.types.Field(DateTime, graphql_name='startedAt_not')
    started_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='startedAt_in')
    started_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='startedAt_not_in')
    started_at_lt = sgqlc.types.Field(DateTime, graphql_name='startedAt_lt')
    started_at_lte = sgqlc.types.Field(DateTime, graphql_name='startedAt_lte')
    started_at_gt = sgqlc.types.Field(DateTime, graphql_name='startedAt_gt')
    started_at_gte = sgqlc.types.Field(DateTime, graphql_name='startedAt_gte')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    dued_at_not = sgqlc.types.Field(DateTime, graphql_name='duedAt_not')
    dued_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='duedAt_in')
    dued_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='duedAt_not_in')
    dued_at_lt = sgqlc.types.Field(DateTime, graphql_name='duedAt_lt')
    dued_at_lte = sgqlc.types.Field(DateTime, graphql_name='duedAt_lte')
    dued_at_gt = sgqlc.types.Field(DateTime, graphql_name='duedAt_gt')
    dued_at_gte = sgqlc.types.Field(DateTime, graphql_name='duedAt_gte')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    timezone_not = sgqlc.types.Field(String, graphql_name='timezone_not')
    timezone_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='timezone_in')
    timezone_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='timezone_not_in')
    timezone_lt = sgqlc.types.Field(String, graphql_name='timezone_lt')
    timezone_lte = sgqlc.types.Field(String, graphql_name='timezone_lte')
    timezone_gt = sgqlc.types.Field(String, graphql_name='timezone_gt')
    timezone_gte = sgqlc.types.Field(String, graphql_name='timezone_gte')
    timezone_contains = sgqlc.types.Field(String, graphql_name='timezone_contains')
    timezone_not_contains = sgqlc.types.Field(String, graphql_name='timezone_not_contains')
    timezone_starts_with = sgqlc.types.Field(String, graphql_name='timezone_starts_with')
    timezone_not_starts_with = sgqlc.types.Field(String, graphql_name='timezone_not_starts_with')
    timezone_ends_with = sgqlc.types.Field(String, graphql_name='timezone_ends_with')
    timezone_not_ends_with = sgqlc.types.Field(String, graphql_name='timezone_not_ends_with')
    text = sgqlc.types.Field(String, graphql_name='text')
    text_not = sgqlc.types.Field(String, graphql_name='text_not')
    text_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='text_in')
    text_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='text_not_in')
    text_lt = sgqlc.types.Field(String, graphql_name='text_lt')
    text_lte = sgqlc.types.Field(String, graphql_name='text_lte')
    text_gt = sgqlc.types.Field(String, graphql_name='text_gt')
    text_gte = sgqlc.types.Field(String, graphql_name='text_gte')
    text_contains = sgqlc.types.Field(String, graphql_name='text_contains')
    text_not_contains = sgqlc.types.Field(String, graphql_name='text_not_contains')
    text_starts_with = sgqlc.types.Field(String, graphql_name='text_starts_with')
    text_not_starts_with = sgqlc.types.Field(String, graphql_name='text_not_starts_with')
    text_ends_with = sgqlc.types.Field(String, graphql_name='text_ends_with')
    text_not_ends_with = sgqlc.types.Field(String, graphql_name='text_not_ends_with')
    html = sgqlc.types.Field(String, graphql_name='html')
    html_not = sgqlc.types.Field(String, graphql_name='html_not')
    html_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='html_in')
    html_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='html_not_in')
    html_lt = sgqlc.types.Field(String, graphql_name='html_lt')
    html_lte = sgqlc.types.Field(String, graphql_name='html_lte')
    html_gt = sgqlc.types.Field(String, graphql_name='html_gt')
    html_gte = sgqlc.types.Field(String, graphql_name='html_gte')
    html_contains = sgqlc.types.Field(String, graphql_name='html_contains')
    html_not_contains = sgqlc.types.Field(String, graphql_name='html_not_contains')
    html_starts_with = sgqlc.types.Field(String, graphql_name='html_starts_with')
    html_not_starts_with = sgqlc.types.Field(String, graphql_name='html_not_starts_with')
    html_ends_with = sgqlc.types.Field(String, graphql_name='html_ends_with')
    html_not_ends_with = sgqlc.types.Field(String, graphql_name='html_not_ends_with')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    archived_not = sgqlc.types.Field(Boolean, graphql_name='archived_not')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    done_not = sgqlc.types.Field(Boolean, graphql_name='done_not')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoScalarWhereInput')), graphql_name='NOT')


class TodoSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('TodoWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoSubscriptionWhereInput')), graphql_name='NOT')


class TodoTagCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'tag', 'todo')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    tag = sgqlc.types.Field(sgqlc.types.non_null(TagCreateOneWithoutTodoTagsInput), graphql_name='tag')
    todo = sgqlc.types.Field(sgqlc.types.non_null(TodoCreateOneWithoutTodoTagsInput), graphql_name='todo')


class TodoTagCreateManyWithoutTagInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoTagCreateWithoutTagInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoTagWhereUniqueInput')), graphql_name='connect')


class TodoTagCreateManyWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoTagCreateWithoutTodoInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoTagWhereUniqueInput')), graphql_name='connect')


class TodoTagCreateWithoutTagInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'todo')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    todo = sgqlc.types.Field(sgqlc.types.non_null(TodoCreateOneWithoutTodoTagsInput), graphql_name='todo')


class TodoTagCreateWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'tag')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    tag = sgqlc.types.Field(sgqlc.types.non_null(TagCreateOneWithoutTodoTagsInput), graphql_name='tag')


class TodoTagScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoTagScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoTagScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoTagScalarWhereInput')), graphql_name='NOT')


class TodoTagSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('TodoTagWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoTagSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoTagSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoTagSubscriptionWhereInput')), graphql_name='NOT')


class TodoTagUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'tag', 'todo')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    tag = sgqlc.types.Field(TagUpdateOneRequiredWithoutTodoTagsInput, graphql_name='tag')
    todo = sgqlc.types.Field('TodoUpdateOneRequiredWithoutTodoTagsInput', graphql_name='todo')


class TodoTagUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid',)
    uid = sgqlc.types.Field(String, graphql_name='uid')


class TodoTagUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid',)
    uid = sgqlc.types.Field(String, graphql_name='uid')


class TodoTagUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(TodoTagScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(TodoTagUpdateManyDataInput), graphql_name='data')


class TodoTagUpdateManyWithoutTagInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoTagCreateWithoutTagInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoTagWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoTagWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoTagWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoTagWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoTagUpdateWithWhereUniqueWithoutTagInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoTagUpsertWithWhereUniqueWithoutTagInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoTagScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoTagUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class TodoTagUpdateManyWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoTagCreateWithoutTodoInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoTagWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoTagWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoTagWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoTagWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoTagUpdateWithWhereUniqueWithoutTodoInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoTagUpsertWithWhereUniqueWithoutTodoInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoTagScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoTagUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class TodoTagUpdateWithWhereUniqueWithoutTagInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('TodoTagWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('TodoTagUpdateWithoutTagDataInput'), graphql_name='data')


class TodoTagUpdateWithWhereUniqueWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('TodoTagWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('TodoTagUpdateWithoutTodoDataInput'), graphql_name='data')


class TodoTagUpdateWithoutTagDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'todo')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    todo = sgqlc.types.Field('TodoUpdateOneRequiredWithoutTodoTagsInput', graphql_name='todo')


class TodoTagUpdateWithoutTodoDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'tag')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    tag = sgqlc.types.Field(TagUpdateOneRequiredWithoutTodoTagsInput, graphql_name='tag')


class TodoTagUpsertWithWhereUniqueWithoutTagInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('TodoTagWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoTagUpdateWithoutTagDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoTagCreateWithoutTagInput), graphql_name='create')


class TodoTagUpsertWithWhereUniqueWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('TodoTagWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoTagUpdateWithoutTodoDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoTagCreateWithoutTodoInput), graphql_name='create')


class TodoTagWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'tag', 'todo', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    tag = sgqlc.types.Field(TagWhereInput, graphql_name='tag')
    todo = sgqlc.types.Field('TodoWhereInput', graphql_name='todo')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoTagWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoTagWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoTagWhereInput')), graphql_name='NOT')


class TodoTagWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class TodoUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position', 'title', 'started_at', 'dued_at', 'timezone', 'text', 'html', 'archived', 'done', 'todo_list', 'todo_users', 'activity', 'created_by', 'comments', 'actions', 'todo_tags', 'todo_custom_fields', 'files', 'checklists')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')
    title = sgqlc.types.Field(String, graphql_name='title')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    text = sgqlc.types.Field(String, graphql_name='text')
    html = sgqlc.types.Field(String, graphql_name='html')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    todo_list = sgqlc.types.Field(TodoListUpdateOneRequiredWithoutTodosInput, graphql_name='todoList')
    todo_users = sgqlc.types.Field('TodoUserUpdateManyWithoutTodoInput', graphql_name='todoUsers')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutTodoInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserUpdateOneWithoutTodosInput', graphql_name='createdBy')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutTodoInput, graphql_name='comments')
    actions = sgqlc.types.Field(TodoActionUpdateManyWithoutTodoInput, graphql_name='actions')
    todo_tags = sgqlc.types.Field(TodoTagUpdateManyWithoutTodoInput, graphql_name='todoTags')
    todo_custom_fields = sgqlc.types.Field(TodoCustomFieldUpdateManyWithoutTodoInput, graphql_name='todoCustomFields')
    files = sgqlc.types.Field(FileUpdateManyWithoutTodoInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutTodoInput, graphql_name='checklists')


class TodoUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position', 'title', 'started_at', 'dued_at', 'timezone', 'text', 'html', 'archived', 'done')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')
    title = sgqlc.types.Field(String, graphql_name='title')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    text = sgqlc.types.Field(String, graphql_name='text')
    html = sgqlc.types.Field(String, graphql_name='html')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    done = sgqlc.types.Field(Boolean, graphql_name='done')


class TodoUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position', 'title', 'started_at', 'dued_at', 'timezone', 'text', 'html', 'archived', 'done')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')
    title = sgqlc.types.Field(String, graphql_name='title')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    text = sgqlc.types.Field(String, graphql_name='text')
    html = sgqlc.types.Field(String, graphql_name='html')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    done = sgqlc.types.Field(Boolean, graphql_name='done')


class TodoUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(TodoScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(TodoUpdateManyDataInput), graphql_name='data')


class TodoUpdateManyWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoCreateWithoutCreatedByInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoUpdateWithWhereUniqueWithoutCreatedByInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoUpsertWithWhereUniqueWithoutCreatedByInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class TodoUpdateManyWithoutTodoListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoCreateWithoutTodoListInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoUpdateWithWhereUniqueWithoutTodoListInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoUpsertWithWhereUniqueWithoutTodoListInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class TodoUpdateOneRequiredWithoutActionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(TodoCreateWithoutActionsInput, graphql_name='create')
    update = sgqlc.types.Field('TodoUpdateWithoutActionsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('TodoUpsertWithoutActionsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('TodoWhereUniqueInput', graphql_name='connect')


class TodoUpdateOneRequiredWithoutChecklistsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(TodoCreateWithoutChecklistsInput, graphql_name='create')
    update = sgqlc.types.Field('TodoUpdateWithoutChecklistsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('TodoUpsertWithoutChecklistsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('TodoWhereUniqueInput', graphql_name='connect')


class TodoUpdateOneRequiredWithoutTodoCustomFieldsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(TodoCreateWithoutTodoCustomFieldsInput, graphql_name='create')
    update = sgqlc.types.Field('TodoUpdateWithoutTodoCustomFieldsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('TodoUpsertWithoutTodoCustomFieldsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('TodoWhereUniqueInput', graphql_name='connect')


class TodoUpdateOneRequiredWithoutTodoTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(TodoCreateWithoutTodoTagsInput, graphql_name='create')
    update = sgqlc.types.Field('TodoUpdateWithoutTodoTagsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('TodoUpsertWithoutTodoTagsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('TodoWhereUniqueInput', graphql_name='connect')


class TodoUpdateOneRequiredWithoutTodoUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(TodoCreateWithoutTodoUsersInput, graphql_name='create')
    update = sgqlc.types.Field('TodoUpdateWithoutTodoUsersDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('TodoUpsertWithoutTodoUsersInput', graphql_name='upsert')
    connect = sgqlc.types.Field('TodoWhereUniqueInput', graphql_name='connect')


class TodoUpdateOneWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(TodoCreateWithoutActivityInput, graphql_name='create')
    update = sgqlc.types.Field('TodoUpdateWithoutActivityDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('TodoUpsertWithoutActivityInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('TodoWhereUniqueInput', graphql_name='connect')


class TodoUpdateOneWithoutCommentsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(TodoCreateWithoutCommentsInput, graphql_name='create')
    update = sgqlc.types.Field('TodoUpdateWithoutCommentsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('TodoUpsertWithoutCommentsInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('TodoWhereUniqueInput', graphql_name='connect')


class TodoUpdateOneWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(TodoCreateWithoutFilesInput, graphql_name='create')
    update = sgqlc.types.Field('TodoUpdateWithoutFilesDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('TodoUpsertWithoutFilesInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('TodoWhereUniqueInput', graphql_name='connect')


class TodoUpdateWithWhereUniqueWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('TodoWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('TodoUpdateWithoutCreatedByDataInput'), graphql_name='data')


class TodoUpdateWithWhereUniqueWithoutTodoListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('TodoWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('TodoUpdateWithoutTodoListDataInput'), graphql_name='data')


class TodoUpdateWithoutActionsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position', 'title', 'started_at', 'dued_at', 'timezone', 'text', 'html', 'archived', 'done', 'todo_list', 'todo_users', 'activity', 'created_by', 'comments', 'todo_tags', 'todo_custom_fields', 'files', 'checklists')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')
    title = sgqlc.types.Field(String, graphql_name='title')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    text = sgqlc.types.Field(String, graphql_name='text')
    html = sgqlc.types.Field(String, graphql_name='html')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    todo_list = sgqlc.types.Field(TodoListUpdateOneRequiredWithoutTodosInput, graphql_name='todoList')
    todo_users = sgqlc.types.Field('TodoUserUpdateManyWithoutTodoInput', graphql_name='todoUsers')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutTodoInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserUpdateOneWithoutTodosInput', graphql_name='createdBy')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutTodoInput, graphql_name='comments')
    todo_tags = sgqlc.types.Field(TodoTagUpdateManyWithoutTodoInput, graphql_name='todoTags')
    todo_custom_fields = sgqlc.types.Field(TodoCustomFieldUpdateManyWithoutTodoInput, graphql_name='todoCustomFields')
    files = sgqlc.types.Field(FileUpdateManyWithoutTodoInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutTodoInput, graphql_name='checklists')


class TodoUpdateWithoutActivityDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position', 'title', 'started_at', 'dued_at', 'timezone', 'text', 'html', 'archived', 'done', 'todo_list', 'todo_users', 'created_by', 'comments', 'actions', 'todo_tags', 'todo_custom_fields', 'files', 'checklists')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')
    title = sgqlc.types.Field(String, graphql_name='title')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    text = sgqlc.types.Field(String, graphql_name='text')
    html = sgqlc.types.Field(String, graphql_name='html')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    todo_list = sgqlc.types.Field(TodoListUpdateOneRequiredWithoutTodosInput, graphql_name='todoList')
    todo_users = sgqlc.types.Field('TodoUserUpdateManyWithoutTodoInput', graphql_name='todoUsers')
    created_by = sgqlc.types.Field('UserUpdateOneWithoutTodosInput', graphql_name='createdBy')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutTodoInput, graphql_name='comments')
    actions = sgqlc.types.Field(TodoActionUpdateManyWithoutTodoInput, graphql_name='actions')
    todo_tags = sgqlc.types.Field(TodoTagUpdateManyWithoutTodoInput, graphql_name='todoTags')
    todo_custom_fields = sgqlc.types.Field(TodoCustomFieldUpdateManyWithoutTodoInput, graphql_name='todoCustomFields')
    files = sgqlc.types.Field(FileUpdateManyWithoutTodoInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutTodoInput, graphql_name='checklists')


class TodoUpdateWithoutChecklistsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position', 'title', 'started_at', 'dued_at', 'timezone', 'text', 'html', 'archived', 'done', 'todo_list', 'todo_users', 'activity', 'created_by', 'comments', 'actions', 'todo_tags', 'todo_custom_fields', 'files')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')
    title = sgqlc.types.Field(String, graphql_name='title')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    text = sgqlc.types.Field(String, graphql_name='text')
    html = sgqlc.types.Field(String, graphql_name='html')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    todo_list = sgqlc.types.Field(TodoListUpdateOneRequiredWithoutTodosInput, graphql_name='todoList')
    todo_users = sgqlc.types.Field('TodoUserUpdateManyWithoutTodoInput', graphql_name='todoUsers')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutTodoInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserUpdateOneWithoutTodosInput', graphql_name='createdBy')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutTodoInput, graphql_name='comments')
    actions = sgqlc.types.Field(TodoActionUpdateManyWithoutTodoInput, graphql_name='actions')
    todo_tags = sgqlc.types.Field(TodoTagUpdateManyWithoutTodoInput, graphql_name='todoTags')
    todo_custom_fields = sgqlc.types.Field(TodoCustomFieldUpdateManyWithoutTodoInput, graphql_name='todoCustomFields')
    files = sgqlc.types.Field(FileUpdateManyWithoutTodoInput, graphql_name='files')


class TodoUpdateWithoutCommentsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position', 'title', 'started_at', 'dued_at', 'timezone', 'text', 'html', 'archived', 'done', 'todo_list', 'todo_users', 'activity', 'created_by', 'actions', 'todo_tags', 'todo_custom_fields', 'files', 'checklists')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')
    title = sgqlc.types.Field(String, graphql_name='title')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    text = sgqlc.types.Field(String, graphql_name='text')
    html = sgqlc.types.Field(String, graphql_name='html')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    todo_list = sgqlc.types.Field(TodoListUpdateOneRequiredWithoutTodosInput, graphql_name='todoList')
    todo_users = sgqlc.types.Field('TodoUserUpdateManyWithoutTodoInput', graphql_name='todoUsers')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutTodoInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserUpdateOneWithoutTodosInput', graphql_name='createdBy')
    actions = sgqlc.types.Field(TodoActionUpdateManyWithoutTodoInput, graphql_name='actions')
    todo_tags = sgqlc.types.Field(TodoTagUpdateManyWithoutTodoInput, graphql_name='todoTags')
    todo_custom_fields = sgqlc.types.Field(TodoCustomFieldUpdateManyWithoutTodoInput, graphql_name='todoCustomFields')
    files = sgqlc.types.Field(FileUpdateManyWithoutTodoInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutTodoInput, graphql_name='checklists')


class TodoUpdateWithoutCreatedByDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position', 'title', 'started_at', 'dued_at', 'timezone', 'text', 'html', 'archived', 'done', 'todo_list', 'todo_users', 'activity', 'comments', 'actions', 'todo_tags', 'todo_custom_fields', 'files', 'checklists')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')
    title = sgqlc.types.Field(String, graphql_name='title')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    text = sgqlc.types.Field(String, graphql_name='text')
    html = sgqlc.types.Field(String, graphql_name='html')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    todo_list = sgqlc.types.Field(TodoListUpdateOneRequiredWithoutTodosInput, graphql_name='todoList')
    todo_users = sgqlc.types.Field('TodoUserUpdateManyWithoutTodoInput', graphql_name='todoUsers')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutTodoInput, graphql_name='activity')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutTodoInput, graphql_name='comments')
    actions = sgqlc.types.Field(TodoActionUpdateManyWithoutTodoInput, graphql_name='actions')
    todo_tags = sgqlc.types.Field(TodoTagUpdateManyWithoutTodoInput, graphql_name='todoTags')
    todo_custom_fields = sgqlc.types.Field(TodoCustomFieldUpdateManyWithoutTodoInput, graphql_name='todoCustomFields')
    files = sgqlc.types.Field(FileUpdateManyWithoutTodoInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutTodoInput, graphql_name='checklists')


class TodoUpdateWithoutFilesDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position', 'title', 'started_at', 'dued_at', 'timezone', 'text', 'html', 'archived', 'done', 'todo_list', 'todo_users', 'activity', 'created_by', 'comments', 'actions', 'todo_tags', 'todo_custom_fields', 'checklists')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')
    title = sgqlc.types.Field(String, graphql_name='title')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    text = sgqlc.types.Field(String, graphql_name='text')
    html = sgqlc.types.Field(String, graphql_name='html')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    todo_list = sgqlc.types.Field(TodoListUpdateOneRequiredWithoutTodosInput, graphql_name='todoList')
    todo_users = sgqlc.types.Field('TodoUserUpdateManyWithoutTodoInput', graphql_name='todoUsers')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutTodoInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserUpdateOneWithoutTodosInput', graphql_name='createdBy')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutTodoInput, graphql_name='comments')
    actions = sgqlc.types.Field(TodoActionUpdateManyWithoutTodoInput, graphql_name='actions')
    todo_tags = sgqlc.types.Field(TodoTagUpdateManyWithoutTodoInput, graphql_name='todoTags')
    todo_custom_fields = sgqlc.types.Field(TodoCustomFieldUpdateManyWithoutTodoInput, graphql_name='todoCustomFields')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutTodoInput, graphql_name='checklists')


class TodoUpdateWithoutTodoCustomFieldsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position', 'title', 'started_at', 'dued_at', 'timezone', 'text', 'html', 'archived', 'done', 'todo_list', 'todo_users', 'activity', 'created_by', 'comments', 'actions', 'todo_tags', 'files', 'checklists')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')
    title = sgqlc.types.Field(String, graphql_name='title')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    text = sgqlc.types.Field(String, graphql_name='text')
    html = sgqlc.types.Field(String, graphql_name='html')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    todo_list = sgqlc.types.Field(TodoListUpdateOneRequiredWithoutTodosInput, graphql_name='todoList')
    todo_users = sgqlc.types.Field('TodoUserUpdateManyWithoutTodoInput', graphql_name='todoUsers')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutTodoInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserUpdateOneWithoutTodosInput', graphql_name='createdBy')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutTodoInput, graphql_name='comments')
    actions = sgqlc.types.Field(TodoActionUpdateManyWithoutTodoInput, graphql_name='actions')
    todo_tags = sgqlc.types.Field(TodoTagUpdateManyWithoutTodoInput, graphql_name='todoTags')
    files = sgqlc.types.Field(FileUpdateManyWithoutTodoInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutTodoInput, graphql_name='checklists')


class TodoUpdateWithoutTodoListDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position', 'title', 'started_at', 'dued_at', 'timezone', 'text', 'html', 'archived', 'done', 'todo_users', 'activity', 'created_by', 'comments', 'actions', 'todo_tags', 'todo_custom_fields', 'files', 'checklists')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')
    title = sgqlc.types.Field(String, graphql_name='title')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    text = sgqlc.types.Field(String, graphql_name='text')
    html = sgqlc.types.Field(String, graphql_name='html')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    todo_users = sgqlc.types.Field('TodoUserUpdateManyWithoutTodoInput', graphql_name='todoUsers')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutTodoInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserUpdateOneWithoutTodosInput', graphql_name='createdBy')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutTodoInput, graphql_name='comments')
    actions = sgqlc.types.Field(TodoActionUpdateManyWithoutTodoInput, graphql_name='actions')
    todo_tags = sgqlc.types.Field(TodoTagUpdateManyWithoutTodoInput, graphql_name='todoTags')
    todo_custom_fields = sgqlc.types.Field(TodoCustomFieldUpdateManyWithoutTodoInput, graphql_name='todoCustomFields')
    files = sgqlc.types.Field(FileUpdateManyWithoutTodoInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutTodoInput, graphql_name='checklists')


class TodoUpdateWithoutTodoTagsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position', 'title', 'started_at', 'dued_at', 'timezone', 'text', 'html', 'archived', 'done', 'todo_list', 'todo_users', 'activity', 'created_by', 'comments', 'actions', 'todo_custom_fields', 'files', 'checklists')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')
    title = sgqlc.types.Field(String, graphql_name='title')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    text = sgqlc.types.Field(String, graphql_name='text')
    html = sgqlc.types.Field(String, graphql_name='html')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    todo_list = sgqlc.types.Field(TodoListUpdateOneRequiredWithoutTodosInput, graphql_name='todoList')
    todo_users = sgqlc.types.Field('TodoUserUpdateManyWithoutTodoInput', graphql_name='todoUsers')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutTodoInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserUpdateOneWithoutTodosInput', graphql_name='createdBy')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutTodoInput, graphql_name='comments')
    actions = sgqlc.types.Field(TodoActionUpdateManyWithoutTodoInput, graphql_name='actions')
    todo_custom_fields = sgqlc.types.Field(TodoCustomFieldUpdateManyWithoutTodoInput, graphql_name='todoCustomFields')
    files = sgqlc.types.Field(FileUpdateManyWithoutTodoInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutTodoInput, graphql_name='checklists')


class TodoUpdateWithoutTodoUsersDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'position', 'title', 'started_at', 'dued_at', 'timezone', 'text', 'html', 'archived', 'done', 'todo_list', 'activity', 'created_by', 'comments', 'actions', 'todo_tags', 'todo_custom_fields', 'files', 'checklists')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    position = sgqlc.types.Field(Float, graphql_name='position')
    title = sgqlc.types.Field(String, graphql_name='title')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    text = sgqlc.types.Field(String, graphql_name='text')
    html = sgqlc.types.Field(String, graphql_name='html')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    todo_list = sgqlc.types.Field(TodoListUpdateOneRequiredWithoutTodosInput, graphql_name='todoList')
    activity = sgqlc.types.Field(ActivityUpdateOneWithoutTodoInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserUpdateOneWithoutTodosInput', graphql_name='createdBy')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutTodoInput, graphql_name='comments')
    actions = sgqlc.types.Field(TodoActionUpdateManyWithoutTodoInput, graphql_name='actions')
    todo_tags = sgqlc.types.Field(TodoTagUpdateManyWithoutTodoInput, graphql_name='todoTags')
    todo_custom_fields = sgqlc.types.Field(TodoCustomFieldUpdateManyWithoutTodoInput, graphql_name='todoCustomFields')
    files = sgqlc.types.Field(FileUpdateManyWithoutTodoInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutTodoInput, graphql_name='checklists')


class TodoUpsertWithWhereUniqueWithoutCreatedByInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('TodoWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoUpdateWithoutCreatedByDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoCreateWithoutCreatedByInput), graphql_name='create')


class TodoUpsertWithWhereUniqueWithoutTodoListInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('TodoWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoUpdateWithoutTodoListDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoCreateWithoutTodoListInput), graphql_name='create')


class TodoUpsertWithoutActionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoUpdateWithoutActionsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoCreateWithoutActionsInput), graphql_name='create')


class TodoUpsertWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoUpdateWithoutActivityDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoCreateWithoutActivityInput), graphql_name='create')


class TodoUpsertWithoutChecklistsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoUpdateWithoutChecklistsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoCreateWithoutChecklistsInput), graphql_name='create')


class TodoUpsertWithoutCommentsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoUpdateWithoutCommentsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoCreateWithoutCommentsInput), graphql_name='create')


class TodoUpsertWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoUpdateWithoutFilesDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoCreateWithoutFilesInput), graphql_name='create')


class TodoUpsertWithoutTodoCustomFieldsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoUpdateWithoutTodoCustomFieldsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoCreateWithoutTodoCustomFieldsInput), graphql_name='create')


class TodoUpsertWithoutTodoTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoUpdateWithoutTodoTagsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoCreateWithoutTodoTagsInput), graphql_name='create')


class TodoUpsertWithoutTodoUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoUpdateWithoutTodoUsersDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoCreateWithoutTodoUsersInput), graphql_name='create')


class TodoUserCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'todo', 'user')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    todo = sgqlc.types.Field(sgqlc.types.non_null(TodoCreateOneWithoutTodoUsersInput), graphql_name='todo')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutTodoUsersInput'), graphql_name='user')


class TodoUserCreateManyWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoUserCreateWithoutTodoInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoUserWhereUniqueInput')), graphql_name='connect')


class TodoUserCreateManyWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoUserCreateWithoutUserInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoUserWhereUniqueInput')), graphql_name='connect')


class TodoUserCreateWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'user')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutTodoUsersInput'), graphql_name='user')


class TodoUserCreateWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'todo')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    todo = sgqlc.types.Field(sgqlc.types.non_null(TodoCreateOneWithoutTodoUsersInput), graphql_name='todo')


class TodoUserScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoUserScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoUserScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoUserScalarWhereInput')), graphql_name='NOT')


class TodoUserSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('TodoUserWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoUserSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoUserSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoUserSubscriptionWhereInput')), graphql_name='NOT')


class TodoUserUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'todo', 'user')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    todo = sgqlc.types.Field(TodoUpdateOneRequiredWithoutTodoUsersInput, graphql_name='todo')
    user = sgqlc.types.Field('UserUpdateOneRequiredWithoutTodoUsersInput', graphql_name='user')


class TodoUserUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid',)
    uid = sgqlc.types.Field(String, graphql_name='uid')


class TodoUserUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid',)
    uid = sgqlc.types.Field(String, graphql_name='uid')


class TodoUserUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(TodoUserScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(TodoUserUpdateManyDataInput), graphql_name='data')


class TodoUserUpdateManyWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoUserCreateWithoutTodoInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoUserWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoUserWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoUserWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoUserWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoUserUpdateWithWhereUniqueWithoutTodoInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoUserUpsertWithWhereUniqueWithoutTodoInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoUserScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoUserUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class TodoUserUpdateManyWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoUserCreateWithoutUserInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoUserWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoUserWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoUserWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoUserWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoUserUpdateWithWhereUniqueWithoutUserInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoUserUpsertWithWhereUniqueWithoutUserInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoUserScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoUserUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class TodoUserUpdateWithWhereUniqueWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('TodoUserWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('TodoUserUpdateWithoutTodoDataInput'), graphql_name='data')


class TodoUserUpdateWithWhereUniqueWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('TodoUserWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('TodoUserUpdateWithoutUserDataInput'), graphql_name='data')


class TodoUserUpdateWithoutTodoDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'user')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    user = sgqlc.types.Field('UserUpdateOneRequiredWithoutTodoUsersInput', graphql_name='user')


class TodoUserUpdateWithoutUserDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'todo')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    todo = sgqlc.types.Field(TodoUpdateOneRequiredWithoutTodoUsersInput, graphql_name='todo')


class TodoUserUpsertWithWhereUniqueWithoutTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('TodoUserWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoUserUpdateWithoutTodoDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoUserCreateWithoutTodoInput), graphql_name='create')


class TodoUserUpsertWithWhereUniqueWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('TodoUserWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(TodoUserUpdateWithoutUserDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(TodoUserCreateWithoutUserInput), graphql_name='create')


class TodoUserWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'todo', 'user', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    todo = sgqlc.types.Field('TodoWhereInput', graphql_name='todo')
    user = sgqlc.types.Field('UserWhereInput', graphql_name='user')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoUserWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoUserWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoUserWhereInput')), graphql_name='NOT')


class TodoUserWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class TodoWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'position', 'position_not', 'position_in', 'position_not_in', 'position_lt', 'position_lte', 'position_gt', 'position_gte', 'title', 'title_not', 'title_in', 'title_not_in', 'title_lt', 'title_lte', 'title_gt', 'title_gte', 'title_contains', 'title_not_contains', 'title_starts_with', 'title_not_starts_with', 'title_ends_with', 'title_not_ends_with', 'started_at', 'started_at_not', 'started_at_in', 'started_at_not_in', 'started_at_lt', 'started_at_lte', 'started_at_gt', 'started_at_gte', 'dued_at', 'dued_at_not', 'dued_at_in', 'dued_at_not_in', 'dued_at_lt', 'dued_at_lte', 'dued_at_gt', 'dued_at_gte', 'timezone', 'timezone_not', 'timezone_in', 'timezone_not_in', 'timezone_lt', 'timezone_lte', 'timezone_gt', 'timezone_gte', 'timezone_contains', 'timezone_not_contains', 'timezone_starts_with', 'timezone_not_starts_with', 'timezone_ends_with', 'timezone_not_ends_with', 'text', 'text_not', 'text_in', 'text_not_in', 'text_lt', 'text_lte', 'text_gt', 'text_gte', 'text_contains', 'text_not_contains', 'text_starts_with', 'text_not_starts_with', 'text_ends_with', 'text_not_ends_with', 'html', 'html_not', 'html_in', 'html_not_in', 'html_lt', 'html_lte', 'html_gt', 'html_gte', 'html_contains', 'html_not_contains', 'html_starts_with', 'html_not_starts_with', 'html_ends_with', 'html_not_ends_with', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'archived', 'archived_not', 'done', 'done_not', 'todo_list', 'todo_users_every', 'todo_users_some', 'todo_users_none', 'activity', 'created_by', 'comments_every', 'comments_some', 'comments_none', 'actions_every', 'actions_some', 'actions_none', 'todo_tags_every', 'todo_tags_some', 'todo_tags_none', 'todo_custom_fields_every', 'todo_custom_fields_some', 'todo_custom_fields_none', 'files_every', 'files_some', 'files_none', 'checklists_every', 'checklists_some', 'checklists_none', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    position = sgqlc.types.Field(Float, graphql_name='position')
    position_not = sgqlc.types.Field(Float, graphql_name='position_not')
    position_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_in')
    position_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Float)), graphql_name='position_not_in')
    position_lt = sgqlc.types.Field(Float, graphql_name='position_lt')
    position_lte = sgqlc.types.Field(Float, graphql_name='position_lte')
    position_gt = sgqlc.types.Field(Float, graphql_name='position_gt')
    position_gte = sgqlc.types.Field(Float, graphql_name='position_gte')
    title = sgqlc.types.Field(String, graphql_name='title')
    title_not = sgqlc.types.Field(String, graphql_name='title_not')
    title_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_in')
    title_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='title_not_in')
    title_lt = sgqlc.types.Field(String, graphql_name='title_lt')
    title_lte = sgqlc.types.Field(String, graphql_name='title_lte')
    title_gt = sgqlc.types.Field(String, graphql_name='title_gt')
    title_gte = sgqlc.types.Field(String, graphql_name='title_gte')
    title_contains = sgqlc.types.Field(String, graphql_name='title_contains')
    title_not_contains = sgqlc.types.Field(String, graphql_name='title_not_contains')
    title_starts_with = sgqlc.types.Field(String, graphql_name='title_starts_with')
    title_not_starts_with = sgqlc.types.Field(String, graphql_name='title_not_starts_with')
    title_ends_with = sgqlc.types.Field(String, graphql_name='title_ends_with')
    title_not_ends_with = sgqlc.types.Field(String, graphql_name='title_not_ends_with')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    started_at_not = sgqlc.types.Field(DateTime, graphql_name='startedAt_not')
    started_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='startedAt_in')
    started_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='startedAt_not_in')
    started_at_lt = sgqlc.types.Field(DateTime, graphql_name='startedAt_lt')
    started_at_lte = sgqlc.types.Field(DateTime, graphql_name='startedAt_lte')
    started_at_gt = sgqlc.types.Field(DateTime, graphql_name='startedAt_gt')
    started_at_gte = sgqlc.types.Field(DateTime, graphql_name='startedAt_gte')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    dued_at_not = sgqlc.types.Field(DateTime, graphql_name='duedAt_not')
    dued_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='duedAt_in')
    dued_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='duedAt_not_in')
    dued_at_lt = sgqlc.types.Field(DateTime, graphql_name='duedAt_lt')
    dued_at_lte = sgqlc.types.Field(DateTime, graphql_name='duedAt_lte')
    dued_at_gt = sgqlc.types.Field(DateTime, graphql_name='duedAt_gt')
    dued_at_gte = sgqlc.types.Field(DateTime, graphql_name='duedAt_gte')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    timezone_not = sgqlc.types.Field(String, graphql_name='timezone_not')
    timezone_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='timezone_in')
    timezone_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='timezone_not_in')
    timezone_lt = sgqlc.types.Field(String, graphql_name='timezone_lt')
    timezone_lte = sgqlc.types.Field(String, graphql_name='timezone_lte')
    timezone_gt = sgqlc.types.Field(String, graphql_name='timezone_gt')
    timezone_gte = sgqlc.types.Field(String, graphql_name='timezone_gte')
    timezone_contains = sgqlc.types.Field(String, graphql_name='timezone_contains')
    timezone_not_contains = sgqlc.types.Field(String, graphql_name='timezone_not_contains')
    timezone_starts_with = sgqlc.types.Field(String, graphql_name='timezone_starts_with')
    timezone_not_starts_with = sgqlc.types.Field(String, graphql_name='timezone_not_starts_with')
    timezone_ends_with = sgqlc.types.Field(String, graphql_name='timezone_ends_with')
    timezone_not_ends_with = sgqlc.types.Field(String, graphql_name='timezone_not_ends_with')
    text = sgqlc.types.Field(String, graphql_name='text')
    text_not = sgqlc.types.Field(String, graphql_name='text_not')
    text_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='text_in')
    text_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='text_not_in')
    text_lt = sgqlc.types.Field(String, graphql_name='text_lt')
    text_lte = sgqlc.types.Field(String, graphql_name='text_lte')
    text_gt = sgqlc.types.Field(String, graphql_name='text_gt')
    text_gte = sgqlc.types.Field(String, graphql_name='text_gte')
    text_contains = sgqlc.types.Field(String, graphql_name='text_contains')
    text_not_contains = sgqlc.types.Field(String, graphql_name='text_not_contains')
    text_starts_with = sgqlc.types.Field(String, graphql_name='text_starts_with')
    text_not_starts_with = sgqlc.types.Field(String, graphql_name='text_not_starts_with')
    text_ends_with = sgqlc.types.Field(String, graphql_name='text_ends_with')
    text_not_ends_with = sgqlc.types.Field(String, graphql_name='text_not_ends_with')
    html = sgqlc.types.Field(String, graphql_name='html')
    html_not = sgqlc.types.Field(String, graphql_name='html_not')
    html_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='html_in')
    html_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='html_not_in')
    html_lt = sgqlc.types.Field(String, graphql_name='html_lt')
    html_lte = sgqlc.types.Field(String, graphql_name='html_lte')
    html_gt = sgqlc.types.Field(String, graphql_name='html_gt')
    html_gte = sgqlc.types.Field(String, graphql_name='html_gte')
    html_contains = sgqlc.types.Field(String, graphql_name='html_contains')
    html_not_contains = sgqlc.types.Field(String, graphql_name='html_not_contains')
    html_starts_with = sgqlc.types.Field(String, graphql_name='html_starts_with')
    html_not_starts_with = sgqlc.types.Field(String, graphql_name='html_not_starts_with')
    html_ends_with = sgqlc.types.Field(String, graphql_name='html_ends_with')
    html_not_ends_with = sgqlc.types.Field(String, graphql_name='html_not_ends_with')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    archived_not = sgqlc.types.Field(Boolean, graphql_name='archived_not')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    done_not = sgqlc.types.Field(Boolean, graphql_name='done_not')
    todo_list = sgqlc.types.Field(TodoListWhereInput, graphql_name='todoList')
    todo_users_every = sgqlc.types.Field(TodoUserWhereInput, graphql_name='todoUsers_every')
    todo_users_some = sgqlc.types.Field(TodoUserWhereInput, graphql_name='todoUsers_some')
    todo_users_none = sgqlc.types.Field(TodoUserWhereInput, graphql_name='todoUsers_none')
    activity = sgqlc.types.Field(ActivityWhereInput, graphql_name='activity')
    created_by = sgqlc.types.Field('UserWhereInput', graphql_name='createdBy')
    comments_every = sgqlc.types.Field(CommentWhereInput, graphql_name='comments_every')
    comments_some = sgqlc.types.Field(CommentWhereInput, graphql_name='comments_some')
    comments_none = sgqlc.types.Field(CommentWhereInput, graphql_name='comments_none')
    actions_every = sgqlc.types.Field(TodoActionWhereInput, graphql_name='actions_every')
    actions_some = sgqlc.types.Field(TodoActionWhereInput, graphql_name='actions_some')
    actions_none = sgqlc.types.Field(TodoActionWhereInput, graphql_name='actions_none')
    todo_tags_every = sgqlc.types.Field(TodoTagWhereInput, graphql_name='todoTags_every')
    todo_tags_some = sgqlc.types.Field(TodoTagWhereInput, graphql_name='todoTags_some')
    todo_tags_none = sgqlc.types.Field(TodoTagWhereInput, graphql_name='todoTags_none')
    todo_custom_fields_every = sgqlc.types.Field(TodoCustomFieldWhereInput, graphql_name='todoCustomFields_every')
    todo_custom_fields_some = sgqlc.types.Field(TodoCustomFieldWhereInput, graphql_name='todoCustomFields_some')
    todo_custom_fields_none = sgqlc.types.Field(TodoCustomFieldWhereInput, graphql_name='todoCustomFields_none')
    files_every = sgqlc.types.Field(FileWhereInput, graphql_name='files_every')
    files_some = sgqlc.types.Field(FileWhereInput, graphql_name='files_some')
    files_none = sgqlc.types.Field(FileWhereInput, graphql_name='files_none')
    checklists_every = sgqlc.types.Field(ChecklistWhereInput, graphql_name='checklists_every')
    checklists_some = sgqlc.types.Field(ChecklistWhereInput, graphql_name='checklists_some')
    checklists_none = sgqlc.types.Field(ChecklistWhereInput, graphql_name='checklists_none')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoWhereInput')), graphql_name='NOT')


class TodoWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class TodosFilter(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_ids', 'project_ids', 'todo_ids', 'assignee_ids', 'tag_ids', 'tag_colors', 'tag_titles', 'todo_list_ids', 'todo_list_titles', 'done', 'started_at', 'dued_at', 'dued_at_start', 'dued_at_end', 'due_end', 'due_start', 'search', 'exclude_archived_projects', 'coordinates', 'fields', 'q', 'show_completed', 'op')
    company_ids = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='companyIds')
    project_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='projectIds')
    todo_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='todoIds')
    assignee_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='assigneeIds')
    tag_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='tagIds')
    tag_colors = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='tagColors')
    tag_titles = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='tagTitles')
    todo_list_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='todoListIds')
    todo_list_titles = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='todoListTitles')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    dued_at_start = sgqlc.types.Field(DateTime, graphql_name='duedAtStart')
    dued_at_end = sgqlc.types.Field(DateTime, graphql_name='duedAtEnd')
    due_end = sgqlc.types.Field(DateTime, graphql_name='dueEnd')
    due_start = sgqlc.types.Field(DateTime, graphql_name='dueStart')
    search = sgqlc.types.Field(String, graphql_name='search')
    exclude_archived_projects = sgqlc.types.Field(Boolean, graphql_name='excludeArchivedProjects')
    coordinates = sgqlc.types.Field(JSON, graphql_name='coordinates')
    fields = sgqlc.types.Field(JSON, graphql_name='fields')
    q = sgqlc.types.Field(String, graphql_name='q')
    show_completed = sgqlc.types.Field(Boolean, graphql_name='showCompleted')
    op = sgqlc.types.Field(FilterLogicalOperator, graphql_name='op')


class UndoAITagInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('operation_id',)
    operation_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='operationId')


class UpdateAdminSettingsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('hide_upgrade_ltd', 'hide_book_demo')
    hide_upgrade_ltd = sgqlc.types.Field(Boolean, graphql_name='hideUpgradeLTD')
    hide_book_demo = sgqlc.types.Field(Boolean, graphql_name='hideBookDemo')


class UpdateChatInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'title')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    title = sgqlc.types.Field(String, graphql_name='title')


class UpdateChecklistItemDueDateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('checklist_item_id', 'started_at', 'dued_at')
    checklist_item_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='checklistItemId')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')


class UpdateCompanyAccessLevelInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('user_id', 'access_level')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='userId')
    access_level = sgqlc.types.Field(sgqlc.types.non_null(UserAccessLevel), graphql_name='accessLevel')


class UpdateCompanyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id', 'free_trial_expired_at', 'new_owner_email')
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')
    free_trial_expired_at = sgqlc.types.Field(String, graphql_name='freeTrialExpiredAt')
    new_owner_email = sgqlc.types.Field(String, graphql_name='newOwnerEmail')


class UpdateCompanySubscriptionPlanCardInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id', 'payment_method_id', 'token')
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')
    payment_method_id = sgqlc.types.Field(String, graphql_name='paymentMethodId')
    token = sgqlc.types.Field(String, graphql_name='token')


class UpdateCompanyThemeInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id', 'theme')
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')
    theme = sgqlc.types.Field(JSON, graphql_name='theme')


class UpdateCustomDomainInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'name')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')


class UpdateDiscussionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'title')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    title = sgqlc.types.Field(String, graphql_name='title')


class UpdateDocumentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'title', 'content', 'content_base64', 'wiki', 'user_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    title = sgqlc.types.Field(String, graphql_name='title')
    content = sgqlc.types.Field(String, graphql_name='content')
    content_base64 = sgqlc.types.Field(String, graphql_name='contentBase64')
    wiki = sgqlc.types.Field(Boolean, graphql_name='wiki')
    user_id = sgqlc.types.Field(String, graphql_name='userId')


class UpdateEmailInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('email', 'code_current', 'code_new')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    code_current = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='codeCurrent')
    code_new = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='codeNew')


class UpdateEmailRequestInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('email',)
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')


class UpdateEmailTemplateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'enabled', 'name', 'subject', 'body', 'cta_text', 'cta_link', 'footer', 'disclaimer', 'signature')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    enabled = sgqlc.types.Field(Boolean, graphql_name='enabled')
    name = sgqlc.types.Field(String, graphql_name='name')
    subject = sgqlc.types.Field(String, graphql_name='subject')
    body = sgqlc.types.Field(String, graphql_name='body')
    cta_text = sgqlc.types.Field(String, graphql_name='ctaText')
    cta_link = sgqlc.types.Field(String, graphql_name='ctaLink')
    footer = sgqlc.types.Field(String, graphql_name='footer')
    disclaimer = sgqlc.types.Field(String, graphql_name='disclaimer')
    signature = sgqlc.types.Field(String, graphql_name='signature')


class UpdateFileInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'shared', 'name', 'status')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    shared = sgqlc.types.Field(Boolean, graphql_name='shared')
    name = sgqlc.types.Field(String, graphql_name='name')
    status = sgqlc.types.Field(FileStatus, graphql_name='status')


class UpdateFolderPositionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('folder_id', 'position')
    folder_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='folderId')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')


class UpdateFormInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'title', 'description', 'footer_text', 'show_footer', 'submit_text', 'hide_branding', 'is_active', 'primary_color', 'response_text', 'theme', 'todo_list_id', 'image_url', 'redirect_url', 'snapshot_url', 'assignee_ids', 'tag_ids', 'form_fields')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    title = sgqlc.types.Field(String, graphql_name='title')
    description = sgqlc.types.Field(String, graphql_name='description')
    footer_text = sgqlc.types.Field(String, graphql_name='footerText')
    show_footer = sgqlc.types.Field(Boolean, graphql_name='showFooter')
    submit_text = sgqlc.types.Field(String, graphql_name='submitText')
    hide_branding = sgqlc.types.Field(Boolean, graphql_name='hideBranding')
    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    primary_color = sgqlc.types.Field(String, graphql_name='primaryColor')
    response_text = sgqlc.types.Field(String, graphql_name='responseText')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    todo_list_id = sgqlc.types.Field(String, graphql_name='todoListId')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    redirect_url = sgqlc.types.Field(String, graphql_name='redirectURL')
    snapshot_url = sgqlc.types.Field(String, graphql_name='snapshotURL')
    assignee_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='assigneeIds')
    tag_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='tagIds')
    form_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FormFieldsInput)), graphql_name='formFields')


class UpdateImportProgressInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id', 'user_id', 'total_chunks')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    user_id = sgqlc.types.Field(String, graphql_name='userId')
    total_chunks = sgqlc.types.Field(Int, graphql_name='totalChunks')


class UpdateLicensesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('license_ids', 'email', 'source')
    license_ids = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='licenseIds')
    email = sgqlc.types.Field(String, graphql_name='email')
    source = sgqlc.types.Field(String, graphql_name='source')


class UpdateLinkInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'title', 'url', 'position', 'members_only')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    title = sgqlc.types.Field(String, graphql_name='title')
    url = sgqlc.types.Field(String, graphql_name='url')
    position = sgqlc.types.Field(Float, graphql_name='position')
    members_only = sgqlc.types.Field(Boolean, graphql_name='membersOnly')


class UpdateOAuthConnectionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'name')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    name = sgqlc.types.Field(String, graphql_name='name')


class UpdatePortableDocumentFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'position_x', 'position_y', 'width', 'height', 'page_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    position_x = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='positionX')
    position_y = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='positionY')
    width = sgqlc.types.Field(Float, graphql_name='width')
    height = sgqlc.types.Field(Float, graphql_name='height')
    page_id = sgqlc.types.Field(String, graphql_name='pageId')


class UpdatePortableDocumentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'name')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    name = sgqlc.types.Field(String, graphql_name='name')


class UpdateProjectAccessLevelInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('user_id', 'access_level', 'role_id')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='userId')
    access_level = sgqlc.types.Field(sgqlc.types.non_null(UserAccessLevel), graphql_name='accessLevel')
    role_id = sgqlc.types.Field(String, graphql_name='roleId')


class UpdateProjectLastAccessedAtInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('project_id', 'last_accessed_at')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    last_accessed_at = sgqlc.types.Field(String, graphql_name='lastAccessedAt')


class UpdateProjectUserRoleInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('role_id', 'project_id', 'name', 'description', 'allow_invite_others', 'show_only_assigned_todos', 'show_only_mentioned_comments', 'is_activity_enabled', 'is_forms_enabled', 'is_wiki_enabled', 'is_chat_enabled', 'is_docs_enabled', 'is_files_enabled', 'is_records_enabled', 'is_people_enabled', 'record_tag_filter', 'custom_fields', 'todo_lists')
    role_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='roleId')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    name = sgqlc.types.Field(String, graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    allow_invite_others = sgqlc.types.Field(Boolean, graphql_name='allowInviteOthers')
    show_only_assigned_todos = sgqlc.types.Field(Boolean, graphql_name='showOnlyAssignedTodos')
    show_only_mentioned_comments = sgqlc.types.Field(Boolean, graphql_name='showOnlyMentionedComments')
    is_activity_enabled = sgqlc.types.Field(Boolean, graphql_name='isActivityEnabled')
    is_forms_enabled = sgqlc.types.Field(Boolean, graphql_name='isFormsEnabled')
    is_wiki_enabled = sgqlc.types.Field(Boolean, graphql_name='isWikiEnabled')
    is_chat_enabled = sgqlc.types.Field(Boolean, graphql_name='isChatEnabled')
    is_docs_enabled = sgqlc.types.Field(Boolean, graphql_name='isDocsEnabled')
    is_files_enabled = sgqlc.types.Field(Boolean, graphql_name='isFilesEnabled')
    is_records_enabled = sgqlc.types.Field(Boolean, graphql_name='isRecordsEnabled')
    is_people_enabled = sgqlc.types.Field(Boolean, graphql_name='isPeopleEnabled')
    record_tag_filter = sgqlc.types.Field(RecordTagFilterInput, graphql_name='recordTagFilter')
    custom_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CreateProjectUserRoleCustomFieldInput)), graphql_name='customFields')
    todo_lists = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CreateProjectUserRoleTodoListInput)), graphql_name='todoLists')


class UpdateRepeatingTodoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('todo_id', 'todo_list_id', 'type', 'fields', 'from_', 'interval', 'end', 'repeat_counts')
    todo_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoId')
    todo_list_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoListId')
    type = sgqlc.types.Field(sgqlc.types.non_null(RepeatingTodoRepeatType), graphql_name='type')
    fields = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(RepeatingTodoAllowedField)), graphql_name='fields')
    from_ = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='from')
    interval = sgqlc.types.Field(RepeatingTodoIntervalInput, graphql_name='interval')
    end = sgqlc.types.Field(RepeatingTodoEndInput, graphql_name='end')
    repeat_counts = sgqlc.types.Field(Int, graphql_name='repeatCounts')


class UpdateSmtpCredentialInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'host', 'port', 'username', 'password', 'sender_name', 'sender_email')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    host = sgqlc.types.Field(String, graphql_name='host')
    port = sgqlc.types.Field(Int, graphql_name='port')
    username = sgqlc.types.Field(String, graphql_name='username')
    password = sgqlc.types.Field(String, graphql_name='password')
    sender_name = sgqlc.types.Field(String, graphql_name='senderName')
    sender_email = sgqlc.types.Field(String, graphql_name='senderEmail')


class UpdateTodoDependencyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('type', 'todo_id', 'other_todo_id')
    type = sgqlc.types.Field(sgqlc.types.non_null(TodoDependencyType), graphql_name='type')
    todo_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoId')
    other_todo_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='otherTodoId')


class UpdateTodosInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('unassignee_id', 'remove_tag_id', 'assignee_id', 'tag_id', 'todo_list_id', 'done', 'color', 'started_at', 'dued_at', 'timezone', 'filter')
    unassignee_id = sgqlc.types.Field(String, graphql_name='unassigneeId')
    remove_tag_id = sgqlc.types.Field(String, graphql_name='removeTagId')
    assignee_id = sgqlc.types.Field(String, graphql_name='assigneeId')
    tag_id = sgqlc.types.Field(String, graphql_name='tagId')
    todo_list_id = sgqlc.types.Field(String, graphql_name='todoListId')
    done = sgqlc.types.Field(Boolean, graphql_name='done')
    color = sgqlc.types.Field(String, graphql_name='color')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    filter = sgqlc.types.Field('UpdateTodosInputFilter', graphql_name='filter')


class UpdateTodosInputFilter(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('todo_list_id', 'todo_ids', 'todos_filter')
    todo_list_id = sgqlc.types.Field(String, graphql_name='todoListId')
    todo_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='todoIds')
    todos_filter = sgqlc.types.Field(TodosFilter, graphql_name='todosFilter')


class UpdateWebhookInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('webhook_id', 'enabled', 'name', 'url', 'events', 'project_ids')
    webhook_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='webhookId')
    enabled = sgqlc.types.Field(Boolean, graphql_name='enabled')
    name = sgqlc.types.Field(String, graphql_name='name')
    url = sgqlc.types.Field(String, graphql_name='url')
    events = sgqlc.types.Field(sgqlc.types.list_of(WebhookEvent), graphql_name='events')
    project_ids = sgqlc.types.Field(sgqlc.types.list_of(String), graphql_name='projectIds')


class UpgradeCompanyCheckoutURLInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id',)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class UpgradeCompanyLicenseInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('license_id', 'plan_id', 'company_id')
    license_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='licenseId')
    plan_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='planId')
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')


class UpgradeLicenseInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('license_id', 'plan_id', 'activation_email')
    license_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='licenseId')
    plan_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='planId')
    activation_email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='activationEmail')


class UploadCompanyImageInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('file', 'company_id')
    file = sgqlc.types.Field(sgqlc.types.non_null(Upload), graphql_name='file')
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')


class UploadFileInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('file', 'project_id', 'company_id')
    file = sgqlc.types.Field(sgqlc.types.non_null(Upload), graphql_name='file')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')


class UploadFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('files', 'project_id', 'company_id')
    files = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Upload))), graphql_name='files')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    company_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='companyId')


class UploadImageInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('file', 'type', 'entity_id')
    file = sgqlc.types.Field(sgqlc.types.non_null(Upload), graphql_name='file')
    type = sgqlc.types.Field(sgqlc.types.non_null(ImageType), graphql_name='type')
    entity_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='entityId')


class UploadProfileImageInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('file',)
    file = sgqlc.types.Field(sgqlc.types.non_null(Upload), graphql_name='file')


class UploadProjectImageInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('file', 'project_id')
    file = sgqlc.types.Field(sgqlc.types.non_null(Upload), graphql_name='file')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')


class UpsertFormFieldInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('form_id', 'form_field_id', 'custom_field_id', 'field', 'name', 'placeholder', 'position', 'required', 'hidden', 'extra_info', 'add_to_description')
    form_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='formId')
    form_field_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='formFieldId')
    custom_field_id = sgqlc.types.Field(String, graphql_name='customFieldId')
    field = sgqlc.types.Field(sgqlc.types.non_null(FormFieldsField), graphql_name='field')
    name = sgqlc.types.Field(String, graphql_name='name')
    placeholder = sgqlc.types.Field(String, graphql_name='placeholder')
    position = sgqlc.types.Field(Float, graphql_name='position')
    required = sgqlc.types.Field(Boolean, graphql_name='required')
    hidden = sgqlc.types.Field(Boolean, graphql_name='hidden')
    extra_info = sgqlc.types.Field(String, graphql_name='extraInfo')
    add_to_description = sgqlc.types.Field(Boolean, graphql_name='addToDescription')


class UserActivityCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'activity', 'user', 'is_seen', 'is_read')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    activity = sgqlc.types.Field(sgqlc.types.non_null(ActivityCreateOneWithoutUserActivitiesInput), graphql_name='activity')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutUserActivitiesInput'), graphql_name='user')
    is_seen = sgqlc.types.Field(Boolean, graphql_name='isSeen')
    is_read = sgqlc.types.Field(Boolean, graphql_name='isRead')


class UserActivityCreateManyWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserActivityCreateWithoutActivityInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserActivityWhereUniqueInput')), graphql_name='connect')


class UserActivityCreateManyWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserActivityCreateWithoutUserInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserActivityWhereUniqueInput')), graphql_name='connect')


class UserActivityCreateWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'user', 'is_seen', 'is_read')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    user = sgqlc.types.Field(sgqlc.types.non_null('UserCreateOneWithoutUserActivitiesInput'), graphql_name='user')
    is_seen = sgqlc.types.Field(Boolean, graphql_name='isSeen')
    is_read = sgqlc.types.Field(Boolean, graphql_name='isRead')


class UserActivityCreateWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'activity', 'is_seen', 'is_read')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    activity = sgqlc.types.Field(sgqlc.types.non_null(ActivityCreateOneWithoutUserActivitiesInput), graphql_name='activity')
    is_seen = sgqlc.types.Field(Boolean, graphql_name='isSeen')
    is_read = sgqlc.types.Field(Boolean, graphql_name='isRead')


class UserActivityScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'is_seen', 'is_seen_not', 'is_read', 'is_read_not', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    is_seen = sgqlc.types.Field(Boolean, graphql_name='isSeen')
    is_seen_not = sgqlc.types.Field(Boolean, graphql_name='isSeen_not')
    is_read = sgqlc.types.Field(Boolean, graphql_name='isRead')
    is_read_not = sgqlc.types.Field(Boolean, graphql_name='isRead_not')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserActivityScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserActivityScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserActivityScalarWhereInput')), graphql_name='NOT')


class UserActivitySubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('UserActivityWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserActivitySubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserActivitySubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserActivitySubscriptionWhereInput')), graphql_name='NOT')


class UserActivityUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'activity', 'user', 'is_seen', 'is_read')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    activity = sgqlc.types.Field(ActivityUpdateOneRequiredWithoutUserActivitiesInput, graphql_name='activity')
    user = sgqlc.types.Field('UserUpdateOneRequiredWithoutUserActivitiesInput', graphql_name='user')
    is_seen = sgqlc.types.Field(Boolean, graphql_name='isSeen')
    is_read = sgqlc.types.Field(Boolean, graphql_name='isRead')


class UserActivityUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'is_seen', 'is_read')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    is_seen = sgqlc.types.Field(Boolean, graphql_name='isSeen')
    is_read = sgqlc.types.Field(Boolean, graphql_name='isRead')


class UserActivityUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'is_seen', 'is_read')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    is_seen = sgqlc.types.Field(Boolean, graphql_name='isSeen')
    is_read = sgqlc.types.Field(Boolean, graphql_name='isRead')


class UserActivityUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(UserActivityScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(UserActivityUpdateManyDataInput), graphql_name='data')


class UserActivityUpdateManyWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(UserActivityCreateWithoutActivityInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserActivityWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserActivityWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserActivityWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserActivityWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserActivityUpdateWithWhereUniqueWithoutActivityInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserActivityUpsertWithWhereUniqueWithoutActivityInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(UserActivityScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(UserActivityUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class UserActivityUpdateManyWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(UserActivityCreateWithoutUserInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserActivityWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserActivityWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserActivityWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserActivityWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserActivityUpdateWithWhereUniqueWithoutUserInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserActivityUpsertWithWhereUniqueWithoutUserInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(UserActivityScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(UserActivityUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class UserActivityUpdateWithWhereUniqueWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('UserActivityWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('UserActivityUpdateWithoutActivityDataInput'), graphql_name='data')


class UserActivityUpdateWithWhereUniqueWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('UserActivityWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('UserActivityUpdateWithoutUserDataInput'), graphql_name='data')


class UserActivityUpdateWithoutActivityDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'user', 'is_seen', 'is_read')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    user = sgqlc.types.Field('UserUpdateOneRequiredWithoutUserActivitiesInput', graphql_name='user')
    is_seen = sgqlc.types.Field(Boolean, graphql_name='isSeen')
    is_read = sgqlc.types.Field(Boolean, graphql_name='isRead')


class UserActivityUpdateWithoutUserDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'activity', 'is_seen', 'is_read')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    activity = sgqlc.types.Field(ActivityUpdateOneRequiredWithoutUserActivitiesInput, graphql_name='activity')
    is_seen = sgqlc.types.Field(Boolean, graphql_name='isSeen')
    is_read = sgqlc.types.Field(Boolean, graphql_name='isRead')


class UserActivityUpsertWithWhereUniqueWithoutActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('UserActivityWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(UserActivityUpdateWithoutActivityDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(UserActivityCreateWithoutActivityInput), graphql_name='create')


class UserActivityUpsertWithWhereUniqueWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('UserActivityWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(UserActivityUpdateWithoutUserDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(UserActivityCreateWithoutUserInput), graphql_name='create')


class UserActivityWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'activity', 'user', 'is_seen', 'is_seen_not', 'is_read', 'is_read_not', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    activity = sgqlc.types.Field(ActivityWhereInput, graphql_name='activity')
    user = sgqlc.types.Field('UserWhereInput', graphql_name='user')
    is_seen = sgqlc.types.Field(Boolean, graphql_name='isSeen')
    is_seen_not = sgqlc.types.Field(Boolean, graphql_name='isSeen_not')
    is_read = sgqlc.types.Field(Boolean, graphql_name='isRead')
    is_read_not = sgqlc.types.Field(Boolean, graphql_name='isRead_not')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserActivityWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserActivityWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserActivityWhereInput')), graphql_name='NOT')


class UserActivityWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')


class UserCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(sgqlc.types.non_null(Role), graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityCreateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityCreateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityCreateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserCreateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserCreateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserCreateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field('UserPushTokenCreateManyWithoutUserInput', graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoCreateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListCreateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentCreateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanCreateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileCreateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemCreateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserCreateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionCreateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserCreateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserCreateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenCreateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkCreateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutCreatedByInput, graphql_name='documents')


class UserCreateOneInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(UserCreateInput, graphql_name='create')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserCreateOneWithoutAffectedActivitiesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('UserCreateWithoutAffectedActivitiesInput', graphql_name='create')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserCreateOneWithoutAutomationActionAssigneesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('UserCreateWithoutAutomationActionAssigneesInput', graphql_name='create')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserCreateOneWithoutAutomationTriggerAssigneesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('UserCreateWithoutAutomationTriggerAssigneesInput', graphql_name='create')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserCreateOneWithoutAutomationsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('UserCreateWithoutAutomationsInput', graphql_name='create')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserCreateOneWithoutChecklistItemUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('UserCreateWithoutChecklistItemUsersInput', graphql_name='create')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserCreateOneWithoutChecklistItemsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('UserCreateWithoutChecklistItemsInput', graphql_name='create')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserCreateOneWithoutChecklistsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('UserCreateWithoutChecklistsInput', graphql_name='create')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserCreateOneWithoutCommentsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('UserCreateWithoutCommentsInput', graphql_name='create')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserCreateOneWithoutCompanyUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('UserCreateWithoutCompanyUsersInput', graphql_name='create')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserCreateOneWithoutCreatedActivitiesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('UserCreateWithoutCreatedActivitiesInput', graphql_name='create')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserCreateOneWithoutDocumentsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('UserCreateWithoutDocumentsInput', graphql_name='create')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserCreateOneWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('UserCreateWithoutFilesInput', graphql_name='create')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserCreateOneWithoutFormUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('UserCreateWithoutFormUsersInput', graphql_name='create')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserCreateOneWithoutFormsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('UserCreateWithoutFormsInput', graphql_name='create')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserCreateOneWithoutInvitationsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('UserCreateWithoutInvitationsInput', graphql_name='create')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserCreateOneWithoutLinksInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('UserCreateWithoutLinksInput', graphql_name='create')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserCreateOneWithoutPersonalAccessTokensInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('UserCreateWithoutPersonalAccessTokensInput', graphql_name='create')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserCreateOneWithoutProjectUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('UserCreateWithoutProjectUsersInput', graphql_name='create')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserCreateOneWithoutPushTokensInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('UserCreateWithoutPushTokensInput', graphql_name='create')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserCreateOneWithoutQuestionUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('UserCreateWithoutQuestionUsersInput', graphql_name='create')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserCreateOneWithoutQuestionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('UserCreateWithoutQuestionsInput', graphql_name='create')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserCreateOneWithoutSubscriptionPlansInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('UserCreateWithoutSubscriptionPlansInput', graphql_name='create')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserCreateOneWithoutTodoListsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('UserCreateWithoutTodoListsInput', graphql_name='create')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserCreateOneWithoutTodoUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('UserCreateWithoutTodoUsersInput', graphql_name='create')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserCreateOneWithoutTodosInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('UserCreateWithoutTodosInput', graphql_name='create')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserCreateOneWithoutUserActivitiesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field('UserCreateWithoutUserActivitiesInput', graphql_name='create')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserCreateWithoutAffectedActivitiesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(sgqlc.types.non_null(Role), graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityCreateManyWithoutCreatedByInput, graphql_name='createdActivities')
    user_activities = sgqlc.types.Field(UserActivityCreateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserCreateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserCreateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserCreateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field('UserPushTokenCreateManyWithoutUserInput', graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoCreateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListCreateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentCreateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanCreateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileCreateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemCreateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserCreateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionCreateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserCreateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserCreateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenCreateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkCreateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutCreatedByInput, graphql_name='documents')


class UserCreateWithoutAutomationActionAssigneesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(sgqlc.types.non_null(Role), graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityCreateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityCreateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityCreateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserCreateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserCreateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserCreateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field('UserPushTokenCreateManyWithoutUserInput', graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoCreateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListCreateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentCreateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanCreateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileCreateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemCreateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserCreateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionCreateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserCreateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserCreateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenCreateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkCreateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutCreatedByInput, graphql_name='documents')


class UserCreateWithoutAutomationTriggerAssigneesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(sgqlc.types.non_null(Role), graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityCreateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityCreateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityCreateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserCreateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserCreateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserCreateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field('UserPushTokenCreateManyWithoutUserInput', graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoCreateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListCreateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentCreateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanCreateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileCreateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemCreateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserCreateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionCreateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserCreateManyWithoutUserInput, graphql_name='questionUsers')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserCreateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenCreateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkCreateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutCreatedByInput, graphql_name='documents')


class UserCreateWithoutAutomationsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(sgqlc.types.non_null(Role), graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityCreateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityCreateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityCreateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserCreateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserCreateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserCreateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field('UserPushTokenCreateManyWithoutUserInput', graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoCreateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListCreateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentCreateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanCreateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileCreateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemCreateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserCreateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionCreateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserCreateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    forms = sgqlc.types.Field(FormCreateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserCreateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenCreateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkCreateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutCreatedByInput, graphql_name='documents')


class UserCreateWithoutChecklistItemUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(sgqlc.types.non_null(Role), graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityCreateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityCreateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityCreateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserCreateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserCreateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserCreateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field('UserPushTokenCreateManyWithoutUserInput', graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoCreateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListCreateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentCreateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanCreateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileCreateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemCreateManyWithoutCreatedByInput, graphql_name='checklistItems')
    questions = sgqlc.types.Field(QuestionCreateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserCreateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserCreateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenCreateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkCreateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutCreatedByInput, graphql_name='documents')


class UserCreateWithoutChecklistItemsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(sgqlc.types.non_null(Role), graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityCreateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityCreateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityCreateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserCreateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserCreateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserCreateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field('UserPushTokenCreateManyWithoutUserInput', graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoCreateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListCreateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentCreateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanCreateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileCreateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserCreateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionCreateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserCreateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserCreateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenCreateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkCreateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutCreatedByInput, graphql_name='documents')


class UserCreateWithoutChecklistsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(sgqlc.types.non_null(Role), graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityCreateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityCreateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityCreateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserCreateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserCreateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserCreateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field('UserPushTokenCreateManyWithoutUserInput', graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoCreateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListCreateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentCreateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanCreateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileCreateManyWithoutUserInput, graphql_name='files')
    checklist_items = sgqlc.types.Field(ChecklistItemCreateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserCreateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionCreateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserCreateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserCreateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenCreateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkCreateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutCreatedByInput, graphql_name='documents')


class UserCreateWithoutCommentsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(sgqlc.types.non_null(Role), graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityCreateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityCreateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityCreateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserCreateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserCreateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserCreateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field('UserPushTokenCreateManyWithoutUserInput', graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoCreateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListCreateManyWithoutCreatedByInput, graphql_name='todoLists')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanCreateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileCreateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemCreateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserCreateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionCreateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserCreateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserCreateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenCreateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkCreateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutCreatedByInput, graphql_name='documents')


class UserCreateWithoutCompanyUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(sgqlc.types.non_null(Role), graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityCreateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityCreateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityCreateManyWithoutUserInput, graphql_name='userActivities')
    project_users = sgqlc.types.Field(ProjectUserCreateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserCreateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field('UserPushTokenCreateManyWithoutUserInput', graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoCreateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListCreateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentCreateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanCreateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileCreateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemCreateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserCreateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionCreateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserCreateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserCreateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenCreateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkCreateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutCreatedByInput, graphql_name='documents')


class UserCreateWithoutCreatedActivitiesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(sgqlc.types.non_null(Role), graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    affected_activities = sgqlc.types.Field(ActivityCreateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityCreateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserCreateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserCreateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserCreateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field('UserPushTokenCreateManyWithoutUserInput', graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoCreateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListCreateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentCreateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanCreateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileCreateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemCreateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserCreateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionCreateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserCreateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserCreateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenCreateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkCreateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutCreatedByInput, graphql_name='documents')


class UserCreateWithoutDocumentsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(sgqlc.types.non_null(Role), graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityCreateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityCreateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityCreateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserCreateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserCreateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserCreateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field('UserPushTokenCreateManyWithoutUserInput', graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoCreateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListCreateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentCreateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanCreateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileCreateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemCreateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserCreateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionCreateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserCreateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserCreateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenCreateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkCreateManyWithoutCreatedByInput, graphql_name='links')


class UserCreateWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(sgqlc.types.non_null(Role), graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityCreateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityCreateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityCreateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserCreateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserCreateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserCreateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field('UserPushTokenCreateManyWithoutUserInput', graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoCreateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListCreateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentCreateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanCreateManyWithoutUserInput, graphql_name='subscriptionPlans')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemCreateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserCreateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionCreateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserCreateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserCreateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenCreateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkCreateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutCreatedByInput, graphql_name='documents')


class UserCreateWithoutFormUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'personal_access_tokens', 'links', 'documents')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(sgqlc.types.non_null(Role), graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityCreateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityCreateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityCreateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserCreateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserCreateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserCreateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field('UserPushTokenCreateManyWithoutUserInput', graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoCreateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListCreateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentCreateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanCreateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileCreateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemCreateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserCreateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionCreateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserCreateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutCreatedByInput, graphql_name='forms')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenCreateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkCreateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutCreatedByInput, graphql_name='documents')


class UserCreateWithoutFormsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'form_users', 'personal_access_tokens', 'links', 'documents')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(sgqlc.types.non_null(Role), graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityCreateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityCreateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityCreateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserCreateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserCreateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserCreateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field('UserPushTokenCreateManyWithoutUserInput', graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoCreateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListCreateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentCreateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanCreateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileCreateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemCreateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserCreateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionCreateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserCreateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutCreatedByInput, graphql_name='automations')
    form_users = sgqlc.types.Field(FormUserCreateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenCreateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkCreateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutCreatedByInput, graphql_name='documents')


class UserCreateWithoutInvitationsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(sgqlc.types.non_null(Role), graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityCreateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityCreateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityCreateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserCreateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserCreateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserCreateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field('UserPushTokenCreateManyWithoutUserInput', graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoCreateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListCreateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentCreateManyWithoutUserInput, graphql_name='comments')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanCreateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileCreateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemCreateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserCreateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionCreateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserCreateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserCreateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenCreateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkCreateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutCreatedByInput, graphql_name='documents')


class UserCreateWithoutLinksInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'documents')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(sgqlc.types.non_null(Role), graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityCreateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityCreateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityCreateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserCreateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserCreateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserCreateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field('UserPushTokenCreateManyWithoutUserInput', graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoCreateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListCreateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentCreateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanCreateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileCreateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemCreateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserCreateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionCreateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserCreateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserCreateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenCreateManyWithoutUserInput, graphql_name='personalAccessTokens')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutCreatedByInput, graphql_name='documents')


class UserCreateWithoutPersonalAccessTokensInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'links', 'documents')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(sgqlc.types.non_null(Role), graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityCreateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityCreateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityCreateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserCreateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserCreateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserCreateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field('UserPushTokenCreateManyWithoutUserInput', graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoCreateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListCreateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentCreateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanCreateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileCreateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemCreateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserCreateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionCreateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserCreateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserCreateManyWithoutUserInput, graphql_name='formUsers')
    links = sgqlc.types.Field(LinkCreateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutCreatedByInput, graphql_name='documents')


class UserCreateWithoutProjectUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(sgqlc.types.non_null(Role), graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityCreateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityCreateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityCreateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserCreateManyWithoutUserInput, graphql_name='companyUsers')
    todo_users = sgqlc.types.Field(TodoUserCreateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field('UserPushTokenCreateManyWithoutUserInput', graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoCreateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListCreateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentCreateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanCreateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileCreateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemCreateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserCreateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionCreateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserCreateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserCreateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenCreateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkCreateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutCreatedByInput, graphql_name='documents')


class UserCreateWithoutPushTokensInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(sgqlc.types.non_null(Role), graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityCreateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityCreateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityCreateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserCreateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserCreateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserCreateManyWithoutUserInput, graphql_name='todoUsers')
    todos = sgqlc.types.Field(TodoCreateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListCreateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentCreateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanCreateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileCreateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemCreateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserCreateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionCreateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserCreateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserCreateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenCreateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkCreateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutCreatedByInput, graphql_name='documents')


class UserCreateWithoutQuestionUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(sgqlc.types.non_null(Role), graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityCreateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityCreateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityCreateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserCreateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserCreateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserCreateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field('UserPushTokenCreateManyWithoutUserInput', graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoCreateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListCreateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentCreateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanCreateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileCreateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemCreateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserCreateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionCreateManyWithoutCreatedByInput, graphql_name='questions')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserCreateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenCreateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkCreateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutCreatedByInput, graphql_name='documents')


class UserCreateWithoutQuestionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(sgqlc.types.non_null(Role), graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityCreateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityCreateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityCreateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserCreateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserCreateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserCreateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field('UserPushTokenCreateManyWithoutUserInput', graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoCreateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListCreateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentCreateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanCreateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileCreateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemCreateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserCreateManyWithoutUserInput, graphql_name='checklistItemUsers')
    question_users = sgqlc.types.Field(QuestionUserCreateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserCreateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenCreateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkCreateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutCreatedByInput, graphql_name='documents')


class UserCreateWithoutSubscriptionPlansInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(sgqlc.types.non_null(Role), graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityCreateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityCreateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityCreateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserCreateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserCreateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserCreateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field('UserPushTokenCreateManyWithoutUserInput', graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoCreateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListCreateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentCreateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutInvitedByInput, graphql_name='invitations')
    files = sgqlc.types.Field(FileCreateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemCreateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserCreateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionCreateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserCreateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserCreateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenCreateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkCreateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutCreatedByInput, graphql_name='documents')


class UserCreateWithoutTodoListsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(sgqlc.types.non_null(Role), graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityCreateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityCreateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityCreateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserCreateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserCreateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserCreateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field('UserPushTokenCreateManyWithoutUserInput', graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoCreateManyWithoutCreatedByInput, graphql_name='todos')
    comments = sgqlc.types.Field(CommentCreateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanCreateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileCreateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemCreateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserCreateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionCreateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserCreateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserCreateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenCreateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkCreateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutCreatedByInput, graphql_name='documents')


class UserCreateWithoutTodoUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(sgqlc.types.non_null(Role), graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityCreateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityCreateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityCreateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserCreateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserCreateManyWithoutUserInput, graphql_name='projectUsers')
    push_tokens = sgqlc.types.Field('UserPushTokenCreateManyWithoutUserInput', graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoCreateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListCreateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentCreateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanCreateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileCreateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemCreateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserCreateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionCreateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserCreateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserCreateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenCreateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkCreateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutCreatedByInput, graphql_name='documents')


class UserCreateWithoutTodosInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(sgqlc.types.non_null(Role), graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityCreateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityCreateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityCreateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserCreateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserCreateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserCreateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field('UserPushTokenCreateManyWithoutUserInput', graphql_name='pushTokens')
    todo_lists = sgqlc.types.Field(TodoListCreateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentCreateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanCreateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileCreateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemCreateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserCreateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionCreateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserCreateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserCreateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenCreateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkCreateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutCreatedByInput, graphql_name='documents')


class UserCreateWithoutUserActivitiesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(sgqlc.types.non_null(Role), graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageCreateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityCreateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityCreateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    company_users = sgqlc.types.Field(CompanyUserCreateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserCreateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserCreateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field('UserPushTokenCreateManyWithoutUserInput', graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoCreateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListCreateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentCreateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationCreateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanCreateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileCreateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistCreateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemCreateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserCreateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionCreateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserCreateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeCreateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationCreateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormCreateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserCreateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenCreateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkCreateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentCreateManyWithoutCreatedByInput, graphql_name='documents')


class UserListFilter(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('ids', 'project_ids', 'search', 'exclude_archived_projects')
    ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='ids')
    project_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='projectIds')
    search = sgqlc.types.Field(String, graphql_name='search')
    exclude_archived_projects = sgqlc.types.Field(Boolean, graphql_name='excludeArchivedProjects')


class UserPresenceFilter(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id',)
    company_id = sgqlc.types.Field(String, graphql_name='companyId')


class UserPushTokenCreateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'token', 'user')
    id = sgqlc.types.Field(ID, graphql_name='id')
    token = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='token')
    user = sgqlc.types.Field(sgqlc.types.non_null(UserCreateOneWithoutPushTokensInput), graphql_name='user')


class UserPushTokenCreateManyWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'connect')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserPushTokenCreateWithoutUserInput')), graphql_name='create')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserPushTokenWhereUniqueInput')), graphql_name='connect')


class UserPushTokenCreateWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'token')
    id = sgqlc.types.Field(ID, graphql_name='id')
    token = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='token')


class UserPushTokenScalarWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'token', 'token_not', 'token_in', 'token_not_in', 'token_lt', 'token_lte', 'token_gt', 'token_gte', 'token_contains', 'token_not_contains', 'token_starts_with', 'token_not_starts_with', 'token_ends_with', 'token_not_ends_with', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    token = sgqlc.types.Field(String, graphql_name='token')
    token_not = sgqlc.types.Field(String, graphql_name='token_not')
    token_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='token_in')
    token_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='token_not_in')
    token_lt = sgqlc.types.Field(String, graphql_name='token_lt')
    token_lte = sgqlc.types.Field(String, graphql_name='token_lte')
    token_gt = sgqlc.types.Field(String, graphql_name='token_gt')
    token_gte = sgqlc.types.Field(String, graphql_name='token_gte')
    token_contains = sgqlc.types.Field(String, graphql_name='token_contains')
    token_not_contains = sgqlc.types.Field(String, graphql_name='token_not_contains')
    token_starts_with = sgqlc.types.Field(String, graphql_name='token_starts_with')
    token_not_starts_with = sgqlc.types.Field(String, graphql_name='token_not_starts_with')
    token_ends_with = sgqlc.types.Field(String, graphql_name='token_ends_with')
    token_not_ends_with = sgqlc.types.Field(String, graphql_name='token_not_ends_with')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserPushTokenScalarWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserPushTokenScalarWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserPushTokenScalarWhereInput')), graphql_name='NOT')


class UserPushTokenSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('UserPushTokenWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserPushTokenSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserPushTokenSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserPushTokenSubscriptionWhereInput')), graphql_name='NOT')


class UserPushTokenUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('token', 'user')
    token = sgqlc.types.Field(String, graphql_name='token')
    user = sgqlc.types.Field('UserUpdateOneRequiredWithoutPushTokensInput', graphql_name='user')


class UserPushTokenUpdateManyDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('token',)
    token = sgqlc.types.Field(String, graphql_name='token')


class UserPushTokenUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('token',)
    token = sgqlc.types.Field(String, graphql_name='token')


class UserPushTokenUpdateManyWithWhereNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null(UserPushTokenScalarWhereInput), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null(UserPushTokenUpdateManyDataInput), graphql_name='data')


class UserPushTokenUpdateManyWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'delete', 'connect', 'set', 'disconnect', 'update', 'upsert', 'delete_many', 'update_many')
    create = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(UserPushTokenCreateWithoutUserInput)), graphql_name='create')
    delete = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserPushTokenWhereUniqueInput')), graphql_name='delete')
    connect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserPushTokenWhereUniqueInput')), graphql_name='connect')
    set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserPushTokenWhereUniqueInput')), graphql_name='set')
    disconnect = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserPushTokenWhereUniqueInput')), graphql_name='disconnect')
    update = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserPushTokenUpdateWithWhereUniqueWithoutUserInput')), graphql_name='update')
    upsert = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserPushTokenUpsertWithWhereUniqueWithoutUserInput')), graphql_name='upsert')
    delete_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(UserPushTokenScalarWhereInput)), graphql_name='deleteMany')
    update_many = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(UserPushTokenUpdateManyWithWhereNestedInput)), graphql_name='updateMany')


class UserPushTokenUpdateWithWhereUniqueWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'data')
    where = sgqlc.types.Field(sgqlc.types.non_null('UserPushTokenWhereUniqueInput'), graphql_name='where')
    data = sgqlc.types.Field(sgqlc.types.non_null('UserPushTokenUpdateWithoutUserDataInput'), graphql_name='data')


class UserPushTokenUpdateWithoutUserDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('token',)
    token = sgqlc.types.Field(String, graphql_name='token')


class UserPushTokenUpsertWithWhereUniqueWithoutUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('where', 'update', 'create')
    where = sgqlc.types.Field(sgqlc.types.non_null('UserPushTokenWhereUniqueInput'), graphql_name='where')
    update = sgqlc.types.Field(sgqlc.types.non_null(UserPushTokenUpdateWithoutUserDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(UserPushTokenCreateWithoutUserInput), graphql_name='create')


class UserPushTokenWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'token', 'token_not', 'token_in', 'token_not_in', 'token_lt', 'token_lte', 'token_gt', 'token_gte', 'token_contains', 'token_not_contains', 'token_starts_with', 'token_not_starts_with', 'token_ends_with', 'token_not_ends_with', 'user', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    token = sgqlc.types.Field(String, graphql_name='token')
    token_not = sgqlc.types.Field(String, graphql_name='token_not')
    token_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='token_in')
    token_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='token_not_in')
    token_lt = sgqlc.types.Field(String, graphql_name='token_lt')
    token_lte = sgqlc.types.Field(String, graphql_name='token_lte')
    token_gt = sgqlc.types.Field(String, graphql_name='token_gt')
    token_gte = sgqlc.types.Field(String, graphql_name='token_gte')
    token_contains = sgqlc.types.Field(String, graphql_name='token_contains')
    token_not_contains = sgqlc.types.Field(String, graphql_name='token_not_contains')
    token_starts_with = sgqlc.types.Field(String, graphql_name='token_starts_with')
    token_not_starts_with = sgqlc.types.Field(String, graphql_name='token_not_starts_with')
    token_ends_with = sgqlc.types.Field(String, graphql_name='token_ends_with')
    token_not_ends_with = sgqlc.types.Field(String, graphql_name='token_not_ends_with')
    user = sgqlc.types.Field('UserWhereInput', graphql_name='user')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserPushTokenWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserPushTokenWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserPushTokenWhereInput')), graphql_name='NOT')


class UserPushTokenWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'token')
    id = sgqlc.types.Field(ID, graphql_name='id')
    token = sgqlc.types.Field(String, graphql_name='token')


class UserSubscriptionWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mutation_in', 'updated_fields_contains', 'updated_fields_contains_every', 'updated_fields_contains_some', 'node', 'and_', 'or_', 'not_')
    mutation_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(MutationType)), graphql_name='mutation_in')
    updated_fields_contains = sgqlc.types.Field(String, graphql_name='updatedFields_contains')
    updated_fields_contains_every = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_every')
    updated_fields_contains_some = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields_contains_some')
    node = sgqlc.types.Field('UserWhereInput', graphql_name='node')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserSubscriptionWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserSubscriptionWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserSubscriptionWhereInput')), graphql_name='NOT')


class UserUpdateDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    username = sgqlc.types.Field(String, graphql_name='username')
    email = sgqlc.types.Field(String, graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(Role, graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityUpdateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityUpdateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityUpdateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserUpdateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserUpdateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserUpdateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field(UserPushTokenUpdateManyWithoutUserInput, graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoUpdateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListUpdateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanUpdateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileUpdateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemUpdateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserUpdateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionUpdateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserUpdateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserUpdateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenUpdateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkUpdateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutCreatedByInput, graphql_name='documents')


class UserUpdateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    username = sgqlc.types.Field(String, graphql_name='username')
    email = sgqlc.types.Field(String, graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(Role, graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityUpdateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityUpdateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityUpdateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserUpdateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserUpdateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserUpdateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field(UserPushTokenUpdateManyWithoutUserInput, graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoUpdateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListUpdateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanUpdateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileUpdateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemUpdateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserUpdateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionUpdateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserUpdateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserUpdateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenUpdateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkUpdateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutCreatedByInput, graphql_name='documents')


class UserUpdateManyMutationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'is_welcome_guide_completed', 'timezone', 'theme')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    username = sgqlc.types.Field(String, graphql_name='username')
    email = sgqlc.types.Field(String, graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(Role, graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')


class UserUpdateOneInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(UserCreateInput, graphql_name='create')
    update = sgqlc.types.Field(UserUpdateDataInput, graphql_name='update')
    upsert = sgqlc.types.Field('UserUpsertNestedInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserUpdateOneRequiredInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(UserCreateInput, graphql_name='create')
    update = sgqlc.types.Field(UserUpdateDataInput, graphql_name='update')
    upsert = sgqlc.types.Field('UserUpsertNestedInput', graphql_name='upsert')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserUpdateOneRequiredWithoutAutomationActionAssigneesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(UserCreateWithoutAutomationActionAssigneesInput, graphql_name='create')
    update = sgqlc.types.Field('UserUpdateWithoutAutomationActionAssigneesDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('UserUpsertWithoutAutomationActionAssigneesInput', graphql_name='upsert')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserUpdateOneRequiredWithoutAutomationTriggerAssigneesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(UserCreateWithoutAutomationTriggerAssigneesInput, graphql_name='create')
    update = sgqlc.types.Field('UserUpdateWithoutAutomationTriggerAssigneesDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('UserUpsertWithoutAutomationTriggerAssigneesInput', graphql_name='upsert')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserUpdateOneRequiredWithoutChecklistItemUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(UserCreateWithoutChecklistItemUsersInput, graphql_name='create')
    update = sgqlc.types.Field('UserUpdateWithoutChecklistItemUsersDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('UserUpsertWithoutChecklistItemUsersInput', graphql_name='upsert')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserUpdateOneRequiredWithoutChecklistItemsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(UserCreateWithoutChecklistItemsInput, graphql_name='create')
    update = sgqlc.types.Field('UserUpdateWithoutChecklistItemsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('UserUpsertWithoutChecklistItemsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserUpdateOneRequiredWithoutChecklistsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(UserCreateWithoutChecklistsInput, graphql_name='create')
    update = sgqlc.types.Field('UserUpdateWithoutChecklistsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('UserUpsertWithoutChecklistsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserUpdateOneRequiredWithoutCommentsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(UserCreateWithoutCommentsInput, graphql_name='create')
    update = sgqlc.types.Field('UserUpdateWithoutCommentsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('UserUpsertWithoutCommentsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserUpdateOneRequiredWithoutCompanyUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(UserCreateWithoutCompanyUsersInput, graphql_name='create')
    update = sgqlc.types.Field('UserUpdateWithoutCompanyUsersDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('UserUpsertWithoutCompanyUsersInput', graphql_name='upsert')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserUpdateOneRequiredWithoutCreatedActivitiesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(UserCreateWithoutCreatedActivitiesInput, graphql_name='create')
    update = sgqlc.types.Field('UserUpdateWithoutCreatedActivitiesDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('UserUpsertWithoutCreatedActivitiesInput', graphql_name='upsert')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserUpdateOneRequiredWithoutDocumentsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(UserCreateWithoutDocumentsInput, graphql_name='create')
    update = sgqlc.types.Field('UserUpdateWithoutDocumentsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('UserUpsertWithoutDocumentsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserUpdateOneRequiredWithoutFormUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(UserCreateWithoutFormUsersInput, graphql_name='create')
    update = sgqlc.types.Field('UserUpdateWithoutFormUsersDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('UserUpsertWithoutFormUsersInput', graphql_name='upsert')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserUpdateOneRequiredWithoutFormsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(UserCreateWithoutFormsInput, graphql_name='create')
    update = sgqlc.types.Field('UserUpdateWithoutFormsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('UserUpsertWithoutFormsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserUpdateOneRequiredWithoutInvitationsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(UserCreateWithoutInvitationsInput, graphql_name='create')
    update = sgqlc.types.Field('UserUpdateWithoutInvitationsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('UserUpsertWithoutInvitationsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserUpdateOneRequiredWithoutLinksInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(UserCreateWithoutLinksInput, graphql_name='create')
    update = sgqlc.types.Field('UserUpdateWithoutLinksDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('UserUpsertWithoutLinksInput', graphql_name='upsert')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserUpdateOneRequiredWithoutPersonalAccessTokensInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(UserCreateWithoutPersonalAccessTokensInput, graphql_name='create')
    update = sgqlc.types.Field('UserUpdateWithoutPersonalAccessTokensDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('UserUpsertWithoutPersonalAccessTokensInput', graphql_name='upsert')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserUpdateOneRequiredWithoutProjectUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(UserCreateWithoutProjectUsersInput, graphql_name='create')
    update = sgqlc.types.Field('UserUpdateWithoutProjectUsersDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('UserUpsertWithoutProjectUsersInput', graphql_name='upsert')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserUpdateOneRequiredWithoutPushTokensInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(UserCreateWithoutPushTokensInput, graphql_name='create')
    update = sgqlc.types.Field('UserUpdateWithoutPushTokensDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('UserUpsertWithoutPushTokensInput', graphql_name='upsert')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserUpdateOneRequiredWithoutQuestionUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(UserCreateWithoutQuestionUsersInput, graphql_name='create')
    update = sgqlc.types.Field('UserUpdateWithoutQuestionUsersDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('UserUpsertWithoutQuestionUsersInput', graphql_name='upsert')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserUpdateOneRequiredWithoutQuestionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(UserCreateWithoutQuestionsInput, graphql_name='create')
    update = sgqlc.types.Field('UserUpdateWithoutQuestionsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('UserUpsertWithoutQuestionsInput', graphql_name='upsert')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserUpdateOneRequiredWithoutSubscriptionPlansInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(UserCreateWithoutSubscriptionPlansInput, graphql_name='create')
    update = sgqlc.types.Field('UserUpdateWithoutSubscriptionPlansDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('UserUpsertWithoutSubscriptionPlansInput', graphql_name='upsert')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserUpdateOneRequiredWithoutTodoUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(UserCreateWithoutTodoUsersInput, graphql_name='create')
    update = sgqlc.types.Field('UserUpdateWithoutTodoUsersDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('UserUpsertWithoutTodoUsersInput', graphql_name='upsert')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserUpdateOneRequiredWithoutUserActivitiesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'connect')
    create = sgqlc.types.Field(UserCreateWithoutUserActivitiesInput, graphql_name='create')
    update = sgqlc.types.Field('UserUpdateWithoutUserActivitiesDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('UserUpsertWithoutUserActivitiesInput', graphql_name='upsert')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserUpdateOneWithoutAffectedActivitiesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(UserCreateWithoutAffectedActivitiesInput, graphql_name='create')
    update = sgqlc.types.Field('UserUpdateWithoutAffectedActivitiesDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('UserUpsertWithoutAffectedActivitiesInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserUpdateOneWithoutAutomationsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(UserCreateWithoutAutomationsInput, graphql_name='create')
    update = sgqlc.types.Field('UserUpdateWithoutAutomationsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('UserUpsertWithoutAutomationsInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserUpdateOneWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(UserCreateWithoutFilesInput, graphql_name='create')
    update = sgqlc.types.Field('UserUpdateWithoutFilesDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('UserUpsertWithoutFilesInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserUpdateOneWithoutTodoListsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(UserCreateWithoutTodoListsInput, graphql_name='create')
    update = sgqlc.types.Field('UserUpdateWithoutTodoListsDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('UserUpsertWithoutTodoListsInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserUpdateOneWithoutTodosInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('create', 'update', 'upsert', 'delete', 'disconnect', 'connect')
    create = sgqlc.types.Field(UserCreateWithoutTodosInput, graphql_name='create')
    update = sgqlc.types.Field('UserUpdateWithoutTodosDataInput', graphql_name='update')
    upsert = sgqlc.types.Field('UserUpsertWithoutTodosInput', graphql_name='upsert')
    delete = sgqlc.types.Field(Boolean, graphql_name='delete')
    disconnect = sgqlc.types.Field(Boolean, graphql_name='disconnect')
    connect = sgqlc.types.Field('UserWhereUniqueInput', graphql_name='connect')


class UserUpdateWithoutAffectedActivitiesDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    username = sgqlc.types.Field(String, graphql_name='username')
    email = sgqlc.types.Field(String, graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(Role, graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityUpdateManyWithoutCreatedByInput, graphql_name='createdActivities')
    user_activities = sgqlc.types.Field(UserActivityUpdateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserUpdateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserUpdateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserUpdateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field(UserPushTokenUpdateManyWithoutUserInput, graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoUpdateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListUpdateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanUpdateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileUpdateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemUpdateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserUpdateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionUpdateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserUpdateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserUpdateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenUpdateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkUpdateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutCreatedByInput, graphql_name='documents')


class UserUpdateWithoutAutomationActionAssigneesDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    username = sgqlc.types.Field(String, graphql_name='username')
    email = sgqlc.types.Field(String, graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(Role, graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityUpdateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityUpdateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityUpdateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserUpdateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserUpdateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserUpdateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field(UserPushTokenUpdateManyWithoutUserInput, graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoUpdateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListUpdateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanUpdateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileUpdateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemUpdateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserUpdateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionUpdateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserUpdateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserUpdateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenUpdateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkUpdateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutCreatedByInput, graphql_name='documents')


class UserUpdateWithoutAutomationTriggerAssigneesDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    username = sgqlc.types.Field(String, graphql_name='username')
    email = sgqlc.types.Field(String, graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(Role, graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityUpdateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityUpdateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityUpdateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserUpdateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserUpdateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserUpdateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field(UserPushTokenUpdateManyWithoutUserInput, graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoUpdateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListUpdateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanUpdateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileUpdateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemUpdateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserUpdateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionUpdateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserUpdateManyWithoutUserInput, graphql_name='questionUsers')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserUpdateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenUpdateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkUpdateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutCreatedByInput, graphql_name='documents')


class UserUpdateWithoutAutomationsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    username = sgqlc.types.Field(String, graphql_name='username')
    email = sgqlc.types.Field(String, graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(Role, graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityUpdateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityUpdateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityUpdateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserUpdateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserUpdateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserUpdateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field(UserPushTokenUpdateManyWithoutUserInput, graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoUpdateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListUpdateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanUpdateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileUpdateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemUpdateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserUpdateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionUpdateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserUpdateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    forms = sgqlc.types.Field(FormUpdateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserUpdateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenUpdateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkUpdateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutCreatedByInput, graphql_name='documents')


class UserUpdateWithoutChecklistItemUsersDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    username = sgqlc.types.Field(String, graphql_name='username')
    email = sgqlc.types.Field(String, graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(Role, graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityUpdateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityUpdateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityUpdateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserUpdateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserUpdateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserUpdateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field(UserPushTokenUpdateManyWithoutUserInput, graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoUpdateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListUpdateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanUpdateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileUpdateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemUpdateManyWithoutCreatedByInput, graphql_name='checklistItems')
    questions = sgqlc.types.Field(QuestionUpdateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserUpdateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserUpdateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenUpdateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkUpdateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutCreatedByInput, graphql_name='documents')


class UserUpdateWithoutChecklistItemsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    username = sgqlc.types.Field(String, graphql_name='username')
    email = sgqlc.types.Field(String, graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(Role, graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityUpdateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityUpdateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityUpdateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserUpdateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserUpdateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserUpdateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field(UserPushTokenUpdateManyWithoutUserInput, graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoUpdateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListUpdateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanUpdateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileUpdateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserUpdateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionUpdateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserUpdateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserUpdateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenUpdateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkUpdateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutCreatedByInput, graphql_name='documents')


class UserUpdateWithoutChecklistsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    username = sgqlc.types.Field(String, graphql_name='username')
    email = sgqlc.types.Field(String, graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(Role, graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityUpdateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityUpdateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityUpdateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserUpdateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserUpdateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserUpdateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field(UserPushTokenUpdateManyWithoutUserInput, graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoUpdateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListUpdateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanUpdateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileUpdateManyWithoutUserInput, graphql_name='files')
    checklist_items = sgqlc.types.Field(ChecklistItemUpdateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserUpdateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionUpdateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserUpdateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserUpdateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenUpdateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkUpdateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutCreatedByInput, graphql_name='documents')


class UserUpdateWithoutCommentsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    username = sgqlc.types.Field(String, graphql_name='username')
    email = sgqlc.types.Field(String, graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(Role, graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityUpdateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityUpdateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityUpdateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserUpdateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserUpdateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserUpdateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field(UserPushTokenUpdateManyWithoutUserInput, graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoUpdateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListUpdateManyWithoutCreatedByInput, graphql_name='todoLists')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanUpdateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileUpdateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemUpdateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserUpdateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionUpdateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserUpdateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserUpdateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenUpdateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkUpdateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutCreatedByInput, graphql_name='documents')


class UserUpdateWithoutCompanyUsersDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    username = sgqlc.types.Field(String, graphql_name='username')
    email = sgqlc.types.Field(String, graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(Role, graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityUpdateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityUpdateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityUpdateManyWithoutUserInput, graphql_name='userActivities')
    project_users = sgqlc.types.Field(ProjectUserUpdateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserUpdateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field(UserPushTokenUpdateManyWithoutUserInput, graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoUpdateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListUpdateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanUpdateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileUpdateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemUpdateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserUpdateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionUpdateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserUpdateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserUpdateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenUpdateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkUpdateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutCreatedByInput, graphql_name='documents')


class UserUpdateWithoutCreatedActivitiesDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    username = sgqlc.types.Field(String, graphql_name='username')
    email = sgqlc.types.Field(String, graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(Role, graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    affected_activities = sgqlc.types.Field(ActivityUpdateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityUpdateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserUpdateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserUpdateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserUpdateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field(UserPushTokenUpdateManyWithoutUserInput, graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoUpdateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListUpdateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanUpdateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileUpdateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemUpdateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserUpdateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionUpdateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserUpdateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserUpdateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenUpdateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkUpdateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutCreatedByInput, graphql_name='documents')


class UserUpdateWithoutDocumentsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    username = sgqlc.types.Field(String, graphql_name='username')
    email = sgqlc.types.Field(String, graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(Role, graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityUpdateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityUpdateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityUpdateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserUpdateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserUpdateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserUpdateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field(UserPushTokenUpdateManyWithoutUserInput, graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoUpdateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListUpdateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanUpdateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileUpdateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemUpdateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserUpdateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionUpdateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserUpdateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserUpdateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenUpdateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkUpdateManyWithoutCreatedByInput, graphql_name='links')


class UserUpdateWithoutFilesDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    username = sgqlc.types.Field(String, graphql_name='username')
    email = sgqlc.types.Field(String, graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(Role, graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityUpdateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityUpdateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityUpdateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserUpdateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserUpdateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserUpdateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field(UserPushTokenUpdateManyWithoutUserInput, graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoUpdateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListUpdateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanUpdateManyWithoutUserInput, graphql_name='subscriptionPlans')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemUpdateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserUpdateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionUpdateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserUpdateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserUpdateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenUpdateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkUpdateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutCreatedByInput, graphql_name='documents')


class UserUpdateWithoutFormUsersDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'personal_access_tokens', 'links', 'documents')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    username = sgqlc.types.Field(String, graphql_name='username')
    email = sgqlc.types.Field(String, graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(Role, graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityUpdateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityUpdateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityUpdateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserUpdateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserUpdateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserUpdateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field(UserPushTokenUpdateManyWithoutUserInput, graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoUpdateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListUpdateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanUpdateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileUpdateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemUpdateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserUpdateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionUpdateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserUpdateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutCreatedByInput, graphql_name='forms')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenUpdateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkUpdateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutCreatedByInput, graphql_name='documents')


class UserUpdateWithoutFormsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'form_users', 'personal_access_tokens', 'links', 'documents')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    username = sgqlc.types.Field(String, graphql_name='username')
    email = sgqlc.types.Field(String, graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(Role, graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityUpdateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityUpdateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityUpdateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserUpdateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserUpdateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserUpdateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field(UserPushTokenUpdateManyWithoutUserInput, graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoUpdateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListUpdateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanUpdateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileUpdateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemUpdateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserUpdateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionUpdateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserUpdateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutCreatedByInput, graphql_name='automations')
    form_users = sgqlc.types.Field(FormUserUpdateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenUpdateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkUpdateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutCreatedByInput, graphql_name='documents')


class UserUpdateWithoutInvitationsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    username = sgqlc.types.Field(String, graphql_name='username')
    email = sgqlc.types.Field(String, graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(Role, graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityUpdateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityUpdateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityUpdateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserUpdateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserUpdateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserUpdateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field(UserPushTokenUpdateManyWithoutUserInput, graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoUpdateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListUpdateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutUserInput, graphql_name='comments')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanUpdateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileUpdateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemUpdateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserUpdateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionUpdateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserUpdateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserUpdateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenUpdateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkUpdateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutCreatedByInput, graphql_name='documents')


class UserUpdateWithoutLinksDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'documents')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    username = sgqlc.types.Field(String, graphql_name='username')
    email = sgqlc.types.Field(String, graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(Role, graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityUpdateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityUpdateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityUpdateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserUpdateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserUpdateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserUpdateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field(UserPushTokenUpdateManyWithoutUserInput, graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoUpdateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListUpdateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanUpdateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileUpdateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemUpdateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserUpdateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionUpdateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserUpdateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserUpdateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenUpdateManyWithoutUserInput, graphql_name='personalAccessTokens')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutCreatedByInput, graphql_name='documents')


class UserUpdateWithoutPersonalAccessTokensDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'links', 'documents')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    username = sgqlc.types.Field(String, graphql_name='username')
    email = sgqlc.types.Field(String, graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(Role, graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityUpdateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityUpdateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityUpdateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserUpdateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserUpdateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserUpdateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field(UserPushTokenUpdateManyWithoutUserInput, graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoUpdateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListUpdateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanUpdateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileUpdateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemUpdateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserUpdateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionUpdateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserUpdateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserUpdateManyWithoutUserInput, graphql_name='formUsers')
    links = sgqlc.types.Field(LinkUpdateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutCreatedByInput, graphql_name='documents')


class UserUpdateWithoutProjectUsersDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    username = sgqlc.types.Field(String, graphql_name='username')
    email = sgqlc.types.Field(String, graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(Role, graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityUpdateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityUpdateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityUpdateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserUpdateManyWithoutUserInput, graphql_name='companyUsers')
    todo_users = sgqlc.types.Field(TodoUserUpdateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field(UserPushTokenUpdateManyWithoutUserInput, graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoUpdateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListUpdateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanUpdateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileUpdateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemUpdateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserUpdateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionUpdateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserUpdateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserUpdateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenUpdateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkUpdateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutCreatedByInput, graphql_name='documents')


class UserUpdateWithoutPushTokensDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    username = sgqlc.types.Field(String, graphql_name='username')
    email = sgqlc.types.Field(String, graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(Role, graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityUpdateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityUpdateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityUpdateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserUpdateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserUpdateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserUpdateManyWithoutUserInput, graphql_name='todoUsers')
    todos = sgqlc.types.Field(TodoUpdateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListUpdateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanUpdateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileUpdateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemUpdateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserUpdateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionUpdateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserUpdateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserUpdateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenUpdateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkUpdateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutCreatedByInput, graphql_name='documents')


class UserUpdateWithoutQuestionUsersDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    username = sgqlc.types.Field(String, graphql_name='username')
    email = sgqlc.types.Field(String, graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(Role, graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityUpdateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityUpdateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityUpdateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserUpdateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserUpdateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserUpdateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field(UserPushTokenUpdateManyWithoutUserInput, graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoUpdateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListUpdateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanUpdateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileUpdateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemUpdateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserUpdateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionUpdateManyWithoutCreatedByInput, graphql_name='questions')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserUpdateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenUpdateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkUpdateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutCreatedByInput, graphql_name='documents')


class UserUpdateWithoutQuestionsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    username = sgqlc.types.Field(String, graphql_name='username')
    email = sgqlc.types.Field(String, graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(Role, graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityUpdateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityUpdateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityUpdateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserUpdateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserUpdateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserUpdateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field(UserPushTokenUpdateManyWithoutUserInput, graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoUpdateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListUpdateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanUpdateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileUpdateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemUpdateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserUpdateManyWithoutUserInput, graphql_name='checklistItemUsers')
    question_users = sgqlc.types.Field(QuestionUserUpdateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserUpdateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenUpdateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkUpdateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutCreatedByInput, graphql_name='documents')


class UserUpdateWithoutSubscriptionPlansDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    username = sgqlc.types.Field(String, graphql_name='username')
    email = sgqlc.types.Field(String, graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(Role, graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityUpdateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityUpdateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityUpdateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserUpdateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserUpdateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserUpdateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field(UserPushTokenUpdateManyWithoutUserInput, graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoUpdateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListUpdateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutInvitedByInput, graphql_name='invitations')
    files = sgqlc.types.Field(FileUpdateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemUpdateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserUpdateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionUpdateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserUpdateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserUpdateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenUpdateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkUpdateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutCreatedByInput, graphql_name='documents')


class UserUpdateWithoutTodoListsDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    username = sgqlc.types.Field(String, graphql_name='username')
    email = sgqlc.types.Field(String, graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(Role, graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityUpdateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityUpdateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityUpdateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserUpdateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserUpdateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserUpdateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field(UserPushTokenUpdateManyWithoutUserInput, graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoUpdateManyWithoutCreatedByInput, graphql_name='todos')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanUpdateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileUpdateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemUpdateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserUpdateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionUpdateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserUpdateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserUpdateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenUpdateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkUpdateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutCreatedByInput, graphql_name='documents')


class UserUpdateWithoutTodoUsersDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    username = sgqlc.types.Field(String, graphql_name='username')
    email = sgqlc.types.Field(String, graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(Role, graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityUpdateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityUpdateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityUpdateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserUpdateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserUpdateManyWithoutUserInput, graphql_name='projectUsers')
    push_tokens = sgqlc.types.Field(UserPushTokenUpdateManyWithoutUserInput, graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoUpdateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListUpdateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanUpdateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileUpdateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemUpdateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserUpdateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionUpdateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserUpdateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserUpdateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenUpdateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkUpdateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutCreatedByInput, graphql_name='documents')


class UserUpdateWithoutTodosDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    username = sgqlc.types.Field(String, graphql_name='username')
    email = sgqlc.types.Field(String, graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(Role, graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityUpdateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityUpdateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    user_activities = sgqlc.types.Field(UserActivityUpdateManyWithoutUserInput, graphql_name='userActivities')
    company_users = sgqlc.types.Field(CompanyUserUpdateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserUpdateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserUpdateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field(UserPushTokenUpdateManyWithoutUserInput, graphql_name='pushTokens')
    todo_lists = sgqlc.types.Field(TodoListUpdateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanUpdateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileUpdateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemUpdateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserUpdateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionUpdateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserUpdateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserUpdateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenUpdateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkUpdateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutCreatedByInput, graphql_name='documents')


class UserUpdateWithoutUserActivitiesDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'image', 'is_welcome_guide_completed', 'timezone', 'theme', 'created_activities', 'affected_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    username = sgqlc.types.Field(String, graphql_name='username')
    email = sgqlc.types.Field(String, graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(Role, graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    image = sgqlc.types.Field(ImageUpdateOneInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    created_activities = sgqlc.types.Field(ActivityUpdateManyWithoutCreatedByInput, graphql_name='createdActivities')
    affected_activities = sgqlc.types.Field(ActivityUpdateManyWithoutAffectedByInput, graphql_name='affectedActivities')
    company_users = sgqlc.types.Field(CompanyUserUpdateManyWithoutUserInput, graphql_name='companyUsers')
    project_users = sgqlc.types.Field(ProjectUserUpdateManyWithoutUserInput, graphql_name='projectUsers')
    todo_users = sgqlc.types.Field(TodoUserUpdateManyWithoutUserInput, graphql_name='todoUsers')
    push_tokens = sgqlc.types.Field(UserPushTokenUpdateManyWithoutUserInput, graphql_name='pushTokens')
    todos = sgqlc.types.Field(TodoUpdateManyWithoutCreatedByInput, graphql_name='todos')
    todo_lists = sgqlc.types.Field(TodoListUpdateManyWithoutCreatedByInput, graphql_name='todoLists')
    comments = sgqlc.types.Field(CommentUpdateManyWithoutUserInput, graphql_name='comments')
    invitations = sgqlc.types.Field(InvitationUpdateManyWithoutInvitedByInput, graphql_name='invitations')
    subscription_plans = sgqlc.types.Field(CompanySubscriptionPlanUpdateManyWithoutUserInput, graphql_name='subscriptionPlans')
    files = sgqlc.types.Field(FileUpdateManyWithoutUserInput, graphql_name='files')
    checklists = sgqlc.types.Field(ChecklistUpdateManyWithoutCreatedByInput, graphql_name='checklists')
    checklist_items = sgqlc.types.Field(ChecklistItemUpdateManyWithoutCreatedByInput, graphql_name='checklistItems')
    checklist_item_users = sgqlc.types.Field(ChecklistItemUserUpdateManyWithoutUserInput, graphql_name='checklistItemUsers')
    questions = sgqlc.types.Field(QuestionUpdateManyWithoutCreatedByInput, graphql_name='questions')
    question_users = sgqlc.types.Field(QuestionUserUpdateManyWithoutUserInput, graphql_name='questionUsers')
    automation_trigger_assignees = sgqlc.types.Field(AutomationTriggerAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationTriggerAssignees')
    automation_action_assignees = sgqlc.types.Field(AutomationActionAssigneeUpdateManyWithoutAssigneeInput, graphql_name='automationActionAssignees')
    automations = sgqlc.types.Field(AutomationUpdateManyWithoutCreatedByInput, graphql_name='automations')
    forms = sgqlc.types.Field(FormUpdateManyWithoutCreatedByInput, graphql_name='forms')
    form_users = sgqlc.types.Field(FormUserUpdateManyWithoutUserInput, graphql_name='formUsers')
    personal_access_tokens = sgqlc.types.Field(PersonalAccessTokenUpdateManyWithoutUserInput, graphql_name='personalAccessTokens')
    links = sgqlc.types.Field(LinkUpdateManyWithoutCreatedByInput, graphql_name='links')
    documents = sgqlc.types.Field(DocumentUpdateManyWithoutCreatedByInput, graphql_name='documents')


class UserUpsertNestedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(UserUpdateDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(UserCreateInput), graphql_name='create')


class UserUpsertWithoutAffectedActivitiesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(UserUpdateWithoutAffectedActivitiesDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(UserCreateWithoutAffectedActivitiesInput), graphql_name='create')


class UserUpsertWithoutAutomationActionAssigneesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(UserUpdateWithoutAutomationActionAssigneesDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(UserCreateWithoutAutomationActionAssigneesInput), graphql_name='create')


class UserUpsertWithoutAutomationTriggerAssigneesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(UserUpdateWithoutAutomationTriggerAssigneesDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(UserCreateWithoutAutomationTriggerAssigneesInput), graphql_name='create')


class UserUpsertWithoutAutomationsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(UserUpdateWithoutAutomationsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(UserCreateWithoutAutomationsInput), graphql_name='create')


class UserUpsertWithoutChecklistItemUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(UserUpdateWithoutChecklistItemUsersDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(UserCreateWithoutChecklistItemUsersInput), graphql_name='create')


class UserUpsertWithoutChecklistItemsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(UserUpdateWithoutChecklistItemsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(UserCreateWithoutChecklistItemsInput), graphql_name='create')


class UserUpsertWithoutChecklistsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(UserUpdateWithoutChecklistsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(UserCreateWithoutChecklistsInput), graphql_name='create')


class UserUpsertWithoutCommentsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(UserUpdateWithoutCommentsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(UserCreateWithoutCommentsInput), graphql_name='create')


class UserUpsertWithoutCompanyUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(UserUpdateWithoutCompanyUsersDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(UserCreateWithoutCompanyUsersInput), graphql_name='create')


class UserUpsertWithoutCreatedActivitiesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(UserUpdateWithoutCreatedActivitiesDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(UserCreateWithoutCreatedActivitiesInput), graphql_name='create')


class UserUpsertWithoutDocumentsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(UserUpdateWithoutDocumentsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(UserCreateWithoutDocumentsInput), graphql_name='create')


class UserUpsertWithoutFilesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(UserUpdateWithoutFilesDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(UserCreateWithoutFilesInput), graphql_name='create')


class UserUpsertWithoutFormUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(UserUpdateWithoutFormUsersDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(UserCreateWithoutFormUsersInput), graphql_name='create')


class UserUpsertWithoutFormsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(UserUpdateWithoutFormsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(UserCreateWithoutFormsInput), graphql_name='create')


class UserUpsertWithoutInvitationsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(UserUpdateWithoutInvitationsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(UserCreateWithoutInvitationsInput), graphql_name='create')


class UserUpsertWithoutLinksInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(UserUpdateWithoutLinksDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(UserCreateWithoutLinksInput), graphql_name='create')


class UserUpsertWithoutPersonalAccessTokensInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(UserUpdateWithoutPersonalAccessTokensDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(UserCreateWithoutPersonalAccessTokensInput), graphql_name='create')


class UserUpsertWithoutProjectUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(UserUpdateWithoutProjectUsersDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(UserCreateWithoutProjectUsersInput), graphql_name='create')


class UserUpsertWithoutPushTokensInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(UserUpdateWithoutPushTokensDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(UserCreateWithoutPushTokensInput), graphql_name='create')


class UserUpsertWithoutQuestionUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(UserUpdateWithoutQuestionUsersDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(UserCreateWithoutQuestionUsersInput), graphql_name='create')


class UserUpsertWithoutQuestionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(UserUpdateWithoutQuestionsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(UserCreateWithoutQuestionsInput), graphql_name='create')


class UserUpsertWithoutSubscriptionPlansInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(UserUpdateWithoutSubscriptionPlansDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(UserCreateWithoutSubscriptionPlansInput), graphql_name='create')


class UserUpsertWithoutTodoListsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(UserUpdateWithoutTodoListsDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(UserCreateWithoutTodoListsInput), graphql_name='create')


class UserUpsertWithoutTodoUsersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(UserUpdateWithoutTodoUsersDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(UserCreateWithoutTodoUsersInput), graphql_name='create')


class UserUpsertWithoutTodosInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(UserUpdateWithoutTodosDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(UserCreateWithoutTodosInput), graphql_name='create')


class UserUpsertWithoutUserActivitiesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('update', 'create')
    update = sgqlc.types.Field(sgqlc.types.non_null(UserUpdateWithoutUserActivitiesDataInput), graphql_name='update')
    create = sgqlc.types.Field(sgqlc.types.non_null(UserCreateWithoutUserActivitiesInput), graphql_name='create')


class UserWhereInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'id_not', 'id_in', 'id_not_in', 'id_lt', 'id_lte', 'id_gt', 'id_gte', 'id_contains', 'id_not_contains', 'id_starts_with', 'id_not_starts_with', 'id_ends_with', 'id_not_ends_with', 'uid', 'uid_not', 'uid_in', 'uid_not_in', 'uid_lt', 'uid_lte', 'uid_gt', 'uid_gte', 'uid_contains', 'uid_not_contains', 'uid_starts_with', 'uid_not_starts_with', 'uid_ends_with', 'uid_not_ends_with', 'username', 'username_not', 'username_in', 'username_not_in', 'username_lt', 'username_lte', 'username_gt', 'username_gte', 'username_contains', 'username_not_contains', 'username_starts_with', 'username_not_starts_with', 'username_ends_with', 'username_not_ends_with', 'email', 'email_not', 'email_in', 'email_not_in', 'email_lt', 'email_lte', 'email_gt', 'email_gte', 'email_contains', 'email_not_contains', 'email_starts_with', 'email_not_starts_with', 'email_ends_with', 'email_not_ends_with', 'phone_number', 'phone_number_not', 'phone_number_in', 'phone_number_not_in', 'phone_number_lt', 'phone_number_lte', 'phone_number_gt', 'phone_number_gte', 'phone_number_contains', 'phone_number_not_contains', 'phone_number_starts_with', 'phone_number_not_starts_with', 'phone_number_ends_with', 'phone_number_not_ends_with', 'first_name', 'first_name_not', 'first_name_in', 'first_name_not_in', 'first_name_lt', 'first_name_lte', 'first_name_gt', 'first_name_gte', 'first_name_contains', 'first_name_not_contains', 'first_name_starts_with', 'first_name_not_starts_with', 'first_name_ends_with', 'first_name_not_ends_with', 'last_name', 'last_name_not', 'last_name_in', 'last_name_not_in', 'last_name_lt', 'last_name_lte', 'last_name_gt', 'last_name_gte', 'last_name_contains', 'last_name_not_contains', 'last_name_starts_with', 'last_name_not_starts_with', 'last_name_ends_with', 'last_name_not_ends_with', 'date_of_birth', 'date_of_birth_not', 'date_of_birth_in', 'date_of_birth_not_in', 'date_of_birth_lt', 'date_of_birth_lte', 'date_of_birth_gt', 'date_of_birth_gte', 'is_email_verified', 'is_email_verified_not', 'job_title', 'job_title_not', 'job_title_in', 'job_title_not_in', 'job_title_lt', 'job_title_lte', 'job_title_gt', 'job_title_gte', 'job_title_contains', 'job_title_not_contains', 'job_title_starts_with', 'job_title_not_starts_with', 'job_title_ends_with', 'job_title_not_ends_with', 'role', 'role_not', 'role_in', 'role_not_in', 'locale', 'locale_not', 'locale_in', 'locale_not_in', 'locale_lt', 'locale_lte', 'locale_gt', 'locale_gte', 'locale_contains', 'locale_not_contains', 'locale_starts_with', 'locale_not_starts_with', 'locale_ends_with', 'locale_not_ends_with', 'last_active_at', 'last_active_at_not', 'last_active_at_in', 'last_active_at_not_in', 'last_active_at_lt', 'last_active_at_lte', 'last_active_at_gt', 'last_active_at_gte', 'created_at', 'created_at_not', 'created_at_in', 'created_at_not_in', 'created_at_lt', 'created_at_lte', 'created_at_gt', 'created_at_gte', 'updated_at', 'updated_at_not', 'updated_at_in', 'updated_at_not_in', 'updated_at_lt', 'updated_at_lte', 'updated_at_gt', 'updated_at_gte', 'image', 'is_welcome_guide_completed', 'is_welcome_guide_completed_not', 'timezone', 'timezone_not', 'timezone_in', 'timezone_not_in', 'timezone_lt', 'timezone_lte', 'timezone_gt', 'timezone_gte', 'timezone_contains', 'timezone_not_contains', 'timezone_starts_with', 'timezone_not_starts_with', 'timezone_ends_with', 'timezone_not_ends_with', 'theme', 'theme_not', 'theme_in', 'theme_not_in', 'theme_lt', 'theme_lte', 'theme_gt', 'theme_gte', 'theme_contains', 'theme_not_contains', 'theme_starts_with', 'theme_not_starts_with', 'theme_ends_with', 'theme_not_ends_with', 'created_activities_every', 'created_activities_some', 'created_activities_none', 'affected_activities_every', 'affected_activities_some', 'affected_activities_none', 'user_activities_every', 'user_activities_some', 'user_activities_none', 'company_users_every', 'company_users_some', 'company_users_none', 'project_users_every', 'project_users_some', 'project_users_none', 'todo_users_every', 'todo_users_some', 'todo_users_none', 'push_tokens_every', 'push_tokens_some', 'push_tokens_none', 'todos_every', 'todos_some', 'todos_none', 'todo_lists_every', 'todo_lists_some', 'todo_lists_none', 'comments_every', 'comments_some', 'comments_none', 'invitations_every', 'invitations_some', 'invitations_none', 'subscription_plans_every', 'subscription_plans_some', 'subscription_plans_none', 'files_every', 'files_some', 'files_none', 'checklists_every', 'checklists_some', 'checklists_none', 'checklist_items_every', 'checklist_items_some', 'checklist_items_none', 'checklist_item_users_every', 'checklist_item_users_some', 'checklist_item_users_none', 'questions_every', 'questions_some', 'questions_none', 'question_users_every', 'question_users_some', 'question_users_none', 'automation_trigger_assignees_every', 'automation_trigger_assignees_some', 'automation_trigger_assignees_none', 'automation_action_assignees_every', 'automation_action_assignees_some', 'automation_action_assignees_none', 'automations_every', 'automations_some', 'automations_none', 'forms_every', 'forms_some', 'forms_none', 'form_users_every', 'form_users_some', 'form_users_none', 'personal_access_tokens_every', 'personal_access_tokens_some', 'personal_access_tokens_none', 'links_every', 'links_some', 'links_none', 'documents_every', 'documents_some', 'documents_none', 'and_', 'or_', 'not_')
    id = sgqlc.types.Field(ID, graphql_name='id')
    id_not = sgqlc.types.Field(ID, graphql_name='id_not')
    id_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_in')
    id_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='id_not_in')
    id_lt = sgqlc.types.Field(ID, graphql_name='id_lt')
    id_lte = sgqlc.types.Field(ID, graphql_name='id_lte')
    id_gt = sgqlc.types.Field(ID, graphql_name='id_gt')
    id_gte = sgqlc.types.Field(ID, graphql_name='id_gte')
    id_contains = sgqlc.types.Field(ID, graphql_name='id_contains')
    id_not_contains = sgqlc.types.Field(ID, graphql_name='id_not_contains')
    id_starts_with = sgqlc.types.Field(ID, graphql_name='id_starts_with')
    id_not_starts_with = sgqlc.types.Field(ID, graphql_name='id_not_starts_with')
    id_ends_with = sgqlc.types.Field(ID, graphql_name='id_ends_with')
    id_not_ends_with = sgqlc.types.Field(ID, graphql_name='id_not_ends_with')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    uid_not = sgqlc.types.Field(String, graphql_name='uid_not')
    uid_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_in')
    uid_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='uid_not_in')
    uid_lt = sgqlc.types.Field(String, graphql_name='uid_lt')
    uid_lte = sgqlc.types.Field(String, graphql_name='uid_lte')
    uid_gt = sgqlc.types.Field(String, graphql_name='uid_gt')
    uid_gte = sgqlc.types.Field(String, graphql_name='uid_gte')
    uid_contains = sgqlc.types.Field(String, graphql_name='uid_contains')
    uid_not_contains = sgqlc.types.Field(String, graphql_name='uid_not_contains')
    uid_starts_with = sgqlc.types.Field(String, graphql_name='uid_starts_with')
    uid_not_starts_with = sgqlc.types.Field(String, graphql_name='uid_not_starts_with')
    uid_ends_with = sgqlc.types.Field(String, graphql_name='uid_ends_with')
    uid_not_ends_with = sgqlc.types.Field(String, graphql_name='uid_not_ends_with')
    username = sgqlc.types.Field(String, graphql_name='username')
    username_not = sgqlc.types.Field(String, graphql_name='username_not')
    username_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='username_in')
    username_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='username_not_in')
    username_lt = sgqlc.types.Field(String, graphql_name='username_lt')
    username_lte = sgqlc.types.Field(String, graphql_name='username_lte')
    username_gt = sgqlc.types.Field(String, graphql_name='username_gt')
    username_gte = sgqlc.types.Field(String, graphql_name='username_gte')
    username_contains = sgqlc.types.Field(String, graphql_name='username_contains')
    username_not_contains = sgqlc.types.Field(String, graphql_name='username_not_contains')
    username_starts_with = sgqlc.types.Field(String, graphql_name='username_starts_with')
    username_not_starts_with = sgqlc.types.Field(String, graphql_name='username_not_starts_with')
    username_ends_with = sgqlc.types.Field(String, graphql_name='username_ends_with')
    username_not_ends_with = sgqlc.types.Field(String, graphql_name='username_not_ends_with')
    email = sgqlc.types.Field(String, graphql_name='email')
    email_not = sgqlc.types.Field(String, graphql_name='email_not')
    email_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='email_in')
    email_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='email_not_in')
    email_lt = sgqlc.types.Field(String, graphql_name='email_lt')
    email_lte = sgqlc.types.Field(String, graphql_name='email_lte')
    email_gt = sgqlc.types.Field(String, graphql_name='email_gt')
    email_gte = sgqlc.types.Field(String, graphql_name='email_gte')
    email_contains = sgqlc.types.Field(String, graphql_name='email_contains')
    email_not_contains = sgqlc.types.Field(String, graphql_name='email_not_contains')
    email_starts_with = sgqlc.types.Field(String, graphql_name='email_starts_with')
    email_not_starts_with = sgqlc.types.Field(String, graphql_name='email_not_starts_with')
    email_ends_with = sgqlc.types.Field(String, graphql_name='email_ends_with')
    email_not_ends_with = sgqlc.types.Field(String, graphql_name='email_not_ends_with')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    phone_number_not = sgqlc.types.Field(String, graphql_name='phoneNumber_not')
    phone_number_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='phoneNumber_in')
    phone_number_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='phoneNumber_not_in')
    phone_number_lt = sgqlc.types.Field(String, graphql_name='phoneNumber_lt')
    phone_number_lte = sgqlc.types.Field(String, graphql_name='phoneNumber_lte')
    phone_number_gt = sgqlc.types.Field(String, graphql_name='phoneNumber_gt')
    phone_number_gte = sgqlc.types.Field(String, graphql_name='phoneNumber_gte')
    phone_number_contains = sgqlc.types.Field(String, graphql_name='phoneNumber_contains')
    phone_number_not_contains = sgqlc.types.Field(String, graphql_name='phoneNumber_not_contains')
    phone_number_starts_with = sgqlc.types.Field(String, graphql_name='phoneNumber_starts_with')
    phone_number_not_starts_with = sgqlc.types.Field(String, graphql_name='phoneNumber_not_starts_with')
    phone_number_ends_with = sgqlc.types.Field(String, graphql_name='phoneNumber_ends_with')
    phone_number_not_ends_with = sgqlc.types.Field(String, graphql_name='phoneNumber_not_ends_with')
    first_name = sgqlc.types.Field(String, graphql_name='firstName')
    first_name_not = sgqlc.types.Field(String, graphql_name='firstName_not')
    first_name_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='firstName_in')
    first_name_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='firstName_not_in')
    first_name_lt = sgqlc.types.Field(String, graphql_name='firstName_lt')
    first_name_lte = sgqlc.types.Field(String, graphql_name='firstName_lte')
    first_name_gt = sgqlc.types.Field(String, graphql_name='firstName_gt')
    first_name_gte = sgqlc.types.Field(String, graphql_name='firstName_gte')
    first_name_contains = sgqlc.types.Field(String, graphql_name='firstName_contains')
    first_name_not_contains = sgqlc.types.Field(String, graphql_name='firstName_not_contains')
    first_name_starts_with = sgqlc.types.Field(String, graphql_name='firstName_starts_with')
    first_name_not_starts_with = sgqlc.types.Field(String, graphql_name='firstName_not_starts_with')
    first_name_ends_with = sgqlc.types.Field(String, graphql_name='firstName_ends_with')
    first_name_not_ends_with = sgqlc.types.Field(String, graphql_name='firstName_not_ends_with')
    last_name = sgqlc.types.Field(String, graphql_name='lastName')
    last_name_not = sgqlc.types.Field(String, graphql_name='lastName_not')
    last_name_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='lastName_in')
    last_name_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='lastName_not_in')
    last_name_lt = sgqlc.types.Field(String, graphql_name='lastName_lt')
    last_name_lte = sgqlc.types.Field(String, graphql_name='lastName_lte')
    last_name_gt = sgqlc.types.Field(String, graphql_name='lastName_gt')
    last_name_gte = sgqlc.types.Field(String, graphql_name='lastName_gte')
    last_name_contains = sgqlc.types.Field(String, graphql_name='lastName_contains')
    last_name_not_contains = sgqlc.types.Field(String, graphql_name='lastName_not_contains')
    last_name_starts_with = sgqlc.types.Field(String, graphql_name='lastName_starts_with')
    last_name_not_starts_with = sgqlc.types.Field(String, graphql_name='lastName_not_starts_with')
    last_name_ends_with = sgqlc.types.Field(String, graphql_name='lastName_ends_with')
    last_name_not_ends_with = sgqlc.types.Field(String, graphql_name='lastName_not_ends_with')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    date_of_birth_not = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth_not')
    date_of_birth_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='dateOfBirth_in')
    date_of_birth_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='dateOfBirth_not_in')
    date_of_birth_lt = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth_lt')
    date_of_birth_lte = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth_lte')
    date_of_birth_gt = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth_gt')
    date_of_birth_gte = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth_gte')
    is_email_verified = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified')
    is_email_verified_not = sgqlc.types.Field(Boolean, graphql_name='isEmailVerified_not')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    job_title_not = sgqlc.types.Field(String, graphql_name='jobTitle_not')
    job_title_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='jobTitle_in')
    job_title_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='jobTitle_not_in')
    job_title_lt = sgqlc.types.Field(String, graphql_name='jobTitle_lt')
    job_title_lte = sgqlc.types.Field(String, graphql_name='jobTitle_lte')
    job_title_gt = sgqlc.types.Field(String, graphql_name='jobTitle_gt')
    job_title_gte = sgqlc.types.Field(String, graphql_name='jobTitle_gte')
    job_title_contains = sgqlc.types.Field(String, graphql_name='jobTitle_contains')
    job_title_not_contains = sgqlc.types.Field(String, graphql_name='jobTitle_not_contains')
    job_title_starts_with = sgqlc.types.Field(String, graphql_name='jobTitle_starts_with')
    job_title_not_starts_with = sgqlc.types.Field(String, graphql_name='jobTitle_not_starts_with')
    job_title_ends_with = sgqlc.types.Field(String, graphql_name='jobTitle_ends_with')
    job_title_not_ends_with = sgqlc.types.Field(String, graphql_name='jobTitle_not_ends_with')
    role = sgqlc.types.Field(Role, graphql_name='role')
    role_not = sgqlc.types.Field(Role, graphql_name='role_not')
    role_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Role)), graphql_name='role_in')
    role_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Role)), graphql_name='role_not_in')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    locale_not = sgqlc.types.Field(String, graphql_name='locale_not')
    locale_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='locale_in')
    locale_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='locale_not_in')
    locale_lt = sgqlc.types.Field(String, graphql_name='locale_lt')
    locale_lte = sgqlc.types.Field(String, graphql_name='locale_lte')
    locale_gt = sgqlc.types.Field(String, graphql_name='locale_gt')
    locale_gte = sgqlc.types.Field(String, graphql_name='locale_gte')
    locale_contains = sgqlc.types.Field(String, graphql_name='locale_contains')
    locale_not_contains = sgqlc.types.Field(String, graphql_name='locale_not_contains')
    locale_starts_with = sgqlc.types.Field(String, graphql_name='locale_starts_with')
    locale_not_starts_with = sgqlc.types.Field(String, graphql_name='locale_not_starts_with')
    locale_ends_with = sgqlc.types.Field(String, graphql_name='locale_ends_with')
    locale_not_ends_with = sgqlc.types.Field(String, graphql_name='locale_not_ends_with')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    last_active_at_not = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt_not')
    last_active_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='lastActiveAt_in')
    last_active_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='lastActiveAt_not_in')
    last_active_at_lt = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt_lt')
    last_active_at_lte = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt_lte')
    last_active_at_gt = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt_gt')
    last_active_at_gte = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt_gte')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_at_not = sgqlc.types.Field(DateTime, graphql_name='createdAt_not')
    created_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_in')
    created_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='createdAt_not_in')
    created_at_lt = sgqlc.types.Field(DateTime, graphql_name='createdAt_lt')
    created_at_lte = sgqlc.types.Field(DateTime, graphql_name='createdAt_lte')
    created_at_gt = sgqlc.types.Field(DateTime, graphql_name='createdAt_gt')
    created_at_gte = sgqlc.types.Field(DateTime, graphql_name='createdAt_gte')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    updated_at_not = sgqlc.types.Field(DateTime, graphql_name='updatedAt_not')
    updated_at_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_in')
    updated_at_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DateTime)), graphql_name='updatedAt_not_in')
    updated_at_lt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lt')
    updated_at_lte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_lte')
    updated_at_gt = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gt')
    updated_at_gte = sgqlc.types.Field(DateTime, graphql_name='updatedAt_gte')
    image = sgqlc.types.Field(ImageWhereInput, graphql_name='image')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    is_welcome_guide_completed_not = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted_not')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    timezone_not = sgqlc.types.Field(String, graphql_name='timezone_not')
    timezone_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='timezone_in')
    timezone_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='timezone_not_in')
    timezone_lt = sgqlc.types.Field(String, graphql_name='timezone_lt')
    timezone_lte = sgqlc.types.Field(String, graphql_name='timezone_lte')
    timezone_gt = sgqlc.types.Field(String, graphql_name='timezone_gt')
    timezone_gte = sgqlc.types.Field(String, graphql_name='timezone_gte')
    timezone_contains = sgqlc.types.Field(String, graphql_name='timezone_contains')
    timezone_not_contains = sgqlc.types.Field(String, graphql_name='timezone_not_contains')
    timezone_starts_with = sgqlc.types.Field(String, graphql_name='timezone_starts_with')
    timezone_not_starts_with = sgqlc.types.Field(String, graphql_name='timezone_not_starts_with')
    timezone_ends_with = sgqlc.types.Field(String, graphql_name='timezone_ends_with')
    timezone_not_ends_with = sgqlc.types.Field(String, graphql_name='timezone_not_ends_with')
    theme = sgqlc.types.Field(String, graphql_name='theme')
    theme_not = sgqlc.types.Field(String, graphql_name='theme_not')
    theme_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='theme_in')
    theme_not_in = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='theme_not_in')
    theme_lt = sgqlc.types.Field(String, graphql_name='theme_lt')
    theme_lte = sgqlc.types.Field(String, graphql_name='theme_lte')
    theme_gt = sgqlc.types.Field(String, graphql_name='theme_gt')
    theme_gte = sgqlc.types.Field(String, graphql_name='theme_gte')
    theme_contains = sgqlc.types.Field(String, graphql_name='theme_contains')
    theme_not_contains = sgqlc.types.Field(String, graphql_name='theme_not_contains')
    theme_starts_with = sgqlc.types.Field(String, graphql_name='theme_starts_with')
    theme_not_starts_with = sgqlc.types.Field(String, graphql_name='theme_not_starts_with')
    theme_ends_with = sgqlc.types.Field(String, graphql_name='theme_ends_with')
    theme_not_ends_with = sgqlc.types.Field(String, graphql_name='theme_not_ends_with')
    created_activities_every = sgqlc.types.Field(ActivityWhereInput, graphql_name='createdActivities_every')
    created_activities_some = sgqlc.types.Field(ActivityWhereInput, graphql_name='createdActivities_some')
    created_activities_none = sgqlc.types.Field(ActivityWhereInput, graphql_name='createdActivities_none')
    affected_activities_every = sgqlc.types.Field(ActivityWhereInput, graphql_name='affectedActivities_every')
    affected_activities_some = sgqlc.types.Field(ActivityWhereInput, graphql_name='affectedActivities_some')
    affected_activities_none = sgqlc.types.Field(ActivityWhereInput, graphql_name='affectedActivities_none')
    user_activities_every = sgqlc.types.Field(UserActivityWhereInput, graphql_name='userActivities_every')
    user_activities_some = sgqlc.types.Field(UserActivityWhereInput, graphql_name='userActivities_some')
    user_activities_none = sgqlc.types.Field(UserActivityWhereInput, graphql_name='userActivities_none')
    company_users_every = sgqlc.types.Field(CompanyUserWhereInput, graphql_name='companyUsers_every')
    company_users_some = sgqlc.types.Field(CompanyUserWhereInput, graphql_name='companyUsers_some')
    company_users_none = sgqlc.types.Field(CompanyUserWhereInput, graphql_name='companyUsers_none')
    project_users_every = sgqlc.types.Field(ProjectUserWhereInput, graphql_name='projectUsers_every')
    project_users_some = sgqlc.types.Field(ProjectUserWhereInput, graphql_name='projectUsers_some')
    project_users_none = sgqlc.types.Field(ProjectUserWhereInput, graphql_name='projectUsers_none')
    todo_users_every = sgqlc.types.Field(TodoUserWhereInput, graphql_name='todoUsers_every')
    todo_users_some = sgqlc.types.Field(TodoUserWhereInput, graphql_name='todoUsers_some')
    todo_users_none = sgqlc.types.Field(TodoUserWhereInput, graphql_name='todoUsers_none')
    push_tokens_every = sgqlc.types.Field(UserPushTokenWhereInput, graphql_name='pushTokens_every')
    push_tokens_some = sgqlc.types.Field(UserPushTokenWhereInput, graphql_name='pushTokens_some')
    push_tokens_none = sgqlc.types.Field(UserPushTokenWhereInput, graphql_name='pushTokens_none')
    todos_every = sgqlc.types.Field(TodoWhereInput, graphql_name='todos_every')
    todos_some = sgqlc.types.Field(TodoWhereInput, graphql_name='todos_some')
    todos_none = sgqlc.types.Field(TodoWhereInput, graphql_name='todos_none')
    todo_lists_every = sgqlc.types.Field(TodoListWhereInput, graphql_name='todoLists_every')
    todo_lists_some = sgqlc.types.Field(TodoListWhereInput, graphql_name='todoLists_some')
    todo_lists_none = sgqlc.types.Field(TodoListWhereInput, graphql_name='todoLists_none')
    comments_every = sgqlc.types.Field(CommentWhereInput, graphql_name='comments_every')
    comments_some = sgqlc.types.Field(CommentWhereInput, graphql_name='comments_some')
    comments_none = sgqlc.types.Field(CommentWhereInput, graphql_name='comments_none')
    invitations_every = sgqlc.types.Field(InvitationWhereInput, graphql_name='invitations_every')
    invitations_some = sgqlc.types.Field(InvitationWhereInput, graphql_name='invitations_some')
    invitations_none = sgqlc.types.Field(InvitationWhereInput, graphql_name='invitations_none')
    subscription_plans_every = sgqlc.types.Field(CompanySubscriptionPlanWhereInput, graphql_name='subscriptionPlans_every')
    subscription_plans_some = sgqlc.types.Field(CompanySubscriptionPlanWhereInput, graphql_name='subscriptionPlans_some')
    subscription_plans_none = sgqlc.types.Field(CompanySubscriptionPlanWhereInput, graphql_name='subscriptionPlans_none')
    files_every = sgqlc.types.Field(FileWhereInput, graphql_name='files_every')
    files_some = sgqlc.types.Field(FileWhereInput, graphql_name='files_some')
    files_none = sgqlc.types.Field(FileWhereInput, graphql_name='files_none')
    checklists_every = sgqlc.types.Field(ChecklistWhereInput, graphql_name='checklists_every')
    checklists_some = sgqlc.types.Field(ChecklistWhereInput, graphql_name='checklists_some')
    checklists_none = sgqlc.types.Field(ChecklistWhereInput, graphql_name='checklists_none')
    checklist_items_every = sgqlc.types.Field(ChecklistItemWhereInput, graphql_name='checklistItems_every')
    checklist_items_some = sgqlc.types.Field(ChecklistItemWhereInput, graphql_name='checklistItems_some')
    checklist_items_none = sgqlc.types.Field(ChecklistItemWhereInput, graphql_name='checklistItems_none')
    checklist_item_users_every = sgqlc.types.Field(ChecklistItemUserWhereInput, graphql_name='checklistItemUsers_every')
    checklist_item_users_some = sgqlc.types.Field(ChecklistItemUserWhereInput, graphql_name='checklistItemUsers_some')
    checklist_item_users_none = sgqlc.types.Field(ChecklistItemUserWhereInput, graphql_name='checklistItemUsers_none')
    questions_every = sgqlc.types.Field(QuestionWhereInput, graphql_name='questions_every')
    questions_some = sgqlc.types.Field(QuestionWhereInput, graphql_name='questions_some')
    questions_none = sgqlc.types.Field(QuestionWhereInput, graphql_name='questions_none')
    question_users_every = sgqlc.types.Field(QuestionUserWhereInput, graphql_name='questionUsers_every')
    question_users_some = sgqlc.types.Field(QuestionUserWhereInput, graphql_name='questionUsers_some')
    question_users_none = sgqlc.types.Field(QuestionUserWhereInput, graphql_name='questionUsers_none')
    automation_trigger_assignees_every = sgqlc.types.Field(AutomationTriggerAssigneeWhereInput, graphql_name='automationTriggerAssignees_every')
    automation_trigger_assignees_some = sgqlc.types.Field(AutomationTriggerAssigneeWhereInput, graphql_name='automationTriggerAssignees_some')
    automation_trigger_assignees_none = sgqlc.types.Field(AutomationTriggerAssigneeWhereInput, graphql_name='automationTriggerAssignees_none')
    automation_action_assignees_every = sgqlc.types.Field(AutomationActionAssigneeWhereInput, graphql_name='automationActionAssignees_every')
    automation_action_assignees_some = sgqlc.types.Field(AutomationActionAssigneeWhereInput, graphql_name='automationActionAssignees_some')
    automation_action_assignees_none = sgqlc.types.Field(AutomationActionAssigneeWhereInput, graphql_name='automationActionAssignees_none')
    automations_every = sgqlc.types.Field(AutomationWhereInput, graphql_name='automations_every')
    automations_some = sgqlc.types.Field(AutomationWhereInput, graphql_name='automations_some')
    automations_none = sgqlc.types.Field(AutomationWhereInput, graphql_name='automations_none')
    forms_every = sgqlc.types.Field(FormWhereInput, graphql_name='forms_every')
    forms_some = sgqlc.types.Field(FormWhereInput, graphql_name='forms_some')
    forms_none = sgqlc.types.Field(FormWhereInput, graphql_name='forms_none')
    form_users_every = sgqlc.types.Field(FormUserWhereInput, graphql_name='formUsers_every')
    form_users_some = sgqlc.types.Field(FormUserWhereInput, graphql_name='formUsers_some')
    form_users_none = sgqlc.types.Field(FormUserWhereInput, graphql_name='formUsers_none')
    personal_access_tokens_every = sgqlc.types.Field(PersonalAccessTokenWhereInput, graphql_name='personalAccessTokens_every')
    personal_access_tokens_some = sgqlc.types.Field(PersonalAccessTokenWhereInput, graphql_name='personalAccessTokens_some')
    personal_access_tokens_none = sgqlc.types.Field(PersonalAccessTokenWhereInput, graphql_name='personalAccessTokens_none')
    links_every = sgqlc.types.Field(LinkWhereInput, graphql_name='links_every')
    links_some = sgqlc.types.Field(LinkWhereInput, graphql_name='links_some')
    links_none = sgqlc.types.Field(LinkWhereInput, graphql_name='links_none')
    documents_every = sgqlc.types.Field(DocumentWhereInput, graphql_name='documents_every')
    documents_some = sgqlc.types.Field(DocumentWhereInput, graphql_name='documents_some')
    documents_none = sgqlc.types.Field(DocumentWhereInput, graphql_name='documents_none')
    and_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserWhereInput')), graphql_name='AND')
    or_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserWhereInput')), graphql_name='OR')
    not_ = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserWhereInput')), graphql_name='NOT')


class UserWhereUniqueInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'username', 'email')
    id = sgqlc.types.Field(ID, graphql_name='id')
    uid = sgqlc.types.Field(String, graphql_name='uid')
    username = sgqlc.types.Field(String, graphql_name='username')
    email = sgqlc.types.Field(String, graphql_name='email')


class VerifySmtpCredentialInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('host', 'port', 'username', 'password')
    host = sgqlc.types.Field(String, graphql_name='host')
    port = sgqlc.types.Field(Int, graphql_name='port')
    username = sgqlc.types.Field(String, graphql_name='username')
    password = sgqlc.types.Field(String, graphql_name='password')


class WebhookFilter(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('enabled',)
    enabled = sgqlc.types.Field(Boolean, graphql_name='enabled')


class WhiteLabelSettingsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('logo', 'favicon', 'hide_social_proof', 'hide_terms_of_service', 'manifest', 'email_signature')
    logo = sgqlc.types.Field(String, graphql_name='logo')
    favicon = sgqlc.types.Field(String, graphql_name='favicon')
    hide_social_proof = sgqlc.types.Field(Boolean, graphql_name='hideSocialProof')
    hide_terms_of_service = sgqlc.types.Field(Boolean, graphql_name='hideTermsOfService')
    manifest = sgqlc.types.Field(JSON, graphql_name='manifest')
    email_signature = sgqlc.types.Field(String, graphql_name='emailSignature')



########################################################################
# Output Objects and Interfaces
########################################################################
class Node(sgqlc.types.Interface):
    __schema__ = schema
    __field_names__ = ('id',)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class AITagProgress(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('progress', 'count', 'max_count', 'operation_id', 'error', 'error_code')
    progress = sgqlc.types.Field(Float, graphql_name='progress')
    count = sgqlc.types.Field(Float, graphql_name='count')
    max_count = sgqlc.types.Field(Float, graphql_name='maxCount')
    operation_id = sgqlc.types.Field(String, graphql_name='operationId')
    error = sgqlc.types.Field(Boolean, graphql_name='error')
    error_code = sgqlc.types.Field(String, graphql_name='errorCode')


class Activity(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'category', 'is_seen', 'is_read', 'text', 'html', 'created_at', 'updated_at', 'company', 'project', 'comment', 'discussion', 'status_update', 'todo', 'todo_list', 'created_by', 'invitee_email', 'affected_by', 'metadata', 'custom_field', 'user_activities', 'user_access_level', 'question')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    category = sgqlc.types.Field(sgqlc.types.non_null(ActivityCategory), graphql_name='category')
    is_seen = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isSeen')
    is_read = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isRead')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    company = sgqlc.types.Field('Company', graphql_name='company')
    project = sgqlc.types.Field('Project', graphql_name='project')
    comment = sgqlc.types.Field('Comment', graphql_name='comment')
    discussion = sgqlc.types.Field('Discussion', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdate', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('Todo', graphql_name='todo')
    todo_list = sgqlc.types.Field('TodoList', graphql_name='todoList')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='createdBy')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    affected_by = sgqlc.types.Field('User', graphql_name='affectedBy')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    custom_field = sgqlc.types.Field('CustomField', graphql_name='customField')
    user_activities = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserActivity')), graphql_name='userActivities', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(UserActivityWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(UserActivityOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')
    question = sgqlc.types.Field('Question', graphql_name='question')


class ActivityConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('ActivityEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null('AggregateActivity'), graphql_name='aggregate')


class ActivityEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(Activity), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class ActivityList(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('activities', 'page_info', 'total_count')
    activities = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Activity))), graphql_name='activities')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class ActivityPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'category', 'created_at', 'updated_at', 'invitee_email', 'metadata', 'user_access_level')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    category = sgqlc.types.Field(sgqlc.types.non_null(ActivityCategory), graphql_name='category')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    invitee_email = sgqlc.types.Field(String, graphql_name='inviteeEmail')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    user_access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='userAccessLevel')


class ActivitySubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(Activity, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(ActivityPreviousValues, graphql_name='previousValues')


class AdminMutations(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('activate_company_license', 'ban_company', 'create_company_licenses', 'deactivate_company_license', 'delete_company_license', 'delete_user', 'grant_license', 'link_company_license', 'revoke_license', 'unban_company', 'update_company', 'update_admin_settings', 'update_licenses', 'upgrade_license')
    activate_company_license = sgqlc.types.Field('Company', graphql_name='activateCompanyLicense', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ActivateCompanyLicenseInput), graphql_name='input', default=None)),
))
    )
    ban_company = sgqlc.types.Field(Boolean, graphql_name='banCompany', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    create_company_licenses = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CompanyLicense'))), graphql_name='createCompanyLicenses', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateCompanyLicensesInput), graphql_name='input', default=None)),
))
    )
    deactivate_company_license = sgqlc.types.Field('Company', graphql_name='deactivateCompanyLicense', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeactivateCompanyLicenseInput), graphql_name='input', default=None)),
))
    )
    delete_company_license = sgqlc.types.Field(Boolean, graphql_name='deleteCompanyLicense', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    delete_user = sgqlc.types.Field('User', graphql_name='deleteUser', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    grant_license = sgqlc.types.Field(Boolean, graphql_name='grantLicense', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(GrantLicenseInput), graphql_name='input', default=None)),
))
    )
    link_company_license = sgqlc.types.Field('CompanyLicense', graphql_name='linkCompanyLicense', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(LinkCompanyLicenseInput), graphql_name='input', default=None)),
))
    )
    revoke_license = sgqlc.types.Field(Boolean, graphql_name='revokeLicense', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RevokeLicenseInput), graphql_name='input', default=None)),
))
    )
    unban_company = sgqlc.types.Field(Boolean, graphql_name='unbanCompany', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    update_company = sgqlc.types.Field(sgqlc.types.non_null('Company'), graphql_name='updateCompany', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCompanyInput), graphql_name='input', default=None)),
))
    )
    update_admin_settings = sgqlc.types.Field(Boolean, graphql_name='updateAdminSettings', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateAdminSettingsInput), graphql_name='input', default=None)),
))
    )
    update_licenses = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CompanyLicense'))), graphql_name='updateLicenses', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateLicensesInput), graphql_name='input', default=None)),
))
    )
    upgrade_license = sgqlc.types.Field(Boolean, graphql_name='upgradeLicense', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpgradeLicenseInput), graphql_name='input', default=None)),
))
    )


class AdminOverviewStats(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('active_companies', 'active_projects', 'active_subscriptions', 'active_users', 'files_uploaded_today', 'monthly_active_users', 'online_users', 'recent_signups', 'subscription_churn', 'todos_created_last30_days', 'todos_created_today', 'total_companies', 'total_projects', 'total_storage_usage', 'total_todos', 'total_users', 'trial_churn', 'trialing_companies', 'weekly_active_users')
    active_companies = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='activeCompanies')
    active_projects = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='activeProjects')
    active_subscriptions = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='activeSubscriptions')
    active_users = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='activeUsers')
    files_uploaded_today = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='filesUploadedToday')
    monthly_active_users = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='monthlyActiveUsers')
    online_users = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='onlineUsers')
    recent_signups = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='recentSignups')
    subscription_churn = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='subscriptionChurn')
    todos_created_last30_days = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='todosCreatedLast30Days')
    todos_created_today = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='todosCreatedToday')
    total_companies = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCompanies')
    total_projects = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalProjects')
    total_storage_usage = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='totalStorageUsage')
    total_todos = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalTodos')
    total_users = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalUsers')
    trial_churn = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='trialChurn')
    trialing_companies = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='trialingCompanies')
    weekly_active_users = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='weeklyActiveUsers')


class AdminQueries(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('admin_settings', 'companies', 'company_licenses', 'dashboard_overview', 'projects', 'users')
    admin_settings = sgqlc.types.Field(sgqlc.types.non_null('AdminSettings'), graphql_name='adminSettings')
    companies = sgqlc.types.Field(sgqlc.types.non_null('CompanyPagination'), graphql_name='companies', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(CompanyFilter, graphql_name='filter', default=None)),
        ('sort', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CompanySort)), graphql_name='sort', default=None)),
        ('limit', sgqlc.types.Arg(Int, graphql_name='limit', default=20)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
))
    )
    company_licenses = sgqlc.types.Field(sgqlc.types.non_null('CompanyLicensePagination'), graphql_name='companyLicenses', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(CompanyLicenseFilter, graphql_name='filter', default=None)),
        ('limit', sgqlc.types.Arg(Int, graphql_name='limit', default=20)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
))
    )
    dashboard_overview = sgqlc.types.Field(sgqlc.types.non_null(AdminOverviewStats), graphql_name='dashboardOverview')
    projects = sgqlc.types.Field(sgqlc.types.non_null('ProjectPagination'), graphql_name='projects', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(ProjectFilterInput, graphql_name='filter', default=None)),
        ('sort', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ProjectSort)), graphql_name='sort', default=('name_ASC',))),
        ('take', sgqlc.types.Arg(Int, graphql_name='take', default=50)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
))
    )
    users = sgqlc.types.Field(sgqlc.types.non_null('UserPagination'), graphql_name='users', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(UserListFilter, graphql_name='filter', default=None)),
        ('sort', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(UserOrderByInput)), graphql_name='sort', default=None)),
        ('take', sgqlc.types.Arg(Int, graphql_name='take', default=20)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
))
    )


class AdminSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('hide_upgrade_ltd', 'hide_book_demo')
    hide_upgrade_ltd = sgqlc.types.Field(Boolean, graphql_name='hideUpgradeLTD')
    hide_book_demo = sgqlc.types.Field(Boolean, graphql_name='hideBookDemo')


class AggregateActivity(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateAutomation(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateAutomationAction(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateAutomationActionAssignee(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateAutomationActionTag(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateAutomationTrigger(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateAutomationTriggerAssignee(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateAutomationTriggerTag(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateChecklist(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateChecklistItem(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateChecklistItemUser(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateComment(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateCompany(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateCompanyLicense(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateCompanySubscriptionPlan(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateCompanySubscriptionPlanCard(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateCompanyUser(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateCompanyUserFolder(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateCompanyUserNotificationOption(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateCustomField(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateCustomFieldOption(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateDiscussion(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateDocument(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateFile(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateFolder(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateForm(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateFormField(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateFormTag(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateFormUser(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateImage(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateInvitation(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateLink(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateNotificationOption(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregatePersonalAccessToken(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateProject(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateProjectUser(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateProjectUserFolder(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateQuestion(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateQuestionUser(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateSecurityCode(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateStatusUpdate(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateTag(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateTodo(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateTodoAction(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateTodoCustomField(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateTodoCustomFieldFile(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateTodoCustomFieldOption(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateTodoList(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateTodoTag(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateTodoUser(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateUser(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateUserActivity(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AggregateUserPushToken(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class AuthPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('token', 'user', 'exp', 'custom_token')
    token = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='token')
    user = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='user')
    exp = sgqlc.types.Field(Int, graphql_name='exp')
    custom_token = sgqlc.types.Field(String, graphql_name='customToken')


class Automation(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'trigger', 'actions', 'is_active', 'created_by', 'project', 'created_at', 'updated_at', 'uid')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    trigger = sgqlc.types.Field(sgqlc.types.non_null('AutomationTrigger'), graphql_name='trigger')
    actions = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('AutomationAction'))), graphql_name='actions', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(AutomationActionWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(AutomationActionOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    is_active = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isActive')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='createdBy')
    project = sgqlc.types.Field(sgqlc.types.non_null('Project'), graphql_name='project')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')


class AutomationAction(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'type', 'dued_in', 'custom_field', 'custom_field_options', 'todo_list', 'metadata', 'tags', 'assignees', 'color', 'assignee_triggerer', 'portable_document', 'http_option', 'created_at', 'updated_at', 'uid', 'automation_action_tags', 'automation_action_assignees', 'automation')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    type = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionType), graphql_name='type')
    dued_in = sgqlc.types.Field(Int, graphql_name='duedIn')
    custom_field = sgqlc.types.Field('CustomField', graphql_name='customField')
    custom_field_options = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldOption')), graphql_name='customFieldOptions')
    todo_list = sgqlc.types.Field('TodoList', graphql_name='todoList')
    metadata = sgqlc.types.Field('AutomationActionMetadata', graphql_name='metadata')
    tags = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Tag')), graphql_name='tags')
    assignees = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('User')), graphql_name='assignees')
    color = sgqlc.types.Field(String, graphql_name='color')
    assignee_triggerer = sgqlc.types.Field(String, graphql_name='assigneeTriggerer')
    portable_document = sgqlc.types.Field('PortableDocument', graphql_name='portableDocument')
    http_option = sgqlc.types.Field('AutomationActionHttpOption', graphql_name='httpOption')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    automation_action_tags = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionTag')), graphql_name='automationActionTags', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(AutomationActionTagWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(AutomationActionTagOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    automation_action_assignees = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionAssignee')), graphql_name='automationActionAssignees', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(AutomationActionAssigneeWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(AutomationActionAssigneeOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    automation = sgqlc.types.Field(sgqlc.types.non_null(Automation), graphql_name='automation')


class AutomationActionAssignee(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'automation_action', 'assignee', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    automation_action = sgqlc.types.Field(sgqlc.types.non_null(AutomationAction), graphql_name='automationAction')
    assignee = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='assignee')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class AutomationActionAssigneeConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('AutomationActionAssigneeEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateAutomationActionAssignee), graphql_name='aggregate')


class AutomationActionAssigneeEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionAssignee), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class AutomationActionAssigneePreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class AutomationActionAssigneeSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(AutomationActionAssignee, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(AutomationActionAssigneePreviousValues, graphql_name='previousValues')


class AutomationActionConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('AutomationActionEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateAutomationAction), graphql_name='aggregate')


class AutomationActionCreateChecklist(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('title', 'position', 'checklist_items')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    checklist_items = sgqlc.types.Field(sgqlc.types.list_of('AutomationActionCreateChecklistItem'), graphql_name='checklistItems')


class AutomationActionCreateChecklistItem(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('title', 'position', 'dued_in', 'assignee_ids')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    dued_in = sgqlc.types.Field(Int, graphql_name='duedIn')
    assignee_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='assigneeIds')


class AutomationActionEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(AutomationAction), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class AutomationActionHttpOption(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'url', 'method', 'headers', 'parameters', 'body', 'content_type', 'authorization_type', 'authorization_bearer_token', 'authorization_basic_auth', 'authorization_api_key', 'oauth_connection', 'http_logs')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')
    method = sgqlc.types.Field(sgqlc.types.non_null(HttpMethod), graphql_name='method')
    headers = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('HttpHeader')), graphql_name='headers')
    parameters = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('HttpParameter')), graphql_name='parameters')
    body = sgqlc.types.Field(String, graphql_name='body')
    content_type = sgqlc.types.Field(HttpContentType, graphql_name='contentType')
    authorization_type = sgqlc.types.Field(HttpAuthorizationType, graphql_name='authorizationType')
    authorization_bearer_token = sgqlc.types.Field(String, graphql_name='authorizationBearerToken')
    authorization_basic_auth = sgqlc.types.Field('HttpAuthorizationBasicAuth', graphql_name='authorizationBasicAuth')
    authorization_api_key = sgqlc.types.Field('HttpAuthorizationApiKey', graphql_name='authorizationApiKey')
    oauth_connection = sgqlc.types.Field('OAuthConnection', graphql_name='oauthConnection')
    http_logs = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('HttpLog')), graphql_name='httpLogs')


class AutomationActionMetadataCopyTodo(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('copy_todo_options',)
    copy_todo_options = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CopyTodoOption)), graphql_name='copyTodoOptions')


class AutomationActionMetadataCreateChecklist(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('checklists',)
    checklists = sgqlc.types.Field(sgqlc.types.list_of(AutomationActionCreateChecklist), graphql_name='checklists')


class AutomationActionMetadataSendEmail(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('email',)
    email = sgqlc.types.Field('AutomationActionSendEmail', graphql_name='email')


class AutomationActionPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'type', 'dued_in', 'created_at', 'updated_at', 'metadata')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    type = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionType), graphql_name='type')
    dued_in = sgqlc.types.Field(Int, graphql_name='duedIn')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class AutomationActionSendEmail(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('from_', 'to', 'bcc', 'cc', 'content', 'attachments', 'subject', 'reply_to')
    from_ = sgqlc.types.Field(String, graphql_name='from')
    to = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='to')
    bcc = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='bcc')
    cc = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='cc')
    content = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='content')
    attachments = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationActionSendEmailAttachment')), graphql_name='attachments')
    subject = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='subject')
    reply_to = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='replyTo')


class AutomationActionSendEmailAttachment(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('uid', 'name', 'size', 'type', 'extension')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    size = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='size')
    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='type')
    extension = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='extension')


class AutomationActionSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(AutomationAction, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(AutomationActionPreviousValues, graphql_name='previousValues')


class AutomationActionTag(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'automation_action', 'tag', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    automation_action = sgqlc.types.Field(sgqlc.types.non_null(AutomationAction), graphql_name='automationAction')
    tag = sgqlc.types.Field(sgqlc.types.non_null('Tag'), graphql_name='tag')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class AutomationActionTagConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('AutomationActionTagEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateAutomationActionTag), graphql_name='aggregate')


class AutomationActionTagEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(AutomationActionTag), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class AutomationActionTagPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class AutomationActionTagSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(AutomationActionTag, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(AutomationActionTagPreviousValues, graphql_name='previousValues')


class AutomationConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('AutomationEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateAutomation), graphql_name='aggregate')


class AutomationEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(Automation), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class AutomationPagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info', 'total_count')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Automation))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class AutomationPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'is_active', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    is_active = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isActive')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class AutomationSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(Automation, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(AutomationPreviousValues, graphql_name='previousValues')


class AutomationTrigger(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'type', 'metadata', 'custom_field', 'custom_field_options', 'todos', 'todo_list', 'tags', 'assignees', 'color', 'created_at', 'updated_at', 'uid', 'automation_trigger_tags', 'automation_trigger_assignees', 'automation')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    type = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerType), graphql_name='type')
    metadata = sgqlc.types.Field('AutomationTriggerMetadata', graphql_name='metadata')
    custom_field = sgqlc.types.Field('CustomField', graphql_name='customField')
    custom_field_options = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldOption')), graphql_name='customFieldOptions')
    todos = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldReferenceTodo')), graphql_name='todos')
    todo_list = sgqlc.types.Field('TodoList', graphql_name='todoList')
    tags = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Tag')), graphql_name='tags')
    assignees = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('User')), graphql_name='assignees')
    color = sgqlc.types.Field(String, graphql_name='color')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    automation_trigger_tags = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerTag')), graphql_name='automationTriggerTags', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(AutomationTriggerTagWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(AutomationTriggerTagOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    automation_trigger_assignees = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('AutomationTriggerAssignee')), graphql_name='automationTriggerAssignees', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(AutomationTriggerAssigneeWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(AutomationTriggerAssigneeOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    automation = sgqlc.types.Field(sgqlc.types.non_null(Automation), graphql_name='automation')


class AutomationTriggerAssignee(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'automation_trigger', 'assignee', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    automation_trigger = sgqlc.types.Field(sgqlc.types.non_null(AutomationTrigger), graphql_name='automationTrigger')
    assignee = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='assignee')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class AutomationTriggerAssigneeConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('AutomationTriggerAssigneeEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateAutomationTriggerAssignee), graphql_name='aggregate')


class AutomationTriggerAssigneeEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerAssignee), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class AutomationTriggerAssigneePreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class AutomationTriggerAssigneeSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(AutomationTriggerAssignee, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(AutomationTriggerAssigneePreviousValues, graphql_name='previousValues')


class AutomationTriggerConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('AutomationTriggerEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateAutomationTrigger), graphql_name='aggregate')


class AutomationTriggerEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(AutomationTrigger), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class AutomationTriggerMetadataTodoOverdue(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('incomplete_only',)
    incomplete_only = sgqlc.types.Field(Boolean, graphql_name='incompleteOnly')


class AutomationTriggerPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'type', 'created_at', 'updated_at', 'metadata')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    type = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerType), graphql_name='type')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class AutomationTriggerSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(AutomationTrigger, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(AutomationTriggerPreviousValues, graphql_name='previousValues')


class AutomationTriggerTag(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'automation_trigger', 'tag', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    automation_trigger = sgqlc.types.Field(sgqlc.types.non_null(AutomationTrigger), graphql_name='automationTrigger')
    tag = sgqlc.types.Field(sgqlc.types.non_null('Tag'), graphql_name='tag')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class AutomationTriggerTagConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('AutomationTriggerTagEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateAutomationTriggerTag), graphql_name='aggregate')


class AutomationTriggerTagEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(AutomationTriggerTag), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class AutomationTriggerTagPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class AutomationTriggerTagSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(AutomationTriggerTag, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(AutomationTriggerTagPreviousValues, graphql_name='previousValues')


class BatchPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Long), graphql_name='count')


class Chart(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'title', 'position', 'type', 'chart_segments', 'display', 'created_at', 'updated_at', 'is_calculating', 'is_calculating_with_filter', 'need_calculation', 'metadata')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    type = sgqlc.types.Field(sgqlc.types.non_null(ChartType), graphql_name='type')
    chart_segments = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ChartSegment'))), graphql_name='chartSegments')
    display = sgqlc.types.Field('FormulaDisplay', graphql_name='display')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    is_calculating = sgqlc.types.Field(Boolean, graphql_name='isCalculating')
    is_calculating_with_filter = sgqlc.types.Field(Boolean, graphql_name='isCalculatingWithFilter')
    need_calculation = sgqlc.types.Field(Boolean, graphql_name='needCalculation')
    metadata = sgqlc.types.Field('ChartMetadata', graphql_name='metadata')


class ChartMetadataBarChart(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('bar_chart',)
    bar_chart = sgqlc.types.Field(sgqlc.types.non_null('ChartMetadataBarChartOptions'), graphql_name='barChart')


class ChartMetadataBarChartOptions(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('x_axis', 'y_axis')
    x_axis = sgqlc.types.Field(sgqlc.types.non_null('ChartMetadataBarChartXAxis'), graphql_name='xAxis')
    y_axis = sgqlc.types.Field(sgqlc.types.non_null('ChartMetadataBarChartYAxis'), graphql_name='yAxis')


class ChartMetadataBarChartXAxis(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('title', 'type', 'interval', 'custom_field_name', 'custom_field_type', 'custom_field_reference_project_id')
    title = sgqlc.types.Field(String, graphql_name='title')
    type = sgqlc.types.Field(sgqlc.types.non_null(BarChartXAxisType), graphql_name='type')
    interval = sgqlc.types.Field(sgqlc.types.non_null(BarChartXAxisInterval), graphql_name='interval')
    custom_field_name = sgqlc.types.Field(String, graphql_name='customFieldName')
    custom_field_type = sgqlc.types.Field(CustomFieldType, graphql_name='customFieldType')
    custom_field_reference_project_id = sgqlc.types.Field(String, graphql_name='customFieldReferenceProjectId')


class ChartMetadataBarChartYAxis(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('title', 'filter', 'function', 'custom_field_name', 'custom_field_type', 'custom_field_reference_project_id')
    title = sgqlc.types.Field(String, graphql_name='title')
    filter = sgqlc.types.Field('TodoFilter', graphql_name='filter')
    function = sgqlc.types.Field(ChartSegmentValueFunctions, graphql_name='function')
    custom_field_name = sgqlc.types.Field(String, graphql_name='customFieldName')
    custom_field_type = sgqlc.types.Field(CustomFieldType, graphql_name='customFieldType')
    custom_field_reference_project_id = sgqlc.types.Field(String, graphql_name='customFieldReferenceProjectId')


class ChartPagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Chart))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class ChartSegment(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'color', 'chart_segment_values', 'formula', 'formula_result', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    color = sgqlc.types.Field(String, graphql_name='color')
    chart_segment_values = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ChartSegmentValue'))), graphql_name='chartSegmentValues')
    formula = sgqlc.types.Field(sgqlc.types.non_null('Formula'), graphql_name='formula')
    formula_result = sgqlc.types.Field(Float, graphql_name='formulaResult')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class ChartSegmentValue(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'disabled', 'project_id', 'custom_field_id', 'created_at', 'updated_at', 'function', 'filter')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    disabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='disabled')
    project_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='projectId')
    custom_field_id = sgqlc.types.Field(String, graphql_name='customFieldId')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    function = sgqlc.types.Field(ChartSegmentValueFunctions, graphql_name='function')
    filter = sgqlc.types.Field('TodoFilter', graphql_name='filter')


class ChartSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(Chart, graphql_name='node')
    previous_values = sgqlc.types.Field(Chart, graphql_name='previousValues')


class Chat(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'type', 'project', 'messages', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    type = sgqlc.types.Field(ChatType, graphql_name='type')
    project = sgqlc.types.Field('Project', graphql_name='project')
    messages = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChatMessage')), graphql_name='messages')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')


class ChatMessage(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'text', 'chat')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    text = sgqlc.types.Field(String, graphql_name='text')
    chat = sgqlc.types.Field(Chat, graphql_name='chat')


class ChatPagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Chat))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class ChatSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(Chat, graphql_name='node')
    previous_values = sgqlc.types.Field(Chat, graphql_name='previousValues')


class Checklist(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'title', 'position', 'created_at', 'updated_at', 'todo', 'checklist_items', 'created_by', 'uid')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    todo = sgqlc.types.Field(sgqlc.types.non_null('Todo'), graphql_name='todo')
    checklist_items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItem'))), graphql_name='checklistItems', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(ChecklistItemWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(ChecklistItemOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    created_by = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='createdBy')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')


class ChecklistConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('ChecklistEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateChecklist), graphql_name='aggregate')


class ChecklistEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(Checklist), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class ChecklistItem(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'title', 'position', 'done', 'started_at', 'dued_at', 'created_at', 'updated_at', 'checklist', 'created_by', 'users', 'uid', 'checklist_item_users')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    done = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='done')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    checklist = sgqlc.types.Field(sgqlc.types.non_null(Checklist), graphql_name='checklist')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='createdBy')
    users = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('User'))), graphql_name='users')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    checklist_item_users = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChecklistItemUser')), graphql_name='checklistItemUsers', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(ChecklistItemUserWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(ChecklistItemUserOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )


class ChecklistItemConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('ChecklistItemEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateChecklistItem), graphql_name='aggregate')


class ChecklistItemEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(ChecklistItem), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class ChecklistItemPagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ChecklistItem))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class ChecklistItemPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'done', 'position', 'started_at', 'dued_at', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    done = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='done')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class ChecklistItemSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(ChecklistItem, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(ChecklistItemPreviousValues, graphql_name='previousValues')


class ChecklistItemUser(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'checklist_item', 'user', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    checklist_item = sgqlc.types.Field(sgqlc.types.non_null(ChecklistItem), graphql_name='checklistItem')
    user = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='user')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class ChecklistItemUserConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('ChecklistItemUserEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateChecklistItemUser), graphql_name='aggregate')


class ChecklistItemUserEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(ChecklistItemUser), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class ChecklistItemUserPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class ChecklistItemUserSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(ChecklistItemUser, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(ChecklistItemUserPreviousValues, graphql_name='previousValues')


class ChecklistPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'position', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class ChecklistSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(Checklist, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(ChecklistPreviousValues, graphql_name='previousValues')


class Comment(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'html', 'text', 'category', 'created_at', 'updated_at', 'deleted_at', 'deleted_by', 'activity', 'user', 'discussion', 'status_update', 'todo', 'is_read', 'is_seen', 'ai_summary', 'files')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    category = sgqlc.types.Field(sgqlc.types.non_null(CommentCategory), graphql_name='category')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    deleted_at = sgqlc.types.Field(DateTime, graphql_name='deletedAt')
    deleted_by = sgqlc.types.Field('User', graphql_name='deletedBy')
    activity = sgqlc.types.Field(Activity, graphql_name='activity')
    user = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='user')
    discussion = sgqlc.types.Field('Discussion', graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdate', graphql_name='statusUpdate')
    todo = sgqlc.types.Field('Todo', graphql_name='todo')
    is_read = sgqlc.types.Field(Boolean, graphql_name='isRead')
    is_seen = sgqlc.types.Field(Boolean, graphql_name='isSeen')
    ai_summary = sgqlc.types.Field(Boolean, graphql_name='aiSummary')
    files = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('File')), graphql_name='files', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(FileWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(FileOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )


class CommentConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('CommentEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateComment), graphql_name='aggregate')


class CommentEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(Comment), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class CommentList(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('comments', 'page_info', 'total_count')
    comments = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Comment))), graphql_name='comments')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class CommentPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'html', 'text', 'category', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    category = sgqlc.types.Field(sgqlc.types.non_null(CommentCategory), graphql_name='category')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class CommentSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(Comment, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(CommentPreviousValues, graphql_name='previousValues')


class Company(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'slug', 'description', 'image', 'created_at', 'updated_at', 'owner', 'custom_fields', 'projects', 'allow_notification', 'free_trial_started_at', 'free_trial_expired_at', 'free_trial_extended_at', 'subscription_active', 'subscription_trialing', 'subscription_status', 'subscription_plan', 'subscribed_at', 'projects_count', 'access_level', 'license', 'is_locked', 'theme', 'white_label_subscription', 'white_label_settings', 'google_maps_settings', 'is_enterprise', 'is_map_enabled', 'is_aienabled', 'is_banned', 'is_upgradable_ltd', 'free_trial_extended_by', 'activities', 'company_users', 'files', 'links')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')
    description = sgqlc.types.Field(String, graphql_name='description')
    image = sgqlc.types.Field('Image', graphql_name='image')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    owner = sgqlc.types.Field('User', graphql_name='owner')
    custom_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomField')), graphql_name='customFields')
    projects = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Project')), graphql_name='projects', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(ProjectWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(ProjectOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    allow_notification = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='allowNotification')
    free_trial_started_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialStartedAt')
    free_trial_expired_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExpiredAt')
    free_trial_extended_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExtendedAt')
    subscription_active = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='subscriptionActive')
    subscription_trialing = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='subscriptionTrialing')
    subscription_status = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='subscriptionStatus')
    subscription_plan = sgqlc.types.Field('CompanySubscriptionPlan', graphql_name='subscriptionPlan')
    subscribed_at = sgqlc.types.Field(DateTime, graphql_name='subscribedAt')
    projects_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='projectsCount', args=sgqlc.types.ArgDict((
        ('archived', sgqlc.types.Arg(Boolean, graphql_name='archived', default=None)),
        ('is_template', sgqlc.types.Arg(Boolean, graphql_name='isTemplate', default=None)),
))
    )
    access_level = sgqlc.types.Field(sgqlc.types.non_null(UserAccessLevel), graphql_name='accessLevel')
    license = sgqlc.types.Field('CompanyLicense', graphql_name='license')
    is_locked = sgqlc.types.Field(Boolean, graphql_name='isLocked')
    theme = sgqlc.types.Field(JSON, graphql_name='theme')
    white_label_subscription = sgqlc.types.Field('WhiteLabelSubscription', graphql_name='whiteLabelSubscription')
    white_label_settings = sgqlc.types.Field(JSON, graphql_name='whiteLabelSettings')
    google_maps_settings = sgqlc.types.Field('GoogleMapsSettings', graphql_name='googleMapsSettings')
    is_enterprise = sgqlc.types.Field(Boolean, graphql_name='isEnterprise')
    is_map_enabled = sgqlc.types.Field(Boolean, graphql_name='isMapEnabled')
    is_aienabled = sgqlc.types.Field(Boolean, graphql_name='isAIEnabled')
    is_banned = sgqlc.types.Field(Boolean, graphql_name='isBanned')
    is_upgradable_ltd = sgqlc.types.Field(Boolean, graphql_name='isUpgradableLTD')
    free_trial_extended_by = sgqlc.types.Field('User', graphql_name='freeTrialExtendedBy')
    activities = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Activity)), graphql_name='activities', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(ActivityWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(ActivityOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    company_users = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUser')), graphql_name='companyUsers', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(CompanyUserWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(CompanyUserOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    files = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('File')), graphql_name='files', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(FileWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(FileOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    links = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Link')), graphql_name='links', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(LinkWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(LinkOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )


class CompanyConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('CompanyEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateCompany), graphql_name='aggregate')


class CompanyEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(Company), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class CompanyLicense(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'plan_id', 'license_id', 'invoice_id', 'source', 'used_company_count', 'remaining_company_count', 'created_at', 'updated_at', 'activation_email', 'company')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    plan_id = sgqlc.types.Field(String, graphql_name='planId')
    license_id = sgqlc.types.Field(String, graphql_name='licenseId')
    invoice_id = sgqlc.types.Field(String, graphql_name='invoiceId')
    source = sgqlc.types.Field(String, graphql_name='source')
    used_company_count = sgqlc.types.Field(Int, graphql_name='usedCompanyCount')
    remaining_company_count = sgqlc.types.Field(Int, graphql_name='remainingCompanyCount')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    activation_email = sgqlc.types.Field(String, graphql_name='activationEmail')
    company = sgqlc.types.Field(Company, graphql_name='company')


class CompanyLicenseConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('CompanyLicenseEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateCompanyLicense), graphql_name='aggregate')


class CompanyLicenseEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(CompanyLicense), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class CompanyLicensePagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(CompanyLicense))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class CompanyLicensePreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'activation_email', 'plan_id', 'source', 'license_id', 'invoice_id', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    activation_email = sgqlc.types.Field(String, graphql_name='activationEmail')
    plan_id = sgqlc.types.Field(String, graphql_name='planId')
    source = sgqlc.types.Field(String, graphql_name='source')
    license_id = sgqlc.types.Field(String, graphql_name='licenseId')
    invoice_id = sgqlc.types.Field(String, graphql_name='invoiceId')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class CompanyLicenseSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(CompanyLicense, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(CompanyLicensePreviousValues, graphql_name='previousValues')


class CompanyPagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Company))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class CompanyPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'slug', 'description', 'free_trial_started_at', 'free_trial_expired_at', 'subscribed_at', 'created_at', 'updated_at', 'free_trial_extended_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')
    description = sgqlc.types.Field(String, graphql_name='description')
    free_trial_started_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialStartedAt')
    free_trial_expired_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExpiredAt')
    subscribed_at = sgqlc.types.Field(DateTime, graphql_name='subscribedAt')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    free_trial_extended_at = sgqlc.types.Field(DateTime, graphql_name='freeTrialExtendedAt')


class CompanySubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(Company, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(CompanyPreviousValues, graphql_name='previousValues')


class CompanySubscriptionPlan(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'cus_id', 'sub_id', 'plan_id', 'plan_name', 'created_at', 'updated_at', 'status', 'current_period_start', 'current_period_end', 'canceled_at', 'cancel_at_period_end', 'ended_at', 'trial_start', 'trial_end', 'card', 'payment_intent_id', 'payment_intent_status', 'payment_intent_client_secret', 'cancel_at', 'is_paid', 'company', 'user')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    cus_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cusId')
    sub_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='subId')
    plan_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='planId')
    plan_name = sgqlc.types.Field(String, graphql_name='planName')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    status = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='status')
    current_period_start = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='currentPeriodStart')
    current_period_end = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='currentPeriodEnd')
    canceled_at = sgqlc.types.Field(DateTime, graphql_name='canceledAt')
    cancel_at_period_end = sgqlc.types.Field(Boolean, graphql_name='cancelAtPeriodEnd')
    ended_at = sgqlc.types.Field(DateTime, graphql_name='endedAt')
    trial_start = sgqlc.types.Field(DateTime, graphql_name='trialStart')
    trial_end = sgqlc.types.Field(DateTime, graphql_name='trialEnd')
    card = sgqlc.types.Field('CompanySubscriptionPlanCard', graphql_name='card')
    payment_intent_id = sgqlc.types.Field(String, graphql_name='paymentIntentId')
    payment_intent_status = sgqlc.types.Field(String, graphql_name='paymentIntentStatus')
    payment_intent_client_secret = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret')
    cancel_at = sgqlc.types.Field(DateTime, graphql_name='cancelAt')
    is_paid = sgqlc.types.Field(Boolean, graphql_name='isPaid')
    company = sgqlc.types.Field(sgqlc.types.non_null(Company), graphql_name='company')
    user = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='user')


class CompanySubscriptionPlanCard(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'identifier', 'name', 'brand', 'country', 'exp_month', 'exp_year', 'funding', 'cvc_check', 'last4', 'plan')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    identifier = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='identifier')
    name = sgqlc.types.Field(String, graphql_name='name')
    brand = sgqlc.types.Field(String, graphql_name='brand')
    country = sgqlc.types.Field(String, graphql_name='country')
    exp_month = sgqlc.types.Field(Int, graphql_name='expMonth')
    exp_year = sgqlc.types.Field(Int, graphql_name='expYear')
    funding = sgqlc.types.Field(String, graphql_name='funding')
    cvc_check = sgqlc.types.Field(String, graphql_name='cvcCheck')
    last4 = sgqlc.types.Field(String, graphql_name='last4')
    plan = sgqlc.types.Field(sgqlc.types.non_null(CompanySubscriptionPlan), graphql_name='plan')


class CompanySubscriptionPlanCardConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('CompanySubscriptionPlanCardEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateCompanySubscriptionPlanCard), graphql_name='aggregate')


class CompanySubscriptionPlanCardEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(CompanySubscriptionPlanCard), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class CompanySubscriptionPlanCardPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'identifier', 'name', 'brand', 'country', 'exp_month', 'exp_year', 'funding', 'cvc_check', 'last4')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    identifier = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='identifier')
    name = sgqlc.types.Field(String, graphql_name='name')
    brand = sgqlc.types.Field(String, graphql_name='brand')
    country = sgqlc.types.Field(String, graphql_name='country')
    exp_month = sgqlc.types.Field(Int, graphql_name='expMonth')
    exp_year = sgqlc.types.Field(Int, graphql_name='expYear')
    funding = sgqlc.types.Field(String, graphql_name='funding')
    cvc_check = sgqlc.types.Field(String, graphql_name='cvcCheck')
    last4 = sgqlc.types.Field(String, graphql_name='last4')


class CompanySubscriptionPlanCardSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(CompanySubscriptionPlanCard, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(CompanySubscriptionPlanCardPreviousValues, graphql_name='previousValues')


class CompanySubscriptionPlanConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('CompanySubscriptionPlanEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateCompanySubscriptionPlan), graphql_name='aggregate')


class CompanySubscriptionPlanEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(CompanySubscriptionPlan), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class CompanySubscriptionPlanPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'cus_id', 'sub_id', 'plan_id', 'plan_name', 'created_at', 'updated_at', 'status', 'current_period_start', 'current_period_end', 'cancel_at', 'canceled_at', 'cancel_at_period_end', 'ended_at', 'trial_start', 'trial_end', 'is_paid', 'payment_intent_id', 'payment_intent_status', 'payment_intent_client_secret')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    cus_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cusId')
    sub_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='subId')
    plan_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='planId')
    plan_name = sgqlc.types.Field(String, graphql_name='planName')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    status = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='status')
    current_period_start = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='currentPeriodStart')
    current_period_end = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='currentPeriodEnd')
    cancel_at = sgqlc.types.Field(DateTime, graphql_name='cancelAt')
    canceled_at = sgqlc.types.Field(DateTime, graphql_name='canceledAt')
    cancel_at_period_end = sgqlc.types.Field(Boolean, graphql_name='cancelAtPeriodEnd')
    ended_at = sgqlc.types.Field(DateTime, graphql_name='endedAt')
    trial_start = sgqlc.types.Field(DateTime, graphql_name='trialStart')
    trial_end = sgqlc.types.Field(DateTime, graphql_name='trialEnd')
    is_paid = sgqlc.types.Field(Boolean, graphql_name='isPaid')
    payment_intent_id = sgqlc.types.Field(String, graphql_name='paymentIntentId')
    payment_intent_status = sgqlc.types.Field(String, graphql_name='paymentIntentStatus')
    payment_intent_client_secret = sgqlc.types.Field(String, graphql_name='paymentIntentClientSecret')


class CompanySubscriptionPlanSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(CompanySubscriptionPlan, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(CompanySubscriptionPlanPreviousValues, graphql_name='previousValues')


class CompanyUser(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'company', 'user', 'level', 'allow_notification', 'company_user_notification_options', 'company_user_folders', 'last_accessed_at', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    company = sgqlc.types.Field(sgqlc.types.non_null(Company), graphql_name='company')
    user = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='user')
    level = sgqlc.types.Field(sgqlc.types.non_null(UserAccessLevel), graphql_name='level')
    allow_notification = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='allowNotification')
    company_user_notification_options = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserNotificationOption')), graphql_name='companyUserNotificationOptions', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(CompanyUserNotificationOptionWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(CompanyUserNotificationOptionOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    company_user_folders = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompanyUserFolder')), graphql_name='companyUserFolders', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(CompanyUserFolderWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(CompanyUserFolderOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class CompanyUserConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('CompanyUserEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateCompanyUser), graphql_name='aggregate')


class CompanyUserEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(CompanyUser), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class CompanyUserFolder(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'position', 'folder', 'company_user')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    folder = sgqlc.types.Field(sgqlc.types.non_null('Folder'), graphql_name='folder')
    company_user = sgqlc.types.Field(sgqlc.types.non_null(CompanyUser), graphql_name='companyUser')


class CompanyUserFolderConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('CompanyUserFolderEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateCompanyUserFolder), graphql_name='aggregate')


class CompanyUserFolderEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(CompanyUserFolder), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class CompanyUserFolderPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'position')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')


class CompanyUserFolderSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(CompanyUserFolder, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(CompanyUserFolderPreviousValues, graphql_name='previousValues')


class CompanyUserList(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('users', 'page_info', 'total_count')
    users = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('User'))), graphql_name='users')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class CompanyUserNotificationOption(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'company_user', 'notification_option', 'allow_email', 'allow_push', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    company_user = sgqlc.types.Field(sgqlc.types.non_null(CompanyUser), graphql_name='companyUser')
    notification_option = sgqlc.types.Field(sgqlc.types.non_null('NotificationOption'), graphql_name='notificationOption')
    allow_email = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='allowEmail')
    allow_push = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='allowPush')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class CompanyUserNotificationOptionConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('CompanyUserNotificationOptionEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateCompanyUserNotificationOption), graphql_name='aggregate')


class CompanyUserNotificationOptionEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(CompanyUserNotificationOption), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class CompanyUserNotificationOptionPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'allow_email', 'allow_push', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    allow_email = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='allowEmail')
    allow_push = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='allowPush')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class CompanyUserNotificationOptionSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(CompanyUserNotificationOption, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(CompanyUserNotificationOptionPreviousValues, graphql_name='previousValues')


class CompanyUserPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'level', 'allow_notification', 'last_accessed_at', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    level = sgqlc.types.Field(sgqlc.types.non_null(UserAccessLevel), graphql_name='level')
    allow_notification = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='allowNotification')
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class CompanyUserSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(CompanyUser, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(CompanyUserPreviousValues, graphql_name='previousValues')


class CopyProjectStatus(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('old_company', 'old_project', 'new_company', 'new_project_name', 'is_template', 'is_active', 'queue_position', 'total_queues')
    old_company = sgqlc.types.Field(Company, graphql_name='oldCompany')
    old_project = sgqlc.types.Field('Project', graphql_name='oldProject')
    new_company = sgqlc.types.Field(Company, graphql_name='newCompany')
    new_project_name = sgqlc.types.Field(String, graphql_name='newProjectName')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    queue_position = sgqlc.types.Field(Int, graphql_name='queuePosition')
    total_queues = sgqlc.types.Field(Int, graphql_name='totalQueues')


class CustomDomain(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'company', 'user', 'application_type', 'verification_status', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    company = sgqlc.types.Field(sgqlc.types.non_null(Company), graphql_name='company')
    user = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='user')
    application_type = sgqlc.types.Field(ApplicationType, graphql_name='applicationType')
    verification_status = sgqlc.types.Field(String, graphql_name='verificationStatus')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class CustomDomainPagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(CustomDomain))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class CustomField(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'type', 'position', 'button_type', 'button_confirm_text', 'currency_field_id', 'conversion_date_type', 'conversion_date', 'description', 'min', 'max', 'latitude', 'longitude', 'start_date', 'end_date', 'timezone', 'currency', 'prefix', 'is_due_date', 'formula', 'created_at', 'updated_at', 'custom_field_options', 'region_code', 'country_codes', 'text', 'number', 'checked', 'selected_option', 'selected_options', 'selected_todos', 'files', 'value', 'todo', 'editable', 'project_user_role', 'metadata', 'time_duration_display', 'time_duration_target_time', 'time_duration_start', 'time_duration_end', 'reference_project', 'reference_filter', 'reference_multiple', 'custom_field_lookup_option', 'use_sequence_unique_id', 'sequence_digits', 'sequence_starting_number', 'sequence_id', 'automations', 'project', 'todo_custom_fields', 'activity', 'todo_actions', 'form_fields')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    type = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldType), graphql_name='type')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    button_type = sgqlc.types.Field(String, graphql_name='buttonType')
    button_confirm_text = sgqlc.types.Field(String, graphql_name='buttonConfirmText')
    currency_field_id = sgqlc.types.Field(String, graphql_name='currencyFieldId')
    conversion_date_type = sgqlc.types.Field(String, graphql_name='conversionDateType')
    conversion_date = sgqlc.types.Field(String, graphql_name='conversionDate')
    description = sgqlc.types.Field(String, graphql_name='description')
    min = sgqlc.types.Field(Float, graphql_name='min')
    max = sgqlc.types.Field(Float, graphql_name='max')
    latitude = sgqlc.types.Field(Float, graphql_name='latitude')
    longitude = sgqlc.types.Field(Float, graphql_name='longitude')
    start_date = sgqlc.types.Field(DateTime, graphql_name='startDate')
    end_date = sgqlc.types.Field(DateTime, graphql_name='endDate')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    currency = sgqlc.types.Field(String, graphql_name='currency')
    prefix = sgqlc.types.Field(String, graphql_name='prefix')
    is_due_date = sgqlc.types.Field(Boolean, graphql_name='isDueDate')
    formula = sgqlc.types.Field(JSON, graphql_name='formula')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    custom_field_options = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldOption')), graphql_name='customFieldOptions', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(CustomFieldOptionWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(CustomFieldOptionOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    region_code = sgqlc.types.Field(String, graphql_name='regionCode')
    country_codes = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='countryCodes')
    text = sgqlc.types.Field(String, graphql_name='text')
    number = sgqlc.types.Field(Float, graphql_name='number')
    checked = sgqlc.types.Field(Boolean, graphql_name='checked')
    selected_option = sgqlc.types.Field('CustomFieldOption', graphql_name='selectedOption')
    selected_options = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CustomFieldOption')), graphql_name='selectedOptions')
    selected_todos = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Todo')), graphql_name='selectedTodos')
    files = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('File')), graphql_name='files')
    value = sgqlc.types.Field(JSON, graphql_name='value')
    todo = sgqlc.types.Field('Todo', graphql_name='todo')
    editable = sgqlc.types.Field(Boolean, graphql_name='editable')
    project_user_role = sgqlc.types.Field('ProjectUserRole', graphql_name='projectUserRole')
    metadata = sgqlc.types.Field(JSON, graphql_name='metadata')
    time_duration_display = sgqlc.types.Field(CustomFieldTimeDurationDisplayType, graphql_name='timeDurationDisplay')
    time_duration_target_time = sgqlc.types.Field(Float, graphql_name='timeDurationTargetTime')
    time_duration_start = sgqlc.types.Field('CustomFieldTimeDuration', graphql_name='timeDurationStart')
    time_duration_end = sgqlc.types.Field('CustomFieldTimeDuration', graphql_name='timeDurationEnd')
    reference_project = sgqlc.types.Field('Project', graphql_name='referenceProject')
    reference_filter = sgqlc.types.Field('TodoFilter', graphql_name='referenceFilter')
    reference_multiple = sgqlc.types.Field(Boolean, graphql_name='referenceMultiple')
    custom_field_lookup_option = sgqlc.types.Field('CustomFieldLookupOption', graphql_name='customFieldLookupOption')
    use_sequence_unique_id = sgqlc.types.Field(Boolean, graphql_name='useSequenceUniqueId')
    sequence_digits = sgqlc.types.Field(Int, graphql_name='sequenceDigits')
    sequence_starting_number = sgqlc.types.Field(Int, graphql_name='sequenceStartingNumber')
    sequence_id = sgqlc.types.Field(Int, graphql_name='sequenceId')
    automations = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Automation)), graphql_name='automations')
    project = sgqlc.types.Field(sgqlc.types.non_null('Project'), graphql_name='project')
    todo_custom_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomField')), graphql_name='todoCustomFields', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(TodoCustomFieldWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(TodoCustomFieldOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    activity = sgqlc.types.Field(Activity, graphql_name='activity')
    todo_actions = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoAction')), graphql_name='todoActions', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(TodoActionWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(TodoActionOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    form_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormField')), graphql_name='formFields', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(FormFieldWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(FormFieldOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )


class CustomFieldConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('CustomFieldEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateCustomField), graphql_name='aggregate')


class CustomFieldEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(CustomField), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class CustomFieldLookupOption(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('reference', 'lookup', 'parent_custom_field', 'parent_lookup', 'lookup_type', 'lookup_values', 'lookup_result')
    reference = sgqlc.types.Field(CustomField, graphql_name='reference')
    lookup = sgqlc.types.Field(CustomField, graphql_name='lookup')
    parent_custom_field = sgqlc.types.Field(CustomField, graphql_name='parentCustomField')
    parent_lookup = sgqlc.types.Field(CustomField, graphql_name='parentLookup')
    lookup_type = sgqlc.types.Field(CustomFieldLookupType, graphql_name='lookupType')
    lookup_values = sgqlc.types.Field(JSON, graphql_name='lookupValues')
    lookup_result = sgqlc.types.Field(JSON, graphql_name='lookupResult')


class CustomFieldOption(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'title', 'button_type', 'button_confirm_text', 'color', 'currency_conversion_to', 'currency_conversion_from', 'position', 'created_at', 'updated_at', 'custom_field', 'todo_custom_field', 'uid', 'todo_custom_field_options')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    button_type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='buttonType')
    button_confirm_text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='buttonConfirmText')
    color = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='color')
    currency_conversion_to = sgqlc.types.Field(String, graphql_name='currencyConversionTo')
    currency_conversion_from = sgqlc.types.Field(String, graphql_name='currencyConversionFrom')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    custom_field = sgqlc.types.Field(sgqlc.types.non_null(CustomField), graphql_name='customField')
    todo_custom_field = sgqlc.types.Field('TodoCustomField', graphql_name='todoCustomField')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    todo_custom_field_options = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldOption')), graphql_name='todoCustomFieldOptions', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(TodoCustomFieldOptionWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(TodoCustomFieldOptionOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )


class CustomFieldOptionConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('CustomFieldOptionEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateCustomFieldOption), graphql_name='aggregate')


class CustomFieldOptionEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldOption), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class CustomFieldOptionPagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(CustomFieldOption))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class CustomFieldOptionPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'color', 'position', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    color = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='color')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class CustomFieldOptionQueries(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('custom_field_options',)
    custom_field_options = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldOptionPagination), graphql_name='customFieldOptions', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(sgqlc.types.non_null(CustomFieldOptionsFilterInput), graphql_name='filter', default=None)),
        ('sort', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CustomFieldOptionSort)), graphql_name='sort', default=('position_ASC',))),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
        ('take', sgqlc.types.Arg(Int, graphql_name='take', default=20)),
        ('distinct', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CustomFieldOptionsFilterDistinct)), graphql_name='distinct', default=None)),
))
    )


class CustomFieldOptionSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'previous_values', 'updated_fields')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(CustomFieldOption, graphql_name='node')
    previous_values = sgqlc.types.Field(CustomFieldOption, graphql_name='previousValues')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')


class CustomFieldPagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info', 'total_count')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(CustomField))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(Int, graphql_name='totalCount')


class CustomFieldPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'type', 'position', 'description', 'min', 'max', 'currency', 'prefix', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    type = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldType), graphql_name='type')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    description = sgqlc.types.Field(String, graphql_name='description')
    min = sgqlc.types.Field(Float, graphql_name='min')
    max = sgqlc.types.Field(Float, graphql_name='max')
    currency = sgqlc.types.Field(String, graphql_name='currency')
    prefix = sgqlc.types.Field(String, graphql_name='prefix')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class CustomFieldQueries(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('custom_fields',)
    custom_fields = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldPagination), graphql_name='customFields', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(sgqlc.types.non_null(CustomFieldsFilterInput), graphql_name='filter', default=None)),
        ('sort', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CustomFieldSort)), graphql_name='sort', default=('position_ASC',))),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
        ('take', sgqlc.types.Arg(Int, graphql_name='take', default=20)),
        ('distinct', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CustomFieldsFilterDistinct)), graphql_name='distinct', default=None)),
))
    )


class CustomFieldReferenceTodo(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'title', 'todo_list_title', 'color', 'cover', 'project')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    todo_list_title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoListTitle')
    color = sgqlc.types.Field(String, graphql_name='color')
    cover = sgqlc.types.Field(String, graphql_name='cover')
    project = sgqlc.types.Field('Project', graphql_name='project')


class CustomFieldReferenceTodoPagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(CustomFieldReferenceTodo))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class CustomFieldSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(CustomField, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(CustomFieldPreviousValues, graphql_name='previousValues')


class CustomFieldTimeDuration(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('type', 'condition', 'custom_field', 'custom_field_options', 'todo_list', 'tag', 'assignee')
    type = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldTimeDurationType), graphql_name='type')
    condition = sgqlc.types.Field(CustomFieldTimeDurationCondition, graphql_name='condition')
    custom_field = sgqlc.types.Field(CustomField, graphql_name='customField')
    custom_field_options = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CustomFieldOption)), graphql_name='customFieldOptions')
    todo_list = sgqlc.types.Field('TodoList', graphql_name='todoList')
    tag = sgqlc.types.Field('Tag', graphql_name='tag')
    assignee = sgqlc.types.Field('User', graphql_name='assignee')


class Dashboard(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'title', 'created_by', 'dashboard_users', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='createdBy')
    dashboard_users = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DashboardUser')), graphql_name='dashboardUsers')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class DashboardPagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Dashboard))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class DashboardSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(Dashboard, graphql_name='node')
    previous_values = sgqlc.types.Field(Dashboard, graphql_name='previousValues')


class DashboardUser(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'user', 'role', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    user = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='user')
    role = sgqlc.types.Field(sgqlc.types.non_null(DashboardRole), graphql_name='role')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class Discussion(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'title', 'description', 'html', 'text', 'created_at', 'updated_at', 'user', 'people', 'project', 'comments', 'comment_count', 'is_read', 'is_seen', 'uid', 'activity', 'files')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    description = sgqlc.types.Field(String, graphql_name='description')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    user = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='user')
    people = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('User')), graphql_name='people')
    project = sgqlc.types.Field(sgqlc.types.non_null('Project'), graphql_name='project')
    comments = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Comment))), graphql_name='comments', args=sgqlc.types.ArgDict((
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('order_by', sgqlc.types.Arg(CommentOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('where', sgqlc.types.Arg(CommentWhereInput, graphql_name='where', default=None)),
))
    )
    comment_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='commentCount')
    is_read = sgqlc.types.Field(Boolean, graphql_name='isRead')
    is_seen = sgqlc.types.Field(Boolean, graphql_name='isSeen')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    activity = sgqlc.types.Field(Activity, graphql_name='activity')
    files = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('File')), graphql_name='files', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(FileWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(FileOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )


class DiscussionConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('DiscussionEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateDiscussion), graphql_name='aggregate')


class DiscussionEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(Discussion), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class DiscussionList(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('discussions', 'total_count', 'page_info')
    discussions = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Discussion))), graphql_name='discussions')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class DiscussionPagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Discussion))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class DiscussionPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'html', 'text', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class DiscussionSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(Discussion, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(DiscussionPreviousValues, graphql_name='previousValues')


class Document(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'content', 'content_base64', 'wiki', 'project', 'created_by', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    content = sgqlc.types.Field(String, graphql_name='content')
    content_base64 = sgqlc.types.Field(String, graphql_name='contentBase64')
    wiki = sgqlc.types.Field(Boolean, graphql_name='wiki')
    project = sgqlc.types.Field(sgqlc.types.non_null('Project'), graphql_name='project')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='createdBy')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class DocumentConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('DocumentEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateDocument), graphql_name='aggregate')


class DocumentEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(Document), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class DocumentPagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info')
    items = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Document)), graphql_name='items')
    page_info = sgqlc.types.Field('PageInfo', graphql_name='pageInfo')


class DocumentPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'content', 'content_base64', 'wiki', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(String, graphql_name='title')
    content = sgqlc.types.Field(String, graphql_name='content')
    content_base64 = sgqlc.types.Field(String, graphql_name='contentBase64')
    wiki = sgqlc.types.Field(Boolean, graphql_name='wiki')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class DocumentSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(Document, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(DocumentPreviousValues, graphql_name='previousValues')


class EmailTemplate(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'type', 'enabled', 'subject', 'body', 'cta_text', 'cta_link', 'footer', 'disclaimer', 'signature', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    type = sgqlc.types.Field(sgqlc.types.non_null(EmailTemplateType), graphql_name='type')
    enabled = sgqlc.types.Field(Boolean, graphql_name='enabled')
    subject = sgqlc.types.Field(String, graphql_name='subject')
    body = sgqlc.types.Field(String, graphql_name='body')
    cta_text = sgqlc.types.Field(String, graphql_name='ctaText')
    cta_link = sgqlc.types.Field(String, graphql_name='ctaLink')
    footer = sgqlc.types.Field(String, graphql_name='footer')
    disclaimer = sgqlc.types.Field(String, graphql_name='disclaimer')
    signature = sgqlc.types.Field(String, graphql_name='signature')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')


class EmailTemplatePagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(EmailTemplate))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class File(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'size', 'type', 'extension', 'shared', 'status', 'company', 'project', 'created_at', 'updated_at', 'comment', 'discussion', 'status_update', 'custom_field', 'folder', 'document', 'todo', 'user', 'position', 'todo_custom_field_file')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    size = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='size')
    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='type')
    extension = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='extension')
    shared = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='shared')
    status = sgqlc.types.Field(FileStatus, graphql_name='status')
    company = sgqlc.types.Field(sgqlc.types.non_null(Company), graphql_name='company')
    project = sgqlc.types.Field(sgqlc.types.non_null('Project'), graphql_name='project')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    comment = sgqlc.types.Field(Comment, graphql_name='comment')
    discussion = sgqlc.types.Field(Discussion, graphql_name='discussion')
    status_update = sgqlc.types.Field('StatusUpdate', graphql_name='statusUpdate')
    custom_field = sgqlc.types.Field(CustomField, graphql_name='customField')
    folder = sgqlc.types.Field('Folder', graphql_name='folder')
    document = sgqlc.types.Field(Document, graphql_name='document')
    todo = sgqlc.types.Field('Todo', graphql_name='todo')
    user = sgqlc.types.Field('User', graphql_name='user')
    position = sgqlc.types.Field(Float, graphql_name='position')
    todo_custom_field_file = sgqlc.types.Field('TodoCustomFieldFile', graphql_name='todoCustomFieldFile')


class FileConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('FileEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateFile), graphql_name='aggregate')


class FileEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(File), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class FileList(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('files', 'total_count', 'total_size', 'page_info')
    files = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(File))), graphql_name='files')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    total_size = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='totalSize')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class FilePagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(File))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class FilePreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'size', 'type', 'extension', 'shared', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    size = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='size')
    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='type')
    extension = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='extension')
    shared = sgqlc.types.Field(Boolean, graphql_name='shared')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class FileSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(File, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(FilePreviousValues, graphql_name='previousValues')


class Folder(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'title', 'type', 'position', 'color', 'created_at', 'created_by', 'parent', 'metadata', 'uid', 'updated_at', 'company_user_folders', 'project_user_folders', 'files', 'folders')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    type = sgqlc.types.Field(sgqlc.types.non_null(FolderType), graphql_name='type')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    color = sgqlc.types.Field(String, graphql_name='color')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    created_by = sgqlc.types.Field('User', graphql_name='createdBy')
    parent = sgqlc.types.Field('Folder', graphql_name='parent')
    metadata = sgqlc.types.Field('FolderMetadata', graphql_name='metadata')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    company_user_folders = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CompanyUserFolder)), graphql_name='companyUserFolders', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(CompanyUserFolderWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(CompanyUserFolderOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    project_user_folders = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserFolder')), graphql_name='projectUserFolders', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(ProjectUserFolderWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(ProjectUserFolderOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    files = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(File)), graphql_name='files', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(FileWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(FileOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    folders = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Folder')), graphql_name='folders', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(FolderWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(FolderOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )


class FolderConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('FolderEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateFolder), graphql_name='aggregate')


class FolderEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(Folder), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class FolderMetadata(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('parent_ids', 'child_ids', 'parents', 'children', 'level', 'total_file_count', 'total_file_size')
    parent_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='parentIds')
    child_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='childIds')
    parents = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Folder)), graphql_name='parents')
    children = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Folder)), graphql_name='children')
    level = sgqlc.types.Field(Int, graphql_name='level')
    total_file_count = sgqlc.types.Field(Int, graphql_name='totalFileCount')
    total_file_size = sgqlc.types.Field(Float, graphql_name='totalFileSize')


class FolderPagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Folder))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class FolderPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'type', 'color', 'created_at', 'updated_at', 'metadata')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    type = sgqlc.types.Field(sgqlc.types.non_null(FolderType), graphql_name='type')
    color = sgqlc.types.Field(String, graphql_name='color')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')


class FolderSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(Folder, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(FolderPreviousValues, graphql_name='previousValues')


class Form(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'title', 'description', 'footer_text', 'show_footer', 'is_active', 'theme', 'primary_color', 'hide_branding', 'response_text', 'submit_text', 'image_url', 'redirect_url', 'snapshot_url', 'created_at', 'updated_at', 'created_by', 'form_fields', 'assignees', 'tags', 'todo_list', 'uid', 'form_tags', 'form_users', 'project')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    description = sgqlc.types.Field(String, graphql_name='description')
    footer_text = sgqlc.types.Field(String, graphql_name='footerText')
    show_footer = sgqlc.types.Field(Boolean, graphql_name='showFooter')
    is_active = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isActive')
    theme = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='theme')
    primary_color = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='primaryColor')
    hide_branding = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hideBranding')
    response_text = sgqlc.types.Field(String, graphql_name='responseText')
    submit_text = sgqlc.types.Field(String, graphql_name='submitText')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    redirect_url = sgqlc.types.Field(String, graphql_name='redirectURL')
    snapshot_url = sgqlc.types.Field(String, graphql_name='snapshotURL')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='createdBy')
    form_fields = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('FormField'))), graphql_name='formFields', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(FormFieldWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(FormFieldOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    assignees = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('User'))), graphql_name='assignees')
    tags = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('Tag'))), graphql_name='tags')
    todo_list = sgqlc.types.Field('TodoList', graphql_name='todoList')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    form_tags = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormTag')), graphql_name='formTags', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(FormTagWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(FormTagOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    form_users = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FormUser')), graphql_name='formUsers', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(FormUserWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(FormUserOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    project = sgqlc.types.Field(sgqlc.types.non_null('Project'), graphql_name='project')


class FormConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('FormEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateForm), graphql_name='aggregate')


class FormEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(Form), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class FormField(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'field', 'name', 'placeholder', 'required', 'position', 'add_to_description', 'hidden', 'extra_info', 'custom_field', 'created_at', 'updated_at', 'uid', 'form')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    field = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='field')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    placeholder = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='placeholder')
    required = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='required')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    add_to_description = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='addToDescription')
    hidden = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hidden')
    extra_info = sgqlc.types.Field(String, graphql_name='extraInfo')
    custom_field = sgqlc.types.Field(CustomField, graphql_name='customField')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    form = sgqlc.types.Field(sgqlc.types.non_null(Form), graphql_name='form')


class FormFieldConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('FormFieldEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateFormField), graphql_name='aggregate')


class FormFieldEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(FormField), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class FormFieldPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'placeholder', 'required', 'hidden', 'extra_info', 'add_to_description', 'field', 'position', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    placeholder = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='placeholder')
    required = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='required')
    hidden = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hidden')
    extra_info = sgqlc.types.Field(String, graphql_name='extraInfo')
    add_to_description = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='addToDescription')
    field = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='field')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class FormFieldSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(FormField, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(FormFieldPreviousValues, graphql_name='previousValues')


class FormPagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Form))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class FormPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'description', 'is_active', 'theme', 'primary_color', 'hide_branding', 'response_text', 'submit_text', 'image_url', 'redirect_url', 'snapshot_url', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    description = sgqlc.types.Field(String, graphql_name='description')
    is_active = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isActive')
    theme = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='theme')
    primary_color = sgqlc.types.Field(String, graphql_name='primaryColor')
    hide_branding = sgqlc.types.Field(Boolean, graphql_name='hideBranding')
    response_text = sgqlc.types.Field(String, graphql_name='responseText')
    submit_text = sgqlc.types.Field(String, graphql_name='submitText')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    redirect_url = sgqlc.types.Field(String, graphql_name='redirectURL')
    snapshot_url = sgqlc.types.Field(String, graphql_name='snapshotURL')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class FormQueries(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('form',)
    form = sgqlc.types.Field(sgqlc.types.non_null(Form), graphql_name='form', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )


class FormSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(Form, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(FormPreviousValues, graphql_name='previousValues')


class FormTag(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'tag', 'form', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    tag = sgqlc.types.Field(sgqlc.types.non_null('Tag'), graphql_name='tag')
    form = sgqlc.types.Field(sgqlc.types.non_null(Form), graphql_name='form')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class FormTagConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('FormTagEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateFormTag), graphql_name='aggregate')


class FormTagEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(FormTag), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class FormTagPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class FormTagSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(FormTag, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(FormTagPreviousValues, graphql_name='previousValues')


class FormUser(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'form', 'user', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    form = sgqlc.types.Field(sgqlc.types.non_null(Form), graphql_name='form')
    user = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='user')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class FormUserConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('FormUserEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateFormUser), graphql_name='aggregate')


class FormUserEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(FormUser), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class FormUserPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class FormUserSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(FormUser, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(FormUserPreviousValues, graphql_name='previousValues')


class Formula(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('logic', 'display')
    logic = sgqlc.types.Field('FormulaLogic', graphql_name='logic')
    display = sgqlc.types.Field('FormulaDisplay', graphql_name='display')


class FormulaDisplay(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('type', 'currency', 'precision', 'function')
    type = sgqlc.types.Field(sgqlc.types.non_null(FormulaDisplayType), graphql_name='type')
    currency = sgqlc.types.Field('FormulaDisplayCurrency', graphql_name='currency')
    precision = sgqlc.types.Field(Float, graphql_name='precision')
    function = sgqlc.types.Field(ChartFunction, graphql_name='function')


class FormulaDisplayCurrency(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'name')
    code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='code')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')


class FormulaLogic(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('text', 'html')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')


class GoogleMapsSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_enabled', 'api_key')
    is_enabled = sgqlc.types.Field(Boolean, graphql_name='isEnabled')
    api_key = sgqlc.types.Field(String, graphql_name='apiKey')


class HttpAuthorizationApiKey(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('key', 'value', 'pass_by')
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='key')
    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='value')
    pass_by = sgqlc.types.Field(sgqlc.types.non_null(HttpAuthorizationApiKeyPassBy), graphql_name='passBy')


class HttpAuthorizationBasicAuth(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('username', 'password')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    password = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='password')


class HttpHeader(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('key', 'value')
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='key')
    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='value')


class HttpLog(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'url', 'headers', 'body', 'method', 'status_code', 'status_text', 'elapsed_time_ms', 'response_headers', 'response_data', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')
    headers = sgqlc.types.Field(JSON, graphql_name='headers')
    body = sgqlc.types.Field(JSON, graphql_name='body')
    method = sgqlc.types.Field(sgqlc.types.non_null(HttpMethod), graphql_name='method')
    status_code = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='statusCode')
    status_text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='statusText')
    elapsed_time_ms = sgqlc.types.Field(Int, graphql_name='elapsedTimeMs')
    response_headers = sgqlc.types.Field(JSON, graphql_name='responseHeaders')
    response_data = sgqlc.types.Field(JSON, graphql_name='responseData')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class HttpParameter(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('key', 'value')
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='key')
    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='value')


class Image(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'thumbnail', 'small', 'medium', 'large', 'original', 'type', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    thumbnail = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='thumbnail')
    small = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='small')
    medium = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='medium')
    large = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='large')
    original = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='original')
    type = sgqlc.types.Field(ImageType, graphql_name='type')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class ImageConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('ImageEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateImage), graphql_name='aggregate')


class ImageEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(Image), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class ImagePreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'thumbnail', 'small', 'medium', 'large', 'original', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    thumbnail = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='thumbnail')
    small = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='small')
    medium = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='medium')
    large = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='large')
    original = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='original')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class ImageSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(Image, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(ImagePreviousValues, graphql_name='previousValues')


class Invitation(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'email', 'access_level', 'metadata', 'invited_by', 'created_at', 'updated_at', 'expired_at', 'project', 'activity')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='accessLevel')
    metadata = sgqlc.types.Field(JSON, graphql_name='metadata')
    invited_by = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='invitedBy')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    expired_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='expiredAt')
    project = sgqlc.types.Field(sgqlc.types.non_null('Project'), graphql_name='project')
    activity = sgqlc.types.Field(Activity, graphql_name='activity')


class InvitationConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('InvitationEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateInvitation), graphql_name='aggregate')


class InvitationEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(Invitation), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class InvitationPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'email', 'access_level', 'created_at', 'updated_at', 'expired_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    access_level = sgqlc.types.Field(sgqlc.types.non_null(UserAccessLevel), graphql_name='accessLevel')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    expired_at = sgqlc.types.Field(DateTime, graphql_name='expiredAt')


class InvitationSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(Invitation, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(InvitationPreviousValues, graphql_name='previousValues')


class Link(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'url', 'position', 'members_only', 'created_at', 'updated_at', 'created_by', 'company', 'description')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    members_only = sgqlc.types.Field(Boolean, graphql_name='membersOnly')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='createdBy')
    company = sgqlc.types.Field(sgqlc.types.non_null(Company), graphql_name='company')
    description = sgqlc.types.Field(String, graphql_name='description')


class LinkConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('LinkEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateLink), graphql_name='aggregate')


class LinkEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(Link), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class LinkPagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Link))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class LinkPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'url', 'position', 'members_only', 'created_at', 'updated_at', 'description')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    members_only = sgqlc.types.Field(Boolean, graphql_name='membersOnly')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    description = sgqlc.types.Field(String, graphql_name='description')


class LinkSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(Link, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(LinkPreviousValues, graphql_name='previousValues')


class Mention(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'created_at', 'mentionee', 'mentioner', 'ref', 'is_read')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    mentionee = sgqlc.types.Field('User', graphql_name='mentionee')
    mentioner = sgqlc.types.Field('User', graphql_name='mentioner')
    ref = sgqlc.types.Field('MentionRef', graphql_name='ref')
    is_read = sgqlc.types.Field(Boolean, graphql_name='isRead')


class MentionPagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Mention))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PaginationInfo'), graphql_name='pageInfo')


class MentionSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(Mention, graphql_name='node')
    previous_values = sgqlc.types.Field(Mention, graphql_name='previousValues')


class MentionSubscriptionPayload_DEPRECATED(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field('MentionResult', graphql_name='node')
    previous_values = sgqlc.types.Field('MentionResult', graphql_name='previousValues')


class Mutation(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('accept_invitation', 'add_todo_assignees', 'admin_mutations', 'ai_tag', 'apply_company_license', 'archive_project', 'archive_todo', 'cancel_company_subscription_plan', 'cancel_invitation', 'cancel_todo_import', 'change_company_subscription_plan', 'change_todo_done_status', 'comment_typing', 'convert_project_to_template', 'copy_chart', 'copy_dashboard', 'copy_form', 'copy_todo', 'copy_project', 'copy_automation', 'create_automation', 'create_calendar_sync_token', 'create_checklist', 'create_checklist_item', 'create_chat', 'create_chat_message', 'create_comment', 'create_company', 'create_company_checkout_url', 'create_company_subscription_plan', 'create_custom_domain', 'create_chart', 'create_chart_segment', 'create_chart_segment_value', 'create_custom_field', 'create_custom_field_option', 'create_custom_field_options', 'create_dashboard', 'create_discussion', 'create_document', 'create_email_template', 'create_file', 'create_form', 'upload_company_image', 'upload_file', 'upload_files', 'upload_image', 'upload_profile_image', 'upload_project_image', 'create_folder', 'create_link', 'create_personal_access_token', 'create_portable_document', 'create_portable_document_field', 'create_project', 'create_project_user_role', 'create_repeating_todo', 'create_smtp_credential', 'create_status_update', 'create_white_label_subscription_portal_url', 'create_white_label_subscription_checkout_url', 'create_tag', 'create_todo', 'create_todo_action', 'create_todo_custom_field_file', 'create_todo_dependency', 'create_todo_list', 'create_webhook', 'create_oauth_connection', 'delete_automation', 'delete_chat', 'delete_chart', 'delete_chart_segment', 'delete_chart_segment_value', 'delete_checklist', 'delete_checklist_item', 'delete_comment', 'delete_company', 'delete_company_request', 'delete_custom_domain', 'delete_custom_field', 'delete_custom_field_option', 'delete_dashboard', 'delete_discussion', 'delete_document', 'delete_email_template', 'delete_file', 'delete_files', 'delete_folder', 'delete_form', 'delete_form_field', 'delete_link', 'delete_personal_access_token', 'delete_portable_document', 'delete_portable_document_field', 'delete_project', 'delete_project_user_role', 'delete_repeating_todo', 'delete_smtp_credential', 'delete_status_update', 'delete_tag', 'delete_todo', 'delete_todo_custom_field_file', 'delete_todo_dependency', 'delete_todo_list', 'delete_webhook', 'delete_oauth_connection', 'disable_webhook', 'edit_automation', 'edit_chart', 'edit_chart_segment', 'edit_chart_segment_value', 'edit_checklist', 'edit_checklist_item', 'edit_comment', 'edit_company', 'edit_custom_field', 'edit_custom_field_option', 'edit_dashboard', 'edit_folder', 'edit_profile', 'edit_project', 'edit_tag', 'edit_todo', 'edit_todo_list', 'export_csvtemplate', 'export_todos', 'extend_free_trial', 'generate_aisummary', 'handle_todo_reminder', 'handle_todo_overdue', 'hide_project_emails', 'import_todos', 'invitation_sign_up', 'invite_user', 'leave_company', 'leave_project', 'mark_mention_as_read', 'mark_mention_as_unread', 'mark_all_mentions_as_read', 'mark_activity_as_read', 'mark_activity_as_unread', 'mark_all_activity_as_read', 'mark_all_activity_as_seen', 'mark_all_mention_as_read', 'mark_todo_list_as_done', 'mark_todo_list_as_undone', 'move_todo', 'update_todos', 'notify_todo_checklist_item_overdue', 'print_portable_document', 'reactivate_company_subscription_plan', 'recalculate_charts', 'reject_invitation', 'remove_company_user', 'remove_project_user', 'remove_project_from_templates', 'remove_todo_assignees', 'reposition_projects', 'resend_invitation', 'send_test_email', 'set_profile_image', 'set_profile_locale', 'set_project_folder', 'set_file_folder', 'set_parent_folder', 'set_todo_assignees', 'set_todo_reminder', 'set_checklist_item_assignees', 'set_todo_custom_field', 'set_todo_tags', 'sign_in', 'sign_in_request', 'sign_in_silent', 'sign_out', 'sign_up', 'subscribe_to_push_notifications', 'submit_form', 'sync_pg', 'toggle_company_notification', 'toggle_email_notification_option', 'toggle_project_notification', 'toggle_push_notification_option', 'unarchive_project', 'unsubscribe_from_push_notifications', 'update_chat', 'update_company_access_level', 'update_company_subscription_plan_card', 'update_company_theme', 'update_custom_domain', 'update_checklist_item_due_date', 'update_current_user_last_active_at', 'update_discussion', 'update_document', 'update_email', 'update_email_request', 'update_email_template', 'update_file', 'update_form', 'update_folder_position', 'update_import_progress', 'update_link', 'update_portable_document', 'update_portable_document_field', 'update_project_access_level', 'update_project_last_accessed_at', 'update_project_position', 'update_project_user_role', 'update_repeating_todo', 'update_smtp_credential', 'update_todo_dependency', 'update_todo_done_status', 'update_todo_due_date', 'update_todo_title', 'update_webhook', 'update_oauth_connection', 'upgrade_company_checkout_url', 'upgrade_company_license', 'upsert_form_field', 'undo_aitag', 'verify_custom_domain', 'verify_smtp_credential')
    accept_invitation = sgqlc.types.Field(sgqlc.types.non_null('MutationResult'), graphql_name='acceptInvitation', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    add_todo_assignees = sgqlc.types.Field(sgqlc.types.non_null('MutationResult'), graphql_name='addTodoAssignees', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(AddTodoAssigneesInput), graphql_name='input', default=None)),
))
    )
    admin_mutations = sgqlc.types.Field(sgqlc.types.non_null(AdminMutations), graphql_name='adminMutations')
    ai_tag = sgqlc.types.Field(sgqlc.types.non_null('MutationResult'), graphql_name='aiTag', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(AITagInput), graphql_name='input', default=None)),
))
    )
    apply_company_license = sgqlc.types.Field(Boolean, graphql_name='applyCompanyLicense', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ApplyCompanyLicenseInput), graphql_name='input', default=None)),
))
    )
    archive_project = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='archiveProject', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(String, graphql_name='id', default=None)),
))
    )
    archive_todo = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='archiveTodo', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    cancel_company_subscription_plan = sgqlc.types.Field(Boolean, graphql_name='cancelCompanySubscriptionPlan', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CancelCompanySubscriptionPlanInput), graphql_name='input', default=None)),
))
    )
    cancel_invitation = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='cancelInvitation', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    cancel_todo_import = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='cancelTodoImport', args=sgqlc.types.ArgDict((
        ('project_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='projectId', default=None)),
))
    )
    change_company_subscription_plan = sgqlc.types.Field(Boolean, graphql_name='changeCompanySubscriptionPlan', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ChangeCompanySubscriptionPlanInput), graphql_name='input', default=None)),
))
    )
    change_todo_done_status = sgqlc.types.Field(Boolean, graphql_name='changeTodoDoneStatus', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    comment_typing = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='commentTyping', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
        ('name', sgqlc.types.Arg(sgqlc.types.non_null(CommentTypingSubscriptionName), graphql_name='name', default=None)),
))
    )
    convert_project_to_template = sgqlc.types.Field(sgqlc.types.non_null('Project'), graphql_name='convertProjectToTemplate', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ConvertProjectToTemplateInput), graphql_name='input', default=None)),
))
    )
    copy_chart = sgqlc.types.Field(sgqlc.types.non_null(Chart), graphql_name='copyChart', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CopyChartInput), graphql_name='input', default=None)),
))
    )
    copy_dashboard = sgqlc.types.Field(sgqlc.types.non_null(Dashboard), graphql_name='copyDashboard', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CopyDashboardInput), graphql_name='input', default=None)),
))
    )
    copy_form = sgqlc.types.Field(sgqlc.types.non_null(Form), graphql_name='copyForm', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CopyFormInput), graphql_name='input', default=None)),
))
    )
    copy_todo = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='copyTodo', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CopyTodoInput), graphql_name='input', default=None)),
))
    )
    copy_project = sgqlc.types.Field(Boolean, graphql_name='copyProject', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CopyProjectInput), graphql_name='input', default=None)),
))
    )
    copy_automation = sgqlc.types.Field(sgqlc.types.non_null(Automation), graphql_name='copyAutomation', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CopyAutomationInput), graphql_name='input', default=None)),
))
    )
    create_automation = sgqlc.types.Field(sgqlc.types.non_null(Automation), graphql_name='createAutomation', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateAutomationInput), graphql_name='input', default=None)),
))
    )
    create_calendar_sync_token = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='createCalendarSyncToken', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateCalendarSyncTokenInput), graphql_name='input', default=None)),
))
    )
    create_checklist = sgqlc.types.Field(sgqlc.types.non_null(Checklist), graphql_name='createChecklist', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateChecklistInput), graphql_name='input', default=None)),
))
    )
    create_checklist_item = sgqlc.types.Field(sgqlc.types.non_null(ChecklistItem), graphql_name='createChecklistItem', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateChecklistItemInput), graphql_name='input', default=None)),
))
    )
    create_chat = sgqlc.types.Field(sgqlc.types.non_null(Chat), graphql_name='createChat', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateChatInput), graphql_name='input', default=None)),
))
    )
    create_chat_message = sgqlc.types.Field(sgqlc.types.non_null(ChatMessage), graphql_name='createChatMessage', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateChatMessageInput), graphql_name='input', default=None)),
))
    )
    create_comment = sgqlc.types.Field(sgqlc.types.non_null(Comment), graphql_name='createComment', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateCommentInput), graphql_name='input', default=None)),
))
    )
    create_company = sgqlc.types.Field(sgqlc.types.non_null(Company), graphql_name='createCompany', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateCompanyInput), graphql_name='input', default=None)),
))
    )
    create_company_checkout_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='createCompanyCheckoutURL', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateCompanyCheckoutURLInput), graphql_name='input', default=None)),
))
    )
    create_company_subscription_plan = sgqlc.types.Field(Boolean, graphql_name='createCompanySubscriptionPlan', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateCompanySubscriptionPlanInput), graphql_name='input', default=None)),
))
    )
    create_custom_domain = sgqlc.types.Field(sgqlc.types.non_null(CustomDomain), graphql_name='createCustomDomain', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateCustomDomainInput), graphql_name='input', default=None)),
))
    )
    create_chart = sgqlc.types.Field(sgqlc.types.non_null(Chart), graphql_name='createChart', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateChartInput), graphql_name='input', default=None)),
))
    )
    create_chart_segment = sgqlc.types.Field(sgqlc.types.non_null(ChartSegment), graphql_name='createChartSegment', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateChartSegmentInput), graphql_name='input', default=None)),
))
    )
    create_chart_segment_value = sgqlc.types.Field(sgqlc.types.non_null(ChartSegmentValue), graphql_name='createChartSegmentValue', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateChartSegmentValueInput), graphql_name='input', default=None)),
))
    )
    create_custom_field = sgqlc.types.Field(sgqlc.types.non_null(CustomField), graphql_name='createCustomField', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateCustomFieldInput), graphql_name='input', default=None)),
))
    )
    create_custom_field_option = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldOption), graphql_name='createCustomFieldOption', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateCustomFieldOptionInput), graphql_name='input', default=None)),
))
    )
    create_custom_field_options = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CustomFieldOption)), graphql_name='createCustomFieldOptions', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateCustomFieldOptionsInput), graphql_name='input', default=None)),
))
    )
    create_dashboard = sgqlc.types.Field(sgqlc.types.non_null(Dashboard), graphql_name='createDashboard', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateDashboardInput), graphql_name='input', default=None)),
))
    )
    create_discussion = sgqlc.types.Field(sgqlc.types.non_null(Discussion), graphql_name='createDiscussion', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateDiscussionInput), graphql_name='input', default=None)),
))
    )
    create_document = sgqlc.types.Field(sgqlc.types.non_null(Document), graphql_name='createDocument', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateDocumentInput), graphql_name='input', default=None)),
))
    )
    create_email_template = sgqlc.types.Field(sgqlc.types.non_null(EmailTemplate), graphql_name='createEmailTemplate', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateEmailTemplateInput), graphql_name='input', default=None)),
))
    )
    create_file = sgqlc.types.Field(sgqlc.types.non_null(File), graphql_name='createFile', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateFileInput), graphql_name='input', default=None)),
))
    )
    create_form = sgqlc.types.Field(sgqlc.types.non_null(Form), graphql_name='createForm', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateFormInput), graphql_name='input', default=None)),
))
    )
    upload_company_image = sgqlc.types.Field(sgqlc.types.non_null(Company), graphql_name='uploadCompanyImage', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UploadCompanyImageInput), graphql_name='input', default=None)),
))
    )
    upload_file = sgqlc.types.Field(sgqlc.types.non_null(File), graphql_name='uploadFile', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UploadFileInput), graphql_name='input', default=None)),
))
    )
    upload_files = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(File))), graphql_name='uploadFiles', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UploadFilesInput), graphql_name='input', default=None)),
))
    )
    upload_image = sgqlc.types.Field(sgqlc.types.non_null(Image), graphql_name='uploadImage', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UploadImageInput), graphql_name='input', default=None)),
))
    )
    upload_profile_image = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='uploadProfileImage', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UploadProfileImageInput), graphql_name='input', default=None)),
))
    )
    upload_project_image = sgqlc.types.Field(sgqlc.types.non_null('Project'), graphql_name='uploadProjectImage', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UploadProjectImageInput), graphql_name='input', default=None)),
))
    )
    create_folder = sgqlc.types.Field(sgqlc.types.non_null(Folder), graphql_name='createFolder', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateFolderInput), graphql_name='input', default=None)),
))
    )
    create_link = sgqlc.types.Field(sgqlc.types.non_null(Link), graphql_name='createLink', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateLinkInput), graphql_name='input', default=None)),
))
    )
    create_personal_access_token = sgqlc.types.Field(sgqlc.types.non_null('PersonalAccessToken'), graphql_name='createPersonalAccessToken', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreatePersonalAccessTokenInput), graphql_name='input', default=None)),
))
    )
    create_portable_document = sgqlc.types.Field(sgqlc.types.non_null('PortableDocument'), graphql_name='createPortableDocument', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreatePortableDocumentInput), graphql_name='input', default=None)),
))
    )
    create_portable_document_field = sgqlc.types.Field(sgqlc.types.non_null('PortableDocumentField'), graphql_name='createPortableDocumentField', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreatePortableDocumentFieldInput), graphql_name='input', default=None)),
))
    )
    create_project = sgqlc.types.Field('Project', graphql_name='createProject', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateProjectInput), graphql_name='input', default=None)),
))
    )
    create_project_user_role = sgqlc.types.Field(sgqlc.types.non_null('ProjectUserRole'), graphql_name='createProjectUserRole', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateProjectUserRoleInput), graphql_name='input', default=None)),
))
    )
    create_repeating_todo = sgqlc.types.Field(Boolean, graphql_name='createRepeatingTodo', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateRepeatingTodoInput), graphql_name='input', default=None)),
))
    )
    create_smtp_credential = sgqlc.types.Field(sgqlc.types.non_null('SmtpCredential'), graphql_name='createSmtpCredential', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateSmtpCredentialInput), graphql_name='input', default=None)),
))
    )
    create_status_update = sgqlc.types.Field(sgqlc.types.non_null('StatusUpdate'), graphql_name='createStatusUpdate', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateStatusUpdateInput), graphql_name='input', default=None)),
))
    )
    create_white_label_subscription_portal_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='createWhiteLabelSubscriptionPortalURL', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateWhiteLabelSubscriptionPortalURLInput), graphql_name='input', default=None)),
))
    )
    create_white_label_subscription_checkout_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='createWhiteLabelSubscriptionCheckoutURL', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateWhiteLabelSubscriptionCheckoutURLInput), graphql_name='input', default=None)),
))
    )
    create_tag = sgqlc.types.Field(sgqlc.types.non_null('Tag'), graphql_name='createTag', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateTagInput), graphql_name='input', default=None)),
))
    )
    create_todo = sgqlc.types.Field(sgqlc.types.non_null('Todo'), graphql_name='createTodo', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateTodoInput), graphql_name='input', default=None)),
))
    )
    create_todo_action = sgqlc.types.Field('TodoAction', graphql_name='createTodoAction', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateTodoActionInput), graphql_name='input', default=None)),
))
    )
    create_todo_custom_field_file = sgqlc.types.Field(Boolean, graphql_name='createTodoCustomFieldFile', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateTodoCustomFieldFileInput), graphql_name='input', default=None)),
))
    )
    create_todo_dependency = sgqlc.types.Field(sgqlc.types.non_null('Todo'), graphql_name='createTodoDependency', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateTodoDependencyInput), graphql_name='input', default=None)),
))
    )
    create_todo_list = sgqlc.types.Field(sgqlc.types.non_null('TodoList'), graphql_name='createTodoList', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateTodoListInput), graphql_name='input', default=None)),
))
    )
    create_webhook = sgqlc.types.Field(sgqlc.types.non_null('Webhook'), graphql_name='createWebhook', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateWebhookInput), graphql_name='input', default=None)),
))
    )
    create_oauth_connection = sgqlc.types.Field(sgqlc.types.non_null('OAuthConnection'), graphql_name='createOAuthConnection', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateOAuthConnectionInput), graphql_name='input', default=None)),
))
    )
    delete_automation = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='deleteAutomation', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    delete_chat = sgqlc.types.Field(Boolean, graphql_name='deleteChat', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    delete_chart = sgqlc.types.Field(sgqlc.types.non_null('MutationResult'), graphql_name='deleteChart', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    delete_chart_segment = sgqlc.types.Field(sgqlc.types.non_null('MutationResult'), graphql_name='deleteChartSegment', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    delete_chart_segment_value = sgqlc.types.Field(sgqlc.types.non_null('MutationResult'), graphql_name='deleteChartSegmentValue', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    delete_checklist = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='deleteChecklist', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    delete_checklist_item = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='deleteChecklistItem', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    delete_comment = sgqlc.types.Field(sgqlc.types.non_null('MutationResult'), graphql_name='deleteComment', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    delete_company = sgqlc.types.Field(Boolean, graphql_name='deleteCompany', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteCompanyInput), graphql_name='input', default=None)),
))
    )
    delete_company_request = sgqlc.types.Field(Boolean, graphql_name='deleteCompanyRequest', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteCompanyRequestInput), graphql_name='input', default=None)),
))
    )
    delete_custom_domain = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='deleteCustomDomain', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    delete_custom_field = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='deleteCustomField', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    delete_custom_field_option = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='deleteCustomFieldOption', args=sgqlc.types.ArgDict((
        ('custom_field_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='customFieldId', default=None)),
        ('option_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='optionId', default=None)),
        ('todo_id', sgqlc.types.Arg(String, graphql_name='todoId', default=None)),
))
    )
    delete_dashboard = sgqlc.types.Field(sgqlc.types.non_null('MutationResult'), graphql_name='deleteDashboard', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    delete_discussion = sgqlc.types.Field(sgqlc.types.non_null('MutationResult'), graphql_name='deleteDiscussion', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    delete_document = sgqlc.types.Field(Boolean, graphql_name='deleteDocument', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    delete_email_template = sgqlc.types.Field(Boolean, graphql_name='deleteEmailTemplate', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    delete_file = sgqlc.types.Field(Boolean, graphql_name='deleteFile', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    delete_files = sgqlc.types.Field(Boolean, graphql_name='deleteFiles', args=sgqlc.types.ArgDict((
        ('ids', sgqlc.types.Arg(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='ids', default=None)),
))
    )
    delete_folder = sgqlc.types.Field(Boolean, graphql_name='deleteFolder', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteFolderInput), graphql_name='input', default=None)),
))
    )
    delete_form = sgqlc.types.Field(Boolean, graphql_name='deleteForm', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    delete_form_field = sgqlc.types.Field(Boolean, graphql_name='deleteFormField', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    delete_link = sgqlc.types.Field(Boolean, graphql_name='deleteLink', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteLinkInput), graphql_name='input', default=None)),
))
    )
    delete_personal_access_token = sgqlc.types.Field(Boolean, graphql_name='deletePersonalAccessToken', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeletePersonalAccessTokenInput), graphql_name='input', default=None)),
))
    )
    delete_portable_document = sgqlc.types.Field(Boolean, graphql_name='deletePortableDocument', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    delete_portable_document_field = sgqlc.types.Field(Boolean, graphql_name='deletePortableDocumentField', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    delete_project = sgqlc.types.Field(sgqlc.types.non_null('MutationResult'), graphql_name='deleteProject', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    delete_project_user_role = sgqlc.types.Field(Boolean, graphql_name='deleteProjectUserRole', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteProjectUserRoleInput), graphql_name='input', default=None)),
))
    )
    delete_repeating_todo = sgqlc.types.Field(Boolean, graphql_name='deleteRepeatingTodo', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    delete_smtp_credential = sgqlc.types.Field(Boolean, graphql_name='deleteSmtpCredential', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    delete_status_update = sgqlc.types.Field(sgqlc.types.non_null('MutationResult'), graphql_name='deleteStatusUpdate', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    delete_tag = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='deleteTag', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    delete_todo = sgqlc.types.Field(sgqlc.types.non_null('MutationResult'), graphql_name='deleteTodo', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteTodoInput), graphql_name='input', default=None)),
))
    )
    delete_todo_custom_field_file = sgqlc.types.Field(Boolean, graphql_name='deleteTodoCustomFieldFile', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteTodoCustomFieldFileInput), graphql_name='input', default=None)),
))
    )
    delete_todo_dependency = sgqlc.types.Field(Boolean, graphql_name='deleteTodoDependency', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteTodoDependencyInput), graphql_name='input', default=None)),
))
    )
    delete_todo_list = sgqlc.types.Field(sgqlc.types.non_null('MutationResult'), graphql_name='deleteTodoList', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteTodoListInput), graphql_name='input', default=None)),
))
    )
    delete_webhook = sgqlc.types.Field(sgqlc.types.non_null('MutationResult'), graphql_name='deleteWebhook', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteWebhookInput), graphql_name='input', default=None)),
))
    )
    delete_oauth_connection = sgqlc.types.Field(Boolean, graphql_name='deleteOAuthConnection', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    disable_webhook = sgqlc.types.Field(sgqlc.types.non_null('MutationResult'), graphql_name='disableWebhook', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DisableWebhookInput), graphql_name='input', default=None)),
))
    )
    edit_automation = sgqlc.types.Field(sgqlc.types.non_null(Automation), graphql_name='editAutomation', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(EditAutomationInput), graphql_name='input', default=None)),
))
    )
    edit_chart = sgqlc.types.Field(sgqlc.types.non_null(Chart), graphql_name='editChart', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(EditChartInput), graphql_name='input', default=None)),
))
    )
    edit_chart_segment = sgqlc.types.Field(sgqlc.types.non_null(ChartSegment), graphql_name='editChartSegment', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(EditChartSegmentInput), graphql_name='input', default=None)),
))
    )
    edit_chart_segment_value = sgqlc.types.Field(sgqlc.types.non_null(ChartSegmentValue), graphql_name='editChartSegmentValue', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(EditChartSegmentValueInput), graphql_name='input', default=None)),
))
    )
    edit_checklist = sgqlc.types.Field(sgqlc.types.non_null(Checklist), graphql_name='editChecklist', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(EditChecklistInput), graphql_name='input', default=None)),
))
    )
    edit_checklist_item = sgqlc.types.Field(sgqlc.types.non_null(ChecklistItem), graphql_name='editChecklistItem', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(EditChecklistItemInput), graphql_name='input', default=None)),
))
    )
    edit_comment = sgqlc.types.Field(sgqlc.types.non_null(Comment), graphql_name='editComment', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(EditCommentInput), graphql_name='input', default=None)),
))
    )
    edit_company = sgqlc.types.Field(sgqlc.types.non_null(Company), graphql_name='editCompany', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(EditCompanyInput), graphql_name='input', default=None)),
))
    )
    edit_custom_field = sgqlc.types.Field(sgqlc.types.non_null(CustomField), graphql_name='editCustomField', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(EditCustomFieldInput), graphql_name='input', default=None)),
))
    )
    edit_custom_field_option = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldOption), graphql_name='editCustomFieldOption', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(EditCustomFieldOptionInput), graphql_name='input', default=None)),
))
    )
    edit_dashboard = sgqlc.types.Field(sgqlc.types.non_null(Dashboard), graphql_name='editDashboard', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(EditDashboardInput), graphql_name='input', default=None)),
))
    )
    edit_folder = sgqlc.types.Field(sgqlc.types.non_null(Folder), graphql_name='editFolder', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(EditFolderInput), graphql_name='input', default=None)),
))
    )
    edit_profile = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='editProfile', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(EditProfileInput), graphql_name='input', default=None)),
))
    )
    edit_project = sgqlc.types.Field(sgqlc.types.non_null('Project'), graphql_name='editProject', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(EditProjectInput), graphql_name='input', default=None)),
))
    )
    edit_tag = sgqlc.types.Field(sgqlc.types.non_null('Tag'), graphql_name='editTag', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(EditTagInput), graphql_name='input', default=None)),
))
    )
    edit_todo = sgqlc.types.Field(sgqlc.types.non_null('Todo'), graphql_name='editTodo', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(EditTodoInput), graphql_name='input', default=None)),
))
    )
    edit_todo_list = sgqlc.types.Field(sgqlc.types.non_null('TodoList'), graphql_name='editTodoList', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(EditTodoListInput), graphql_name='input', default=None)),
))
    )
    export_csvtemplate = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='exportCSVTemplate', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ExportCSVTemplateInput), graphql_name='input', default=None)),
))
    )
    export_todos = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='exportTodos', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ExportTodosInput), graphql_name='input', default=None)),
))
    )
    extend_free_trial = sgqlc.types.Field(sgqlc.types.non_null(Company), graphql_name='extendFreeTrial', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ExtendFreeTrialInput), graphql_name='input', default=None)),
))
    )
    generate_aisummary = sgqlc.types.Field(Boolean, graphql_name='generateAISummary', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(GenerateAISummaryInput), graphql_name='input', default=None)),
))
    )
    handle_todo_reminder = sgqlc.types.Field(Boolean, graphql_name='handleTodoReminder', args=sgqlc.types.ArgDict((
        ('key', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='key', default=None)),
))
    )
    handle_todo_overdue = sgqlc.types.Field(Boolean, graphql_name='handleTodoOverdue', args=sgqlc.types.ArgDict((
        ('todo_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='todoId', default=None)),
))
    )
    hide_project_emails = sgqlc.types.Field(sgqlc.types.non_null('Project'), graphql_name='hideProjectEmails', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(HideProjectEmailsInput), graphql_name='input', default=None)),
))
    )
    import_todos = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='importTodos', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ImportTodosInput), graphql_name='input', default=None)),
))
    )
    invitation_sign_up = sgqlc.types.Field(sgqlc.types.non_null(AuthPayload), graphql_name='invitationSignUp', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(InvitationSignUpInput), graphql_name='input', default=None)),
))
    )
    invite_user = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='inviteUser', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(InviteUserInput), graphql_name='input', default=None)),
))
    )
    leave_company = sgqlc.types.Field(Boolean, graphql_name='leaveCompany')
    leave_project = sgqlc.types.Field(Boolean, graphql_name='leaveProject')
    mark_mention_as_read = sgqlc.types.Field(sgqlc.types.non_null(Mention), graphql_name='markMentionAsRead', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(MarkMentionAsReadInput), graphql_name='input', default=None)),
))
    )
    mark_mention_as_unread = sgqlc.types.Field(sgqlc.types.non_null(Mention), graphql_name='markMentionAsUnread', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(MarkMentionAsUnreadInput), graphql_name='input', default=None)),
))
    )
    mark_all_mentions_as_read = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Mention)), graphql_name='markAllMentionsAsRead')
    mark_activity_as_read = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='markActivityAsRead', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(MarkActivityAsReadInput), graphql_name='input', default=None)),
))
    )
    mark_activity_as_unread = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='markActivityAsUnread', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(MarkActivityAsUnreadInput), graphql_name='input', default=None)),
))
    )
    mark_all_activity_as_read = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='markAllActivityAsRead', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(MarkAllActivityAsReadInput), graphql_name='input', default=None)),
))
    )
    mark_all_activity_as_seen = sgqlc.types.Field(Boolean, graphql_name='markAllActivityAsSeen', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(MarkAllActivityAsSeenInput), graphql_name='input', default=None)),
))
    )
    mark_all_mention_as_read = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='markAllMentionAsRead')
    mark_todo_list_as_done = sgqlc.types.Field(Boolean, graphql_name='markTodoListAsDone', args=sgqlc.types.ArgDict((
        ('todo_list_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='todoListId', default=None)),
        ('filter', sgqlc.types.Arg(TodosFilter, graphql_name='filter', default=None)),
))
    )
    mark_todo_list_as_undone = sgqlc.types.Field(Boolean, graphql_name='markTodoListAsUndone', args=sgqlc.types.ArgDict((
        ('todo_list_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='todoListId', default=None)),
        ('filter', sgqlc.types.Arg(TodosFilter, graphql_name='filter', default=None)),
))
    )
    move_todo = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='moveTodo', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(MoveTodoInput), graphql_name='input', default=None)),
))
    )
    update_todos = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='updateTodos', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateTodosInput), graphql_name='input', default=None)),
))
    )
    notify_todo_checklist_item_overdue = sgqlc.types.Field(Boolean, graphql_name='notifyTodoChecklistItemOverdue', args=sgqlc.types.ArgDict((
        ('todo_checklist_item_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='todoChecklistItemId', default=None)),
))
    )
    print_portable_document = sgqlc.types.Field(String, graphql_name='printPortableDocument', args=sgqlc.types.ArgDict((
        ('pdf_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='pdfId', default=None)),
        ('todo_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='todoId', default=None)),
))
    )
    reactivate_company_subscription_plan = sgqlc.types.Field(Boolean, graphql_name='reactivateCompanySubscriptionPlan', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ReactivateCompanySubscriptionPlanInput), graphql_name='input', default=None)),
))
    )
    recalculate_charts = sgqlc.types.Field(Boolean, graphql_name='recalculateCharts', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RecalculateChartsInput), graphql_name='input', default=None)),
))
    )
    reject_invitation = sgqlc.types.Field(Boolean, graphql_name='rejectInvitation', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    remove_company_user = sgqlc.types.Field(Boolean, graphql_name='removeCompanyUser', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RemoveCompanyUserInput), graphql_name='input', default=None)),
))
    )
    remove_project_user = sgqlc.types.Field(sgqlc.types.non_null('MutationResult'), graphql_name='removeProjectUser', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RemoveProjectUserInput), graphql_name='input', default=None)),
))
    )
    remove_project_from_templates = sgqlc.types.Field(sgqlc.types.non_null('Project'), graphql_name='removeProjectFromTemplates', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RemoveProjectFromTemplatesInput), graphql_name='input', default=None)),
))
    )
    remove_todo_assignees = sgqlc.types.Field(sgqlc.types.non_null('MutationResult'), graphql_name='removeTodoAssignees', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RemoveTodoAssigneesInput), graphql_name='input', default=None)),
))
    )
    reposition_projects = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('Project'))), graphql_name='repositionProjects')
    resend_invitation = sgqlc.types.Field(sgqlc.types.non_null(Invitation), graphql_name='resendInvitation', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    send_test_email = sgqlc.types.Field(Boolean, graphql_name='sendTestEmail', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SendTestEmailInput), graphql_name='input', default=None)),
))
    )
    set_profile_image = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='setProfileImage', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(ImageInput, graphql_name='input', default=None)),
))
    )
    set_profile_locale = sgqlc.types.Field(Boolean, graphql_name='setProfileLocale', args=sgqlc.types.ArgDict((
        ('locale', sgqlc.types.Arg(Locale, graphql_name='locale', default=None)),
))
    )
    set_project_folder = sgqlc.types.Field(Boolean, graphql_name='setProjectFolder', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetProjectFolderInput), graphql_name='input', default=None)),
))
    )
    set_file_folder = sgqlc.types.Field(Boolean, graphql_name='setFileFolder', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetFileFolderInput), graphql_name='input', default=None)),
))
    )
    set_parent_folder = sgqlc.types.Field(Boolean, graphql_name='setParentFolder', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetParentFolderInput), graphql_name='input', default=None)),
))
    )
    set_todo_assignees = sgqlc.types.Field(sgqlc.types.non_null('MutationResult'), graphql_name='setTodoAssignees', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetTodoAssigneesInput), graphql_name='input', default=None)),
))
    )
    set_todo_reminder = sgqlc.types.Field(sgqlc.types.non_null('Todo'), graphql_name='setTodoReminder', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetTodoReminderInput), graphql_name='input', default=None)),
))
    )
    set_checklist_item_assignees = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='setChecklistItemAssignees', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetChecklistItemAssigneesInput), graphql_name='input', default=None)),
))
    )
    set_todo_custom_field = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='setTodoCustomField', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetTodoCustomFieldInput), graphql_name='input', default=None)),
))
    )
    set_todo_tags = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='setTodoTags', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetTodoTagsInput), graphql_name='input', default=None)),
))
    )
    sign_in = sgqlc.types.Field(sgqlc.types.non_null(AuthPayload), graphql_name='signIn', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SignInInput), graphql_name='input', default=None)),
))
    )
    sign_in_request = sgqlc.types.Field(sgqlc.types.non_null('SignInRequestResult'), graphql_name='signInRequest', args=sgqlc.types.ArgDict((
        ('email', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='email', default=None)),
        ('cb', sgqlc.types.Arg(String, graphql_name='cb', default=None)),
))
    )
    sign_in_silent = sgqlc.types.Field(AuthPayload, graphql_name='signInSilent')
    sign_out = sgqlc.types.Field(Boolean, graphql_name='signOut')
    sign_up = sgqlc.types.Field(sgqlc.types.non_null(AuthPayload), graphql_name='signUp', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SignUpInput), graphql_name='input', default=None)),
))
    )
    subscribe_to_push_notifications = sgqlc.types.Field(sgqlc.types.non_null('MutationResult'), graphql_name='subscribeToPushNotifications', args=sgqlc.types.ArgDict((
        ('token', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='token', default=None)),
        ('unsubscribing_token', sgqlc.types.Arg(String, graphql_name='unsubscribingToken', default=None)),
))
    )
    submit_form = sgqlc.types.Field(Boolean, graphql_name='submitForm', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SubmitFormInput), graphql_name='input', default=None)),
))
    )
    sync_pg = sgqlc.types.Field(Boolean, graphql_name='syncPG', args=sgqlc.types.ArgDict((
        ('secret', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='secret', default=None)),
))
    )
    toggle_company_notification = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='toggleCompanyNotification')
    toggle_email_notification_option = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='toggleEmailNotificationOption', args=sgqlc.types.ArgDict((
        ('name', sgqlc.types.Arg(sgqlc.types.non_null(NotificationOptionName), graphql_name='name', default=None)),
))
    )
    toggle_project_notification = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='toggleProjectNotification', args=sgqlc.types.ArgDict((
        ('project_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='projectId', default=None)),
))
    )
    toggle_push_notification_option = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='togglePushNotificationOption', args=sgqlc.types.ArgDict((
        ('name', sgqlc.types.Arg(sgqlc.types.non_null(NotificationOptionName), graphql_name='name', default=None)),
))
    )
    unarchive_project = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='unarchiveProject', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(String, graphql_name='id', default=None)),
))
    )
    unsubscribe_from_push_notifications = sgqlc.types.Field(sgqlc.types.non_null('MutationResult'), graphql_name='unsubscribeFromPushNotifications', args=sgqlc.types.ArgDict((
        ('token', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='token', default=None)),
))
    )
    update_chat = sgqlc.types.Field(sgqlc.types.non_null(Chat), graphql_name='updateChat', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateChatInput), graphql_name='input', default=None)),
))
    )
    update_company_access_level = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='updateCompanyAccessLevel', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCompanyAccessLevelInput), graphql_name='input', default=None)),
))
    )
    update_company_subscription_plan_card = sgqlc.types.Field(Boolean, graphql_name='updateCompanySubscriptionPlanCard', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCompanySubscriptionPlanCardInput), graphql_name='input', default=None)),
))
    )
    update_company_theme = sgqlc.types.Field(sgqlc.types.non_null(Company), graphql_name='updateCompanyTheme', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCompanyThemeInput), graphql_name='input', default=None)),
))
    )
    update_custom_domain = sgqlc.types.Field(sgqlc.types.non_null(CustomDomain), graphql_name='updateCustomDomain', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCustomDomainInput), graphql_name='input', default=None)),
))
    )
    update_checklist_item_due_date = sgqlc.types.Field(sgqlc.types.non_null(ChecklistItem), graphql_name='updateChecklistItemDueDate', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateChecklistItemDueDateInput), graphql_name='input', default=None)),
))
    )
    update_current_user_last_active_at = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='updateCurrentUserLastActiveAt')
    update_discussion = sgqlc.types.Field(sgqlc.types.non_null(Discussion), graphql_name='updateDiscussion', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateDiscussionInput), graphql_name='input', default=None)),
))
    )
    update_document = sgqlc.types.Field(sgqlc.types.non_null(Document), graphql_name='updateDocument', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateDocumentInput), graphql_name='input', default=None)),
))
    )
    update_email = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='updateEmail', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateEmailInput), graphql_name='input', default=None)),
))
    )
    update_email_request = sgqlc.types.Field(Boolean, graphql_name='updateEmailRequest', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateEmailRequestInput), graphql_name='input', default=None)),
))
    )
    update_email_template = sgqlc.types.Field(sgqlc.types.non_null(EmailTemplate), graphql_name='updateEmailTemplate', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateEmailTemplateInput), graphql_name='input', default=None)),
))
    )
    update_file = sgqlc.types.Field(sgqlc.types.non_null(File), graphql_name='updateFile', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateFileInput), graphql_name='input', default=None)),
))
    )
    update_form = sgqlc.types.Field(sgqlc.types.non_null(Form), graphql_name='updateForm', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateFormInput), graphql_name='input', default=None)),
))
    )
    update_folder_position = sgqlc.types.Field(sgqlc.types.non_null(Folder), graphql_name='updateFolderPosition', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateFolderPositionInput), graphql_name='input', default=None)),
))
    )
    update_import_progress = sgqlc.types.Field(Boolean, graphql_name='updateImportProgress', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateImportProgressInput), graphql_name='input', default=None)),
))
    )
    update_link = sgqlc.types.Field(sgqlc.types.non_null(Link), graphql_name='updateLink', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateLinkInput), graphql_name='input', default=None)),
))
    )
    update_portable_document = sgqlc.types.Field(sgqlc.types.non_null('PortableDocument'), graphql_name='updatePortableDocument', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdatePortableDocumentInput), graphql_name='input', default=None)),
))
    )
    update_portable_document_field = sgqlc.types.Field(sgqlc.types.non_null('PortableDocumentField'), graphql_name='updatePortableDocumentField', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdatePortableDocumentFieldInput), graphql_name='input', default=None)),
))
    )
    update_project_access_level = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='updateProjectAccessLevel', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateProjectAccessLevelInput), graphql_name='input', default=None)),
))
    )
    update_project_last_accessed_at = sgqlc.types.Field(sgqlc.types.non_null('Project'), graphql_name='updateProjectLastAccessedAt', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateProjectLastAccessedAtInput), graphql_name='input', default=None)),
))
    )
    update_project_position = sgqlc.types.Field(sgqlc.types.non_null('Project'), graphql_name='updateProjectPosition', args=sgqlc.types.ArgDict((
        ('project_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='projectId', default=None)),
        ('position', sgqlc.types.Arg(sgqlc.types.non_null(Float), graphql_name='position', default=None)),
        ('folder_id', sgqlc.types.Arg(String, graphql_name='folderId', default=None)),
))
    )
    update_project_user_role = sgqlc.types.Field(sgqlc.types.non_null('ProjectUserRole'), graphql_name='updateProjectUserRole', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateProjectUserRoleInput), graphql_name='input', default=None)),
))
    )
    update_repeating_todo = sgqlc.types.Field(Boolean, graphql_name='updateRepeatingTodo', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateRepeatingTodoInput), graphql_name='input', default=None)),
))
    )
    update_smtp_credential = sgqlc.types.Field(sgqlc.types.non_null('SmtpCredential'), graphql_name='updateSmtpCredential', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateSmtpCredentialInput), graphql_name='input', default=None)),
))
    )
    update_todo_dependency = sgqlc.types.Field(sgqlc.types.non_null('Todo'), graphql_name='updateTodoDependency', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateTodoDependencyInput), graphql_name='input', default=None)),
))
    )
    update_todo_done_status = sgqlc.types.Field(sgqlc.types.non_null('Todo'), graphql_name='updateTodoDoneStatus', args=sgqlc.types.ArgDict((
        ('todo_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='todoId', default=None)),
))
    )
    update_todo_due_date = sgqlc.types.Field(sgqlc.types.non_null('Todo'), graphql_name='updateTodoDueDate', args=sgqlc.types.ArgDict((
        ('todo_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='todoId', default=None)),
        ('started_at', sgqlc.types.Arg(DateTime, graphql_name='startedAt', default=None)),
        ('dued_at', sgqlc.types.Arg(DateTime, graphql_name='duedAt', default=None)),
        ('timezone', sgqlc.types.Arg(String, graphql_name='timezone', default=None)),
))
    )
    update_todo_title = sgqlc.types.Field(sgqlc.types.non_null('Todo'), graphql_name='updateTodoTitle', args=sgqlc.types.ArgDict((
        ('todo_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='todoId', default=None)),
        ('title', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='title', default=None)),
))
    )
    update_webhook = sgqlc.types.Field(sgqlc.types.non_null('Webhook'), graphql_name='updateWebhook', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateWebhookInput), graphql_name='input', default=None)),
))
    )
    update_oauth_connection = sgqlc.types.Field(sgqlc.types.non_null('OAuthConnection'), graphql_name='updateOAuthConnection', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateOAuthConnectionInput), graphql_name='input', default=None)),
))
    )
    upgrade_company_checkout_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='upgradeCompanyCheckoutURL', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpgradeCompanyCheckoutURLInput), graphql_name='input', default=None)),
))
    )
    upgrade_company_license = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='upgradeCompanyLicense', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpgradeCompanyLicenseInput), graphql_name='input', default=None)),
))
    )
    upsert_form_field = sgqlc.types.Field(sgqlc.types.non_null(FormField), graphql_name='upsertFormField', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpsertFormFieldInput), graphql_name='input', default=None)),
))
    )
    undo_aitag = sgqlc.types.Field(Boolean, graphql_name='undoAITag', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UndoAITagInput), graphql_name='input', default=None)),
))
    )
    verify_custom_domain = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='verifyCustomDomain', args=sgqlc.types.ArgDict((
        ('name', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='name', default=None)),
))
    )
    verify_smtp_credential = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='verifySmtpCredential', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(VerifySmtpCredentialInput), graphql_name='input', default=None)),
))
    )


class MutationResult(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('success', 'operation_id')
    success = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='success')
    operation_id = sgqlc.types.Field(String, graphql_name='operationId')


class MyTodoList(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('todos', 'total_count', 'page_info')
    todos = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('Todo'))), graphql_name='todos')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class NotificationOption(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'name', 'description', 'position', 'allow_email', 'allow_push', 'uid', 'company_user_notification_option', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    name = sgqlc.types.Field(sgqlc.types.non_null(NotificationOptionName), graphql_name='name')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    position = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='position')
    allow_email = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='allowEmail')
    allow_push = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='allowPush')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    company_user_notification_option = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CompanyUserNotificationOption)), graphql_name='companyUserNotificationOption', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(CompanyUserNotificationOptionWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(CompanyUserNotificationOptionOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class NotificationOptionConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('NotificationOptionEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateNotificationOption), graphql_name='aggregate')


class NotificationOptionEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(NotificationOption), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class NotificationOptionPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'description', 'position', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(NotificationOptionName), graphql_name='name')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    position = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='position')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class NotificationOptionSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(NotificationOption, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(NotificationOptionPreviousValues, graphql_name='previousValues')


class OAuthConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'provider', 'expired_at', 'metadata', 'project', 'created_by', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    provider = sgqlc.types.Field(sgqlc.types.non_null(OAuthProvider), graphql_name='provider')
    expired_at = sgqlc.types.Field(DateTime, graphql_name='expiredAt')
    metadata = sgqlc.types.Field(JSON, graphql_name='metadata')
    project = sgqlc.types.Field(sgqlc.types.non_null('Project'), graphql_name='project')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='createdBy')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class OAuthConnectionPagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(OAuthConnection))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class OAuthConnectionSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(OAuthConnection, graphql_name='node')
    previous_values = sgqlc.types.Field(OAuthConnection, graphql_name='previousValues')


class PageInfo(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('total_pages', 'total_items', 'page', 'per_page', 'has_next_page', 'has_previous_page', 'start_cursor', 'end_cursor')
    total_pages = sgqlc.types.Field(Int, graphql_name='totalPages')
    total_items = sgqlc.types.Field(Int, graphql_name='totalItems')
    page = sgqlc.types.Field(Int, graphql_name='page')
    per_page = sgqlc.types.Field(Int, graphql_name='perPage')
    has_next_page = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasNextPage')
    has_previous_page = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasPreviousPage')
    start_cursor = sgqlc.types.Field(String, graphql_name='startCursor')
    end_cursor = sgqlc.types.Field(String, graphql_name='endCursor')


class PaginationInfo(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('total_pages', 'total_items', 'page', 'per_page', 'has_next_page', 'has_previous_page')
    total_pages = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalPages')
    total_items = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalItems')
    page = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='page')
    per_page = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='perPage')
    has_next_page = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasNextPage')
    has_previous_page = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasPreviousPage')


class PersonalAccessToken(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'secret', 'scopes', 'expired_at', 'last_used_at', 'created_at', 'updated_at', 'user')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    secret = sgqlc.types.Field(String, graphql_name='secret')
    scopes = sgqlc.types.Field(String, graphql_name='scopes')
    expired_at = sgqlc.types.Field(DateTime, graphql_name='expiredAt')
    last_used_at = sgqlc.types.Field(DateTime, graphql_name='lastUsedAt')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    user = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='user')


class PersonalAccessTokenConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('PersonalAccessTokenEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregatePersonalAccessToken), graphql_name='aggregate')


class PersonalAccessTokenEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(PersonalAccessToken), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class PersonalAccessTokenPagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(PersonalAccessToken))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')


class PersonalAccessTokenPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'secret', 'scopes', 'expired_at', 'last_used_at', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    secret = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='secret')
    scopes = sgqlc.types.Field(String, graphql_name='scopes')
    expired_at = sgqlc.types.Field(DateTime, graphql_name='expiredAt')
    last_used_at = sgqlc.types.Field(DateTime, graphql_name='lastUsedAt')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class PersonalAccessTokenSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(PersonalAccessToken, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(PersonalAccessTokenPreviousValues, graphql_name='previousValues')


class PortableDocument(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'created_at', 'updated_at', 'created_by', 'project', 'pages', 'file')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    created_by = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='createdBy')
    project = sgqlc.types.Field(sgqlc.types.non_null('Project'), graphql_name='project')
    pages = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PortableDocumentPage'))), graphql_name='pages')
    file = sgqlc.types.Field(File, graphql_name='file')


class PortableDocumentField(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'field', 'position_x', 'position_y', 'width', 'height', 'created_at', 'updated_at', 'page', 'custom_field')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    field = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='field')
    position_x = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='positionX')
    position_y = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='positionY')
    width = sgqlc.types.Field(Float, graphql_name='width')
    height = sgqlc.types.Field(Float, graphql_name='height')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    page = sgqlc.types.Field(sgqlc.types.non_null('PortableDocumentPage'), graphql_name='page')
    custom_field = sgqlc.types.Field(CustomField, graphql_name='customField')


class PortableDocumentPage(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'url', 'created_at', 'updated_at', 'document', 'fields')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    document = sgqlc.types.Field(sgqlc.types.non_null(PortableDocument), graphql_name='document')
    fields = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(PortableDocumentField))), graphql_name='fields')


class PortableDocumentPagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(PortableDocument))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')


class Project(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'slug', 'name', 'description', 'archived', 'image', 'color', 'icon', 'company', 'custom_fields', 'folder', 'created_at', 'updated_at', 'access_level', 'allow_notification', 'position', 'unseen_activity', 'unseen_activity_count', 'todo_lists_max_position', 'last_accessed_at', 'category', 'is_template', 'is_official_template', 'automations_count', 'total_file_count', 'total_file_size', 'hide_email_from_roles', 'hide_status_update', 'todo_alias', 'hide_record_count', 'show_time_spent_in_todo_list', 'show_time_spent_in_project', 'todo_fields', 'features', 'sequence_custom_field', 'activities', 'discussions', 'files', 'invitations', 'project_users', 'questions', 'status_updates', 'tags', 'todo_lists', 'automations', 'forms', 'documents')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    image = sgqlc.types.Field(Image, graphql_name='image')
    color = sgqlc.types.Field(String, graphql_name='color')
    icon = sgqlc.types.Field(String, graphql_name='icon')
    company = sgqlc.types.Field(sgqlc.types.non_null(Company), graphql_name='company')
    custom_fields = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(CustomField))), graphql_name='customFields', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(CustomFieldWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(CustomFieldOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    folder = sgqlc.types.Field(Folder, graphql_name='folder')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    access_level = sgqlc.types.Field(UserAccessLevel, graphql_name='accessLevel', args=sgqlc.types.ArgDict((
        ('user_id', sgqlc.types.Arg(String, graphql_name='userId', default=None)),
))
    )
    allow_notification = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='allowNotification')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    unseen_activity = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='unseenActivity')
    unseen_activity_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='unseenActivityCount')
    todo_lists_max_position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='todoListsMaxPosition')
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')
    category = sgqlc.types.Field(sgqlc.types.non_null(ProjectCategory), graphql_name='category')
    is_template = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isOfficialTemplate')
    automations_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='automationsCount', args=sgqlc.types.ArgDict((
        ('is_active', sgqlc.types.Arg(Boolean, graphql_name='isActive', default=None)),
))
    )
    total_file_count = sgqlc.types.Field(Int, graphql_name='totalFileCount')
    total_file_size = sgqlc.types.Field(Float, graphql_name='totalFileSize')
    hide_email_from_roles = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(UserAccessLevel)), graphql_name='hideEmailFromRoles')
    hide_status_update = sgqlc.types.Field(Boolean, graphql_name='hideStatusUpdate')
    todo_alias = sgqlc.types.Field(String, graphql_name='todoAlias')
    hide_record_count = sgqlc.types.Field(Boolean, graphql_name='hideRecordCount')
    show_time_spent_in_todo_list = sgqlc.types.Field(Boolean, graphql_name='showTimeSpentInTodoList')
    show_time_spent_in_project = sgqlc.types.Field(Boolean, graphql_name='showTimeSpentInProject')
    todo_fields = sgqlc.types.Field(sgqlc.types.list_of('TodoField'), graphql_name='todoFields')
    features = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectFeature')), graphql_name='features')
    sequence_custom_field = sgqlc.types.Field(CustomField, graphql_name='sequenceCustomField')
    activities = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Activity)), graphql_name='activities', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(ActivityWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(ActivityOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    discussions = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Discussion)), graphql_name='discussions', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(DiscussionWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(DiscussionOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    files = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(File)), graphql_name='files', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(FileWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(FileOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    invitations = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Invitation)), graphql_name='invitations', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(InvitationWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(InvitationOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    project_users = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUser')), graphql_name='projectUsers', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(ProjectUserWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(ProjectUserOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    questions = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Question')), graphql_name='questions', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(QuestionWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(QuestionOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    status_updates = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StatusUpdate')), graphql_name='statusUpdates', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(StatusUpdateWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(StatusUpdateOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    tags = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Tag')), graphql_name='tags', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(TagWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(TagOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    todo_lists = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoList')), graphql_name='todoLists', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(TodoListWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(TodoListOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    automations = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Automation)), graphql_name='automations', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(AutomationWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(AutomationOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    forms = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Form)), graphql_name='forms', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(FormWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(FormOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    documents = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Document)), graphql_name='documents', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(DocumentWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(DocumentOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )


class ProjectConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('ProjectEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateProject), graphql_name='aggregate')


class ProjectEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(Project), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class ProjectFeature(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('type', 'enabled')
    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='type')
    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='enabled')


class ProjectPagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info', 'total_count')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Project))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(Int, graphql_name='totalCount')


class ProjectPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'slug', 'name', 'description', 'archived', 'created_at', 'updated_at', 'is_template', 'is_official_template', 'category', 'hide_email_from_roles')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    archived = sgqlc.types.Field(Boolean, graphql_name='archived')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    is_template = sgqlc.types.Field(Boolean, graphql_name='isTemplate')
    is_official_template = sgqlc.types.Field(Boolean, graphql_name='isOfficialTemplate')
    category = sgqlc.types.Field(ProjectCategory, graphql_name='category')
    hide_email_from_roles = sgqlc.types.Field(String, graphql_name='hideEmailFromRoles')


class ProjectSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(Project, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(ProjectPreviousValues, graphql_name='previousValues')


class ProjectUser(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'project', 'user', 'project_user_folders', 'level', 'allow_notification', 'position', 'last_accessed_at', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    project = sgqlc.types.Field(sgqlc.types.non_null(Project), graphql_name='project')
    user = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='user')
    project_user_folders = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserFolder')), graphql_name='projectUserFolders', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(ProjectUserFolderWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(ProjectUserFolderOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    level = sgqlc.types.Field(sgqlc.types.non_null(UserAccessLevel), graphql_name='level')
    allow_notification = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='allowNotification')
    position = sgqlc.types.Field(Float, graphql_name='position')
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class ProjectUserConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('ProjectUserEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateProjectUser), graphql_name='aggregate')


class ProjectUserEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(ProjectUser), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class ProjectUserFolder(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'folder', 'project_user', 'position')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    folder = sgqlc.types.Field(sgqlc.types.non_null(Folder), graphql_name='folder')
    project_user = sgqlc.types.Field(sgqlc.types.non_null(ProjectUser), graphql_name='projectUser')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')


class ProjectUserFolderConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('ProjectUserFolderEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateProjectUserFolder), graphql_name='aggregate')


class ProjectUserFolderEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(ProjectUserFolder), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class ProjectUserFolderPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'position')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')


class ProjectUserFolderSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(ProjectUserFolder, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(ProjectUserFolderPreviousValues, graphql_name='previousValues')


class ProjectUserList(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('users', 'page_info', 'total_count')
    users = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('User'))), graphql_name='users')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class ProjectUserPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'level', 'allow_notification', 'position', 'last_accessed_at', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    level = sgqlc.types.Field(sgqlc.types.non_null(UserAccessLevel), graphql_name='level')
    allow_notification = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='allowNotification')
    position = sgqlc.types.Field(Float, graphql_name='position')
    last_accessed_at = sgqlc.types.Field(DateTime, graphql_name='lastAccessedAt')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class ProjectUserRole(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'description', 'allow_invite_others', 'show_only_assigned_todos', 'show_only_mentioned_comments', 'is_activity_enabled', 'is_chat_enabled', 'is_docs_enabled', 'is_files_enabled', 'is_forms_enabled', 'is_wiki_enabled', 'is_records_enabled', 'is_people_enabled', 'record_tag_filter', 'created_at', 'updated_at', 'project', 'custom_fields', 'todo_lists')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    description = sgqlc.types.Field(String, graphql_name='description')
    allow_invite_others = sgqlc.types.Field(Boolean, graphql_name='allowInviteOthers')
    show_only_assigned_todos = sgqlc.types.Field(Boolean, graphql_name='showOnlyAssignedTodos')
    show_only_mentioned_comments = sgqlc.types.Field(Boolean, graphql_name='showOnlyMentionedComments')
    is_activity_enabled = sgqlc.types.Field(Boolean, graphql_name='isActivityEnabled')
    is_chat_enabled = sgqlc.types.Field(Boolean, graphql_name='isChatEnabled')
    is_docs_enabled = sgqlc.types.Field(Boolean, graphql_name='isDocsEnabled')
    is_files_enabled = sgqlc.types.Field(Boolean, graphql_name='isFilesEnabled')
    is_forms_enabled = sgqlc.types.Field(Boolean, graphql_name='isFormsEnabled')
    is_wiki_enabled = sgqlc.types.Field(Boolean, graphql_name='isWikiEnabled')
    is_records_enabled = sgqlc.types.Field(Boolean, graphql_name='isRecordsEnabled')
    is_people_enabled = sgqlc.types.Field(Boolean, graphql_name='isPeopleEnabled')
    record_tag_filter = sgqlc.types.Field('RecordTagFilter', graphql_name='recordTagFilter')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')
    project = sgqlc.types.Field(sgqlc.types.non_null(Project), graphql_name='project')
    custom_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CustomField)), graphql_name='customFields')
    todo_lists = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ProjectUserRoleTodoList')), graphql_name='todoLists')


class ProjectUserRoleSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(ProjectUserRole, graphql_name='node')
    previous_values = sgqlc.types.Field(ProjectUserRole, graphql_name='previousValues')


class ProjectUserRoleTodoList(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'todo_list_id', 'viewable', 'editable', 'deletable', 'project_user_role')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    todo_list_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='todoListId')
    viewable = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='viewable')
    editable = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='editable')
    deletable = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='deletable')
    project_user_role = sgqlc.types.Field(sgqlc.types.non_null(ProjectUserRole), graphql_name='projectUserRole')


class ProjectUserSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(ProjectUser, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(ProjectUserPreviousValues, graphql_name='previousValues')


class Query(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('activity_list', 'admin_queries', 'assignees', 'available_subscription_plans', 'automation_list', 'beacon_signature', 'comment_list', 'companies', 'company', 'company_level', 'company_list', 'company_subscription_plan', 'company_subscription_plan_portal', 'company_subscription_plan_promo_code', 'company_user_list', 'copy_project_status', 'chats', 'chart', 'charts', 'checklist_items', 'custom_domains', 'custom_field_list', 'custom_fields', 'custom_field_option', 'custom_field_options', 'custom_field_reference_todos', 'custom_field_queries', 'custom_field_option_queries', 'current_user', 'dashboard', 'dashboards', 'document', 'discussions', 'documents', 'discussion', 'discussion_list', 'email_template', 'email_templates', 'file_list', 'files', 'form', 'form_fields', 'forms', 'form_queries', 'folder', 'folders', 'invitations', 'is_company_slug_available', 'is_project_slug_available', 'links', 'mentions', 'my_invitations', 'my_todo_count', 'my_todo_list', 'my_todo_overdue_count', 'notification_options', 'oauth_connections', 'ping', 'personal_access_tokens', 'portable_document', 'portable_documents', 'preview_chart', 'profile', 'project', 'project_level', 'project_list', 'projects', 'project_user_list', 'project_user_role', 'project_user_roles', 'recent_projects', 'search', 'smtp_credentials', 'stats', 'status_update', 'status_update_list', 'tag_list', 'tags', 'template', 'templates', 'todo', 'todo_actions', 'todo_activity', 'todo_groups', 'todo_list', 'todo_lists', 'todo_list_queries', 'todo_queries', 'todos', 'todos_count', 'unread_mention_count', 'user', 'user_list', 'verify_accept_invitation', 'verify_security_code', 'verify_promo_code', 'webhook', 'webhooks', 'white_label_subscription')
    activity_list = sgqlc.types.Field(sgqlc.types.non_null(ActivityList), graphql_name='activityList', args=sgqlc.types.ArgDict((
        ('company_id', sgqlc.types.Arg(String, graphql_name='companyId', default=None)),
        ('project_id', sgqlc.types.Arg(String, graphql_name='projectId', default=None)),
        ('user_id', sgqlc.types.Arg(String, graphql_name='userId', default=None)),
        ('user_ids', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='userIds', default=None)),
        ('tag_ids', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='tagIds', default=None)),
        ('categories', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ActivityCategory)), graphql_name='categories', default=None)),
        ('start_date', sgqlc.types.Arg(DateTime, graphql_name='startDate', default=None)),
        ('end_date', sgqlc.types.Arg(DateTime, graphql_name='endDate', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('order_by', sgqlc.types.Arg(ActivityOrderByInput, graphql_name='orderBy', default=None)),
))
    )
    admin_queries = sgqlc.types.Field(sgqlc.types.non_null(AdminQueries), graphql_name='adminQueries')
    assignees = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('User'))), graphql_name='assignees', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(AssigneesFilterInput, graphql_name='filter', default=None)),
))
    )
    available_subscription_plans = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('SubscriptionPlan'))), graphql_name='availableSubscriptionPlans')
    automation_list = sgqlc.types.Field(sgqlc.types.non_null(AutomationPagination), graphql_name='automationList', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(AutomationFilterInput, graphql_name='filter', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
        ('take', sgqlc.types.Arg(Int, graphql_name='take', default=20)),
))
    )
    beacon_signature = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='beaconSignature')
    comment_list = sgqlc.types.Field(sgqlc.types.non_null(CommentList), graphql_name='commentList', args=sgqlc.types.ArgDict((
        ('category_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='categoryId', default=None)),
        ('category', sgqlc.types.Arg(sgqlc.types.non_null(CommentCategory), graphql_name='category', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('order_by', sgqlc.types.Arg(DiscussionOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
))
    )
    companies = sgqlc.types.Field(sgqlc.types.non_null(CompanyPagination), graphql_name='companies', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(CompanyFilter, graphql_name='filter', default=None)),
        ('sort', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CompanySort)), graphql_name='sort', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
        ('take', sgqlc.types.Arg(Int, graphql_name='take', default=20)),
))
    )
    company = sgqlc.types.Field(sgqlc.types.non_null(Company), graphql_name='company', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(String, graphql_name='id', default=None)),
))
    )
    company_level = sgqlc.types.Field(UserAccessLevel, graphql_name='companyLevel', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    company_list = sgqlc.types.Field(sgqlc.types.non_null(CompanyPagination), graphql_name='companyList', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(CompanyFilter, graphql_name='filter', default=None)),
        ('sort', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CompanySort)), graphql_name='sort', default=None)),
        ('limit', sgqlc.types.Arg(Int, graphql_name='limit', default=20)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
))
    )
    company_subscription_plan = sgqlc.types.Field(CompanySubscriptionPlan, graphql_name='companySubscriptionPlan', args=sgqlc.types.ArgDict((
        ('company_id', sgqlc.types.Arg(String, graphql_name='companyId', default=None)),
))
    )
    company_subscription_plan_portal = sgqlc.types.Field(String, graphql_name='companySubscriptionPlanPortal', args=sgqlc.types.ArgDict((
        ('company_id', sgqlc.types.Arg(String, graphql_name='companyId', default=None)),
))
    )
    company_subscription_plan_promo_code = sgqlc.types.Field(JSON, graphql_name='companySubscriptionPlanPromoCode', args=sgqlc.types.ArgDict((
        ('code', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='code', default=None)),
))
    )
    company_user_list = sgqlc.types.Field(sgqlc.types.non_null(CompanyUserList), graphql_name='companyUserList', args=sgqlc.types.ArgDict((
        ('company_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='companyId', default=None)),
        ('not_in_project_id', sgqlc.types.Arg(String, graphql_name='notInProjectId', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('search', sgqlc.types.Arg(String, graphql_name='search', default=None)),
        ('order_by', sgqlc.types.Arg(UserOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
))
    )
    copy_project_status = sgqlc.types.Field(CopyProjectStatus, graphql_name='copyProjectStatus')
    chats = sgqlc.types.Field(sgqlc.types.non_null(ChatPagination), graphql_name='chats', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(ChatFilterInput, graphql_name='filter', default=None)),
        ('sort', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ChatSort)), graphql_name='sort', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
        ('take', sgqlc.types.Arg(Int, graphql_name='take', default=20)),
))
    )
    chart = sgqlc.types.Field(sgqlc.types.non_null(Chart), graphql_name='chart', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    charts = sgqlc.types.Field(sgqlc.types.non_null(ChartPagination), graphql_name='charts', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(sgqlc.types.non_null(ChartFilterInput), graphql_name='filter', default=None)),
        ('sort', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ChartSort)), graphql_name='sort', default=('position_ASC',))),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
        ('take', sgqlc.types.Arg(Int, graphql_name='take', default=20)),
))
    )
    checklist_items = sgqlc.types.Field(sgqlc.types.non_null(ChecklistItemPagination), graphql_name='checklistItems', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(sgqlc.types.non_null(ChecklistItemFilterInput), graphql_name='filter', default=None)),
        ('sort', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(TodosSort)), graphql_name='sort', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
        ('take', sgqlc.types.Arg(Int, graphql_name='take', default=20)),
))
    )
    custom_domains = sgqlc.types.Field(sgqlc.types.non_null(CustomDomainPagination), graphql_name='customDomains', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(sgqlc.types.non_null(CustomDomainFilterInput), graphql_name='filter', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
        ('take', sgqlc.types.Arg(Int, graphql_name='take', default=20)),
))
    )
    custom_field_list = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldPagination), graphql_name='customFieldList')
    custom_fields = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldPagination), graphql_name='customFields', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(CustomFieldFilterInput, graphql_name='filter', default=None)),
        ('sort', sgqlc.types.Arg(CustomFieldSort, graphql_name='sort', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
        ('take', sgqlc.types.Arg(Int, graphql_name='take', default=500)),
))
    )
    custom_field_option = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldOption), graphql_name='customFieldOption', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    custom_field_options = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldOptionPagination), graphql_name='customFieldOptions', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(sgqlc.types.non_null(CustomFieldOptionFilterInput), graphql_name='filter', default=None)),
        ('sort', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CustomFieldOptionSort)), graphql_name='sort', default=('position_ASC',))),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
        ('take', sgqlc.types.Arg(Int, graphql_name='take', default=20)),
))
    )
    custom_field_reference_todos = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldReferenceTodoPagination), graphql_name='customFieldReferenceTodos', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(sgqlc.types.non_null(CustomFieldReferenceTodosFilterInput), graphql_name='filter', default=None)),
        ('sort', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(TodosSort)), graphql_name='sort', default=())),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
        ('take', sgqlc.types.Arg(Int, graphql_name='take', default=20)),
))
    )
    custom_field_queries = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldQueries), graphql_name='customFieldQueries')
    custom_field_option_queries = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldOptionQueries), graphql_name='customFieldOptionQueries')
    current_user = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='currentUser')
    dashboard = sgqlc.types.Field(sgqlc.types.non_null(Dashboard), graphql_name='dashboard', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    dashboards = sgqlc.types.Field(sgqlc.types.non_null(DashboardPagination), graphql_name='dashboards', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(sgqlc.types.non_null(DashboardFilterInput), graphql_name='filter', default=None)),
        ('sort', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(DashboardSort)), graphql_name='sort', default=('updatedAt_DESC',))),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
        ('take', sgqlc.types.Arg(Int, graphql_name='take', default=20)),
))
    )
    document = sgqlc.types.Field(sgqlc.types.non_null(Document), graphql_name='document', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    discussions = sgqlc.types.Field(sgqlc.types.non_null(DiscussionPagination), graphql_name='discussions', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(sgqlc.types.non_null(DiscussionFilterInput), graphql_name='filter', default=None)),
        ('sort', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(DiscussionSort)), graphql_name='sort', default=('updatedAt_DESC',))),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
        ('take', sgqlc.types.Arg(Int, graphql_name='take', default=20)),
))
    )
    documents = sgqlc.types.Field(sgqlc.types.non_null(DocumentPagination), graphql_name='documents', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(sgqlc.types.non_null(DocumentFilterInput), graphql_name='filter', default=None)),
        ('sort', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(DocumentSort)), graphql_name='sort', default=('updatedAt_DESC',))),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
        ('take', sgqlc.types.Arg(Int, graphql_name='take', default=20)),
))
    )
    discussion = sgqlc.types.Field(sgqlc.types.non_null(Discussion), graphql_name='discussion', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    discussion_list = sgqlc.types.Field(sgqlc.types.non_null(DiscussionList), graphql_name='discussionList', args=sgqlc.types.ArgDict((
        ('project_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='projectId', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('order_by', sgqlc.types.Arg(DiscussionOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
))
    )
    email_template = sgqlc.types.Field(EmailTemplate, graphql_name='emailTemplate', args=sgqlc.types.ArgDict((
        ('type', sgqlc.types.Arg(sgqlc.types.non_null(EmailTemplateType), graphql_name='type', default=None)),
))
    )
    email_templates = sgqlc.types.Field(sgqlc.types.non_null(EmailTemplatePagination), graphql_name='emailTemplates', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(EmailTemplateFilterInput, graphql_name='filter', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
        ('take', sgqlc.types.Arg(Int, graphql_name='take', default=20)),
))
    )
    file_list = sgqlc.types.Field(sgqlc.types.non_null(FileList), graphql_name='fileList', args=sgqlc.types.ArgDict((
        ('project_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='projectId', default=None)),
        ('company_id', sgqlc.types.Arg(String, graphql_name='companyId', default=None)),
        ('search', sgqlc.types.Arg(String, graphql_name='search', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('order_by', sgqlc.types.Arg(FileOrderByInput, graphql_name='orderBy', default=None)),
))
    )
    files = sgqlc.types.Field(sgqlc.types.non_null(FilePagination), graphql_name='files', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(FileFilterInput, graphql_name='filter', default=None)),
        ('sort', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(FileSort)), graphql_name='sort', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
        ('take', sgqlc.types.Arg(Int, graphql_name='take', default=20)),
))
    )
    form = sgqlc.types.Field(sgqlc.types.non_null(Form), graphql_name='form', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    form_fields = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(FormField))), graphql_name='formFields', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(FormFieldFilterInput, graphql_name='filter', default=None)),
))
    )
    forms = sgqlc.types.Field(sgqlc.types.non_null(FormPagination), graphql_name='forms', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(FormFilterInput, graphql_name='filter', default=None)),
        ('sort', sgqlc.types.Arg(FormSort, graphql_name='sort', default='updatedAt_DESC')),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
        ('take', sgqlc.types.Arg(Int, graphql_name='take', default=20)),
))
    )
    form_queries = sgqlc.types.Field(sgqlc.types.non_null(FormQueries), graphql_name='formQueries')
    folder = sgqlc.types.Field(sgqlc.types.non_null(Folder), graphql_name='folder', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    folders = sgqlc.types.Field(sgqlc.types.non_null(FolderPagination), graphql_name='folders', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(sgqlc.types.non_null(FolderFilterInput), graphql_name='filter', default=None)),
        ('sort', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(FolderSort)), graphql_name='sort', default=('position_DESC',))),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
        ('take', sgqlc.types.Arg(Int, graphql_name='take', default=20)),
))
    )
    invitations = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Invitation))), graphql_name='invitations', args=sgqlc.types.ArgDict((
        ('project_id', sgqlc.types.Arg(String, graphql_name='projectId', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('search', sgqlc.types.Arg(String, graphql_name='search', default=None)),
        ('order_by', sgqlc.types.Arg(UserOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('pending', sgqlc.types.Arg(Boolean, graphql_name='pending', default=None)),
))
    )
    is_company_slug_available = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isCompanySlugAvailable', args=sgqlc.types.ArgDict((
        ('slug', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='slug', default=None)),
))
    )
    is_project_slug_available = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isProjectSlugAvailable', args=sgqlc.types.ArgDict((
        ('slug', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='slug', default=None)),
))
    )
    links = sgqlc.types.Field(sgqlc.types.non_null(LinkPagination), graphql_name='links', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(sgqlc.types.non_null(LinkFilterInput), graphql_name='filter', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
        ('take', sgqlc.types.Arg(Int, graphql_name='take', default=20)),
))
    )
    mentions = sgqlc.types.Field(sgqlc.types.non_null(MentionPagination), graphql_name='mentions', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(sgqlc.types.non_null(MentionFilter), graphql_name='filter', default=None)),
        ('sort', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(MentionSort)), graphql_name='sort', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
        ('limit', sgqlc.types.Arg(Int, graphql_name='limit', default=20)),
))
    )
    my_invitations = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Invitation))), graphql_name='myInvitations', args=sgqlc.types.ArgDict((
        ('company_id', sgqlc.types.Arg(String, graphql_name='companyId', default=None)),
))
    )
    my_todo_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='myTodoCount', args=sgqlc.types.ArgDict((
        ('company_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='companyId', default=None)),
))
    )
    my_todo_list = sgqlc.types.Field(sgqlc.types.non_null(MyTodoList), graphql_name='myTodoList', args=sgqlc.types.ArgDict((
        ('company_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='companyId', default=None)),
        ('done', sgqlc.types.Arg(Boolean, graphql_name='done', default=None)),
        ('archived', sgqlc.types.Arg(Boolean, graphql_name='archived', default=None)),
        ('search', sgqlc.types.Arg(String, graphql_name='search', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('order_by', sgqlc.types.Arg(TodoOrderByInput, graphql_name='orderBy', default=None)),
))
    )
    my_todo_overdue_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='myTodoOverdueCount', args=sgqlc.types.ArgDict((
        ('company_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='companyId', default=None)),
))
    )
    notification_options = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(NotificationOption))), graphql_name='notificationOptions')
    oauth_connections = sgqlc.types.Field(sgqlc.types.non_null(OAuthConnectionPagination), graphql_name='oauthConnections', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(OAuthConnectionFilterInput, graphql_name='filter', default=None)),
        ('sort', sgqlc.types.Arg(OAuthConnectionSort, graphql_name='sort', default='updatedAt_DESC')),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
        ('take', sgqlc.types.Arg(Int, graphql_name='take', default=20)),
))
    )
    ping = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='ping')
    personal_access_tokens = sgqlc.types.Field(sgqlc.types.non_null(PersonalAccessTokenPagination), graphql_name='personalAccessTokens', args=sgqlc.types.ArgDict((
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
        ('take', sgqlc.types.Arg(Int, graphql_name='take', default=20)),
))
    )
    portable_document = sgqlc.types.Field(sgqlc.types.non_null(PortableDocument), graphql_name='portableDocument', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    portable_documents = sgqlc.types.Field(sgqlc.types.non_null(PortableDocumentPagination), graphql_name='portableDocuments', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(sgqlc.types.non_null(PortableDocumentFilter), graphql_name='filter', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
        ('take', sgqlc.types.Arg(Int, graphql_name='take', default=20)),
))
    )
    preview_chart = sgqlc.types.Field(sgqlc.types.non_null(Chart), graphql_name='previewChart', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateChartInput), graphql_name='input', default=None)),
))
    )
    profile = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='profile')
    project = sgqlc.types.Field(sgqlc.types.non_null(Project), graphql_name='project', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(String, graphql_name='id', default=None)),
))
    )
    project_level = sgqlc.types.Field(UserAccessLevel, graphql_name='projectLevel', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    project_list = sgqlc.types.Field(sgqlc.types.non_null(ProjectPagination), graphql_name='projectList', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(sgqlc.types.non_null(ProjectListFilter), graphql_name='filter', default=None)),
        ('sort', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ProjectSort)), graphql_name='sort', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
        ('take', sgqlc.types.Arg(Int, graphql_name='take', default=20)),
        ('order_by', sgqlc.types.Arg(ProjectOrderByInput, graphql_name='orderBy', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    projects = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Project))), graphql_name='projects', args=sgqlc.types.ArgDict((
        ('company_id', sgqlc.types.Arg(String, graphql_name='companyId', default=None)),
        ('archived', sgqlc.types.Arg(Boolean, graphql_name='archived', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
))
    )
    project_user_list = sgqlc.types.Field(sgqlc.types.non_null(ProjectUserList), graphql_name='projectUserList', args=sgqlc.types.ArgDict((
        ('project_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='projectId', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('search', sgqlc.types.Arg(String, graphql_name='search', default=None)),
        ('order_by', sgqlc.types.Arg(UserOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
))
    )
    project_user_role = sgqlc.types.Field(sgqlc.types.non_null(ProjectUserRole), graphql_name='projectUserRole', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    project_user_roles = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ProjectUserRole))), graphql_name='projectUserRoles', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(sgqlc.types.non_null(ProjectUserRoleFilter), graphql_name='filter', default=None)),
))
    )
    recent_projects = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Project))), graphql_name='recentProjects')
    search = sgqlc.types.Field(sgqlc.types.non_null('SearchResult'), graphql_name='search', args=sgqlc.types.ArgDict((
        ('query', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='query', default=None)),
        ('company_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='companyId', default=None)),
))
    )
    smtp_credentials = sgqlc.types.Field(sgqlc.types.non_null('SmtpCredentialPagination'), graphql_name='smtpCredentials', args=sgqlc.types.ArgDict((
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
        ('take', sgqlc.types.Arg(Int, graphql_name='take', default=20)),
))
    )
    stats = sgqlc.types.Field(sgqlc.types.non_null('Stats'), graphql_name='stats')
    status_update = sgqlc.types.Field(sgqlc.types.non_null('StatusUpdate'), graphql_name='statusUpdate', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    status_update_list = sgqlc.types.Field(sgqlc.types.non_null('StatusUpdateList'), graphql_name='statusUpdateList', args=sgqlc.types.ArgDict((
        ('project_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='projectId', default=None)),
        ('user_id', sgqlc.types.Arg(String, graphql_name='userId', default=None)),
        ('date_from', sgqlc.types.Arg(DateTime, graphql_name='dateFrom', default=None)),
        ('date_to', sgqlc.types.Arg(DateTime, graphql_name='dateTo', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('order_by', sgqlc.types.Arg(StatusUpdateOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
))
    )
    tag_list = sgqlc.types.Field(sgqlc.types.non_null('TagPagination'), graphql_name='tagList', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(sgqlc.types.non_null(TagListFilter), graphql_name='filter', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=500)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('order_by', sgqlc.types.Arg(TagOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('distinct', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(TagListFilterDistinct)), graphql_name='distinct', default=None)),
))
    )
    tags = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('Tag'))), graphql_name='tags')
    template = sgqlc.types.Field(sgqlc.types.non_null(Project), graphql_name='template', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(TemplateFilterInput, graphql_name='filter', default=None)),
))
    )
    templates = sgqlc.types.Field(sgqlc.types.non_null('TemplatePagination'), graphql_name='templates', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(TemplateFilterInput, graphql_name='filter', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
        ('take', sgqlc.types.Arg(Int, graphql_name='take', default=20)),
))
    )
    todo = sgqlc.types.Field(sgqlc.types.non_null('Todo'), graphql_name='todo', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    todo_actions = sgqlc.types.Field(sgqlc.types.non_null('TodoActionPagination'), graphql_name='todoActions', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(sgqlc.types.non_null(TodoActionsFilter), graphql_name='filter', default=None)),
        ('order_by', sgqlc.types.Arg(TodoActionOrderByInput, graphql_name='orderBy', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    todo_activity = sgqlc.types.Field(sgqlc.types.non_null('TodoActivityPagination'), graphql_name='todoActivity', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(sgqlc.types.non_null(TodoActivityFilter), graphql_name='filter', default=None)),
        ('order_by', sgqlc.types.Arg(TodoActivityOrderBy, graphql_name='orderBy', default=None)),
        ('limit', sgqlc.types.Arg(Int, graphql_name='limit', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
))
    )
    todo_groups = sgqlc.types.Field(sgqlc.types.non_null('TodoGroupPagination'), graphql_name='todoGroups', args=sgqlc.types.ArgDict((
        ('type', sgqlc.types.Arg(sgqlc.types.non_null(TodoGroupType), graphql_name='type', default=None)),
        ('filter', sgqlc.types.Arg(TodosFilter, graphql_name='filter', default=None)),
        ('sort', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(TodosSort)), graphql_name='sort', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
        ('take', sgqlc.types.Arg(Int, graphql_name='take', default=20)),
))
    )
    todo_list = sgqlc.types.Field('TodoList', graphql_name='todoList', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    todo_lists = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('TodoList'))), graphql_name='todoLists', args=sgqlc.types.ArgDict((
        ('project_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='projectId', default=None)),
))
    )
    todo_list_queries = sgqlc.types.Field(sgqlc.types.non_null('TodoListQueries'), graphql_name='todoListQueries')
    todo_queries = sgqlc.types.Field(sgqlc.types.non_null('TodoQueries'), graphql_name='todoQueries')
    todos = sgqlc.types.Field(sgqlc.types.non_null('TodosPagination'), graphql_name='todos', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(sgqlc.types.non_null(TodosFilter), graphql_name='filter', default=None)),
        ('order_by', sgqlc.types.Arg(TodoOrderByInput, graphql_name='orderBy', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    todos_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='todosCount', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(TodoFilterInput, graphql_name='filter', default=None)),
        ('refetched_at', sgqlc.types.Arg(DateTime, graphql_name='refetchedAt', default=None)),
))
    )
    unread_mention_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='unreadMentionCount')
    user = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='user', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    user_list = sgqlc.types.Field(sgqlc.types.non_null('UserPagination'), graphql_name='userList', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(sgqlc.types.non_null(UserListFilter), graphql_name='filter', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('order_by', sgqlc.types.Arg(UserOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
))
    )
    verify_accept_invitation = sgqlc.types.Field(sgqlc.types.non_null('VerifyAcceptInvitationPayload'), graphql_name='verifyAcceptInvitation', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    verify_security_code = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='verifySecurityCode', args=sgqlc.types.ArgDict((
        ('email', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='email', default=None)),
        ('code', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='code', default=None)),
))
    )
    verify_promo_code = sgqlc.types.Field(String, graphql_name='verifyPromoCode', args=sgqlc.types.ArgDict((
        ('code', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='code', default=None)),
))
    )
    webhook = sgqlc.types.Field(sgqlc.types.non_null('Webhook'), graphql_name='webhook', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
))
    )
    webhooks = sgqlc.types.Field(sgqlc.types.non_null('WebhookPagination'), graphql_name='webhooks', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(WebhookFilter, graphql_name='filter', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
        ('take', sgqlc.types.Arg(Int, graphql_name='take', default=20)),
))
    )
    white_label_subscription = sgqlc.types.Field(sgqlc.types.non_null('WhiteLabelSubscription'), graphql_name='whiteLabelSubscription')


class Question(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'frequency', 'days', 'time', 'status', 'question_users', 'status_updates', 'created_by', 'project', 'created_at', 'updated_at', 'activity')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    frequency = sgqlc.types.Field(sgqlc.types.non_null(QuestionFrequency), graphql_name='frequency')
    days = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='days')
    time = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='time')
    status = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='status')
    question_users = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('QuestionUser')), graphql_name='questionUsers', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(QuestionUserWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(QuestionUserOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    status_updates = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StatusUpdate')), graphql_name='statusUpdates', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(StatusUpdateWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(StatusUpdateOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    created_by = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='createdBy')
    project = sgqlc.types.Field(sgqlc.types.non_null(Project), graphql_name='project')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    activity = sgqlc.types.Field(Activity, graphql_name='activity')


class QuestionConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('QuestionEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateQuestion), graphql_name='aggregate')


class QuestionEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(Question), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class QuestionPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'frequency', 'days', 'time', 'status', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    frequency = sgqlc.types.Field(sgqlc.types.non_null(QuestionFrequency), graphql_name='frequency')
    days = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='days')
    time = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='time')
    status = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='status')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class QuestionSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(Question, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(QuestionPreviousValues, graphql_name='previousValues')


class QuestionUser(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'question', 'user', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    question = sgqlc.types.Field(sgqlc.types.non_null(Question), graphql_name='question')
    user = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='user')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class QuestionUserConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('QuestionUserEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateQuestionUser), graphql_name='aggregate')


class QuestionUserEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(QuestionUser), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class QuestionUserPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class QuestionUserSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(QuestionUser, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(QuestionUserPreviousValues, graphql_name='previousValues')


class RecordTagFilter(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('enabled', 'allowed_tag_ids', 'denied_tag_ids')
    enabled = sgqlc.types.Field(Boolean, graphql_name='enabled')
    allowed_tag_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='allowedTagIds')
    denied_tag_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='deniedTagIds')


class SearchHitHighLight(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('title', 'html')
    title = sgqlc.types.Field(sgqlc.types.list_of(String), graphql_name='title')
    html = sgqlc.types.Field(sgqlc.types.list_of(String), graphql_name='html')


class SearchHits(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('_id', '_source', 'highlight', 'inner_hits')
    _id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='_id')
    _source = sgqlc.types.Field('SearchHitSource', graphql_name='_source')
    highlight = sgqlc.types.Field(SearchHitHighLight, graphql_name='highlight')
    inner_hits = sgqlc.types.Field(sgqlc.types.list_of('SearchInnerHits'), graphql_name='innerHits')


class SearchInnerHits(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('comment', 'highlight')
    comment = sgqlc.types.Field(Comment, graphql_name='comment')
    highlight = sgqlc.types.Field(SearchHitHighLight, graphql_name='highlight')


class SearchResult(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('total_count', 'hits')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    hits = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(SearchHits))), graphql_name='hits')


class SecurityCode(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'email', 'code', 'category', 'expired_at', 'created_at', 'updated_at', 'uid', 'category_ref')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='code')
    category = sgqlc.types.Field(sgqlc.types.non_null(SecurityCodeCategory), graphql_name='category')
    expired_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='expiredAt')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    category_ref = sgqlc.types.Field(String, graphql_name='categoryRef')


class SecurityCodeConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('SecurityCodeEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateSecurityCode), graphql_name='aggregate')


class SecurityCodeEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(SecurityCode), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class SecurityCodePreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'email', 'code', 'category', 'category_ref', 'expired_at', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='code')
    category = sgqlc.types.Field(sgqlc.types.non_null(SecurityCodeCategory), graphql_name='category')
    category_ref = sgqlc.types.Field(String, graphql_name='categoryRef')
    expired_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='expiredAt')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class SecurityCodeSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(SecurityCode, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(SecurityCodePreviousValues, graphql_name='previousValues')


class SignInRequestResult(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('success', 'category')
    success = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='success')
    category = sgqlc.types.Field(sgqlc.types.non_null(SecurityCodeCategory), graphql_name='category')


class SmtpCredential(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'host', 'port', 'username', 'password', 'sender_name', 'sender_email', 'verified_at', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    host = sgqlc.types.Field(String, graphql_name='host')
    port = sgqlc.types.Field(Int, graphql_name='port')
    username = sgqlc.types.Field(String, graphql_name='username')
    password = sgqlc.types.Field(String, graphql_name='password')
    sender_name = sgqlc.types.Field(String, graphql_name='senderName')
    sender_email = sgqlc.types.Field(String, graphql_name='senderEmail')
    verified_at = sgqlc.types.Field(DateTime, graphql_name='verifiedAt')
    created_at = sgqlc.types.Field(DateTime, graphql_name='createdAt')
    updated_at = sgqlc.types.Field(DateTime, graphql_name='updatedAt')


class SmtpCredentialPagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(SmtpCredential))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')


class Stats(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('companies', 'projects', 'todos', 'users')
    companies = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='companies')
    projects = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='projects')
    todos = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='todos')
    users = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='users')


class StatusUpdate(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'html', 'text', 'date', 'category', 'created_at', 'updated_at', 'user', 'project', 'comments', 'comment_count', 'is_read', 'is_seen', 'uid', 'activity', 'files', 'question')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    date = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='date')
    category = sgqlc.types.Field(sgqlc.types.non_null(StatusUpdateCategory), graphql_name='category')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    user = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='user')
    project = sgqlc.types.Field(sgqlc.types.non_null(Project), graphql_name='project')
    comments = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Comment))), graphql_name='comments', args=sgqlc.types.ArgDict((
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('order_by', sgqlc.types.Arg(CommentOrderByInput, graphql_name='orderBy', default=None)),
        ('where', sgqlc.types.Arg(CommentWhereInput, graphql_name='where', default=None)),
))
    )
    comment_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='commentCount')
    is_read = sgqlc.types.Field(Boolean, graphql_name='isRead')
    is_seen = sgqlc.types.Field(Boolean, graphql_name='isSeen')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    activity = sgqlc.types.Field(Activity, graphql_name='activity')
    files = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(File)), graphql_name='files', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(FileWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(FileOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    question = sgqlc.types.Field(Question, graphql_name='question')


class StatusUpdateConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('StatusUpdateEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateStatusUpdate), graphql_name='aggregate')


class StatusUpdateEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(StatusUpdate), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class StatusUpdateList(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('status_updates', 'page_info', 'total_count')
    status_updates = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(StatusUpdate))), graphql_name='statusUpdates')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class StatusUpdatePreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'html', 'text', 'date', 'category', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    date = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='date')
    category = sgqlc.types.Field(sgqlc.types.non_null(StatusUpdateCategory), graphql_name='category')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class StatusUpdateSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(StatusUpdate, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(StatusUpdatePreviousValues, graphql_name='previousValues')


class Subscription(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('on_added_to_project', 'on_archive_project', 'on_convert_to_template', 'on_copy_project_finished', 'on_copy_project_started', 'on_custom_field_options_created', 'on_delete_files', 'on_mark_all_activity_as_seen', 'on_mark_todo_list_as_done', 'on_mark_todo_list_as_undone', 'on_mark_all_mentions_as_read', 'on_move_todo', 'on_removed_from_project', 'on_removed_from_template', 'on_set_project_folder', 'on_unarchive_project', 'subscribe_to_activity', 'subscribe_to_aitag_progress', 'subscribe_to_automation', 'subscribe_to_chart', 'subscribe_to_chat', 'subscribe_to_comment', 'subscribe_to_comment_typing', 'subscribe_to_company', 'subscribe_to_company_people_list', 'subscribe_to_custom_field', 'subscribe_to_custom_field_option', 'subscribe_to_dashboard', 'subscribe_to_discussion', 'subscribe_to_document', 'subscribe_to_file', 'subscribe_to_folder', 'subscribe_to_form', 'subscribe_to_import_export_progress', 'subscribe_to_invitation', 'subscribe_to_link', 'subscribe_to_mention', 'subscribe_to_my_mention', 'subscribe_to_my_todo_count', 'subscribe_to_network_status', 'subscribe_to_oauth_connection', 'subscribe_to_project', 'subscribe_to_project_people_list', 'subscribe_to_project_user_role', 'subscribe_to_recent_active_user', 'subscribe_to_status_update', 'subscribe_to_tag', 'subscribe_to_todo', 'subscribe_to_todo_action', 'subscribe_to_todo_list', 'subscribe_to_user_presence')
    on_added_to_project = sgqlc.types.Field(sgqlc.types.non_null(Project), graphql_name='onAddedToProject')
    on_archive_project = sgqlc.types.Field(sgqlc.types.non_null(Project), graphql_name='onArchiveProject', args=sgqlc.types.ArgDict((
        ('company_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='companyId', default=None)),
))
    )
    on_convert_to_template = sgqlc.types.Field(sgqlc.types.non_null(Project), graphql_name='onConvertToTemplate', args=sgqlc.types.ArgDict((
        ('company_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='companyId', default=None)),
))
    )
    on_copy_project_finished = sgqlc.types.Field(CopyProjectStatus, graphql_name='onCopyProjectFinished')
    on_copy_project_started = sgqlc.types.Field(CopyProjectStatus, graphql_name='onCopyProjectStarted')
    on_custom_field_options_created = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(CustomFieldOption))), graphql_name='onCustomFieldOptionsCreated', args=sgqlc.types.ArgDict((
        ('custom_field_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='customFieldId', default=None)),
))
    )
    on_delete_files = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(File))), graphql_name='onDeleteFiles', args=sgqlc.types.ArgDict((
        ('project_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='projectId', default=None)),
))
    )
    on_mark_all_activity_as_seen = sgqlc.types.Field(Boolean, graphql_name='onMarkAllActivityAsSeen', args=sgqlc.types.ArgDict((
        ('user_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='userId', default=None)),
))
    )
    on_mark_todo_list_as_done = sgqlc.types.Field(sgqlc.types.non_null('TodoList'), graphql_name='onMarkTodoListAsDone', args=sgqlc.types.ArgDict((
        ('project_id', sgqlc.types.Arg(String, graphql_name='projectId', default=None)),
))
    )
    on_mark_todo_list_as_undone = sgqlc.types.Field(sgqlc.types.non_null('TodoList'), graphql_name='onMarkTodoListAsUndone', args=sgqlc.types.ArgDict((
        ('project_id', sgqlc.types.Arg(String, graphql_name='projectId', default=None)),
))
    )
    on_mark_all_mentions_as_read = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Mention))), graphql_name='onMarkAllMentionsAsRead')
    on_move_todo = sgqlc.types.Field(sgqlc.types.non_null('Todo'), graphql_name='onMoveTodo', args=sgqlc.types.ArgDict((
        ('project_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='projectId', default=None)),
))
    )
    on_removed_from_project = sgqlc.types.Field(sgqlc.types.non_null(Project), graphql_name='onRemovedFromProject')
    on_removed_from_template = sgqlc.types.Field(sgqlc.types.non_null(Project), graphql_name='onRemovedFromTemplate', args=sgqlc.types.ArgDict((
        ('company_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='companyId', default=None)),
))
    )
    on_set_project_folder = sgqlc.types.Field(sgqlc.types.non_null(ProjectSubscriptionPayload), graphql_name='onSetProjectFolder', args=sgqlc.types.ArgDict((
        ('company_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='companyId', default=None)),
        ('folder_id', sgqlc.types.Arg(String, graphql_name='folderId', default=None)),
))
    )
    on_unarchive_project = sgqlc.types.Field(sgqlc.types.non_null(Project), graphql_name='onUnarchiveProject', args=sgqlc.types.ArgDict((
        ('company_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='companyId', default=None)),
))
    )
    subscribe_to_activity = sgqlc.types.Field(ActivitySubscriptionPayload, graphql_name='subscribeToActivity', args=sgqlc.types.ArgDict((
        ('company_id', sgqlc.types.Arg(String, graphql_name='companyId', default=None)),
        ('project_id', sgqlc.types.Arg(String, graphql_name='projectId', default=None)),
))
    )
    subscribe_to_aitag_progress = sgqlc.types.Field(sgqlc.types.non_null(AITagProgress), graphql_name='subscribeToAITagProgress', args=sgqlc.types.ArgDict((
        ('project_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='projectId', default=None)),
))
    )
    subscribe_to_automation = sgqlc.types.Field(AutomationSubscriptionPayload, graphql_name='subscribeToAutomation', args=sgqlc.types.ArgDict((
        ('project_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='projectId', default=None)),
))
    )
    subscribe_to_chart = sgqlc.types.Field(ChartSubscriptionPayload, graphql_name='subscribeToChart', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(sgqlc.types.non_null(SubscribeToChartFilterInput), graphql_name='filter', default=None)),
))
    )
    subscribe_to_chat = sgqlc.types.Field(ChatSubscriptionPayload, graphql_name='subscribeToChat', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(sgqlc.types.non_null(SubscribeToChatFilterInput), graphql_name='filter', default=None)),
))
    )
    subscribe_to_comment = sgqlc.types.Field(CommentSubscriptionPayload, graphql_name='subscribeToComment', args=sgqlc.types.ArgDict((
        ('category_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='categoryId', default=None)),
        ('category', sgqlc.types.Arg(sgqlc.types.non_null(CommentCategory), graphql_name='category', default=None)),
        ('show_only_mentioned_comments', sgqlc.types.Arg(Boolean, graphql_name='showOnlyMentionedComments', default=None)),
))
    )
    subscribe_to_comment_typing = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='subscribeToCommentTyping', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='id', default=None)),
        ('name', sgqlc.types.Arg(CommentTypingSubscriptionName, graphql_name='name', default=None)),
))
    )
    subscribe_to_company = sgqlc.types.Field(CompanySubscriptionPayload, graphql_name='subscribeToCompany', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(CompanyFilter, graphql_name='filter', default=None)),
))
    )
    subscribe_to_company_people_list = sgqlc.types.Field('UserSubscriptionPayload', graphql_name='subscribeToCompanyPeopleList', args=sgqlc.types.ArgDict((
        ('company_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='companyId', default=None)),
))
    )
    subscribe_to_custom_field = sgqlc.types.Field(CustomFieldSubscriptionPayload, graphql_name='subscribeToCustomField', args=sgqlc.types.ArgDict((
        ('project_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='projectId', default=None)),
))
    )
    subscribe_to_custom_field_option = sgqlc.types.Field(CustomFieldOptionSubscriptionPayload, graphql_name='subscribeToCustomFieldOption', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SubscribeToCustomFieldOptionInput), graphql_name='input', default=None)),
))
    )
    subscribe_to_dashboard = sgqlc.types.Field(DashboardSubscriptionPayload, graphql_name='subscribeToDashboard', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(sgqlc.types.non_null(SubscribeToDashboardFilterInput), graphql_name='filter', default=None)),
))
    )
    subscribe_to_discussion = sgqlc.types.Field(DiscussionSubscriptionPayload, graphql_name='subscribeToDiscussion', args=sgqlc.types.ArgDict((
        ('project_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='projectId', default=None)),
))
    )
    subscribe_to_document = sgqlc.types.Field(DocumentSubscriptionPayload, graphql_name='subscribeToDocument', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SubscribeToDocumentInput), graphql_name='input', default=None)),
))
    )
    subscribe_to_file = sgqlc.types.Field(FileSubscriptionPayload, graphql_name='subscribeToFile', args=sgqlc.types.ArgDict((
        ('company_id', sgqlc.types.Arg(String, graphql_name='companyId', default=None)),
        ('project_id', sgqlc.types.Arg(String, graphql_name='projectId', default=None)),
        ('folder_id', sgqlc.types.Arg(String, graphql_name='folderId', default=None)),
))
    )
    subscribe_to_folder = sgqlc.types.Field(FolderSubscriptionPayload, graphql_name='subscribeToFolder', args=sgqlc.types.ArgDict((
        ('company_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='companyId', default=None)),
        ('type', sgqlc.types.Arg(sgqlc.types.non_null(FolderType), graphql_name='type', default=None)),
        ('project_id', sgqlc.types.Arg(String, graphql_name='projectId', default=None)),
        ('parent_id', sgqlc.types.Arg(String, graphql_name='parentId', default=None)),
))
    )
    subscribe_to_form = sgqlc.types.Field(FormSubscriptionPayload, graphql_name='subscribeToForm', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(SubscribeToFormFilterInput, graphql_name='filter', default=None)),
))
    )
    subscribe_to_import_export_progress = sgqlc.types.Field(JSON, graphql_name='subscribeToImportExportProgress', args=sgqlc.types.ArgDict((
        ('project_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='projectId', default=None)),
        ('user_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='userId', default=None)),
))
    )
    subscribe_to_invitation = sgqlc.types.Field(InvitationSubscriptionPayload, graphql_name='subscribeToInvitation', args=sgqlc.types.ArgDict((
        ('project_id', sgqlc.types.Arg(String, graphql_name='projectId', default=None)),
))
    )
    subscribe_to_link = sgqlc.types.Field(LinkSubscriptionPayload, graphql_name='subscribeToLink', args=sgqlc.types.ArgDict((
        ('company_id', sgqlc.types.Arg(String, graphql_name='companyId', default=None)),
))
    )
    subscribe_to_mention = sgqlc.types.Field(MentionSubscriptionPayload_DEPRECATED, graphql_name='subscribeToMention', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(sgqlc.types.non_null(MentionFilter), graphql_name='filter', default=None)),
))
    )
    subscribe_to_my_mention = sgqlc.types.Field(sgqlc.types.non_null(MentionSubscriptionPayload), graphql_name='subscribeToMyMention')
    subscribe_to_my_todo_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='subscribeToMyTodoCount', args=sgqlc.types.ArgDict((
        ('company_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='companyId', default=None)),
))
    )
    subscribe_to_network_status = sgqlc.types.Field('User', graphql_name='subscribeToNetworkStatus')
    subscribe_to_oauth_connection = sgqlc.types.Field(OAuthConnectionSubscriptionPayload, graphql_name='subscribeToOAuthConnection', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SubscribeToOAuthConnectionInput), graphql_name='input', default=None)),
))
    )
    subscribe_to_project = sgqlc.types.Field(ProjectSubscriptionPayload, graphql_name='subscribeToProject', args=sgqlc.types.ArgDict((
        ('company_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='companyId', default=None)),
        ('folder_id', sgqlc.types.Arg(String, graphql_name='folderId', default=None)),
        ('archived', sgqlc.types.Arg(Boolean, graphql_name='archived', default=None)),
        ('is_template', sgqlc.types.Arg(Boolean, graphql_name='isTemplate', default=None)),
))
    )
    subscribe_to_project_people_list = sgqlc.types.Field('UserSubscriptionPayload', graphql_name='subscribeToProjectPeopleList', args=sgqlc.types.ArgDict((
        ('project_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='projectId', default=None)),
))
    )
    subscribe_to_project_user_role = sgqlc.types.Field(ProjectUserRoleSubscriptionPayload, graphql_name='subscribeToProjectUserRole', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SubscribeToProjectUserRoleInput), graphql_name='input', default=None)),
))
    )
    subscribe_to_recent_active_user = sgqlc.types.Field('UserSubscriptionPayload', graphql_name='subscribeToRecentActiveUser', args=sgqlc.types.ArgDict((
        ('company_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='companyId', default=None)),
))
    )
    subscribe_to_status_update = sgqlc.types.Field(StatusUpdateSubscriptionPayload, graphql_name='subscribeToStatusUpdate', args=sgqlc.types.ArgDict((
        ('project_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='projectId', default=None)),
))
    )
    subscribe_to_tag = sgqlc.types.Field('TagSubscriptionPayload', graphql_name='subscribeToTag', args=sgqlc.types.ArgDict((
        ('project_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='projectId', default=None)),
))
    )
    subscribe_to_todo = sgqlc.types.Field('TodoSubscriptionPayload', graphql_name='subscribeToTodo', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(String, graphql_name='id', default=None)),
        ('project_id', sgqlc.types.Arg(String, graphql_name='projectId', default=None)),
        ('filter', sgqlc.types.Arg(SubscribeToTodoFilter, graphql_name='filter', default=None)),
))
    )
    subscribe_to_todo_action = sgqlc.types.Field('TodoActionSubscriptionPayload', graphql_name='subscribeToTodoAction', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(sgqlc.types.non_null(SubscribeToTodoActionFilter), graphql_name='filter', default=None)),
))
    )
    subscribe_to_todo_list = sgqlc.types.Field('TodoListSubscriptionPayload', graphql_name='subscribeToTodoList', args=sgqlc.types.ArgDict((
        ('project_id', sgqlc.types.Arg(String, graphql_name='projectId', default=None)),
))
    )
    subscribe_to_user_presence = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='subscribeToUserPresence', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(UserPresenceFilter, graphql_name='filter', default=None)),
))
    )


class SubscriptionPlan(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'nickname', 'amount')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    nickname = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='nickname')
    amount = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='amount')


class Tag(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'color', 'todos', 'project', 'created_at', 'updated_at', 'todo_tags', 'form_tags', 'automation_trigger_tags', 'automation_action_tags')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    color = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='color')
    todos = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('Todo'))), graphql_name='todos')
    project = sgqlc.types.Field(sgqlc.types.non_null(Project), graphql_name='project')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    todo_tags = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoTag')), graphql_name='todoTags', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(TodoTagWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(TodoTagOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    form_tags = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FormTag)), graphql_name='formTags', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(FormTagWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(FormTagOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    automation_trigger_tags = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationTriggerTag)), graphql_name='automationTriggerTags', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(AutomationTriggerTagWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(AutomationTriggerTagOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    automation_action_tags = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationActionTag)), graphql_name='automationActionTags', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(AutomationActionTagWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(AutomationActionTagOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )


class TagConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('TagEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateTag), graphql_name='aggregate')


class TagEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(Tag), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class TagPagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info', 'total_count')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Tag))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class TagPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'title', 'color', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    color = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='color')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class TagSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(Tag, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(TagPreviousValues, graphql_name='previousValues')


class TemplatePagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Project))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')


class TimeInList(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('todo_list_id', 'todo_list_title', 'total_time', 'percentage')
    todo_list_id = sgqlc.types.Field(String, graphql_name='todoListId')
    todo_list_title = sgqlc.types.Field(String, graphql_name='todoListTitle')
    total_time = sgqlc.types.Field(Float, graphql_name='totalTime')
    percentage = sgqlc.types.Field(Float, graphql_name='percentage')


class TimeTracking(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('time_in_current_project', 'time_in_current_todo_list', 'time_to_completion', 'time_in_lists')
    time_in_current_project = sgqlc.types.Field(Float, graphql_name='timeInCurrentProject')
    time_in_current_todo_list = sgqlc.types.Field(Float, graphql_name='timeInCurrentTodoList')
    time_to_completion = sgqlc.types.Field(Float, graphql_name='timeToCompletion')
    time_in_lists = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TimeInList)), graphql_name='timeInLists')


class Todo(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'position', 'title', 'text', 'html', 'todo_list', 'users', 'started_at', 'dued_at', 'timezone', 'color', 'comments', 'comment_count', 'created_by', 'created_at', 'updated_at', 'cover', 'archived', 'done', 'actions', 'todo_tags', 'tags', 'checklists', 'checklist_count', 'checklist_completed_count', 'is_read', 'is_seen', 'custom_fields', 'is_repeating', 'repeating', 'reminder', 'depend_on', 'depend_by', 'referenced_by', 'time_tracking', 'todo_users', 'activity', 'todo_custom_fields', 'files')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    todo_list = sgqlc.types.Field(sgqlc.types.non_null('TodoList'), graphql_name='todoList')
    users = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('User'))), graphql_name='users')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    color = sgqlc.types.Field(String, graphql_name='color')
    comments = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Comment))), graphql_name='comments', args=sgqlc.types.ArgDict((
        ('order_by', sgqlc.types.Arg(CommentOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('where', sgqlc.types.Arg(CommentWhereInput, graphql_name='where', default=None)),
))
    )
    comment_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='commentCount')
    created_by = sgqlc.types.Field('User', graphql_name='createdBy')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    cover = sgqlc.types.Field(String, graphql_name='cover')
    archived = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='archived')
    done = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='done')
    actions = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('TodoAction'))), graphql_name='actions', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(TodoActionWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(TodoActionOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    todo_tags = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('TodoTag'))), graphql_name='todoTags', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(TodoTagWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(TodoTagOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    tags = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Tag))), graphql_name='tags')
    checklists = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Checklist))), graphql_name='checklists', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(ChecklistWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(ChecklistOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    checklist_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='checklistCount')
    checklist_completed_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='checklistCompletedCount')
    is_read = sgqlc.types.Field(Boolean, graphql_name='isRead')
    is_seen = sgqlc.types.Field(Boolean, graphql_name='isSeen')
    custom_fields = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(CustomField))), graphql_name='customFields', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(TodoCustomFieldFilterInput, graphql_name='filter', default=None)),
))
    )
    is_repeating = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isRepeating')
    repeating = sgqlc.types.Field(JSON, graphql_name='repeating')
    reminder = sgqlc.types.Field(JSON, graphql_name='reminder')
    depend_on = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Todo')), graphql_name='dependOn')
    depend_by = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Todo')), graphql_name='dependBy')
    referenced_by = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Todo')), graphql_name='referencedBy')
    time_tracking = sgqlc.types.Field(TimeTracking, graphql_name='timeTracking')
    todo_users = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoUser')), graphql_name='todoUsers', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(TodoUserWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(TodoUserOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    activity = sgqlc.types.Field(Activity, graphql_name='activity')
    todo_custom_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomField')), graphql_name='todoCustomFields', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(TodoCustomFieldWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(TodoCustomFieldOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    files = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(File)), graphql_name='files', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(FileWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(FileOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )


class TodoAction(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'type', 'new_value', 'old_value', 'automated', 'created_at', 'updated_at', 'deleted_at', 'affected_by', 'custom_field', 'deleted_by', 'todo', 'user')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    type = sgqlc.types.Field(sgqlc.types.non_null(TodoActionType), graphql_name='type')
    new_value = sgqlc.types.Field(String, graphql_name='newValue')
    old_value = sgqlc.types.Field(String, graphql_name='oldValue')
    automated = sgqlc.types.Field(Boolean, graphql_name='automated')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    deleted_at = sgqlc.types.Field(DateTime, graphql_name='deletedAt')
    affected_by = sgqlc.types.Field('User', graphql_name='affectedBy')
    custom_field = sgqlc.types.Field(CustomField, graphql_name='customField')
    deleted_by = sgqlc.types.Field('User', graphql_name='deletedBy')
    todo = sgqlc.types.Field(sgqlc.types.non_null(Todo), graphql_name='todo')
    user = sgqlc.types.Field('User', graphql_name='user')


class TodoActionConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('TodoActionEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateTodoAction), graphql_name='aggregate')


class TodoActionEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(TodoAction), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class TodoActionPagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info', 'total_count')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(TodoAction))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class TodoActionPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'type', 'new_value', 'old_value', 'automated', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    type = sgqlc.types.Field(sgqlc.types.non_null(TodoActionType), graphql_name='type')
    new_value = sgqlc.types.Field(String, graphql_name='newValue')
    old_value = sgqlc.types.Field(String, graphql_name='oldValue')
    automated = sgqlc.types.Field(Boolean, graphql_name='automated')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class TodoActionSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(TodoAction, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(TodoActionPreviousValues, graphql_name='previousValues')


class TodoActivityPagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'total_count')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('TodoActivityResult'))), graphql_name='items')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class TodoAssigneeList(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('assignees', 'count')
    assignees = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('User'))), graphql_name='assignees')
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class TodoConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('TodoEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateTodo), graphql_name='aggregate')


class TodoCustomField(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'todo', 'custom_field', 'number', 'text', 'region_code', 'country_codes', 'checked', 'latitude', 'longitude', 'custom_field_option', 'todo_custom_field_options', 'todo_custom_field_files', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    todo = sgqlc.types.Field(sgqlc.types.non_null(Todo), graphql_name='todo')
    custom_field = sgqlc.types.Field(sgqlc.types.non_null(CustomField), graphql_name='customField')
    number = sgqlc.types.Field(Float, graphql_name='number')
    text = sgqlc.types.Field(String, graphql_name='text')
    region_code = sgqlc.types.Field(String, graphql_name='regionCode')
    country_codes = sgqlc.types.Field(String, graphql_name='countryCodes')
    checked = sgqlc.types.Field(Boolean, graphql_name='checked')
    latitude = sgqlc.types.Field(Float, graphql_name='latitude')
    longitude = sgqlc.types.Field(Float, graphql_name='longitude')
    custom_field_option = sgqlc.types.Field(CustomFieldOption, graphql_name='customFieldOption')
    todo_custom_field_options = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldOption')), graphql_name='todoCustomFieldOptions', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(TodoCustomFieldOptionWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(TodoCustomFieldOptionOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    todo_custom_field_files = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoCustomFieldFile')), graphql_name='todoCustomFieldFiles', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(TodoCustomFieldFileWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(TodoCustomFieldFileOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class TodoCustomFieldConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('TodoCustomFieldEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateTodoCustomField), graphql_name='aggregate')


class TodoCustomFieldEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomField), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class TodoCustomFieldFile(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'todo_custom_field', 'file', 'position', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    todo_custom_field = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomField), graphql_name='todoCustomField')
    file = sgqlc.types.Field(sgqlc.types.non_null(File), graphql_name='file')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class TodoCustomFieldFileConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('TodoCustomFieldFileEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateTodoCustomFieldFile), graphql_name='aggregate')


class TodoCustomFieldFileEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomFieldFile), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class TodoCustomFieldFilePreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'position', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class TodoCustomFieldFileSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(TodoCustomFieldFile, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(TodoCustomFieldFilePreviousValues, graphql_name='previousValues')


class TodoCustomFieldOption(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'todo_custom_field', 'custom_field_option', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    todo_custom_field = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomField), graphql_name='todoCustomField')
    custom_field_option = sgqlc.types.Field(sgqlc.types.non_null(CustomFieldOption), graphql_name='customFieldOption')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class TodoCustomFieldOptionConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('TodoCustomFieldOptionEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateTodoCustomFieldOption), graphql_name='aggregate')


class TodoCustomFieldOptionEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(TodoCustomFieldOption), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class TodoCustomFieldOptionPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class TodoCustomFieldOptionSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(TodoCustomFieldOption, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(TodoCustomFieldOptionPreviousValues, graphql_name='previousValues')


class TodoCustomFieldPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'number', 'text', 'region_code', 'country_codes', 'checked', 'latitude', 'longitude', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    number = sgqlc.types.Field(Float, graphql_name='number')
    text = sgqlc.types.Field(String, graphql_name='text')
    region_code = sgqlc.types.Field(String, graphql_name='regionCode')
    country_codes = sgqlc.types.Field(String, graphql_name='countryCodes')
    checked = sgqlc.types.Field(Boolean, graphql_name='checked')
    latitude = sgqlc.types.Field(Float, graphql_name='latitude')
    longitude = sgqlc.types.Field(Float, graphql_name='longitude')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class TodoCustomFieldSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(TodoCustomField, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(TodoCustomFieldPreviousValues, graphql_name='previousValues')


class TodoEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(Todo), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class TodoField(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('type', 'custom_field_id', 'name', 'color', 'todo_fields')
    type = sgqlc.types.Field(sgqlc.types.non_null(TodoFieldType), graphql_name='type')
    custom_field_id = sgqlc.types.Field(String, graphql_name='customFieldId')
    name = sgqlc.types.Field(String, graphql_name='name')
    color = sgqlc.types.Field(String, graphql_name='color')
    todo_fields = sgqlc.types.Field(sgqlc.types.list_of('TodoField'), graphql_name='todoFields')


class TodoFilter(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('assignee_ids', 'assignees', 'due_end', 'due_start', 'show_completed', 'project_ids', 'projects', 'q', 'tag_ids', 'tag_colors', 'tag_titles', 'tags', 'todo_list_ids', 'todo_list_titles', 'todo_lists', 'fields', 'op')
    assignee_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='assigneeIds')
    assignees = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('User')), graphql_name='assignees')
    due_end = sgqlc.types.Field(DateTime, graphql_name='dueEnd')
    due_start = sgqlc.types.Field(DateTime, graphql_name='dueStart')
    show_completed = sgqlc.types.Field(Boolean, graphql_name='showCompleted')
    project_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='projectIds')
    projects = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Project)), graphql_name='projects')
    q = sgqlc.types.Field(String, graphql_name='q')
    tag_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='tagIds')
    tag_colors = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='tagColors')
    tag_titles = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='tagTitles')
    tags = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Tag)), graphql_name='tags')
    todo_list_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='todoListIds')
    todo_list_titles = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='todoListTitles')
    todo_lists = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TodoList')), graphql_name='todoLists')
    fields = sgqlc.types.Field(JSON, graphql_name='fields')
    op = sgqlc.types.Field(FilterLogicalOperator, graphql_name='op')


class TodoGroup(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'name', 'type', 'todo_count', 'todos_max_position')
    id = sgqlc.types.Field(String, graphql_name='id')
    name = sgqlc.types.Field(String, graphql_name='name')
    type = sgqlc.types.Field(sgqlc.types.non_null(TodoGroupType), graphql_name='type')
    todo_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='todoCount')
    todos_max_position = sgqlc.types.Field(Float, graphql_name='todosMaxPosition')


class TodoGroupPagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(TodoGroup))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')


class TodoList(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'position', 'title', 'is_disabled', 'is_locked', 'created_at', 'updated_at', 'activity', 'created_by', 'project', 'todos', 'todos_count', 'todos_max_position', 'assignees', 'tags', 'completed', 'editable', 'deletable', 'automation_triggers', 'automation_actions', 'forms')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    is_disabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isDisabled')
    is_locked = sgqlc.types.Field(Boolean, graphql_name='isLocked')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    activity = sgqlc.types.Field(Activity, graphql_name='activity')
    created_by = sgqlc.types.Field('User', graphql_name='createdBy')
    project = sgqlc.types.Field(sgqlc.types.non_null(Project), graphql_name='project')
    todos = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Todo))), graphql_name='todos', args=sgqlc.types.ArgDict((
        ('search', sgqlc.types.Arg(String, graphql_name='search', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('tag_ids', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='tagIds', default=None)),
        ('assignee_id', sgqlc.types.Arg(String, graphql_name='assigneeId', default=None)),
        ('dued_at_start', sgqlc.types.Arg(DateTime, graphql_name='duedAtStart', default=None)),
        ('dued_at_end', sgqlc.types.Arg(DateTime, graphql_name='duedAtEnd', default=None)),
        ('started_at', sgqlc.types.Arg(DateTime, graphql_name='startedAt', default=None)),
        ('dued_at', sgqlc.types.Arg(DateTime, graphql_name='duedAt', default=None)),
        ('order_by', sgqlc.types.Arg(TodoOrderByInput, graphql_name='orderBy', default=None)),
        ('done', sgqlc.types.Arg(Boolean, graphql_name='done', default=None)),
        ('fields', sgqlc.types.Arg(JSON, graphql_name='fields', default=None)),
        ('op', sgqlc.types.Arg(FilterLogicalOperator, graphql_name='op', default=None)),
        ('where', sgqlc.types.Arg(TodoWhereInput, graphql_name='where', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    todos_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='todosCount', args=sgqlc.types.ArgDict((
        ('search', sgqlc.types.Arg(String, graphql_name='search', default=None)),
        ('tag_ids', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='tagIds', default=None)),
        ('assignee_id', sgqlc.types.Arg(String, graphql_name='assigneeId', default=None)),
        ('started_at', sgqlc.types.Arg(DateTime, graphql_name='startedAt', default=None)),
        ('dued_at', sgqlc.types.Arg(DateTime, graphql_name='duedAt', default=None)),
        ('done', sgqlc.types.Arg(Boolean, graphql_name='done', default=None)),
        ('fields', sgqlc.types.Arg(JSON, graphql_name='fields', default=None)),
        ('op', sgqlc.types.Arg(FilterLogicalOperator, graphql_name='op', default=None)),
))
    )
    todos_max_position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='todosMaxPosition')
    assignees = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('User'))), graphql_name='assignees')
    tags = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Tag))), graphql_name='tags')
    completed = sgqlc.types.Field(Boolean, graphql_name='completed')
    editable = sgqlc.types.Field(Boolean, graphql_name='editable')
    deletable = sgqlc.types.Field(Boolean, graphql_name='deletable')
    automation_triggers = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationTrigger)), graphql_name='automationTriggers', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(AutomationTriggerWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(AutomationTriggerOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    automation_actions = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationAction)), graphql_name='automationActions', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(AutomationActionWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(AutomationActionOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    forms = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Form)), graphql_name='forms', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(FormWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(FormOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )


class TodoListConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('TodoListEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateTodoList), graphql_name='aggregate')


class TodoListEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(TodoList), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class TodoListListResult(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('todo_lists', 'count')
    todo_lists = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(TodoList))), graphql_name='todoLists')
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class TodoListPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'position', 'title', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class TodoListQueries(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('todo_lists',)
    todo_lists = sgqlc.types.Field(sgqlc.types.non_null('TodoListsPagination'), graphql_name='todoLists', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(sgqlc.types.non_null(TodoListsFilterInput), graphql_name='filter', default=None)),
        ('sort', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(TodoListsSort)), graphql_name='sort', default=('position_ASC',))),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
        ('take', sgqlc.types.Arg(Int, graphql_name='take', default=20)),
        ('distinct', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(TodoListsFilterDistinct)), graphql_name='distinct', default=None)),
))
    )


class TodoListResult(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('todos', 'count')
    todos = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Todo))), graphql_name='todos')
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class TodoListSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(TodoList, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(TodoListPreviousValues, graphql_name='previousValues')


class TodoListsPagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(TodoList))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')


class TodoPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'position', 'title', 'started_at', 'dued_at', 'timezone', 'text', 'html', 'created_at', 'updated_at', 'archived', 'done')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    position = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='position')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    started_at = sgqlc.types.Field(DateTime, graphql_name='startedAt')
    dued_at = sgqlc.types.Field(DateTime, graphql_name='duedAt')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    archived = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='archived')
    done = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='done')


class TodoQueries(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('todos',)
    todos = sgqlc.types.Field(sgqlc.types.non_null('TodosResult'), graphql_name='todos', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(sgqlc.types.non_null(TodosFilter), graphql_name='filter', default=None)),
        ('sort', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(TodosSort)), graphql_name='sort', default=())),
        ('limit', sgqlc.types.Arg(Int, graphql_name='limit', default=20)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=0)),
))
    )


class TodoSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(Todo, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(TodoPreviousValues, graphql_name='previousValues')


class TodoTag(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'todo', 'tag', 'created_at', 'uid', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='id')
    todo = sgqlc.types.Field(sgqlc.types.non_null(Todo), graphql_name='todo')
    tag = sgqlc.types.Field(sgqlc.types.non_null(Tag), graphql_name='tag')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class TodoTagConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('TodoTagEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateTodoTag), graphql_name='aggregate')


class TodoTagEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(TodoTag), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class TodoTagPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class TodoTagSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(TodoTag, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(TodoTagPreviousValues, graphql_name='previousValues')


class TodoUser(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'todo', 'user', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    todo = sgqlc.types.Field(sgqlc.types.non_null(Todo), graphql_name='todo')
    user = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='user')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class TodoUserConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('TodoUserEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateTodoUser), graphql_name='aggregate')


class TodoUserEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(TodoUser), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class TodoUserPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class TodoUserSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(TodoUser, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(TodoUserPreviousValues, graphql_name='previousValues')


class TodosPagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info', 'total_count')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Todo))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class TodosResult(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Todo))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')


class User(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'username', 'email', 'date_of_birth', 'birthday', 'phone_number', 'first_name', 'last_name', 'full_name', 'is_email_verified', 'job_title', 'locale', 'image', 'date_format', 'calendar_first_day', 'role', 'last_active_at', 'created_at', 'updated_at', 'company_level', 'project_level', 'is_online', 'is_welcome_guide_completed', 'timezone', 'theme', 'companies', 'projects', 'project_user_role', 'created_activities', 'affected_activities', 'user_activities', 'company_users', 'project_users', 'todo_users', 'push_tokens', 'todos', 'todo_lists', 'comments', 'invitations', 'subscription_plans', 'files', 'checklists', 'checklist_items', 'checklist_item_users', 'questions', 'question_users', 'automation_trigger_assignees', 'automation_action_assignees', 'automations', 'forms', 'form_users', 'personal_access_tokens', 'links', 'documents')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    birthday = sgqlc.types.Field(DateTime, graphql_name='birthday')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    full_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='fullName')
    is_email_verified = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    locale = sgqlc.types.Field(sgqlc.types.non_null(Locale), graphql_name='locale')
    image = sgqlc.types.Field(Image, graphql_name='image')
    date_format = sgqlc.types.Field(String, graphql_name='dateFormat')
    calendar_first_day = sgqlc.types.Field(Int, graphql_name='calendarFirstDay')
    role = sgqlc.types.Field(sgqlc.types.non_null(Role), graphql_name='role')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    company_level = sgqlc.types.Field(UserAccessLevel, graphql_name='companyLevel', args=sgqlc.types.ArgDict((
        ('company_id', sgqlc.types.Arg(String, graphql_name='companyId', default=None)),
))
    )
    project_level = sgqlc.types.Field(UserAccessLevel, graphql_name='projectLevel', args=sgqlc.types.ArgDict((
        ('project_id', sgqlc.types.Arg(String, graphql_name='projectId', default=None)),
))
    )
    is_online = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isOnline')
    is_welcome_guide_completed = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(JSON, graphql_name='theme')
    companies = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Company))), graphql_name='companies')
    projects = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Project))), graphql_name='projects')
    project_user_role = sgqlc.types.Field(ProjectUserRole, graphql_name='projectUserRole', args=sgqlc.types.ArgDict((
        ('project_id', sgqlc.types.Arg(String, graphql_name='projectId', default=None)),
))
    )
    created_activities = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Activity)), graphql_name='createdActivities', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(ActivityWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(ActivityOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    affected_activities = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Activity)), graphql_name='affectedActivities', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(ActivityWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(ActivityOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    user_activities = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserActivity')), graphql_name='userActivities', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(UserActivityWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(UserActivityOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    company_users = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CompanyUser)), graphql_name='companyUsers', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(CompanyUserWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(CompanyUserOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    project_users = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ProjectUser)), graphql_name='projectUsers', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(ProjectUserWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(ProjectUserOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    todo_users = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoUser)), graphql_name='todoUsers', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(TodoUserWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(TodoUserOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    push_tokens = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserPushToken')), graphql_name='pushTokens', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(UserPushTokenWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(UserPushTokenOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    todos = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Todo)), graphql_name='todos', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(TodoWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(TodoOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    todo_lists = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TodoList)), graphql_name='todoLists', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(TodoListWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(TodoListOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    comments = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Comment)), graphql_name='comments', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(CommentWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(CommentOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    invitations = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Invitation)), graphql_name='invitations', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(InvitationWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(InvitationOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    subscription_plans = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CompanySubscriptionPlan)), graphql_name='subscriptionPlans', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(CompanySubscriptionPlanWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(CompanySubscriptionPlanOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    files = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(File)), graphql_name='files', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(FileWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(FileOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    checklists = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Checklist)), graphql_name='checklists', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(ChecklistWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(ChecklistOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    checklist_items = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ChecklistItem)), graphql_name='checklistItems', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(ChecklistItemWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(ChecklistItemOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    checklist_item_users = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ChecklistItemUser)), graphql_name='checklistItemUsers', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(ChecklistItemUserWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(ChecklistItemUserOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    questions = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Question)), graphql_name='questions', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(QuestionWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(QuestionOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    question_users = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(QuestionUser)), graphql_name='questionUsers', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(QuestionUserWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(QuestionUserOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    automation_trigger_assignees = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationTriggerAssignee)), graphql_name='automationTriggerAssignees', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(AutomationTriggerAssigneeWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(AutomationTriggerAssigneeOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    automation_action_assignees = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AutomationActionAssignee)), graphql_name='automationActionAssignees', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(AutomationActionAssigneeWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(AutomationActionAssigneeOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    automations = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Automation)), graphql_name='automations', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(AutomationWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(AutomationOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    forms = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Form)), graphql_name='forms', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(FormWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(FormOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    form_users = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FormUser)), graphql_name='formUsers', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(FormUserWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(FormUserOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    personal_access_tokens = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(PersonalAccessToken)), graphql_name='personalAccessTokens', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(PersonalAccessTokenWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(PersonalAccessTokenOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    links = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Link)), graphql_name='links', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(LinkWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(LinkOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )
    documents = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Document)), graphql_name='documents', args=sgqlc.types.ArgDict((
        ('where', sgqlc.types.Arg(DocumentWhereInput, graphql_name='where', default=None)),
        ('order_by', sgqlc.types.Arg(DocumentOrderByInput, graphql_name='orderBy', default=None)),
        ('skip', sgqlc.types.Arg(Int, graphql_name='skip', default=None)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
        ('before', sgqlc.types.Arg(String, graphql_name='before', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
))
    )


class UserActivity(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'activity', 'user', 'is_seen', 'is_read', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    activity = sgqlc.types.Field(sgqlc.types.non_null(Activity), graphql_name='activity')
    user = sgqlc.types.Field(sgqlc.types.non_null(User), graphql_name='user')
    is_seen = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isSeen')
    is_read = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isRead')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class UserActivityConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('UserActivityEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateUserActivity), graphql_name='aggregate')


class UserActivityEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(UserActivity), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class UserActivityPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'is_seen', 'is_read', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    is_seen = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isSeen')
    is_read = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isRead')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class UserActivitySubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(UserActivity, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(UserActivityPreviousValues, graphql_name='previousValues')


class UserConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('UserEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateUser), graphql_name='aggregate')


class UserEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(User), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class UserPagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info', 'total_count')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(User))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(Int, graphql_name='totalCount')


class UserPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'username', 'email', 'phone_number', 'first_name', 'last_name', 'date_of_birth', 'is_email_verified', 'job_title', 'role', 'locale', 'last_active_at', 'created_at', 'updated_at', 'is_welcome_guide_completed', 'timezone', 'theme')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    date_of_birth = sgqlc.types.Field(DateTime, graphql_name='dateOfBirth')
    is_email_verified = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEmailVerified')
    job_title = sgqlc.types.Field(String, graphql_name='jobTitle')
    role = sgqlc.types.Field(sgqlc.types.non_null(Role), graphql_name='role')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    last_active_at = sgqlc.types.Field(DateTime, graphql_name='lastActiveAt')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')
    is_welcome_guide_completed = sgqlc.types.Field(Boolean, graphql_name='isWelcomeGuideCompleted')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    theme = sgqlc.types.Field(String, graphql_name='theme')


class UserPushToken(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'token', 'user', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    token = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='token')
    user = sgqlc.types.Field(sgqlc.types.non_null(User), graphql_name='user')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class UserPushTokenConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('page_info', 'edges', 'aggregate')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('UserPushTokenEdge')), graphql_name='edges')
    aggregate = sgqlc.types.Field(sgqlc.types.non_null(AggregateUserPushToken), graphql_name='aggregate')


class UserPushTokenEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node', 'cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(UserPushToken), graphql_name='node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')


class UserPushTokenPreviousValues(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'token', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    token = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='token')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class UserPushTokenSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(UserPushToken, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(UserPushTokenPreviousValues, graphql_name='previousValues')


class UserSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mutation', 'node', 'updated_fields', 'previous_values')
    mutation = sgqlc.types.Field(sgqlc.types.non_null(MutationType), graphql_name='mutation')
    node = sgqlc.types.Field(User, graphql_name='node')
    updated_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='updatedFields')
    previous_values = sgqlc.types.Field(UserPreviousValues, graphql_name='previousValues')


class VerifyAcceptInvitationPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('category', 'code')
    category = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='category')
    code = sgqlc.types.Field(String, graphql_name='code')


class Webhook(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'uid', 'name', 'url', 'secret', 'status', 'events', 'project_ids', 'enabled', 'metadata', 'created_at', 'updated_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    uid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uid')
    name = sgqlc.types.Field(String, graphql_name='name')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')
    secret = sgqlc.types.Field(String, graphql_name='secret')
    status = sgqlc.types.Field(sgqlc.types.non_null(WebhookStatusType), graphql_name='status')
    events = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(WebhookEvent)), graphql_name='events')
    project_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='projectIds')
    enabled = sgqlc.types.Field(Boolean, graphql_name='enabled')
    metadata = sgqlc.types.Field(JSON, graphql_name='metadata')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='createdAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name='updatedAt')


class WebhookPagination(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'page_info')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Webhook))), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')


class WhiteLabelSubscription(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'status', 'next_billing_date', 'billing_interval', 'cancel_date')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    status = sgqlc.types.Field(String, graphql_name='status')
    next_billing_date = sgqlc.types.Field(DateTime, graphql_name='nextBillingDate')
    billing_interval = sgqlc.types.Field(BillingInterval, graphql_name='billingInterval')
    cancel_date = sgqlc.types.Field(DateTime, graphql_name='cancelDate')



########################################################################
# Unions
########################################################################
class AutomationActionMetadata(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (AutomationActionMetadataCreateChecklist, AutomationActionMetadataCopyTodo, AutomationActionMetadataSendEmail)


class AutomationTriggerMetadata(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (AutomationTriggerMetadataTodoOverdue,)


class ChartMetadata(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (ChartMetadataBarChart,)


class MentionRef(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (Comment, Discussion, StatusUpdate)


class MentionResult(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (Comment, Discussion, StatusUpdate, Todo)


class SearchHitSource(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (Todo, Discussion, StatusUpdate, Comment, Document, File)


class TodoActivityResult(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (Comment, TodoAction)



########################################################################
# Schema Entry Points
########################################################################
schema.query_type = Query
schema.mutation_type = Mutation
schema.subscription_type = Subscription

