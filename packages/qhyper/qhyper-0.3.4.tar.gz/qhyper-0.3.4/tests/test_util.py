import numpy as np

from QHyper.util import (
    weighted_avg_evaluation, sort_solver_results, add_evaluation_to_results)


dtype = [('x0', 'i4'), ('x1', 'i4'), ('x2', 'i4'), ('x3', 'i4'),
         ('x4', 'i4'), ('probability', 'f8')]
SOLVER_RESULTS = np.array([
    (0, 0, 0, 0, 0, 0.05214763286171284),
    (0, 0, 0, 0, 1, 0.047456206684648256),
    (0, 0, 0, 1, 0, 0.06747850816202812),
    (0, 0, 0, 1, 1, 0.1207346328578372),
    (0, 0, 1, 0, 0, 0.019935786631066668),
    (0, 0, 1, 0, 1, 0.005007856642765267),
    (0, 0, 1, 1, 0, 0.01005580974423947),
    (0, 0, 1, 1, 1, 0.022499649875754597),
    (0, 1, 0, 0, 0, 0.027125455378550354),
    (0, 1, 0, 0, 1, 0.028211751547797856),
    (0, 1, 0, 1, 0, 0.008350237539872896),
    (0, 1, 0, 1, 1, 0.03202691762829461),
    (0, 1, 1, 0, 0, 0.003062964564235747),
    (0, 1, 1, 0, 1, 0.012204283239546117),
    (0, 1, 1, 1, 0, 0.08663358863146411),
    (0, 1, 1, 1, 1, 0.003494550808116975),
    (1, 0, 0, 0, 0, 0.027125455378550347),
    (1, 0, 0, 0, 1, 0.028211751547797856),
    (1, 0, 0, 1, 0, 0.008350237539872908),
    (1, 0, 0, 1, 1, 0.03202691762829463),
    (1, 0, 1, 0, 0, 0.0030629645642357367),
    (1, 0, 1, 0, 1, 0.012204283239546128),
    (1, 0, 1, 1, 0, 0.08663358863146413),
    (1, 0, 1, 1, 1, 0.0034945508081169743),
    (1, 1, 0, 0, 0, 0.010496304111296366),
    (1, 1, 0, 0, 1, 0.015135842196383593),
    (1, 1, 0, 1, 0, 0.11572493713978199),
    (1, 1, 0, 1, 1, 0.010027077049355402),
    (1, 1, 1, 0, 0, 0.007232224863605771),
    (1, 1, 1, 0, 1, 0.013160777387316473),
    (1, 1, 1, 1, 0, 0.039326178047044726),
    (1, 1, 1, 1, 1, 0.0413610770694037),
], dtype=dtype).view(np.recarray)


def score_function(x, p):
    if x['x0'] == 1 and x['x1'] == 0:
        return p
    tmp = x.tolist()[:5]
    return tmp.count(1) * tmp.count(0)


def test_weighted_avg_evaluation():
    assert weighted_avg_evaluation(
        SOLVER_RESULTS, score_function, penalty=-1, limit_results=10,
        normalize=True
    ) == 3.5342418902991257


def test_sort_solver_results():
    dtype = [('x0', 'i4'), ('x1', 'i4'), ('x2', 'i4'), ('x3', 'i4'),
             ('x4', 'i4'), ('probability', 'f8')]

    sorted = np.array([
        (0, 0, 0, 1, 1, 0.1207346328578372),
        (1, 1, 0, 1, 0, 0.11572493713978199),
        (1, 0, 1, 1, 0, 0.08663358863146413),
        (0, 1, 1, 1, 0, 0.08663358863146411),
        (0, 0, 0, 1, 0, 0.06747850816202812),
        (0, 0, 0, 0, 0, 0.05214763286171284),
        (0, 0, 0, 0, 1, 0.047456206684648256),
        (1, 1, 1, 1, 1, 0.0413610770694037),
        (1, 1, 1, 1, 0, 0.039326178047044726),
        (1, 0, 0, 1, 1, 0.03202691762829463),
    ], dtype=dtype).view(np.recarray)

    assert np.array_equal(
        sort_solver_results(SOLVER_RESULTS, limit_results=10),
        sorted)


def test_add_evaluation_to_results():
    dtype = np.dtype(
        [('x0', 'i4'), ('x1', 'i4'), ('x2', 'i4'), ('x3', 'i4'),
         ('x4', 'i4'), ('probability', 'f8'), ('evaluation', 'f8')])

    template = np.array([
        (0, 0, 0, 0, 0, 0.05214763286171284, 0),
        (0, 0, 0, 0, 1, 0.047456206684648256, 4),
        (0, 0, 0, 1, 0, 0.06747850816202812, 4),
        (0, 0, 0, 1, 1, 0.1207346328578372, 6),
        (0, 0, 1, 0, 0, 0.019935786631066668, 4),
        (0, 0, 1, 0, 1, 0.005007856642765267, 6),
        (0, 0, 1, 1, 0, 0.01005580974423947, 6),
        (0, 0, 1, 1, 1, 0.022499649875754597, 6),
        (0, 1, 0, 0, 0, 0.027125455378550354, 4),
        (0, 1, 0, 0, 1, 0.028211751547797856, 6),
        (0, 1, 0, 1, 0, 0.008350237539872896, 6),
        (0, 1, 0, 1, 1, 0.03202691762829461, 6),
        (0, 1, 1, 0, 0, 0.003062964564235747, 6),
        (0, 1, 1, 0, 1, 0.012204283239546117, 6),
        (0, 1, 1, 1, 0, 0.08663358863146411, 6),
        (0, 1, 1, 1, 1, 0.003494550808116975, 4),
        (1, 0, 0, 0, 0, 0.027125455378550347, -1),
        (1, 0, 0, 0, 1, 0.028211751547797856, -1),
        (1, 0, 0, 1, 0, 0.008350237539872908, -1),
        (1, 0, 0, 1, 1, 0.03202691762829463, -1),
        (1, 0, 1, 0, 0, 0.0030629645642357367, -1),
        (1, 0, 1, 0, 1, 0.012204283239546128, -1),
        (1, 0, 1, 1, 0, 0.08663358863146413, -1),
        (1, 0, 1, 1, 1, 0.0034945508081169743, -1),
        (1, 1, 0, 0, 0, 0.010496304111296366, 6),
        (1, 1, 0, 0, 1, 0.015135842196383593, 6),
        (1, 1, 0, 1, 0, 0.11572493713978199, 6),
        (1, 1, 0, 1, 1, 0.010027077049355402, 4),
        (1, 1, 1, 0, 0, 0.007232224863605771, 6),
        (1, 1, 1, 0, 1, 0.013160777387316473, 4),
        (1, 1, 1, 1, 0, 0.039326178047044726, 4),
        (1, 1, 1, 1, 1, 0.0413610770694037, 0),
    ], dtype=dtype).view(np.recarray).astype(dtype)

    result = add_evaluation_to_results(SOLVER_RESULTS, score_function, -1)

    for patter, value in zip(template, result):
        assert np.allclose(patter.tolist(), value.tolist())
