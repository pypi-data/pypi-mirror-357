/**
 * @file RIMP2_test.cpp
 *
 *  @date      Aug 14, 2017
 *  @author    Jan Unsleber
 * @copyright \n
 *  This file is part of the program Serenity.\n\n
 *  Serenity is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of
 *  the License, or (at your option) any later version.\n\n
 *  Serenity is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.\n\n
 *  You should have received a copy of the GNU Lesser General
 *  Public License along with Serenity.
 *  If not, see <http://www.gnu.org/licenses/>.\n
 */

/* Include Serenity Internal Headers */
#include "postHF/MPn/RIMP2.h"
#include "data/ElectronicStructure.h"
#include "system/SystemController.h"
#include "testsupply/SystemController__TEST_SUPPLY.h"
/* Include Std and External Headers */
#include <gtest/gtest.h>

namespace Serenity {

/**
 * @class RIMP2Test
 * @brief Sets everything up for the tests of RIMP2.h/.cpp .
 */
class RIMP2Test : public ::testing::Test {
 protected:
  RIMP2Test()
    : systemController(SystemController__TEST_SUPPLY::getSystemController(TEST_SYSTEM_CONTROLLERS::H2_MINBAS)) {
    systemController->getElectronicStructure<Options::SCF_MODES::RESTRICTED>();
  }

  virtual ~RIMP2Test() = default;

  /// system
  std::shared_ptr<SystemController> systemController;

  static void TearDownTestCase() {
    SystemController__TEST_SUPPLY::cleanUp();
  }
};

/**
 * @test
 * @brief Tests RIMP2.h/.cpp: Restricted energy test.
 */
TEST_F(RIMP2Test, MP2Restricted) {
  RIMP2<Options::SCF_MODES::RESTRICTED> rimp2(systemController);
  auto MP2EnergyCorrection = rimp2.calculateCorrection();
  EXPECT_NEAR(MP2EnergyCorrection, -0.014069347723441622, 1E-8);
}

/**
 * @test
 * @brief Tests RIMP2.h/.cpp: Unrestricted energy test.
 */
TEST_F(RIMP2Test, MP2Unrestricted) {
  RIMP2<Options::SCF_MODES::UNRESTRICTED> rimp2(systemController);
  auto MP2EnergyCorrection = rimp2.calculateCorrection();
  EXPECT_NEAR(MP2EnergyCorrection, -0.014069347723441622, 1E-8);
}

/**
 * @test
 * @brief Unrelaxed MP2 density.
 */
TEST_F(RIMP2Test, Water_Density) {
  auto restrictedSystem =
      SystemController__TEST_SUPPLY::getSystemController(TEST_SYSTEM_CONTROLLERS::WaterMonOne_Def2_SVP, true);
  double eRestricted = restrictedSystem->getElectronicStructure<Options::SCF_MODES::RESTRICTED>()->getEnergy();
  (void)eRestricted;

  RIMP2<Options::SCF_MODES::RESTRICTED> restrictedMP2(restrictedSystem);
  auto restrictedDensity = restrictedMP2.calculateDensityCorrection();

  auto unrestrictedSystem =
      SystemController__TEST_SUPPLY::getSystemController(TEST_SYSTEM_CONTROLLERS::WaterMonOne_Def2_SVP, true);
  double eUnrestricted = unrestrictedSystem->getElectronicStructure<Options::SCF_MODES::UNRESTRICTED>()->getEnergy();
  (void)eUnrestricted;

  RIMP2<Options::SCF_MODES::UNRESTRICTED> unrestrictedMP2(unrestrictedSystem);
  auto unrestrictedDensities = unrestrictedMP2.calculateDensityCorrection();
  Eigen::MatrixXd unrestrictedDensity = unrestrictedDensities.alpha + unrestrictedDensities.beta;

  Eigen::MatrixXd refDensity(24, 24);
  refDensity << 0.0113596, 0.00076305, 1.57701e-11, -0.00123388, 0.00021755, 0.0016788, -0.000352098, 1.9301e-11,
      -0.000342357, -0.000642808, -0.00213377, -0.00608358, -0.00431697, 3.987e-12, -0.0190573, 0.000138104,
      3.39151e-10, -0.00623952, -0.000190833, -3.91192e-11, 9.84761e-11, 0.00133348, -0.000374311, 0.000513156,
      0.00076305, 0.00218093, -9.48755e-11, 0.000663383, 0.00016383, -0.000352098, -0.00090616, -1.78713e-11,
      0.000174876, -0.000114754, 0.00021921, 0.00155907, -0.00231078, 1.2132e-09, -0.00675013, 0.000409342,
      -6.74952e-10, 0.00114005, 0.000784914, 4.96655e-12, -2.61186e-11, -0.000219469, -2.23044e-05, 0.000184521,
      1.57701e-11, -9.48755e-11, 0.00117035, -1.82303e-11, 6.41371e-12, 7.97288e-11, -9.96184e-11, -0.000113203,
      -5.34532e-12, -2.0625e-11, -4.65101e-12, -7.37789e-11, 1.48517e-10, -0.00167752, 5.6266e-11, -6.21354e-11,
      0.000483885, -2.91946e-11, 6.26933e-11, -2.41836e-06, 0.000868814, -9.16825e-12, 4.54499e-12, -7.43631e-12,
      -0.00123388, 0.000663383, -1.82303e-11, 0.000915778, 2.37111e-05, -0.000531802, -0.000156243, -6.68577e-12,
      3.6619e-05, 0.000145493, 0.000446853, 0.00170266, -0.000127843, 1.01355e-10, 0.00148885, -8.35569e-05,
      -1.24512e-10, 0.00107889, 0.000498621, 4.43311e-12, -2.229e-11, -0.000144674, 5.55284e-05, -7.92728e-05,
      0.00021755, 0.00016383, 6.41371e-12, 2.37111e-05, 0.00102696, -0.000497592, 0.000139061, 1.03137e-11, 0.000277902,
      0.000150518, 4.54019e-05, 0.000293763, -0.000313879, -8.9406e-11, -0.000705467, -0.00125455, 8.62282e-11,
      5.94147e-06, 0.000290727, 1.80948e-12, 1.28072e-12, 4.67149e-05, 0.000727652, 0.000115256, 0.0016788,
      -0.000352098, 7.97288e-11, -0.000531802, -0.000497592, 0.0113596, 0.00076305, -1.43886e-11, 0.000530617,
      -0.00113501, -0.00213377, -0.00608357, -0.00431697, 1.35888e-09, 0.00508405, -0.0183672, 1.22701e-09, 0.00143661,
      -0.00607488, 1.44084e-11, 2.05796e-11, 4.52972e-05, -0.000774462, 0.00125689, -0.000352098, -0.00090616,
      -9.96184e-11, -0.000156243, 0.000139061, 0.00076305, 0.00218093, -2.22478e-10, -1.41277e-05, 0.000683168,
      0.000219209, 0.00155907, -0.00231078, 4.96338e-09, 0.00214883, -0.00641206, -2.09038e-09, 0.000461806, 0.00130481,
      -5.54571e-11, 3.06134e-11, 0.000246225, 0.000122354, -8.43477e-05, 1.9301e-11, -1.78713e-11, -0.000113203,
      -6.68577e-12, 1.03137e-11, -1.43886e-11, -2.22478e-10, 0.00117034, 1.96824e-11, -5.38782e-11, 1.98544e-11,
      6.29315e-12, 1.49406e-10, -0.00167752, -3.95157e-11, 1.11815e-10, 0.000483885, -2.37144e-11, 1.00053e-10,
      0.000838358, -0.000228034, 2.61489e-12, -2.81831e-13, 2.04445e-11, -0.000342357, 0.000174876, -5.34532e-12,
      3.6619e-05, 0.000277902, 0.000530617, -1.41277e-05, 1.96824e-11, 0.00100756, 4.84015e-05, -7.22395e-05,
      -0.000158636, -0.000269892, -9.10613e-11, -0.000871478, -0.00134043, 1.6452e-10, 0.000217342, -0.000225828,
      -3.83749e-12, -2.53952e-11, -0.000225506, 0.000592509, 0.000309832, -0.000642808, -0.000114754, -2.0625e-11,
      0.000145493, 0.000150518, -0.00113501, 0.000683168, -5.38782e-11, 4.84015e-05, 0.000935177, 0.000443306,
      0.00172051, -0.000204992, 3.86301e-10, -0.000718517, 0.00110577, -4.2999e-10, 0.000266852, 0.00115228,
      -1.23052e-11, -5.07746e-12, -9.22014e-05, 0.000253637, -6.70315e-05, -0.00213377, 0.00021921, -4.65101e-12,
      0.000446853, 4.54019e-05, -0.00213377, 0.000219209, 1.98544e-11, -7.22395e-05, 0.000443306, 6.14049e-05,
      0.00360498, -0.00530849, -3.84369e-10, 0.000948101, 0.00123686, -2.80829e-12, 0.000904666, 0.0011802, 2.46102e-11,
      -8.45574e-12, -5.15423e-05, 7.38745e-05, -4.95276e-05, -0.00608358, 0.00155907, -7.37789e-11, 0.00170266,
      0.000293763, -0.00608357, 0.00155907, 6.29315e-12, -0.000158636, 0.00172051, 0.00360498, 0.0236029, -0.0252191,
      -8.00258e-10, 0.00156873, 0.00204651, -8.6359e-10, 0.00400008, 0.00521837, 9.3609e-11, -3.80628e-11, 6.22442e-05,
      0.000125236, 0.000175189, -0.00431697, -0.00231078, 1.48517e-10, -0.000127843, -0.000313879, -0.00431697,
      -0.00231078, 1.49406e-10, -0.000269892, -0.000204992, -0.00530849, -0.0252191, 0.0263944, -3.22988e-09,
      0.00902234, 0.0117702, 1.96775e-09, -0.0014616, -0.00190676, -4.12789e-11, -2.17324e-11, -0.000945303, 0.000562213,
      -0.00133483, 3.987e-12, 1.2132e-09, -0.00167752, 1.01355e-10, -8.9406e-11, 1.35888e-09, 4.96338e-09, -0.00167752,
      -9.10613e-11, 3.86301e-10, -3.84369e-10, -8.00258e-10, -3.22988e-09, 0.00586168, 1.2964e-10, -7.69429e-10,
      -0.0246149, 2.27926e-10, -1.49039e-09, -0.000657354, -0.000503887, -5.65977e-11, -5.02288e-11, -3.64138e-11,
      -0.0190573, -0.00675013, 5.6266e-11, 0.00148885, -0.000705467, 0.00508405, 0.00214883, -3.95157e-11, -0.000871478,
      -0.000718517, 0.000948101, 0.00156873, 0.00902234, 1.2964e-10, 0.0113383, -0.00134147, 9.03736e-11, -0.00942893,
      -0.00424177, 1.06367e-11, 9.67178e-11, -0.000250714, -0.000408121, -0.0001564, 0.000138104, 0.000409342,
      -6.21354e-11, -8.35569e-05, -0.00125455, -0.0183672, -0.00641206, 1.11815e-10, -0.00134043, 0.00110577,
      0.00123686, 0.00204651, 0.0117702, -7.69429e-10, -0.00134147, 0.0106165, -7.85815e-10, -0.00424177, -0.0117111,
      1.33315e-10, -2.16171e-11, 8.89242e-05, -0.000403199, -0.000444212, 3.39151e-10, -6.74952e-10, 0.000483885,
      -1.24512e-10, 8.62282e-11, 1.22701e-09, -2.09038e-09, 0.000483885, 1.6452e-10, -4.2999e-10, -2.80829e-12,
      -8.6359e-10, 1.96775e-09, -0.0246149, 9.03736e-11, -7.85815e-10, 0.0104528, 2.0291e-11, 1.29089e-09, -0.000156385,
      -0.000119876, -5.334e-11, -1.45462e-11, 3.31727e-11, -0.00623952, 0.00114005, -2.91946e-11, 0.00107889,
      5.94147e-06, 0.00143661, 0.000461806, -2.37144e-11, 0.000217342, 0.000266852, 0.000904666, 0.00400008, -0.0014616,
      2.27926e-10, -0.00942893, -0.00424177, 2.0291e-11, 0.00433404, 0.00117064, 1.63205e-11, -3.28657e-11, -0.00176266,
      -0.00024869, 2.40757e-05, -0.000190833, 0.000784914, 6.26933e-11, 0.000498621, 0.000290727, -0.00607488,
      0.00130481, 1.00053e-10, -0.000225828, 0.00115228, 0.0011802, 0.00521837, -0.00190676, -1.49039e-09, -0.00424177,
      -0.0117111, 1.29089e-09, 0.00117064, 0.00496387, 5.80968e-11, -3.18621e-13, 0.000385743, 0.000509689, -0.00151892,
      -3.91192e-11, 4.96655e-12, -2.41836e-06, 4.43311e-12, 1.80948e-12, 1.44084e-11, -5.54571e-11, 0.000838358,
      -3.83749e-12, -1.23052e-11, 2.46102e-11, 9.3609e-11, -4.12789e-11, -0.000657354, 1.06367e-11, 1.33315e-10,
      -0.000156385, 1.63205e-11, 5.80968e-11, 0.0032637, 1.87206e-05, -4.98637e-11, -5.31656e-12, 1.49844e-11,
      9.84761e-11, -2.61186e-11, 0.000868814, -2.229e-11, 1.28072e-12, 2.05796e-11, 3.06134e-11, -0.000228034,
      -2.53952e-11, -5.07746e-12, -8.45574e-12, -3.80628e-11, -2.17324e-11, -0.000503887, 9.67178e-11, -2.16171e-11,
      -0.000119876, -3.28657e-11, -3.18621e-13, 1.87206e-05, 0.00325363, -3.79679e-12, 5.37971e-11, -8.81838e-12,
      0.00133348, -0.000219469, -9.16825e-12, -0.000144674, 4.67149e-05, 4.52972e-05, 0.000246225, 2.61489e-12,
      -0.000225506, -9.22014e-05, -5.15423e-05, 6.22442e-05, -0.000945303, -5.65977e-11, -0.000250714, 8.89242e-05,
      -5.334e-11, -0.00176266, 0.000385743, -4.98637e-11, -3.79679e-12, 0.00280143, 3.78104e-05, 0.000159971,
      -0.000374311, -2.23044e-05, 4.54499e-12, 5.55284e-05, 0.000727652, -0.000774462, 0.000122354, -2.81831e-13,
      0.000592509, 0.000253637, 7.38745e-05, 0.000125236, 0.000562213, -5.02288e-11, -0.000408121, -0.000403199,
      -1.45462e-11, -0.00024869, 0.000509689, -5.31656e-12, 5.37971e-11, 3.78104e-05, 0.0027839, 9.94315e-05,
      0.000513156, 0.000184521, -7.43631e-12, -7.92728e-05, 0.000115256, 0.00125689, -8.43477e-05, 2.04445e-11,
      0.000309832, -6.70315e-05, -4.95276e-05, 0.000175189, -0.00133483, -3.64138e-11, -0.0001564, -0.000444212,
      3.31727e-11, 2.40757e-05, -0.00151892, 1.49844e-11, -8.81838e-12, 0.000159971, 9.94315e-05, 0.00305139;

  EXPECT_NEAR(0.0, (refDensity.array().abs() - restrictedDensity.array().abs()).array().abs().sum(), 1e-6);
  EXPECT_NEAR(0.0, (refDensity.array().abs() - unrestrictedDensity.array().abs()).array().abs().sum(), 1e-6);
  SystemController__TEST_SUPPLY::cleanUp();
  SystemController__TEST_SUPPLY::forget(TEST_SYSTEM_CONTROLLERS::WaterMonOne_Def2_SVP);
}

} // namespace Serenity
