/**
 * @file   EFieldPlates.h
 *
 * @date   Mai 25, 2020
 * @author Eric Niehoff
 * @copyright \n
 *  This file is part of the program Serenity.\n\n
 *  Serenity is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of
 *  the License, or (at your option) any later version.\n\n
 *  Serenity is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.\n\n
 *  You should have received a copy of the GNU Lesser General
 *  Public License along with Serenity.
 *  If not, see <http://www.gnu.org/licenses/>.\n
 */
#ifndef EFIELDPLATES
#define EFIELDPLATES

/* Include Serenity Internal Headers */

/* Include Std and External Headers */
#include <Eigen/Eigen>
#include <memory>
#include <string>

namespace Serenity {
/* Forward declaration */
class SystemController;
/**
 * @class EFieldPlates EFieldPlates.h
 *
 * @brief Class to create a uniform electric field using two circular plates\n
 *        consisting of point charges of opposing charge (resembling a capacitor).
 */
class EFieldPlates {
 public:
  /**
   * @brief Constructor. Calculates the positions of all charges.
   * @param pos1 First reference point (the electric field is will point from).
   * @param pos2 Second reference point (the electric field is will point to).
   * @param distance Distance between the midpoint of pos1 and pos2 and the center of the plates.
   * @param nRings Number of rings to be constructed
   * @param radius Radius between adjacent rings.
   * @param fieldStrength The electric-field strength to be generated by these plates in atomic units.
   * @param nameOutput If specified, will write the charged plates to disk as an xyz-file.
   */
  EFieldPlates(Eigen::Vector3d pos1, Eigen::Vector3d pos2, double distance, unsigned nRings, double radius,
               double fieldStrength, std::string nameOutput);

  /**
   * @brief Returns all point charges.
   * @return A vector of pairs containing the charges and positions of all point charges (to be used for Libint).
   */
  std::vector<std::pair<double, std::array<double, 3>>>& getPairList() {
    return _pairList;
  }

  virtual ~EFieldPlates() = default;

 private:
  // list containing each point
  std::vector<std::pair<double, std::array<double, 3>>> _pairList;
  // global charge (same for all point charges)
  double _charge;

  // returns a perpendicular vector to the input vector
  Eigen::Vector3d getPerpendicularVector(Eigen::Vector3d inVec);
};

} /* namespace Serenity */
#endif /* EFIELDPLATES */
