/**
 * @file FuncPotential.h
 *
 * @date Nov 24, 2016
 * @author: Jan Unsleber
 * @copyright \n
 *  This file is part of the program Serenity.\n\n
 *  Serenity is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of
 *  the License, or (at your option) any later version.\n\n
 *  Serenity is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.\n\n
 *  You should have received a copy of the GNU Lesser General
 *  Public License along with Serenity.
 *  If not, see <http://www.gnu.org/licenses/>.\n
 */

#ifndef POTENTIALS_FUNCPOTENTIAL_H_
#define POTENTIALS_FUNCPOTENTIAL_H_

/* Include Serenity Internal Headers */
#include "data/grid/DensityOnGridController.h"
#include "data/grid/GridPotential.h"
#include "data/matrices/DensityMatrixController.h"
#include "dft/Functional.h"
#include "grid/GridController.h"
#include "potentials/Potential.h"

namespace Serenity {
/*forward declarations*/
template<Options::SCF_MODES SCFMode>
class ScalarOperatorToMatrixAdder;
template<class T>
struct Gradient;
class BasisFunctionOnGridController;
class SystemController;
/**
 * @class FuncPotential FuncPotential.h
 * @brief A class for the potential generated by a DFT functional.
 *
 * These potentials exclude the exact exchange needed by hybrid and
 * double hybrid functionals.
 *
 */
template<Options::SCF_MODES SCFMode>
class FuncPotential : public Potential<SCFMode>,
                      public ObjectSensitiveClass<Grid>,
                      public ObjectSensitiveClass<DensityMatrix<SCFMode>> {
 public:
  /**
   * @brief Constructor.
   * @param system The system needed for its config.
   * @param dMat The active density (controller) and  basis this
   *             potential is defined in.
   * @param grid The for the intermediate calculation on the grid.
   * @param functional The functional to be used.
   */
  FuncPotential(std::shared_ptr<SystemController> system, std::shared_ptr<DensityMatrixController<SCFMode>> dMat,
                std::shared_ptr<GridController> grid, Functional functional);
  ///@brief Default destructor.
  virtual ~FuncPotential() = default;

  /**
   * @brief Getter for the actual potential.
   *
   * @return Returns the potential in matrix form.
   */
  FockMatrix<SCFMode>& getMatrix() override final;

  /**
   * @brief Getter for the energy associated with this potential.
   * @param P The active density Matrix.
   * @return The energy of the potential when acting on this density.
   */
  double getEnergy(const DensityMatrix<SCFMode>& P) override final;

  /**
   * @brief Geometry gradient contribution from this Potential.
   *
   * Reference:\n
   * Pople, J.A, Gill, P.M.W. and Johnson, B.G., Chem. Phys. Lett. 199 (1992) 557.
   *
   * LDA part:\n
   *
   * \f[-2 \sum\limits_{\mu} \sum\limits_{\nu}^N P^{\alpha}_{\mu\nu}
   * \int [V_{xc}(r) \phi_{\nu} \frac{\partial \phi_{\mu}}{\partial r}] dr\f]
   *
   * GGA part:\n
   *
   *  \f[-2 \sum\limits_{\mu} \sum\limits_{\nu}^N P^{\alpha}_{\mu\nu}
   *  \int [X_{\mu\nu}(2 \frac{\partial E_{xc}[\rho]}{\partial \gamma_{\alpha\alpha}}
   *  \frac{\rho_{\alpha}}{\partial r}+\frac{\partial E_{xc}[\rho]}{\partial \gamma_{\alpha\beta}}
   *  \frac{\rho_{\beta}}{\partial r})] dr\f]
   *
   * @return The geometry gradient contribution resulting from this Potential.
   */
  Eigen::MatrixXd getGeomGradients() override final;

  /**
   * @brief Potential is linked to the grid and density.
   *        This is used for lazy evaluation.
   *        (see ObjectSensitiveClass and NotifyingClass)
   */
  void notify() override final {
    _potential = nullptr;
  };

  /**
   * @brief Getter.
   * @return Returns the functional.
   */
  Functional getFunctional() {
    return _functional;
  }
  /**
   * @brief Getter.
   * @return Returns the grid (controller).
   */
  std::shared_ptr<GridController> getGridController() {
    return _grid;
  }

 private:
  ///@brief The system only needed for its config.
  std::weak_ptr<SystemController> _system;
  ///@brief The active density and  basis this potential is defined in.
  std::shared_ptr<DensityMatrixController<SCFMode>> _dMatController;
  ///@brief The grid this potential is defined on.
  std::shared_ptr<GridController> _grid;
  ///@brief The functional.
  Functional _functional;
  ///@brief The potential.
  std::unique_ptr<FockMatrix<SCFMode>> _potential;
  ///@brief Conversion too from grid to matrix.
  std::shared_ptr<ScalarOperatorToMatrixAdder<SCFMode>> _gridToMatrix;
  ///@brief density controller
  std::shared_ptr<DensityOnGridController<SCFMode>> _densOnGridController;
  ///@brief Basis functions on grid, need to be kept for gradient calculations
  std::shared_ptr<BasisFunctionOnGridController> _basisFunctionOnGridController;
  ///@brief the energy for this functional
  double _energy;
};

} /* namespace Serenity */

#endif /* POTENTIALS_FUNCPOTENTIAL_H_ */
