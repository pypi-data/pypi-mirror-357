import{_ as e,c as i,o as s,a3 as n}from"./chunks/framework.CviQUOu7.js";const f=JSON.parse('{"title":"Development Guide","description":"","frontmatter":{},"headers":[],"relativePath":"dev/index.md","filePath":"dev/index.md","lastUpdated":1715687938000}'),a={name:"dev/index.md"},t=n(`<h1 id="development-guide" tabindex="-1">Development Guide <a class="header-anchor" href="#development-guide" aria-label="Permalink to &quot;Development Guide&quot;">​</a></h1><p><strong>Table of Contents</strong></p><ul><li><a href="#development-guide">Development Guide</a><ul><li><a href="#contribution">Contribution</a></li><li><a href="#naming-convention">Naming convention</a></li><li><a href="#build-for-distribution">Build for distribution</a></li></ul></li></ul><h2 id="contribution" tabindex="-1">Contribution <a class="header-anchor" href="#contribution" aria-label="Permalink to &quot;Contribution&quot;">​</a></h2><p>Any contribution is welcome! <strong>But please fire an issue before you start working on it.</strong></p><p>The principle is to <strong>Keep this project simple and maintainable</strong>:</p><ul><li><strong>Use type annotations whenever possible</strong></li><li>Adding features for common use cases</li><li>Minimal dependencies for each module</li></ul><h2 id="naming-convention" tabindex="-1">Naming convention <a class="header-anchor" href="#naming-convention" aria-label="Permalink to &quot;Naming convention&quot;">​</a></h2><p><strong>Python</strong></p><p>Alough <a href="https://peps.python.org/pep-0008/#function-and-variable-names" target="_blank" rel="noreferrer">PEP-8</a> suggests use <code>lower_case_with_underscores</code> for methods and functions...</p><p>By my personal preference, I use the following naming rules:</p><ul><li><code>snake_case</code> (Lowercase / Lower case with underscore) for variables, properties</li><li><code>lowerCamelCase</code> (Mixed case) for functions, methods</li><li><code>UpperCamelCase</code> (Pascal case) for classes</li></ul><p><strong>Please follow this style if you are working on this repository</strong>, these naming makes it very clear to distinguish between different types of code.</p><p><strong>Javascript</strong></p><p>I follow Javascript naming convention, which is:</p><ul><li><code>lowerCamelCase</code> for variables, properties, functions and methods.</li><li><code>UpperCamelCase</code> for classes.</li></ul><p><strong>Http path</strong></p><p>use <code>lowercase-with-dash</code> for http path, e.g. <code>/api/v1/your-path</code></p><h2 id="build-for-distribution" tabindex="-1">Build for distribution <a class="header-anchor" href="#build-for-distribution" aria-label="Permalink to &quot;Build for distribution&quot;">​</a></h2><p>Please run the following commands to build for the distribution:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># build necessary files</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># fetch third party libs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lrs-utils</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update_pdfjs</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># build for distribution</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> setup.py</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sdist</span></span></code></pre></div>`,21),o=[t];function l(r,p,d,c,h,u){return s(),i("div",null,o)}const m=e(a,[["render",l]]);export{f as __pageData,m as default};
