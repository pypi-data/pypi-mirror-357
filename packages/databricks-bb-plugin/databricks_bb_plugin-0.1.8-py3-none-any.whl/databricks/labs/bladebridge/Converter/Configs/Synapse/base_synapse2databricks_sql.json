{
	"code_generation_language": "SQL", // can be SQL or PYTHON
	"target_file_extension": "sql", // make sure this is in sync with code_generation_language setting.
	"inherit_from":["general_sql_specs.json"],
    "use_mark_separators" : true,
    "prefix_for_variable": "V_",
    "target_sql_file_header": "-- File converted at %CONVERTER_TIMESTAMP%\n\n",

	"substitution_iter_limit" : 20000,
	"pattern_match_while_iter_limit" : 20000,

    "code_fragment_breakers": {
		"line_end": ["GO"]
	},

    "line_subst" : [
        {"from" : "\bPRINT\b", "to" : "SELECT"},
        {"from" : "\bformat\s*\(\s*([\w.\(\)]+)\s*\,\s*\'N([0-9]+)\'\s*\)", "to" : "format_number($1, $2)"},
        {"from" : "(^(?!.*--COMMENT:).*QUOTENAME.*$)", "to" : "$1 --COMMENT: The Function QUOTENAME is not supported in DBSQL"},
        {"from" : "(^(?!.*--COMMENT:).*PATINDEX.*$)", "to" : "$1 --COMMENT: The Function PATINDEX is not supported in DBSQL"},
        {"from" : "\bvarchar\b", "to" : "string"},
        {"from" : "array\s*(\[)\s*([\w\,\'\s]*)(\])", "to": "array($2)"},
        {"from" : "\bGO\b", "to" : ""},
        {"from" : "\bSTRING\s*\(.*?\)", "to" : "STRING"},
        {"from" : "\bNVARCHAR\s*\(.*?\)", "to" : "STRING"},
        {"from" : "\bVARCHAR\s*\(.*?\)", "to" : "STRING"},
        {"from" : "\bCHAR\s*\(.*?\)", "to" : "STRING"},
        {"from" : "\bNCHAR\s*\(.*?\)", "to" : "STRING"},
        {"from" : "\bVARCHAR\b", "to" : "string"},
        {"from" : "\bCHAR\b", "to" : "string"},
        {"from" : "\bNCHAR\b", "to" : "string"},
        // handling double quotes
        {"from": "\"([^\"]*?)\"", "to": "`$1`"},

        // handling square brackets
        //{"from": "\[([^\]]*?)\]", "to": "`$1`"}
        {"from" : "(?:(?=.*\b(?:PATINDEX|LIKE)\b).*(*SKIP)(*FAIL))|\[([^]]+)\]", "to": "`$1`"},
        {"from" : "\bAS\s+'(.*?)'", "to" : "AS `$1`", "debug_tag" : "single_quote_alias_replace"} // replace single-quoted alias to backticks
       

    ],

	"block_subst" : [
        //{"from" : "(?s)^(.*?)(?=^\s*CREATE\s+(?:OR\s+ALTER\s+)?(?:TABLE|VIEW)\b)", "statement_categories" : ["TABLE_DDL", "VIEW_DDL"], "first_match" : 1, "to" : ""},
		{"from" : "\bSET\s+\w+\s+ON\b", "to" : ""},
		//{"from" : "(\w+)\&(\w+)", "to" : "$1_AND_$2"},

		{"from" : "\bCREATE\s+VIEW\b", "to" : "CREATE OR REPLACE VIEW"},
        {"from" : "\bCREATE\s+OR\s+ALTER\+VIEW\b", "to" : "CREATE OR REPLACE VIEW"},
        {"from" : "\bCREATE\s+TABLE\b", "to" : "CREATE OR REPLACE TABLE"},

		// convert column names with spaces to underscores --> Need to handle for Table column names or add ColumnMapping table properties
		//{"from" : "(\[+[\w\_]+)(\s+)([\w\_\s]+\]+)", "to" : "$1_$3"},
        //{"from" : "\[+([\w\s]+)\]+", "to" : "$1"}, --> does not work if the above one is active.

		{"from" : "\bwith\s+\([\s\S]*\)", "to" : ""},

		// remove nulls
		// {"from" : "\bNOT\s+NULL\b(\s*)(\,|\))", "to" : "__NOTN__$1$2"},
		// {"from" : "\s+\bNULL\b(\s*)(\,|\))", "to" : "$1$2"},
		// {"from" : "__NOTN__", "to" : "NOT NULL"},

		// type conversions
		{"from" : "\bsysname\b", "to" : "string"},
		{"from" : "\bvarchar\s*\([0-9\s\,\w]*\)", "to" : "string"},
		{"from" : "\bnvarchar\s*\([0-9\s\,\w]*\)", "to" : "string"},
        {"from" : "\bnvarchar\b", "to" : "string"},
		{"from" : "\bvarchar\b", "to" : "string"},
		{"from" : "\bnchar\s*\([0-9\s\,\w]*\)", "to" : "string"},
		{"from" : "\bnchar\b", "to" : "string"},
		{"from" : "\bdatetime[0-9]*\s*\([0-9\s\,\w]*\)", "to" : "timestamp"},
		{"from" : "\bdatetime[0-9]*\b", "to" : "timestamp"},
		{"from" : "\btimestamp[0-9]*\s*\([0-9\s\,\w]*\)", "to" : "timestamp"},
		{"from" : "\btimestamp[0-9]+\b", "to" : "timestamp"},
		{"from" : "\bbit\b", "to" : "boolean"},

		// add semicolon at the end
		{"from" : "(\))(\s*$)", "to" : "$1;$2"},

		// remove CONSTRAINT
		{"from" : "\bCONSTRAINT\b([\s\S]*?)(\,|\)\s*\;)", "to" : "$2"},

		// remove multiple commas in a row
		{"from" : "\,(\s*)(\,|\))", "to" : "$1$2"}

        //remove alias from pivot statement
       //{"from" : "\b(pivot\s*\(.*?\))\s*as\s+\w+", "to" : "$1 "}
	],

	"function_subst" : [
        {"from" : "TRY_CONVERT", "to" : "CONVERT"},
		{"from" : "CONVERT" , "output_template" : "CAST($2 AS $1)", "num_args" : 2},
        //{"from" : "CONVERT", "arg_pattern" : {"3": 1}, "output_template" : "CAST($2 AS $1)"},
        {"from" : "CONVERT", "arg_pattern" : {"3": 101}, "output_template" : "date_format($2, 'MM/dd/yyyy')"},
        {"from" : "CONVERT", "arg_pattern" : {"3": 102}, "output_template" : "date_format($2, 'yyyy.MM.dd')"},
        {"from" : "CONVERT", "arg_pattern" : {"3": 103}, "output_template" : "date_format($2, 'dd/MM/yyyy')"},
        {"from" : "CONVERT", "arg_pattern" : {"3": 104}, "output_template" : "date_format($2, 'dd.MM.yyyy')"},
        {"from" : "CONVERT", "arg_pattern" : {"3": 105}, "output_template" : "date_format($2, 'dd-MM-yyyy')"},
        {"from" : "CONVERT", "arg_pattern" : {"3": 106}, "output_template" : "date_format($2, 'dd MMM yyyy')"},
        {"from" : "CONVERT", "arg_pattern" : {"3": 107}, "output_template" : "date_format($2, 'MMM dd, yyyy')"},
        {"from" : "CONVERT", "arg_pattern" : {"3": 108}, "output_template" : "date_format($2, 'hh:mm:ss')"},
        {"from" : "CONVERT", "arg_pattern" : {"3": 109}, "output_template" : "date_format($2, 'MMM dd yyyy hh:mm:ss:SSS')"},
        {"from" : "CONVERT", "arg_pattern" : {"3": 110}, "output_template" : "date_format($2, 'MM-dd-yyyy')"},
        {"from" : "CONVERT", "arg_pattern" : {"3": 111}, "output_template" : "date_format($2, 'yyyy/MM/dd')"},
        {"from" : "CONVERT", "arg_pattern" : {"3": 112}, "output_template" : "date_format($2, 'yyyyMMdd')"},
        {"from" : "CONVERT", "arg_pattern" : {"3": 113}, "output_template" : "date_format($2, 'dd MMM yyyy hh:mm:ss:SSS')"},
        {"from" : "CONVERT", "arg_pattern" : {"3": 114}, "output_template" : "date_format($2, 'hh:mm:ss:SSS')"},
        {"from" : "CONVERT", "arg_pattern" : {"3": 120}, "output_template" : "date_format($2, 'yyyy-MM-dd hh:mm:ss')"},
        {"from" : "CONVERT", "arg_pattern" : {"3": 121}, "output_template" : "date_format($2, 'yyyy-MM-dd hh:mm:ss:SSS"},
        {"from" : "CONVERT", "arg_pattern" : {"3": 1}, "output_template" : "CAST($2 AS $1)"},
		{"from" : "ISNULL", "to" : "COALESCE"},
        {"from" : "getdate", "to": "current_timestamp"},
        {"from" : "SYSDATETIME", "to": "current_timestamp"},
        {"from" : "SYSDATETIMEOFFSET", "output_template": "to_timestamp(date_format(current_timestamp(), 'yyyy-MM-dd HH:mm:ss.SSSXXX Z'), 'yyyy-MM-dd HH:mm:ss.SSSXXX Z')"},
        {"from" : "SYSUTCDATETIME", "to" : "current_timestamp"},

        {"from": "DATEPART", "arg_pattern" : {"1": "DAYOFYEAR"}, "output_template" : "EXTRACT(DOY from $2)"},
        {"from": "DATEPART", "arg_pattern" : {"1": "WEEKDAY"}, "output_template" : "EXTRACT(DOW from $2)"},
        {"from": "DATEPART", "output_template" : "EXTRACT($1 from $2)"},
        {"from": "DATENAME", "arg_pattern" : {"1": "DAYOFYEAR"}, "output_template" : "cast(EXTRACT(DOY from $2) as string)"},
        {"from": "DATENAME", "arg_pattern" : {"1": "WEEKDAY"}, "output_template" : "cast(EXTRACT(DOW from $2) as string)"},
        {"from": "DATENAME", "output_template" : "cast(EXTRACT($1 from $2) as string)"},
        // {"from": "DATEPART", "output_template" : "DATE_PART('$1', $2)"}
        {"from" : "FORMAT", "output_template" : "date_format($1, $2)"},
        {"from"  : "DATEFROMPARTS", "to" : "make_date"},
        {"from" : "ISNUMERIC", "output_template" : "CASE WHEN $1 not rlike '[^0-9]' THEN 1 ELSE 0 END "},
        {"from" : "NVARCHAR", "output_template" : "string"},
        {"from" : "REPLICATE", "to" : "REPEAT"},
        {"from": "datetime2", "output_template" : "TIMESTAMP"},
        {"from" : "EOMONTH", "num_args" : 1, "output_template" : "LAST_DAY($1)"},
        {"from" : "EOMONTH", "num_args" : 2, "output_template" : "LAST_DAY($1 + interval $2 month)"},
        {"from" : "ISDATE", "output_template" : "case when try_cast($1 as date) is null then 0 else 1 end"},

        {"from" : "PARSENAME", "arg_pattern" : {"2" : 1}, "output_template"  : "case when trim(split_part($1, '.', -1)) = '' or split_part($1, '.', -1) is null then null else split_part($1, '.', -1) end"},
        {"from" : "PARSENAME", "arg_pattern" : {"2" : 2}, "output_template"  : "case when trim(split_part($1, '.', -2)) = '' or split_part($1, '.', -2) is null then null else split_part($1, '.', -2) end"},
        {"from" : "PARSENAME", "arg_pattern" : {"2" : 3}, "output_template"  : "case when trim(split_part($1, '.', -3)) = '' or split_part($1, '.', -3) is null then null else split_part($1, '.', -3) end"},
        {"from" : "PARSENAME", "arg_pattern" : {"2" : 4}, "output_template"  : "case when trim(split_part($1, '.', -4)) = '' or split_part($1, '.', -4) is null then null else split_part($1, '.', -4) end"},

        {"from" : "STUFF", "output_template" : "CONCAT(substring($1, 1, $2 - 1), $4, substring($1, $2 + $3))"},
        {"from" : "STRING_SPLIT", "output_template" : "EXPLODE(SPLIT($1, $2))"},
        {"from" : "STRING_AGG", "output_template" : "ARRAY_JOIN(COLLECT_LIST($1), $2)"},

        {"from" : "STR", "num_args" : 1, "output_template" : "string($1)"},
        {"from" : "STR", "num_args" : 2, "output_template" : "case when length(string($1)) > $2 then '**' else lpad(string($1), $2, ' ') end"},
        {"from" : "STR", "num_args" : 3, "output_template" : "case when length(format_number(round($1, $3), $3)) > $2 then '**' else lpad(format_number(round($1, $3), $3), $2, ' ') end"},

        {"from": "NUMERIC", "to" : "DECIMAL"},
        {"from": "COUNT_BIG", "output_template" : "cast(count($1) as bigint)"},
        {"from" : "HASHBYTES", "output_template" : "cast(sha2($1, 256) as binary)"},
        {"from" : "NCHAR", "output_template" : "string"},
        {"from" : "ORIGINAL_LOGIN", "to" : "CURRENT_USER"},
        {"from" : "APPLY", "to" : "LATERAL"}


    ]

}