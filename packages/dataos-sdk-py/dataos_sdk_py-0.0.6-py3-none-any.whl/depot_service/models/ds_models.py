# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2024-10-22T09:54:11+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class FieldRequest(BaseModel):
    name: Optional[str] = None
    type: Optional[str] = None
    precision: Optional[int] = None
    scale: Optional[int] = None
    keyType: Optional[str] = None
    valueType: Optional[str] = None


class IcebergPartitionSpecRequest(BaseModel):
    index: Optional[int] = None
    type: Optional[str] = None
    column: Optional[str] = None
    name: Optional[str] = None
    numBuckets: Optional[int] = None


class IcebergRequest(BaseModel):
    specs: Optional[List[IcebergPartitionSpecRequest]] = None
    properties: Optional[Dict[str, str]] = None


class PulsarRequest(BaseModel):
    partitions: Optional[int] = None
    type: Optional[str] = None


class SchemaRequest(BaseModel):
    type: Optional[str] = None
    avro: Optional[str] = None
    mapping: Optional[str] = None
    fields: Optional[List[Dict[str, Dict[str, Any]]]] = None


class IcebergPartitionSpecResponse(BaseModel):
    index: Optional[int] = None
    type: Optional[str] = None
    column: Optional[str] = None
    name: Optional[str] = None


class IcebergResponse(BaseModel):
    specs: Optional[List[IcebergPartitionSpecResponse]] = None
    properties: Optional[Dict[str, str]] = None
    snapshotId: Optional[str] = None
    version: Optional[str] = None


class PulsarResponse(BaseModel):
    partitions: Optional[int] = None
    type: Optional[str] = None


class SchemaResponse(BaseModel):
    type: Optional[str] = None
    avro: Optional[str] = None
    mapping: Optional[str] = None


class MetastoreType(Enum):
    HIVE = 'HIVE'
    REST = 'REST'


class IcebergCatalogType(Enum):
    HIVE = 'HIVE'
    HADOOP = 'HADOOP'


class AbfssDepot(BaseModel):
    account: Optional[str] = None
    container: Optional[str] = None
    relativePath: Optional[str] = None
    format: Optional[str] = None
    metastoreType: Optional[MetastoreType] = None
    metastoreUrl: Optional[str] = None
    endpointSuffix: Optional[str] = None
    icebergCatalogType: Optional[IcebergCatalogType] = None


class BigQueryDepot(BaseModel):
    project: Optional[str] = None
    params: Optional[Dict[str, Any]] = None
    temporaryBucket: Optional[str] = None
    persistentBucket: Optional[str] = None


class ElasticSearchDepot(BaseModel):
    nodes: Optional[List[str]] = None
    params: Optional[Dict[str, Any]] = None


class EventhubDepot(BaseModel):
    endpoint: Optional[str] = None
    params: Optional[Dict[str, Any]] = None


class FileDepot(BaseModel):
    path: Optional[str] = None
    format: Optional[str] = None
    metastoreType: Optional[MetastoreType] = None
    metastoreUrl: Optional[str] = None
    icebergCatalogType: Optional[IcebergCatalogType] = None


class GCSDepot(BaseModel):
    bucket: Optional[str] = None
    relativePath: Optional[str] = None
    format: Optional[str] = None
    metastoreType: Optional[MetastoreType] = None
    metastoreUrl: Optional[str] = None
    icebergCatalogType: Optional[IcebergCatalogType] = None


class HttpDepot(BaseModel):
    baseUrl: Optional[str] = None
    headers: Optional[Dict[str, str]] = None
    queryParams: Optional[Dict[str, str]] = None


class JdbcDepot(BaseModel):
    subprotocol: Optional[str] = None
    host: Optional[str] = None
    port: Optional[int] = None
    database: Optional[str] = None
    params: Optional[Dict[str, Any]] = None


class KafkaDepot(BaseModel):
    brokers: Optional[List[str]] = None
    schemaRegistryUrl: Optional[str] = None
    params: Optional[Dict[str, Any]] = None


class MongoDBDepot(BaseModel):
    subprotocol: Optional[str] = None
    nodes: Optional[List[str]] = None
    params: Optional[Dict[str, Any]] = None


class MysqlDepot(BaseModel):
    subprotocol: Optional[str] = None
    host: Optional[str] = None
    port: Optional[int] = None
    params: Optional[Dict[str, Any]] = None


class OpenSearchDepot(BaseModel):
    nodes: Optional[List[str]] = None
    params: Optional[Dict[str, Any]] = None


class OracleDepot(BaseModel):
    subprotocol: Optional[str] = None
    host: Optional[str] = None
    port: Optional[int] = None
    service: Optional[str] = None
    params: Optional[Dict[str, Any]] = None


class PostgresDepot(BaseModel):
    subprotocol: Optional[str] = None
    host: Optional[str] = None
    port: Optional[int] = None
    database: Optional[str] = None
    params: Optional[Dict[str, Any]] = None


class PrestoDepot(BaseModel):
    host: Optional[str] = None
    port: Optional[int] = None
    catalog: Optional[str] = None
    schema_: Optional[str] = Field(None, alias='schema')
    params: Optional[Dict[str, Any]] = None


class PulsarDepot(BaseModel):
    adminUrl: Optional[str] = None
    serviceUrl: Optional[str] = None
    tenant: Optional[str] = None
    params: Optional[Dict[str, Any]] = None


class RedisDepot(BaseModel):
    host: Optional[str] = None
    port: Optional[int] = None
    db: Optional[int] = None


class RedshiftDepot(BaseModel):
    subprotocol: Optional[str] = None
    host: Optional[str] = None
    port: Optional[int] = None
    database: Optional[str] = None
    params: Optional[Dict[str, Any]] = None
    scheme: Optional[str] = None
    bucket: Optional[str] = None
    relativePath: Optional[str] = None


class S3Depot(BaseModel):
    scheme: Optional[str] = None
    bucket: Optional[str] = None
    relativePath: Optional[str] = None
    format: Optional[str] = None
    region: Optional[str] = None
    endpoint: Optional[str] = None
    metastoreType: Optional[MetastoreType] = None
    metastoreUrl: Optional[str] = None
    icebergCatalogType: Optional[IcebergCatalogType] = None


class Type(Enum):
    key_value = 'key-value'
    key_value_properties = 'key-value-properties'
    certificate = 'certificate'
    cloud_kernel = 'cloud-kernel'
    cloud_kernel_image_pull = 'cloud-kernel-image-pull'


class Provider(Enum):
    HEIMDALL = 'HEIMDALL'


class Secret(BaseModel):
    id: Optional[str] = None
    acl: Optional[str] = None
    type: Optional[Type] = None
    provider: Optional[Provider] = None


class SnowflakeDepot(BaseModel):
    url: Optional[str] = None
    database: Optional[str] = None
    account: Optional[str] = None
    role: Optional[str] = None
    warehouse: Optional[str] = None
    params: Optional[Dict[str, Any]] = None


class WasbsDepot(BaseModel):
    account: Optional[str] = None
    container: Optional[str] = None
    relativePath: Optional[str] = None
    format: Optional[str] = None
    metastoreType: Optional[MetastoreType] = None
    metastoreUrl: Optional[str] = None
    endpointSuffix: Optional[str] = None
    icebergCatalogType: Optional[IcebergCatalogType] = None


class DepotFlagRequest(BaseModel):
    isArchived: Optional[bool] = None
    archivalMessage: Optional[str] = None


class DepotRequest(BaseModel):
    type: Optional[str] = None
    external: Optional[bool] = None
    owners: Optional[List[str]] = None
    description: Optional[str] = None
    meta: Optional[Dict[str, Any]] = None
    source: Optional[str] = None
    secrets: Optional[List[Secret]] = None
    abfss: Optional[AbfssDepot] = None
    bigquery: Optional[BigQueryDepot] = None
    elasticsearch: Optional[ElasticSearchDepot] = None
    eventhub: Optional[EventhubDepot] = None
    file: Optional[FileDepot] = None
    gcs: Optional[GCSDepot] = None
    http: Optional[HttpDepot] = None
    jdbc: Optional[JdbcDepot] = None
    kafka: Optional[KafkaDepot] = None
    mongodb: Optional[MongoDBDepot] = None
    mysql: Optional[MysqlDepot] = None
    opensearch: Optional[OpenSearchDepot] = None
    oracle: Optional[OracleDepot] = None
    postgresql: Optional[PostgresDepot] = None
    presto: Optional[PrestoDepot] = None
    pulsar: Optional[PulsarDepot] = None
    redis: Optional[RedisDepot] = None
    redshift: Optional[RedshiftDepot] = None
    s3: Optional[S3Depot] = None
    snowflake: Optional[SnowflakeDepot] = None
    wasbs: Optional[WasbsDepot] = None


class HeimdallSecretData(BaseModel):
    key: Optional[str] = None
    base64Value: Optional[str] = None


class BranchCreateRequest(BaseModel):
    snapshotId: Optional[int] = None


class FastForwardRequest(BaseModel):
    name: Optional[str] = None


class MetadataVersionResponse(BaseModel):
    version: Optional[str] = None
    timestamp: Optional[int] = None


class SnapshotResponse(BaseModel):
    snapshotId: Optional[str] = None
    timestamp: Optional[int] = None


class RenameBranchRequest(BaseModel):
    name: Optional[str] = None


class FieldRenameRequest(BaseModel):
    name: Optional[str] = None


class ReplaceBranchRequest(BaseModel):
    sourceBranch: Optional[str] = None
    snapshotId: Optional[str] = None


class IcebergStats(BaseModel):
    stats: Optional[Dict[str, Any]] = None
    branches: Optional[List[Dict[str, Any]]] = None
    properties: Optional[Dict[str, str]] = None
    partitionSpecs: Optional[List[IcebergPartitionSpecResponse]] = None


class FieldUpdateRequest(BaseModel):
    type: Optional[str] = None
    precision: Optional[int] = None
    scale: Optional[int] = None


class Type1(Enum):
    NONE = 'NONE'
    STRING = 'STRING'
    JSON = 'JSON'
    PROTOBUF = 'PROTOBUF'
    AVRO = 'AVRO'
    BOOLEAN = 'BOOLEAN'
    INT8 = 'INT8'
    INT16 = 'INT16'
    INT32 = 'INT32'
    INT64 = 'INT64'
    FLOAT = 'FLOAT'
    DOUBLE = 'DOUBLE'
    DATE = 'DATE'
    TIME = 'TIME'
    TIMESTAMP = 'TIMESTAMP'
    KEY_VALUE = 'KEY_VALUE'
    INSTANT = 'INSTANT'
    LOCAL_DATE = 'LOCAL_DATE'
    LOCAL_TIME = 'LOCAL_TIME'
    LOCAL_DATE_TIME = 'LOCAL_DATE_TIME'
    PROTOBUF_NATIVE = 'PROTOBUF_NATIVE'
    BYTES = 'BYTES'
    AUTO = 'AUTO'
    AUTO_CONSUME = 'AUTO_CONSUME'
    AUTO_PUBLISH = 'AUTO_PUBLISH'


class SchemaInfo(BaseModel):
    schema_: Optional[List[str]] = Field(None, alias='schema')
    schemaDefinition: Optional[str] = None
    name: Optional[str] = None
    properties: Optional[Dict[str, str]] = None
    type: Optional[Type1] = None


class ConnectionDetails(BaseModel):
    pass


class ElasticSearch(ConnectionDetails):
    nodes: Optional[List[str]] = None
    index: Optional[str] = None
    type: Optional[str] = None
    params: Optional[Dict[str, Any]] = None


class Eventhub(ConnectionDetails):
    endpoint: Optional[str] = None
    eventhubName: Optional[str] = None


class File(ConnectionDetails):
    url: Optional[str] = None
    metastoreType: Optional[MetastoreType] = None
    metastoreUrl: Optional[str] = None
    relativePath: Optional[str] = None
    icebergCatalogType: Optional[IcebergCatalogType] = None


class Gcs(ConnectionDetails):
    gcsUrl: Optional[str] = None
    bucket: Optional[str] = None
    path: Optional[str] = None
    metastoreType: Optional[MetastoreType] = None
    metastoreUrl: Optional[str] = None
    relativePath: Optional[str] = None
    icebergCatalogType: Optional[IcebergCatalogType] = None


class Http(ConnectionDetails):
    url: Optional[str] = None
    headers: Optional[Dict[str, str]] = None
    queryParams: Optional[Dict[str, str]] = None


class Jdbc(ConnectionDetails):
    url: Optional[str] = None
    table: Optional[str] = None
    database: Optional[str] = None
    host: Optional[str] = None
    port: Optional[int] = None
    subprotocol: Optional[str] = None
    schema_: Optional[str] = Field(None, alias='schema')
    params: Optional[Dict[str, Any]] = None


class Kafka(ConnectionDetails):
    brokers: Optional[List[str]] = None
    topic: Optional[str] = None
    schemaRegistryUrl: Optional[str] = None
    params: Optional[Dict[str, Any]] = None


class MongoDb(ConnectionDetails):
    connectionUrl: Optional[str] = None
    subprotocol: Optional[str] = None
    nodes: Optional[List[str]] = None
    database: Optional[str] = None
    table: Optional[str] = None
    params: Optional[Dict[str, Any]] = None


class OpenSearch(ConnectionDetails):
    nodes: Optional[List[str]] = None
    index: Optional[str] = None
    type: Optional[str] = None
    params: Optional[Dict[str, Any]] = None


class Oracle(ConnectionDetails):
    url: Optional[str] = None
    host: Optional[str] = None
    port: Optional[int] = None
    table: Optional[str] = None
    service: Optional[str] = None
    schema_: Optional[str] = Field(None, alias='schema')
    subprotocol: Optional[str] = None


class Presto(ConnectionDetails):
    url: Optional[str] = None
    host: Optional[str] = None
    port: Optional[int] = None
    catalog: Optional[str] = None
    schema_: Optional[str] = Field(None, alias='schema')


class Pulsar(ConnectionDetails):
    serviceUrl: Optional[str] = None
    adminUrl: Optional[str] = None
    tenant: Optional[str] = None
    topic: Optional[str] = None
    isPersistent: Optional[bool] = None
    params: Optional[Dict[str, Any]] = None


class Redis(ConnectionDetails):
    host: Optional[str] = None
    port: Optional[int] = None
    table: Optional[str] = None
    db: Optional[int] = None


class Redshift(ConnectionDetails):
    url: Optional[str] = None
    subprotocol: Optional[str] = None
    table: Optional[str] = None
    database: Optional[str] = None
    schema_: Optional[str] = Field(None, alias='schema')
    host: Optional[str] = None
    port: Optional[int] = None
    scheme: Optional[str] = None
    bucket: Optional[str] = None
    path: Optional[str] = None
    dir: Optional[str] = None


class S3(ConnectionDetails):
    s3Url: Optional[str] = None
    bucket: Optional[str] = None
    path: Optional[str] = None
    metastoreType: Optional[MetastoreType] = None
    metastoreUrl: Optional[str] = None
    relativePath: Optional[str] = None
    icebergCatalogType: Optional[IcebergCatalogType] = None


class Snowflake(ConnectionDetails):
    url: Optional[str] = None
    jdbcUrl: Optional[str] = None
    database: Optional[str] = None
    warehouse: Optional[str] = None
    params: Optional[Dict[str, Any]] = None


class Wasbs(ConnectionDetails):
    wasbsUrl: Optional[str] = None
    container: Optional[str] = None
    account: Optional[str] = None
    metastoreType: Optional[MetastoreType] = None
    metastoreUrl: Optional[str] = None
    relativePath: Optional[str] = None
    icebergCatalogType: Optional[IcebergCatalogType] = None


class Resolution(BaseModel):
    pass


class ResolverResponse(BaseModel):
    depot: Optional[str] = None
    type: Optional[str] = None
    collection: Optional[str] = None
    dataset: Optional[str] = None
    format: Optional[str] = None
    external: Optional[bool] = None
    isArchived: Optional[bool] = None
    source: Optional[str] = None
    secrets: Optional[List[Secret]] = None
    abfss: Optional[AbfssDepot] = None
    bigquery: Optional[BigQueryDepot] = None
    elasticsearch: Optional[ElasticSearchDepot] = None
    eventhub: Optional[EventhubDepot] = None
    file: Optional[FileDepot] = None
    gcs: Optional[GCSDepot] = None
    http: Optional[HttpDepot] = None
    jdbc: Optional[JdbcDepot] = None
    kafka: Optional[KafkaDepot] = None
    mongodb: Optional[MongoDBDepot] = None
    mysql: Optional[MysqlDepot] = None
    opensearch: Optional[OpenSearchDepot] = None
    oracle: Optional[OracleDepot] = None
    postgresql: Optional[PostgresDepot] = None
    presto: Optional[PrestoDepot] = None
    pulsar: Optional[PulsarDepot] = None
    redis: Optional[RedisDepot] = None
    redshift: Optional[RedshiftDepot] = None
    s3: Optional[S3Depot] = None
    snowflake: Optional[SnowflakeDepot] = None
    wasbs: Optional[WasbsDepot] = None
    resolution: Optional[Dict[str, Any]] = None


class S3V3(Resolution):
    s3Url: Optional[str] = None
    relativePath: Optional[str] = None


class SnowflakeV3(Resolution):
    url: Optional[str] = None
    table: Optional[str] = None
    schema_: Optional[str] = Field(None, alias='schema')


class WasbsV3(Resolution):
    wasbsUrl: Optional[str] = None
    relativePath: Optional[str] = None


class DatasetRequest(BaseModel):
    schema_: Optional[SchemaRequest] = Field(None, alias='schema')
    iceberg: Optional[IcebergRequest] = None
    pulsar: Optional[PulsarRequest] = None


class DatasetResponse(BaseModel):
    schema_: Optional[SchemaResponse] = Field(None, alias='schema')
    iceberg: Optional[IcebergResponse] = None
    pulsar: Optional[PulsarResponse] = None


class DepotResponse(BaseModel):
    name: Optional[str] = None
    type: Optional[str] = None
    external: Optional[bool] = None
    description: Optional[str] = None
    owners: Optional[List[str]] = None
    meta: Optional[Dict[str, Any]] = None
    source: Optional[str] = None
    secrets: Optional[List[Secret]] = None
    isArchived: Optional[bool] = None
    archivalMessage: Optional[str] = None
    createdAt: Optional[str] = None
    updatedAt: Optional[str] = None
    abfss: Optional[AbfssDepot] = None
    bigquery: Optional[BigQueryDepot] = None
    elasticsearch: Optional[ElasticSearchDepot] = None
    eventhub: Optional[EventhubDepot] = None
    file: Optional[FileDepot] = None
    gcs: Optional[GCSDepot] = None
    http: Optional[HttpDepot] = None
    jdbc: Optional[JdbcDepot] = None
    kafka: Optional[KafkaDepot] = None
    mongodb: Optional[MongoDBDepot] = None
    mysql: Optional[MysqlDepot] = None
    opensearch: Optional[OpenSearchDepot] = None
    oracle: Optional[OracleDepot] = None
    postgresql: Optional[PostgresDepot] = None
    presto: Optional[PrestoDepot] = None
    pulsar: Optional[PulsarDepot] = None
    redis: Optional[RedisDepot] = None
    redshift: Optional[RedshiftDepot] = None
    s3: Optional[S3Depot] = None
    snowflake: Optional[SnowflakeDepot] = None
    wasbs: Optional[WasbsDepot] = None


class HeimdallSecret(BaseModel):
    id: Optional[str] = None
    data: Optional[List[HeimdallSecretData]] = None


class Abfss(ConnectionDetails):
    wasbsUrl: Optional[str] = None
    container: Optional[str] = None
    account: Optional[str] = None
    metastoreType: Optional[MetastoreType] = None
    metastoreUrl: Optional[str] = None
    relativePath: Optional[str] = None
    icebergCatalogType: Optional[IcebergCatalogType] = None
    abfssUrl: Optional[str] = None


class AddressInfo(BaseModel):
    depot: Optional[str] = None
    type: Optional[str] = None
    collection: Optional[str] = None
    dataset: Optional[str] = None
    format: Optional[str] = None
    external: Optional[bool] = None
    isArchived: Optional[bool] = None
    source: Optional[str] = None
    connection: Optional[Dict[str, Any]] = None
    secrets: Optional[List[Secret]] = None


class Bigquery(ConnectionDetails):
    project: Optional[str] = None
    dataset: Optional[str] = None
    table: Optional[str] = None
    temporaryBucket: Optional[str] = None
    persistentBucket: Optional[str] = None


class AbfssV3(Resolution):
    wasbsUrl: Optional[str] = None
    relativePath: Optional[str] = None
    abfssUrl: Optional[str] = None


class BigqueryV3(Resolution):
    dataset: Optional[str] = None
    table: Optional[str] = None


class ElasticSearchV3(Resolution):
    index: Optional[str] = None
    type: Optional[str] = None


class EventhubV3(Resolution):
    eventhubName: Optional[str] = None


class FileV3(Resolution):
    url: Optional[str] = None
    relativePath: Optional[str] = None


class GcsV3(Resolution):
    gcsUrl: Optional[str] = None
    relativePath: Optional[str] = None


class JdbcV3(Resolution):
    url: Optional[str] = None
    table: Optional[str] = None
    database: Optional[str] = None
    schema_: Optional[str] = Field(None, alias='schema')


class KafkaV3(Resolution):
    topic: Optional[str] = None


class MongoDbV3(Resolution):
    connectionUrl: Optional[str] = None
    database: Optional[str] = None
    table: Optional[str] = None


class OpenSearchV3(Resolution):
    index: Optional[str] = None


class OracleV3(Resolution):
    url: Optional[str] = None
    table: Optional[str] = None
    schema_: Optional[str] = Field(None, alias='schema')


class PrestoV3(Resolution):
    url: Optional[str] = None


class PulsarV3(Resolution):
    topic: Optional[str] = None
    isPersistent: Optional[bool] = None


class RedisV3(Resolution):
    pass


class RedshiftV3(Resolution):
    url: Optional[str] = None
    table: Optional[str] = None
    schema_: Optional[str] = Field(None, alias='schema')
    dir: Optional[str] = None
