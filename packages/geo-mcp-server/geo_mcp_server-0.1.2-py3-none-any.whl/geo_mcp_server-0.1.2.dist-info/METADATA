Metadata-Version: 2.4
Name: geo-mcp-server
Version: 0.1.2
Summary: A Model Context Protocol (MCP) server for accessing GEO (Gene Expression Omnibus) data through NCBI E-Utils API
Project-URL: Homepage, https://github.com/maflot/GEO_MCP
Project-URL: Repository, https://github.com/maflot/GEO_MCP
Project-URL: Documentation, https://github.com/maflot/GEO_MCP#readme
Project-URL: Bug Tracker, https://github.com/maflot/GEO_MCP/issues
Author-email: GEO MCP Contributors <matthias.flotho@ccb.uni-saarland.de>
License: MIT
License-File: LICENSE
Keywords: bioinformatics,e-utils,gene-expression,geo,mcp,ncbi
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Scientific/Engineering :: Bio-Informatics
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.10
Requires-Dist: aiofiles>=23.0.0
Requires-Dist: aiohttp>=3.8.0
Requires-Dist: fastapi>=0.100.0
Requires-Dist: mcp[cli]>=1.9.4
Requires-Dist: requests>=2.31.0
Requires-Dist: uvicorn>=0.20.0
Provides-Extra: dev
Requires-Dist: black>=23.0.0; extra == 'dev'
Requires-Dist: mypy>=1.0.0; extra == 'dev'
Requires-Dist: pytest-asyncio>=0.21.0; extra == 'dev'
Requires-Dist: pytest>=7.0.0; extra == 'dev'
Requires-Dist: ruff>=0.1.0; extra == 'dev'
Provides-Extra: test
Requires-Dist: pytest-asyncio>=0.21.0; extra == 'test'
Requires-Dist: pytest>=7.0.0; extra == 'test'
Description-Content-Type: text/markdown

# Gene Expression Omnibus (GEO) MCP

<div align="center">
  <img src="https://www.ncbi.nlm.nih.gov/geo/images/geo_logo.gif" alt="GEO Logo" width="200"/>
  <br/>
  <em>Gene Expression Omnibus (GEO) - A public functional genomics data repository</em>
</div>

[![Python](https://img.shields.io/badge/Python-3.10+-blue.svg)](https://www.python.org/downloads/)
[![License](https://img.shields.io/badge/License-MIT-green.svg)](LICENSE)
[![MCP](https://img.shields.io/badge/MCP-Protocol-blue.svg)](https://modelcontextprotocol.io/)
[![GEO](https://img.shields.io/badge/GEO-NCBI-orange.svg)](https://www.ncbi.nlm.nih.gov/geo/)

> ⚠️ **Development Warning** ⚠️
> 
> **This project is currently in active development and is not yet production-ready.**
> 
> - The MCP stdio server is functional but may have bugs or incomplete features
> - The HTTP server is in early development phase and has **not been properly tested**
> - API endpoints and functionality may change without notice
> - Use at your own risk and report any issues you encounter
> 
> We recommend testing thoroughly in a development environment before using in production.

A Model Context Protocol (MCP) server for accessing [GEO (Gene Expression Omnibus)](https://www.ncbi.nlm.nih.gov/geo/) data through NCBI E-Utils API.

## Quick Install (pip)

```bash
# Clone the repo (if not already)
git clone <repo-url>
cd GEO_MCP
pip install -e .
```

## Configuration

Create a config file at `~/.geo-mcp/config.json` (auto-created on first run if missing):

```json
{
    "base_url": "https://eutils.ncbi.nlm.nih.gov/entrez/eutils",
    "email": "your_email@example.com",
    "api_key": "YOUR_API_KEY"
}
```

- `email` is required by NCBI.
- `api_key` is optional but recommended for higher rate limits ([get one here](https://ncbiinsights.ncbi.nlm.nih.gov/2017/11/02/new-api-keys-for-the-e-utilities/)).

## Running the Server

- **MCP stdio mode:**
  ```bash
  geo-mcp-server
  ```
- **HTTP mode:**
  ```bash
  geo-mcp-server --http --port 8001
  ```

## Claude Desktop Integration

### Common Issue: `spawn geo-mcp-server ENOENT`

This error means Claude Desktop cannot find the `geo-mcp-server` command. This is usually a PATH issue.

### Solution
1. **Find the full path to the executable:**
   ```bash
   which geo-mcp-server
   ```
   Example output: `/Users/youruser/miniforge3/bin/geo-mcp-server`

2. **Update your Claude config:**
   Instead of just `"geo-mcp-server"`, use the full path:
   ```json
   {
     "mcpServers": {
       "geo-mcp": {
         "command": "/Users/youruser/miniforge3/bin/geo-mcp-server",
         "env": {
           "CONFIG_PATH": "/Users/youruser/.geo-mcp/config.json"
         }
       }
     }
   }
   ```

3. **(Optional) Use a Conda Environment:**
   - Activate your conda env and run `which geo-mcp-server` to get the correct path.
   - Use that path in your Claude config as above.

4. **Restart Claude Desktop** after updating the config.

---

## Troubleshooting
- If you see `command not found: geo-mcp-server`, make sure you installed with the correct Python/conda environment and that its `bin` directory is in your PATH.
- If the config file is missing, it will be auto-created on first run, or you can copy the template from `geo_mcp_server/config_template.json`.

---

## Usage

### MCP Server (stdio mode)
For use with MCP clients like Claude Desktop:

```bash
cd geo_mcp_server
python main.py --mode stdio
```

### HTTP Server (localhost:8000)
For HTTP API access:

```bash
# Option 1: Using the main script
cd geo_mcp_server
python main.py --mode http --host localhost --port 8000

# Option 2: Using the convenience script
python run_server.py
```

### HTTP API Endpoints

Once the HTTP server is running on localhost:8000, you can access:

- **Root**: `GET /` - Server status
- **Health Check**: `GET /health` - Health check endpoint
- **List Tools**: `GET /tools` - List all available tools
- **Call Tool**: `POST /tools/call` - Execute a tool with arguments
- **API Documentation**: `GET /docs` - Interactive API documentation (Swagger UI)

### Example HTTP API Usage

```bash
# List available tools
curl http://localhost:8000/tools

# Search GEO Profiles
curl -X POST http://localhost:8000/tools/call \
  -H "Content-Type: application/json" \
  -d '{
    "name": "search_geo_profiles",
    "arguments": {
      "term": "cancer",
      "retmax": 5
    }
  }'

# Search GEO Datasets
curl -X POST http://localhost:8000/tools/call \
  -H "Content-Type: application/json" \
  -d '{
    "name": "search_geo_datasets", 
    "arguments": {
      "term": "breast cancer",
      "retmax": 10
    }
  }'
```

## Available Tools

This MCP server provides access to all major GEO databases through the following tools:

### Search Tools

- **`search_geo_profiles`** - Search gene expression profiles across different biological contexts
  - *Example searches*: "cancer", "breast cancer", "p53", "apoptosis"
  
- **`search_geo_datasets`** - Search curated gene expression datasets
  - *Example searches*: "diabetes", "Alzheimer's disease", "drug response", "tissue specific"
  
- **`search_geo_series`** - Search original submitter-supplied gene expression series
  - *Example searches*: "GSE12345", "microarray", "RNA-seq", "time course"
  
- **`search_geo_samples`** - Search individual gene expression samples
  - *Example searches*: "GSM123456", "human", "mouse", "tumor", "normal"
  
- **`search_geo_platforms`** - Search microarray platform definitions
  - *Example searches*: "Affymetrix", "Illumina", "Agilent", "GPL96"

### Search Parameters

Each tool accepts:
- **`term`** (required): Search term or query string
- **`retmax`** (optional, default: 20): Maximum number of results to return

### Example Search Terms

Here are some example search terms you can use with each tool:

#### GEO Profiles
- Disease terms: "cancer", "diabetes", "Alzheimer's"
- Gene names: "p53", "BRCA1", "EGFR"
- Biological processes: "apoptosis", "cell cycle", "metabolism"

#### GEO Datasets
- Disease studies: "breast cancer", "lung cancer", "diabetes mellitus"
- Experimental conditions: "drug treatment", "time course", "dose response"
- Organisms: "human", "mouse", "rat", "drosophila"

#### GEO Series
- Series IDs: "GSE12345", "GSE67890"
- Technology: "microarray", "RNA-seq", "ChIP-seq"
- Study types: "case-control", "longitudinal", "intervention"

#### GEO Samples
- Sample IDs: "GSM123456", "GSM789012"
- Sample types: "tumor", "normal", "control", "treated"
- Tissues: "brain", "liver", "blood", "tumor"

#### GEO Platforms
- Platform IDs: "GPL96", "GPL570"
- Manufacturers: "Affymetrix", "Illumina", "Agilent"
- Technology: "microarray", "sequencing", "bead array"

Each tool accepts a `term` parameter (required) and an optional `retmax` parameter (default: 20) to limit the number of results.
