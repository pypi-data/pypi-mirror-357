[build-system]
requires = ["hatchling>=1.18.0,<2.0.0", "hatch-vcs>=0.4.0,<1.0.0"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"

[project]
name = "aiohttp-apigami"
dynamic = ["version"]
description = "API documentation and validation for aiohttp using apispec"
readme = "README.md"
requires-python = ">=3.10"
license = { text = "Apache-2.0" }
authors = [
    { name = "Taras Drapalyuk", email = "taras@drapalyuk.com" }
]
keywords = ["aiohttp", "marshmallow", "apispec", "swagger", "openapi", "schema", "validation", "documentation"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "aiohttp>=3.10.0,<4.0.0",
    "apispec>=5.0.1,<7.0.0",
    "webargs>=8.0.1,<9.0.0",
    "marshmallow>=3.0.1,<4.0.0",
]
[project.optional-dependencies]
dataclass = [
    "marshmallow-recipe>=0.0.39,<1.0.0"
]

[dependency-groups]
dev = [
    "codecov>=2.1.13,<3.0.0",
    "mypy",
    "pip",
    "pre-commit",
    "pytest",
    "pytest-aiohttp",
    "pytest-cov",
    "pytest-sugar",
]

[project.urls]
Homepage = "https://github.com/kulapard/aiohttp-apigami"
Issues = "https://github.com/kulapard/aiohttp-apigami/issues"

[tool.mypy]
strict = true
install_types = true
non_interactive = true

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
    "RUF", # ruff
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "I", # isort
    "C", # flake8-comprehensions
    "B", # flake8-bugbear
    "G", # flake8-logging-format
    "T20", # flake8-print
    "UP", # pyupgrade
]
[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 60

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
addopts = "--cov=aiohttp_apigami --cov-branch --cov-report term:skip-covered"

[tool.codespell]
skip = '.git,*.pdf,*.svg,Makefile,.venv,_build,aiohttp_apigami/swagger_ui/*'

[tool.coverage.run]
branch = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    # Don't complain about code that is only run in type checking:
    "if TYPE_CHECKING",
    "assert False",
    ": \\.\\.\\.(\\s*#.*)?$",
    "^ +\\.\\.\\.$",
]
