[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "claude-knowledge-catalyst"
dynamic = ["version"]
description = "AI-powered knowledge management with YAKE keyword extraction for Claude Code development"
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
keywords = ["claude", "knowledge", "management", "obsidian", "ai", "development", "yake", "keyword-extraction", "nlp"]
authors = [
    {name = "CKC Contributors"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Documentation",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Markup :: Markdown",
]
dependencies = [
    "pydantic>=2.0.0",
    "pyyaml>=6.0",
    "watchdog>=3.0.0",
    "typer>=0.9.0",
    "rich>=13.0.0",
    "gitpython>=3.1.0",
    "jinja2>=3.1.0",
    "python-frontmatter>=1.0.0",
    "matplotlib>=3.10.3",
    "seaborn>=0.13.2",
    "psutil>=7.0.0",
    "yake>=0.4.8",
    "langdetect>=1.0.9",
    "unidecode>=1.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "types-PyYAML>=6.0.0",
]
docs = [
    "furo>=2024.8.6",
    "linkify-it-py>=2.0.3",
    "myst-parser>=4.0.1",
    "sphinx>=8.2.3",
    "sphinx-design>=0.6.1",
    "sphinxcontrib-mermaid>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/drillan/claude-knowledge-catalyst"
Documentation = "https://claude-knowledge-catalyst.readthedocs.io/"
Repository = "https://github.com/drillan/claude-knowledge-catalyst.git"
Issues = "https://github.com/drillan/claude-knowledge-catalyst/issues"
"Read the Docs" = "https://claude-knowledge-catalyst.readthedocs.io/"
"Source Code" = "https://github.com/drillan/claude-knowledge-catalyst"

[project.scripts]
ckc = "claude_knowledge_catalyst.cli.main:main"

[tool.hatch.version]
path = "src/claude_knowledge_catalyst/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/examples",
]

[tool.hatch.build.targets.wheel]
packages = ["src/claude_knowledge_catalyst"]

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = []

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
plugins = ["pydantic.mypy"]

# CLI modules with typer/click decorators - allow untyped decorators
[[tool.mypy.overrides]]
module = "claude_knowledge_catalyst.cli.*"
disallow_untyped_decorators = false

# Core modules with pydantic validators - allow untyped decorators
[[tool.mypy.overrides]]
module = "claude_knowledge_catalyst.core.*"
disallow_untyped_decorators = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=claude_knowledge_catalyst",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=1",
]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# UV configuration
[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "hatch>=1.14.1",
    "build>=1.2.2.post1",
    "safety>=3.2.4",
    "bandit>=1.8.5",
    "twine>=6.1.0",
]

[dependency-groups]
dev = [
    "types-pyyaml>=6.0.12.20250516",
]
