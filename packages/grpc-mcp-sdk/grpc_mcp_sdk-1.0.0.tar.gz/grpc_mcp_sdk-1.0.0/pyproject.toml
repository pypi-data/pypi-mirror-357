[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "grpc-mcp-sdk"
version = "1.0.0"
description = "A modern Python framework for building high-performance MCP tools with gRPC"
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
authors = [
    {name = "gRPC MCP SDK Team", email = "contact@grpc-mcp-sdk.com"},
]
keywords = [
    "grpc",
    "mcp",
    "model-context-protocol",
    "ai",
    "tools",
    "api",
    "microservices",
    "rpc",
    "protocol-buffers",
    "streaming",
    "performance",
    "enterprise",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: System :: Distributed Computing",
]
dependencies = [
    "grpcio>=1.60.0",
    "grpcio-tools>=1.60.0",
    "grpcio-health-checking>=1.60.0",
    "grpcio-reflection>=1.60.0",
    "protobuf>=4.25.0",
    "aiohttp>=3.9.0",
    "pydantic>=2.5.0",
    "psutil>=5.9.0",
    "aiofiles>=23.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
]
monitoring = [
    "prometheus-client>=0.17.0",
    "psutil>=5.9.0",
]
security = [
    "cryptography>=41.0.0",
    "pyjwt>=2.8.0",
]

[project.scripts]
grpc-mcp = "grpc_mcp_sdk:main"

[project.urls]
Homepage = "https://github.com/grpc-mcp-sdk/grpc-mcp-sdk"
Documentation = "https://grpc-mcp-sdk.readthedocs.io/"
Repository = "https://github.com/grpc-mcp-sdk/grpc-mcp-sdk"
"Bug Tracker" = "https://github.com/grpc-mcp-sdk/grpc-mcp-sdk/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["grpc_mcp_sdk*"]

[tool.setuptools.package-data]
grpc_mcp_sdk = ["templates/*.py", "templates/*.proto", "templates/*.yml", "templates/*.md"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["grpc_mcp_sdk"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "grpc.*",
    "google.protobuf.*",
    "aiohttp.*",
    "psutil.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=grpc_mcp_sdk",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["grpc_mcp_sdk"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]