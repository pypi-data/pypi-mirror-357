
# Auto-generated by fix_mcp_ipfs_extensions.py
# This file registers IPFS model extensions methods directly

from ipfs_kit_py.mcp.models.ipfs_model import IPFSModel

# Add content method
def add_content(self, content, filename=None, pin=True):
    """Add content to IPFS."""
    if hasattr(self.ipfs_kit, 'add'):
        if isinstance(content, str):
            content = content.encode('utf-8')
        result = self.ipfs_kit.add(content, filename=filename, pin=pin)
        return result
    return {"success": False, "error": "IPFS kit not available"}

# Cat method
def cat(self, cid):
    """Retrieve content from IPFS by CID."""
    if hasattr(self.ipfs_kit, 'cat'):
        return {"success": True, "data": self.ipfs_kit.cat(cid)}
    return {"success": False, "error": "IPFS kit not available"}

# Pin add method
def pin_add(self, cid, recursive=True):
    """Pin a CID to IPFS."""
    if hasattr(self.ipfs_kit, 'pin_add'):
        self.ipfs_kit.pin_add(cid, recursive=recursive)
        return {"success": True, "cid": cid, "pinned": True}
    return {"success": False, "error": "IPFS kit not available"}

# Pin remove method
def pin_rm(self, cid, recursive=True):
    """Unpin a CID from IPFS."""
    if hasattr(self.ipfs_kit, 'pin_rm'):
        self.ipfs_kit.pin_rm(cid, recursive=recursive)
        return {"success": True, "cid": cid, "unpinned": True}
    return {"success": False, "error": "IPFS kit not available"}

# Pin list method
def pin_ls(self, cid=None, type="all"):
    """List pinned CIDs."""
    if hasattr(self.ipfs_kit, 'pin_ls'):
        if cid:
            result = self.ipfs_kit.pin_ls(cid, type=type)
        else:
            result = self.ipfs_kit.pin_ls(type=type)
        return {"success": True, "pins": result}
    return {"success": False, "error": "IPFS kit not available", "pins": []}

# Register all the methods
IPFSModel.add_content = add_content
IPFSModel.cat = cat
IPFSModel.pin_add = pin_add
IPFSModel.pin_rm = pin_rm
IPFSModel.pin_ls = pin_ls

print("IPFS Model extensions registered successfully")
