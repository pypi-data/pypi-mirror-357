# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import ipfs_kit_py.routing.grpc.routing_pb2 as routing__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in routing_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class RoutingServiceStub(object):
    """Routing service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SelectBackend = channel.unary_unary(
                '/ipfs_kit_py.routing.RoutingService/SelectBackend',
                request_serializer=routing__pb2.SelectBackendRequest.SerializeToString,
                response_deserializer=routing__pb2.SelectBackendResponse.FromString,
                _registered_method=True)
        self.RecordOutcome = channel.unary_unary(
                '/ipfs_kit_py.routing.RoutingService/RecordOutcome',
                request_serializer=routing__pb2.RecordOutcomeRequest.SerializeToString,
                response_deserializer=routing__pb2.RecordOutcomeResponse.FromString,
                _registered_method=True)
        self.GetInsights = channel.unary_unary(
                '/ipfs_kit_py.routing.RoutingService/GetInsights',
                request_serializer=routing__pb2.GetInsightsRequest.SerializeToString,
                response_deserializer=routing__pb2.GetInsightsResponse.FromString,
                _registered_method=True)
        self.StreamMetrics = channel.unary_stream(
                '/ipfs_kit_py.routing.RoutingService/StreamMetrics',
                request_serializer=routing__pb2.StreamMetricsRequest.SerializeToString,
                response_deserializer=routing__pb2.MetricsUpdate.FromString,
                _registered_method=True)


class RoutingServiceServicer(object):
    """Routing service definition
    """

    def SelectBackend(self, request, context):
        """Select the optimal backend for content
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordOutcome(self, request, context):
        """Record the outcome of a routing decision
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInsights(self, request, context):
        """Get insights about routing decisions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamMetrics(self, request, context):
        """Stream routing metrics updates
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RoutingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SelectBackend': grpc.unary_unary_rpc_method_handler(
                    servicer.SelectBackend,
                    request_deserializer=routing__pb2.SelectBackendRequest.FromString,
                    response_serializer=routing__pb2.SelectBackendResponse.SerializeToString,
            ),
            'RecordOutcome': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordOutcome,
                    request_deserializer=routing__pb2.RecordOutcomeRequest.FromString,
                    response_serializer=routing__pb2.RecordOutcomeResponse.SerializeToString,
            ),
            'GetInsights': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInsights,
                    request_deserializer=routing__pb2.GetInsightsRequest.FromString,
                    response_serializer=routing__pb2.GetInsightsResponse.SerializeToString,
            ),
            'StreamMetrics': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamMetrics,
                    request_deserializer=routing__pb2.StreamMetricsRequest.FromString,
                    response_serializer=routing__pb2.MetricsUpdate.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ipfs_kit_py.routing.RoutingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ipfs_kit_py.routing.RoutingService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RoutingService(object):
    """Routing service definition
    """

    @staticmethod
    def SelectBackend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ipfs_kit_py.routing.RoutingService/SelectBackend',
            routing__pb2.SelectBackendRequest.SerializeToString,
            routing__pb2.SelectBackendResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RecordOutcome(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ipfs_kit_py.routing.RoutingService/RecordOutcome',
            routing__pb2.RecordOutcomeRequest.SerializeToString,
            routing__pb2.RecordOutcomeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetInsights(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ipfs_kit_py.routing.RoutingService/GetInsights',
            routing__pb2.GetInsightsRequest.SerializeToString,
            routing__pb2.GetInsightsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/ipfs_kit_py.routing.RoutingService/StreamMetrics',
            routing__pb2.StreamMetricsRequest.SerializeToString,
            routing__pb2.MetricsUpdate.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)