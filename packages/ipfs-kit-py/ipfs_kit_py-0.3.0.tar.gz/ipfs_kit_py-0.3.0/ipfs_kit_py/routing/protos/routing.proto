syntax = "proto3";

package ipfs_kit_py.routing;

// Import for timestamp type
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

// Routing service definition
service RoutingService {
  // Select the optimal backend for content
  rpc SelectBackend (SelectBackendRequest) returns (SelectBackendResponse);
  
  // Record the outcome of a routing decision
  rpc RecordOutcome (RecordOutcomeRequest) returns (RecordOutcomeResponse);
  
  // Get insights about routing decisions
  rpc GetInsights (GetInsightsRequest) returns (GetInsightsResponse);
  
  // Stream routing metrics updates
  rpc StreamMetrics (StreamMetricsRequest) returns (stream MetricsUpdate);
}

// Request to select a backend for content
message SelectBackendRequest {
  // Content information
  string content_hash = 1;  // Optional content hash
  string content_type = 2;  // Content MIME type
  int64 content_size = 3;   // Content size in bytes
  google.protobuf.Struct metadata = 4;  // Additional metadata
  
  // Routing parameters
  string strategy = 5;      // Routing strategy
  string priority = 6;      // Routing priority
  repeated string available_backends = 7;  // Available backends
  
  // Geographic information
  message GeoLocation {
    double latitude = 1;
    double longitude = 2;
    string region = 3;
  }
  GeoLocation client_location = 8;  // Client location
  
  // Request metadata
  string request_id = 9;  // Unique request ID
  google.protobuf.Timestamp timestamp = 10;  // Request timestamp
}

// Response with selected backend
message SelectBackendResponse {
  string backend_id = 1;        // Selected backend
  double score = 2;             // Backend score
  google.protobuf.Struct factor_scores = 3;  // Score breakdown by factor
  
  // Alternative backends
  message Alternative {
    string backend_id = 1;
    double score = 2;
  }
  repeated Alternative alternatives = 4;  // Alternative backends
  
  string request_id = 5;        // Original request ID
  google.protobuf.Timestamp timestamp = 6;  // Response timestamp
}

// Request to record routing outcome
message RecordOutcomeRequest {
  string backend_id = 1;        // Backend that was used
  bool success = 2;             // Whether the operation was successful
  
  // Content information
  string content_hash = 3;      // Content hash
  string content_type = 4;      // Content MIME type
  int64 content_size = 5;       // Content size in bytes
  
  // Performance metrics
  int32 duration_ms = 6;        // Operation duration in milliseconds
  string error = 7;             // Error message (if not successful)
  
  google.protobuf.Timestamp timestamp = 8;  // Timestamp
}

// Response to record outcome
message RecordOutcomeResponse {
  bool success = 1;             // Whether the outcome was recorded
  string message = 2;           // Status message
  google.protobuf.Timestamp timestamp = 3;  // Response timestamp
}

// Request to get routing insights
message GetInsightsRequest {
  string backend_id = 1;        // Optional: focus on specific backend
  string content_type = 2;      // Optional: focus on specific content type
  int32 time_window_hours = 3;  // Optional: time window in hours (default: 24)
}

// Response with routing insights
message GetInsightsResponse {
  // Factor weights
  google.protobuf.Struct factor_weights = 1;
  
  // Backend scores
  google.protobuf.Struct backend_scores = 2;
  
  // Success rates by backend
  google.protobuf.Struct backend_success_rates = 3;
  
  // Content type distribution
  google.protobuf.Struct content_type_distribution = 4;
  
  // Backend usage statistics
  google.protobuf.Struct backend_usage_stats = 5;
  
  // Latency statistics
  google.protobuf.Struct latency_stats = 6;
  
  google.protobuf.Timestamp timestamp = 7;  // Response timestamp
}

// Request to stream metrics updates
message StreamMetricsRequest {
  int32 update_interval_seconds = 1;  // Update interval in seconds
  repeated string metrics_types = 2;  // Types of metrics to stream
  bool include_backends = 3;          // Whether to include backend metrics
  bool include_content_types = 4;     // Whether to include content type metrics
}

// Metrics update message
message MetricsUpdate {
  // Current metrics values
  google.protobuf.Struct metrics = 1;
  
  // System status
  enum SystemStatus {
    NORMAL = 0;
    WARNING = 1;
    CRITICAL = 2;
  }
  SystemStatus status = 2;
  
  google.protobuf.Timestamp timestamp = 3;  // Update timestamp
}