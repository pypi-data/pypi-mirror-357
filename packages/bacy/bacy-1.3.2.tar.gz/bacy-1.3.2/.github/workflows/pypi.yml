name: Upload PyPI

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: ''
        required: false
        type: string
  release:
    types: [published]

jobs:
  upload-to-pypi:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install twine
    
    - name: Get release
      id: get_release
      uses: actions/github-script@v7
      with:
        script: |
          let release;
          const releaseTag = '${{ github.event.inputs.release_tag }}';
          
          if (releaseTag) {
            console.log(`Getting release for tag: ${releaseTag}`);
            const { data } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: releaseTag
            });
            release = data;
          } else {
            // Get latest release
            console.log('Getting latest release');
            const { data } = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            release = data;
          }
          
          console.log(`Using release: ${release.tag_name}`);
          core.setOutput('release_id', release.id);
          core.setOutput('tag_name', release.tag_name);
          return release;
    
    - name: Download release assets
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          if (!fs.existsSync('dist')) {
            fs.mkdirSync('dist');
          }
          
          const { data: assets } = await github.rest.repos.listReleaseAssets({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: ${{ steps.get_release.outputs.release_id }}
          });
          
          console.log(`Found ${assets.length} assets`);
          
          for (const asset of assets) {
            if (asset.name.endsWith('.whl') || asset.name.endsWith('.tar.gz')) {
              console.log(`Downloading ${asset.name}...`);
              
              const { data: assetData } = await github.rest.repos.getReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                asset_id: asset.id,
                headers: {
                  Accept: 'application/octet-stream'
                }
              });
              
              const filePath = path.join('dist', asset.name);
              fs.writeFileSync(filePath, Buffer.from(assetData));
              console.log(`Downloaded ${asset.name} to ${filePath}`);
            }
          }
    
    - name: Verify downloaded files
      run: |
        echo "Files in dist directory:"
        ls -la dist/
        
        if [ -z "$(ls -A dist/)" ]; then
          echo "Error: No wheel or source distribution files found in the latest release"
          exit 1
        fi
    
    - name: Check distribution files
      run: |
        python -m twine check dist/*
    
    - name: Upload to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m twine upload dist/* --verbose
