"""
Test GPU Support cho detect_row package
Ki·ªÉm tra kh·∫£ nƒÉng s·ª≠ d·ª•ng GPU v√† so s√°nh hi·ªáu su·∫•t
"""

import cv2
import numpy as np
import time
import sys
import os

# Th√™m th∆∞ m·ª•c detect_row v√†o path
sys.path.append(os.path.join(os.path.dirname(__file__), 'detect_row'))

try:
    from detect_row.gpu_support import check_gpu_requirements, GPUSupport
except ImportError:
    print("Kh√¥ng th·ªÉ import GPU support module")
    sys.exit(1)

def test_opencv_gpu():
    """Ki·ªÉm tra OpenCV c√≥ h·ªó tr·ª£ CUDA kh√¥ng"""
    print("üîç Ki·ªÉm tra OpenCV CUDA Support:")
    
    # Ki·ªÉm tra OpenCV version
    print(f"   OpenCV version: {cv2.__version__}")
    
    # Ki·ªÉm tra CUDA support
    if hasattr(cv2, 'cuda'):
        print("   ‚úÖ OpenCV c√≥ CUDA module")
        try:
            device_count = cv2.cuda.getCudaEnabledDeviceCount()
            print(f"   üìä S·ªë GPU devices: {device_count}")
            
            if device_count > 0:
                print(f"   üéØ Current GPU device: {cv2.cuda.getDevice()}")
                # In th√¥ng tin GPU
                try:
                    print("   üìã GPU Info:")
                    device_info = cv2.cuda.DeviceInfo()
                    print(f"      Name: {device_info.name()}")
                    print(f"      Memory: {device_info.totalMemory() / (1024**3):.1f} GB")
                    print(f"      Compute Capability: {device_info.majorVersion()}.{device_info.minorVersion()}")
                except:
                    print("      Kh√¥ng th·ªÉ l·∫•y th√¥ng tin chi ti·∫øt GPU")
            else:
                print("   ‚ùå Kh√¥ng c√≥ GPU device n√†o h·ªó tr·ª£ CUDA")
                
        except Exception as e:
            print(f"   ‚ùå L·ªói khi ki·ªÉm tra CUDA devices: {e}")
    else:
        print("   ‚ùå OpenCV kh√¥ng c√≥ CUDA module")
        print("   üí° C·∫ßn c√†i ƒë·∫∑t opencv-python v·ªõi CUDA support")

def benchmark_cpu_vs_gpu():
    """So s√°nh hi·ªáu su·∫•t CPU vs GPU"""
    print("\n‚ö° Benchmark CPU vs GPU:")
    
    # T·∫°o ·∫£nh test l·ªõn
    height, width = 2000, 2000
    test_image = np.random.randint(0, 255, (height, width, 3), dtype=np.uint8)
    
    # Test CPU
    print("   üñ•Ô∏è  CPU Processing...")
    start_time = time.time()
    for i in range(10):
        gray_cpu = cv2.cvtColor(test_image, cv2.COLOR_BGR2GRAY)
        blurred_cpu = cv2.GaussianBlur(gray_cpu, (15, 15), 0)
        _, thresh_cpu = cv2.threshold(blurred_cpu, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    cpu_time = time.time() - start_time
    print(f"      CPU time: {cpu_time:.3f}s")
    
    # Test GPU (n·∫øu c√≥)
    gpu_support = GPUSupport()
    if gpu_support.is_gpu_available():
        print("   üéÆ GPU Processing...")
        try:
            # Upload ·∫£nh l√™n GPU
            gpu_image = cv2.cuda_GpuMat()
            gpu_image.upload(test_image)
            
            start_time = time.time()
            for i in range(10):
                # Convert to grayscale tr√™n GPU
                gpu_gray = cv2.cuda.cvtColor(gpu_image, cv2.COLOR_BGR2GRAY)
                # Gaussian blur tr√™n GPU
                gpu_blurred = cv2.cuda.GaussianBlur(gpu_gray, (15, 15), 0)
                # Threshold tr√™n GPU
                _, gpu_thresh = cv2.cuda.threshold(gpu_blurred, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
                # Download v·ªÅ CPU (ƒë·ªÉ c√¥ng b·∫±ng)
                result_gpu = gpu_thresh.download()
            
            gpu_time = time.time() - start_time
            print(f"      GPU time: {gpu_time:.3f}s")
            
            # T√≠nh speedup
            speedup = cpu_time / gpu_time
            print(f"   üìà GPU Speedup: {speedup:.2f}x")
            
        except Exception as e:
            print(f"   ‚ùå L·ªói GPU processing: {e}")
    else:
        print("   ‚ùå GPU kh√¥ng kh·∫£ d·ª•ng ƒë·ªÉ benchmark")

def test_detect_row_with_gpu():
    """Test detect_row package v·ªõi GPU support"""
    print("\nüî¨ Test detect_row package v·ªõi GPU:")
    
    # Ki·ªÉm tra xem c√≥ ·∫£nh test kh√¥ng
    image_path = "image0524.png"
    if not os.path.exists(image_path):
        print(f"   ‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh test: {image_path}")
        return
    
    # Load ·∫£nh
    image = cv2.imread(image_path)
    if image is None:
        print(f"   ‚ùå Kh√¥ng th·ªÉ load ·∫£nh: {image_path}")
        return
    
    print(f"   üì∑ Loaded image: {image.shape}")
    
    # Test v·ªõi CPU
    print("   üñ•Ô∏è  Processing v·ªõi CPU...")
    start_time = time.time()
    gray_cpu = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    _, binary_cpu = cv2.threshold(gray_cpu, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
    
    # Morphological operations
    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (7, 7))
    morph_cpu = cv2.morphologyEx(binary_cpu, cv2.MORPH_CLOSE, kernel, iterations=2)
    cpu_time = time.time() - start_time
    print(f"      CPU processing time: {cpu_time:.3f}s")
    
    # Test v·ªõi GPU (n·∫øu c√≥)
    gpu_support = GPUSupport()
    if gpu_support.is_gpu_available():
        print("   üéÆ Processing v·ªõi GPU...")
        try:
            start_time = time.time()
            
            # Upload l√™n GPU
            gpu_image = cv2.cuda_GpuMat()
            gpu_image.upload(image)
            
            # Convert to grayscale tr√™n GPU
            gpu_gray = cv2.cuda.cvtColor(gpu_image, cv2.COLOR_BGR2GRAY)
            
            # Threshold tr√™n GPU
            _, gpu_binary = cv2.cuda.threshold(gpu_gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
            
            # Morphological operations tr√™n GPU
            gpu_morph = cv2.cuda.morphologyEx(gpu_binary, cv2.MORPH_CLOSE, kernel, iterations=2)
            
            # Download k·∫øt qu·∫£
            result_gpu = gpu_morph.download()
            
            gpu_time = time.time() - start_time
            print(f"      GPU processing time: {gpu_time:.3f}s")
            
            # So s√°nh k·∫øt qu·∫£
            diff = cv2.absdiff(morph_cpu, result_gpu)
            max_diff = np.max(diff)
            print(f"      Max difference CPU vs GPU: {max_diff}")
            
            if max_diff < 5:  # Threshold nh·ªè cho ph√©p sai s·ªë rounding
                print("      ‚úÖ K·∫øt qu·∫£ CPU v√† GPU t∆∞∆°ng ƒë∆∞∆°ng")
            else:
                print("      ‚ö†Ô∏è  C√≥ s·ª± kh√°c bi·ªát gi·ªØa CPU v√† GPU")
            
            # T√≠nh speedup
            if gpu_time > 0:
                speedup = cpu_time / gpu_time
                print(f"   üìà GPU Speedup: {speedup:.2f}x")
                
        except Exception as e:
            print(f"   ‚ùå L·ªói GPU processing: {e}")
    else:
        print("   ‚ùå GPU kh√¥ng kh·∫£ d·ª•ng")

def main():
    print("üöÄ Test GPU Support cho detect_row package")
    print("=" * 50)
    
    # Ki·ªÉm tra GPU requirements
    print("1Ô∏è‚É£ Ki·ªÉm tra GPU Requirements:")
    gpu_available = check_gpu_requirements()
    
    # Test OpenCV GPU
    print("\n2Ô∏è‚É£ Test OpenCV CUDA:")
    test_opencv_gpu()
    
    # Benchmark n·∫øu c√≥ GPU
    if gpu_available:
        print("\n3Ô∏è‚É£ Benchmark Performance:")
        benchmark_cpu_vs_gpu()
        
        print("\n4Ô∏è‚É£ Test detect_row v·ªõi GPU:")
        test_detect_row_with_gpu()
    else:
        print("\nüí° H∆∞·ªõng d·∫´n c√†i ƒë·∫∑t GPU support:")
        print("   1. C√†i NVIDIA GPU drivers m·ªõi nh·∫•t")
        print("   2. C√†i CUDA Toolkit t·ª´ NVIDIA")
        print("   3. G·ª° opencv-python hi·ªán t·∫°i:")
        print("      pip uninstall opencv-python opencv-contrib-python")
        print("   4. C√†i opencv v·ªõi CUDA support:")
        print("      pip install opencv-contrib-python")
        print("   5. Ho·∫∑c build OpenCV t·ª´ source v·ªõi CUDA support")

if __name__ == "__main__":
    main() 