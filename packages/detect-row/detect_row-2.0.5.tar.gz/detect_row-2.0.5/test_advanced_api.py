#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test API n√¢ng cao c·ªßa d·ª± √°n DetectRow
====================================

Script n√†y s·ª≠ d·ª•ng c√°c API n√¢ng cao c·ªßa d·ª± √°n DetectRow ƒë·ªÉ:
1. Ph√¢n t√≠ch c·∫•u tr√∫c b·∫£ng chi ti·∫øt
2. Tr√≠ch xu·∫•t c·ªôt v·ªõi c√°c t√πy ch·ªçn n√¢ng cao
3. Ph√°t hi·ªán header v√† footer
4. G·ªôp c·ªôt v·ªõi c√°c c·∫•u h√¨nh t√πy ch·ªânh
"""

import os
import sys
import cv2
import numpy as np
import json
from datetime import datetime
from pathlib import Path

# Import c√°c module t·ª´ detect_row
from detect_row import (
    AdvancedTableExtractor, 
    AdvancedColumnExtractor,
    AdvancedRowExtractorMain
)

# Import c√°c module h·ªó tr·ª£ GPU n·∫øu c√≥
try:
    from detect_row.gpu_support import GPUSupport
    has_gpu_support = True
except ImportError:
    has_gpu_support = False

def ensure_dir(path):
    """T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i"""
    os.makedirs(path, exist_ok=True)
    print(f"üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c: {path}")

def analyze_table_structure_advanced(table_image, output_dir):
    """Ph√¢n t√≠ch c·∫•u tr√∫c b·∫£ng chi ti·∫øt"""
    print("\nüîç PH√ÇN T√çCH C·∫§U TR√öC B·∫¢NG N√ÇNG CAO")
    print("=" * 50)
    
    # L∆∞u ·∫£nh g·ªëc
    original_path = os.path.join(output_dir, "original.jpg")
    cv2.imwrite(original_path, table_image)
    
    # S·ª≠ d·ª•ng API analyze_table_structure t·ª´ AdvancedTableExtractor
    extractor = AdvancedTableExtractor()
    
    # Ph√¢n t√≠ch c·∫•u tr√∫c b·∫£ng
    try:
        # S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c analyze_table_structure n·∫øu c√≥
        if hasattr(extractor, 'analyze_table_structure'):
            structure = extractor.analyze_table_structure(table_image)
            print(f"‚úÖ ƒê√£ ph√¢n t√≠ch c·∫•u tr√∫c b·∫£ng s·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c c√≥ s·∫µn")
        else:
            # N·∫øu kh√¥ng c√≥ ph∆∞∆°ng th·ª©c s·∫µn, s·ª≠ d·ª•ng detect_table_structure
            structure = extractor.detect_table_structure(table_image)
            print(f"‚úÖ ƒê√£ ph√¢n t√≠ch c·∫•u tr√∫c b·∫£ng s·ª≠ d·ª•ng detect_table_structure")
    except Exception as e:
        print(f"‚ùå L·ªói khi ph√¢n t√≠ch c·∫•u tr√∫c b·∫£ng: {e}")
        return None
    
    # V·∫Ω c·∫•u tr√∫c b·∫£ng
    visualization = table_image.copy()
    
    # V·∫Ω ƒë∆∞·ªùng k·∫ª ngang
    if hasattr(structure, 'horizontal_lines'):
        h_lines = structure.horizontal_lines
        for y in h_lines:
            cv2.line(visualization, (0, y), (table_image.shape[1], y), (0, 255, 0), 2)
        print(f"‚úÖ Ph√°t hi·ªán {len(h_lines)} ƒë∆∞·ªùng k·∫ª ngang")
    
    # V·∫Ω ƒë∆∞·ªùng k·∫ª d·ªçc
    if hasattr(structure, 'vertical_lines'):
        v_lines = structure.vertical_lines
        for x in v_lines:
            cv2.line(visualization, (x, 0), (x, table_image.shape[0]), (0, 0, 255), 2)
        print(f"‚úÖ Ph√°t hi·ªán {len(v_lines)} ƒë∆∞·ªùng k·∫ª d·ªçc")
    
    # ƒê√°nh d·∫•u header rows
    if hasattr(structure, 'header_rows'):
        header_rows = structure.header_rows
        print(f"‚úÖ Ph√°t hi·ªán {len(header_rows)} header rows")
    
    # L∆∞u visualization
    viz_path = os.path.join(output_dir, "table_structure.jpg")
    cv2.imwrite(viz_path, visualization)
    print(f"üíæ ƒê√£ l∆∞u visualization: {viz_path}")
    
    return structure

def extract_columns_advanced(table_image, output_dir, column_groups=None):
    """Tr√≠ch xu·∫•t c·ªôt v·ªõi c√°c t√πy ch·ªçn n√¢ng cao"""
    print("\nüîç TR√çCH XU·∫§T C·ªòT N√ÇNG CAO")
    print("=" * 50)
    
    # T·∫°o th∆∞ m·ª•c output
    columns_dir = os.path.join(output_dir, "columns")
    merged_dir = os.path.join(output_dir, "merged_columns")
    ensure_dir(columns_dir)
    ensure_dir(merged_dir)
    
    # L∆∞u ·∫£nh g·ªëc
    original_path = os.path.join(output_dir, "original.jpg")
    cv2.imwrite(original_path, table_image)
    
    # S·ª≠ d·ª•ng AdvancedColumnExtractor
    extractor = AdvancedColumnExtractor(
        input_dir="",
        output_dir=columns_dir,
        debug_dir=os.path.join(output_dir, "debug")
    )
    
    # N·∫øu kh√¥ng c√≥ column_groups, t·∫°o m·ªôt c·∫•u h√¨nh m·∫∑c ƒë·ªãnh
    if column_groups is None:
        column_groups = {
            "first_two": [1, 2],
            "third": [3],
            "fourth": [4],
            "all": [1, 2, 3, 4, 5]
        }
    
    # Ph√°t hi·ªán ƒë∆∞·ªùng k·∫ª d·ªçc
    h, w = table_image.shape[:2]
    gray = cv2.cvtColor(table_image, cv2.COLOR_BGR2GRAY)
    binary = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 
                                  cv2.THRESH_BINARY_INV, 15, 3)
    
    # S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c detect_vertical_lines
    v_lines = extractor.detect_vertical_lines(binary, min_line_length_ratio=0.4)
    print(f"‚úÖ Ph√°t hi·ªán {len(v_lines)} ƒë∆∞·ªùng k·∫ª d·ªçc")
    
    # V·∫Ω ƒë∆∞·ªùng k·∫ª d·ªçc
    lines_img = table_image.copy()
    for x in v_lines:
        cv2.line(lines_img, (x, 0), (x, h), (0, 0, 255), 2)
    
    # L∆∞u ·∫£nh ƒë∆∞·ªùng k·∫ª d·ªçc
    lines_path = os.path.join(output_dir, "vertical_lines.jpg")
    cv2.imwrite(lines_path, lines_img)
    print(f"üíæ ƒê√£ l∆∞u ·∫£nh ƒë∆∞·ªùng k·∫ª d·ªçc: {lines_path}")
    
    # Tr√≠ch xu·∫•t c·ªôt
    columns = []
    
    # S·ª≠ d·ª•ng v_lines ƒë·ªÉ tr√≠ch xu·∫•t c·ªôt
    for i in range(len(v_lines) - 1):
        x1, x2 = v_lines[i], v_lines[i+1]
        
        # B·ªè qua c·ªôt qu√° h·∫πp
        if x2 - x1 < 20:
            continue
        
        # Crop c·ªôt
        column_img = table_image[:, x1:x2]
        
        # L∆∞u c·ªôt
        column_filename = f"column_{i+1}.jpg"
        column_path = os.path.join(columns_dir, column_filename)
        cv2.imwrite(column_path, column_img)
        
        columns.append({
            "id": i+1,
            "x1": x1,
            "x2": x2,
            "width": x2-x1,
            "height": h,
            "filename": column_filename,
            "path": column_path
        })
        
        print(f"‚úÖ C·ªôt {i+1}: {x2-x1}x{h}")
    
    # G·ªôp c·ªôt theo nh√≥m
    merged_columns = []
    
    for group_name, column_ids in column_groups.items():
        print(f"  üîÑ G·ªôp nh√≥m '{group_name}': c·ªôt {column_ids}")
        
        # T√¨m c√°c c·ªôt c·∫ßn g·ªôp
        cols_to_merge = []
        for col in columns:
            if col["id"] in column_ids:
                cols_to_merge.append(col)
        
        if not cols_to_merge:
            print(f"  ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·ªôt n√†o trong nh√≥m '{group_name}'")
            continue
        
        # S·∫Øp x·∫øp c·ªôt theo th·ª© t·ª±
        cols_to_merge.sort(key=lambda x: x["id"])
        
        # T√¨m v·ªã tr√≠ b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c
        x1 = min(col["x1"] for col in cols_to_merge)
        x2 = max(col["x2"] for col in cols_to_merge)
        
        # Crop ·∫£nh
        merged_img = table_image[:, x1:x2]
        
        # L∆∞u ·∫£nh
        merged_filename = f"{group_name}.jpg"
        merged_path = os.path.join(merged_dir, merged_filename)
        cv2.imwrite(merged_path, merged_img)
        
        merged_columns.append({
            "name": group_name,
            "x1": x1,
            "x2": x2,
            "width": x2-x1,
            "height": h,
            "columns": [col["id"] for col in cols_to_merge],
            "filename": merged_filename,
            "path": merged_path
        })
        
        print(f"  ‚úÖ ƒê√£ g·ªôp nh√≥m '{group_name}': {x2-x1}x{h}")
    
    # V·∫Ω c√°c c·ªôt ƒë√£ g·ªôp
    result_img = table_image.copy()
    for merged in merged_columns:
        x1, x2 = merged["x1"], merged["x2"]
        name = merged["name"]
        cv2.rectangle(result_img, (x1, 0), (x2, h), (0, 255, 0), 2)
        cv2.putText(result_img, name, (x1+5, 30), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)
    
    result_path = os.path.join(output_dir, "merged_columns.jpg")
    cv2.imwrite(result_path, result_img)
    print(f"üíæ ƒê√£ l∆∞u ·∫£nh c·ªôt g·ªôp: {result_path}")
    
    return {
        "columns": columns,
        "merged_columns": merged_columns
    }

def extract_tables_direct(image, output_dir):
    """Tr√≠ch xu·∫•t b·∫£ng tr·ª±c ti·∫øp t·ª´ ·∫£nh"""
    print("\nüîç TR√çCH XU·∫§T B·∫¢NG TR·ª∞C TI·∫æP")
    print("=" * 50)
    
    # T·∫°o th∆∞ m·ª•c output
    tables_dir = os.path.join(output_dir, "tables")
    ensure_dir(tables_dir)
    
    # S·ª≠ d·ª•ng AdvancedTableExtractor
    extractor = AdvancedTableExtractor()
    
    # Tr√≠ch xu·∫•t b·∫£ng
    try:
        # Ph∆∞∆°ng ph√°p 1: T√¨m contours
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        _, binary = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
        
        # T√¨m contours
        contours, _ = cv2.findContours(binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        # L·ªçc contours theo k√≠ch th∆∞·ªõc
        min_area = image.shape[0] * image.shape[1] * 0.01  # T·ªëi thi·ªÉu 1% di·ªán t√≠ch ·∫£nh
        table_contours = [cnt for cnt in contours if cv2.contourArea(cnt) > min_area]
        
        # N·∫øu kh√¥ng t√¨m th·∫•y b·∫£ng, th·ª≠ ph∆∞∆°ng ph√°p kh√°c
        if not table_contours:
            # Ph∆∞∆°ng ph√°p 2: Chia ·∫£nh th√†nh c√°c ph·∫ßn
            h, w = image.shape[:2]
            num_tables = 3  # Gi·∫£ s·ª≠ c√≥ 3 b·∫£ng
            table_height = h // num_tables
            
            table_contours = []
            for i in range(num_tables):
                y1 = i * table_height
                y2 = (i + 1) * table_height if i < num_tables - 1 else h
                table_contours.append(np.array([
                    [[0, y1]],
                    [[w, y1]],
                    [[w, y2]],
                    [[0, y2]]
                ]))
        
        # Tr√≠ch xu·∫•t v√† l∆∞u c√°c b·∫£ng
        tables = []
        for i, contour in enumerate(table_contours):
            x, y, w, h = cv2.boundingRect(contour)
            
            # Th√™m margin
            margin = 5
            x = max(0, x - margin)
            y = max(0, y - margin)
            w = min(image.shape[1] - x, w + 2 * margin)
            h = min(image.shape[0] - y, h + 2 * margin)
            
            # Crop b·∫£ng
            table_img = image[y:y+h, x:x+w]
            
            # L∆∞u b·∫£ng
            table_filename = f"table_{i+1}.jpg"
            table_path = os.path.join(tables_dir, table_filename)
            cv2.imwrite(table_path, table_img)
            
            tables.append({
                "id": i+1,
                "x": x,
                "y": y,
                "width": w,
                "height": h,
                "filename": table_filename,
                "path": table_path
            })
            
            print(f"‚úÖ B·∫£ng {i+1}: {w}x{h}")
        
        # V·∫Ω c√°c b·∫£ng ƒë√£ ph√°t hi·ªán
        result_img = image.copy()
        for table in tables:
            x, y = table["x"], table["y"]
            w, h = table["width"], table["height"]
            cv2.rectangle(result_img, (x, y), (x+w, y+h), (0, 255, 0), 2)
            cv2.putText(result_img, f"Table {table['id']}", (x+5, y+30), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)
        
        # L∆∞u ·∫£nh k·∫øt qu·∫£
        result_path = os.path.join(output_dir, "detected_tables.jpg")
        cv2.imwrite(result_path, result_img)
        print(f"üíæ ƒê√£ l∆∞u ·∫£nh ph√°t hi·ªán b·∫£ng: {result_path}")
        
        return tables
        
    except Exception as e:
        print(f"‚ùå L·ªói khi tr√≠ch xu·∫•t b·∫£ng: {e}")
        return []

def main():
    """H√†m ch√≠nh"""
    # Ki·ªÉm tra tham s·ªë d√≤ng l·ªánh
    if len(sys.argv) < 2:
        print("S·ª≠ d·ª•ng: python test_advanced_api.py <ƒë∆∞·ªùng_d·∫´n_·∫£nh>")
        return
    
    # L·∫•y ƒë∆∞·ªùng d·∫´n ·∫£nh t·ª´ tham s·ªë d√≤ng l·ªánh
    image_path = sys.argv[1]
    output_dir = "advanced_api_output"
    
    print(f"üöÄ TEST API N√ÇNG CAO DETECT-ROW")
    print(f"üì∏ ·∫¢nh ƒë·∫ßu v√†o: {image_path}")
    print(f"üìÅ Th∆∞ m·ª•c ƒë·∫ßu ra: {output_dir}")
    print(f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Ki·ªÉm tra GPU support
    if has_gpu_support:
        gpu_support = GPUSupport()
        if gpu_support.is_gpu_available():
            print(f"‚úÖ GPU support: Available")
        else:
            print(f"‚ö†Ô∏è GPU support: Not available")
    else:
        print(f"‚ö†Ô∏è GPU support module not found")
    
    # Ki·ªÉm tra file
    if not os.path.exists(image_path):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {image_path}")
        return
    
    # ƒê·ªçc ·∫£nh
    image = cv2.imread(image_path)
    if image is None:
        print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh: {image_path}")
        return
    
    # T·∫°o th∆∞ m·ª•c output
    ensure_dir(output_dir)
    
    # B∆∞·ªõc 1: Tr√≠ch xu·∫•t b·∫£ng tr·ª±c ti·∫øp
    print(f"\n{'='*50}")
    print("B∆Ø·ªöC 1: TR√çCH XU·∫§T B·∫¢NG")
    print(f"{'='*50}")
    
    tables = extract_tables_direct(image, output_dir)
    
    if not tables:
        print("‚ùå Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c b·∫£ng n√†o!")
        return
    
    print(f"‚úÖ Tr√≠ch xu·∫•t ƒë∆∞·ª£c {len(tables)} b·∫£ng")
    
    # B∆∞·ªõc 2: Ph√¢n t√≠ch c·∫•u tr√∫c b·∫£ng v√† tr√≠ch xu·∫•t c·ªôt n√¢ng cao
    print(f"\n{'='*50}")
    print("B∆Ø·ªöC 2: PH√ÇN T√çCH C·∫§U TR√öC B·∫¢NG V√Ä TR√çCH XU·∫§T C·ªòT N√ÇNG CAO")
    print(f"{'='*50}")
    
    # ƒê·ªãnh nghƒ©a nh√≥m c·ªôt n√¢ng cao
    advanced_column_groups = {
        "info": [1, 2],           # C·ªôt th√¥ng tin
        "result": [3, 4],         # C·ªôt k·∫øt qu·∫£
        "info_result": [1, 2, 3], # C·ªôt th√¥ng tin v√† k·∫øt qu·∫£ ƒë·∫ßu
        "all_data": [1, 2, 3, 4], # T·∫•t c·∫£ d·ªØ li·ªáu
    }
    
    for i, table in enumerate(tables):
        table_path = table["path"]
        table_name = os.path.splitext(os.path.basename(table_path))[0]
        
        print(f"\n--- X·ª≠ l√Ω {table_name} ({i+1}/{len(tables)}) ---")
        
        # ƒê·ªçc ·∫£nh b·∫£ng
        table_image = cv2.imread(table_path)
        if table_image is None:
            print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc {table_path}")
            continue
        
        # T·∫°o th∆∞ m·ª•c output cho b·∫£ng n√†y
        table_output_dir = os.path.join(output_dir, table_name)
        ensure_dir(table_output_dir)
        
        # Ph√¢n t√≠ch c·∫•u tr√∫c b·∫£ng
        structure = analyze_table_structure_advanced(table_image, table_output_dir)
        
        # Tr√≠ch xu·∫•t c·ªôt n√¢ng cao
        columns_result = extract_columns_advanced(
            table_image, 
            table_output_dir, 
            column_groups=advanced_column_groups
        )
    
    # B∆∞·ªõc 3: T·∫°o b√°o c√°o t·ªïng h·ª£p
    print(f"\n{'='*50}")
    print("B∆Ø·ªöC 3: B√ÅO C√ÅO T·ªîNG H·ª¢P")
    print(f"{'='*50}")
    
    # T·ªïng k·∫øt
    print(f"üéâ HO√ÄN TH√ÄNH TEST API N√ÇNG CAO!")
    print(f"‚úÖ ƒê√£ x·ª≠ l√Ω: {len(tables)} b·∫£ng")
    print(f"üìÅ K·∫øt qu·∫£ l∆∞u t·∫°i: {output_dir}/")
    
    # Hi·ªÉn th·ªã danh s√°ch b·∫£ng
    print(f"\nüìã {len(tables)} b·∫£ng ƒë√£ tr√≠ch xu·∫•t:")
    for table in tables:
        print(f"  - {table['filename']}: {table['width']}x{table['height']}")

if __name__ == "__main__":
    main() 