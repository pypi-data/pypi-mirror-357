#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Ki·ªÉm tra API AdvancedTableExtractor
==================================

Script n√†y ki·ªÉm tra API AdvancedTableExtractor v·ªõi c√°c file ·∫£nh trong th∆∞ m·ª•c input.
"""

import os
import sys
import cv2
import numpy as np
from pathlib import Path
from datetime import datetime

# Import module t·ª´ detect_row
from detect_row import AdvancedTableExtractor

def ensure_dir(path):
    """T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i"""
    os.makedirs(path, exist_ok=True)
    print(f"üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c: {path}")

def list_image_files(directory):
    """Li·ªát k√™ t·∫•t c·∫£ c√°c file ·∫£nh trong th∆∞ m·ª•c"""
    image_extensions = ['.jpg', '.jpeg', '.png', '.bmp', '.tif', '.tiff']
    image_files = []
    
    for file in os.listdir(directory):
        file_path = os.path.join(directory, file)
        if os.path.isfile(file_path):
            ext = os.path.splitext(file)[1].lower()
            if ext in image_extensions:
                image_files.append(file_path)
    
    return image_files

def test_table_extractor(image_path, output_dir):
    """Ki·ªÉm tra AdvancedTableExtractor v·ªõi m·ªôt ·∫£nh"""
    print(f"\n--- X·ª≠ l√Ω ·∫£nh: {os.path.basename(image_path)} ---")
    
    # T·∫°o th∆∞ m·ª•c output cho ·∫£nh n√†y
    image_name = os.path.splitext(os.path.basename(image_path))[0]
    image_output_dir = os.path.join(output_dir, image_name)
    ensure_dir(image_output_dir)
    
    # T·∫°o th∆∞ m·ª•c cho c√°c b·∫£ng
    tables_dir = os.path.join(image_output_dir, "tables")
    debug_dir = os.path.join(image_output_dir, "debug")
    ensure_dir(tables_dir)
    ensure_dir(debug_dir)
    
    # ƒê·ªçc ·∫£nh tr·ª±c ti·∫øp
    image = cv2.imread(image_path)
    if image is None:
        print(f"  ‚ùå Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh: {image_path}")
        return None
    
    # L∆∞u ·∫£nh g·ªëc
    original_path = os.path.join(image_output_dir, "original.jpg")
    cv2.imwrite(original_path, image)
    
    # Tr√≠ch xu·∫•t b·∫£ng tr·ª±c ti·∫øp t·ª´ ·∫£nh
    try:
        print(f"  üîç Tr√≠ch xu·∫•t b·∫£ng t·ª´ {os.path.basename(image_path)}")
        
        # Ph∆∞∆°ng ph√°p 1: T√¨m contours
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        _, binary = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
        
        # T√¨m contours
        contours, _ = cv2.findContours(binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        # L·ªçc contours theo k√≠ch th∆∞·ªõc
        min_area = image.shape[0] * image.shape[1] * 0.01  # T·ªëi thi·ªÉu 1% di·ªán t√≠ch ·∫£nh
        table_contours = [cnt for cnt in contours if cv2.contourArea(cnt) > min_area]
        
        # N·∫øu kh√¥ng t√¨m th·∫•y b·∫£ng, th·ª≠ ph∆∞∆°ng ph√°p kh√°c
        if not table_contours:
            # Ph∆∞∆°ng ph√°p 2: Chia ·∫£nh th√†nh c√°c ph·∫ßn
            h, w = image.shape[:2]
            num_tables = 3  # Gi·∫£ s·ª≠ c√≥ 3 b·∫£ng
            table_height = h // num_tables
            
            table_contours = []
            for i in range(num_tables):
                y1 = i * table_height
                y2 = (i + 1) * table_height if i < num_tables - 1 else h
                table_contours.append(np.array([
                    [[0, y1]],
                    [[w, y1]],
                    [[w, y2]],
                    [[0, y2]]
                ]))
        
        # Tr√≠ch xu·∫•t v√† l∆∞u c√°c b·∫£ng
        extracted_tables = []
        for i, contour in enumerate(table_contours):
            x, y, w, h = cv2.boundingRect(contour)
            
            # Th√™m margin
            margin = 5
            x = max(0, x - margin)
            y = max(0, y - margin)
            w = min(image.shape[1] - x, w + 2 * margin)
            h = min(image.shape[0] - y, h + 2 * margin)
            
            # Crop b·∫£ng
            table_img = image[y:y+h, x:x+w]
            
            # L∆∞u b·∫£ng
            table_filename = f"table_{i+1}.jpg"
            table_path = os.path.join(tables_dir, table_filename)
            cv2.imwrite(table_path, table_img)
            
            extracted_tables.append(table_filename)
            
            print(f"    ‚úÖ B·∫£ng {i+1}: {w}x{h}")
        
        # V·∫Ω c√°c b·∫£ng ƒë√£ ph√°t hi·ªán
        result_img = image.copy()
        for i, contour in enumerate(table_contours):
            x, y, w, h = cv2.boundingRect(contour)
            cv2.rectangle(result_img, (x, y), (x+w, y+h), (0, 255, 0), 2)
            cv2.putText(result_img, f"Table {i+1}", (x+5, y+30), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)
        
        # L∆∞u ·∫£nh k·∫øt qu·∫£
        result_path = os.path.join(image_output_dir, "detected_tables.jpg")
        cv2.imwrite(result_path, result_img)
        
        print(f"  ‚úÖ ƒê√£ tr√≠ch xu·∫•t ƒë∆∞·ª£c {len(extracted_tables)} b·∫£ng")
        
        # Hi·ªÉn th·ªã danh s√°ch b·∫£ng
        for table_file in extracted_tables:
            table_path = os.path.join(tables_dir, table_file)
            table_img = cv2.imread(table_path)
            if table_img is not None:
                h, w = table_img.shape[:2]
                print(f"    - {table_file}: {w}x{h}")
        
        return {
            "image": image_path,
            "tables": extracted_tables,
            "tables_dir": tables_dir
        }
    
    except Exception as e:
        print(f"  ‚ùå L·ªói khi x·ª≠ l√Ω ·∫£nh: {e}")
        return None

def main():
    """H√†m ch√≠nh"""
    # Th∆∞ m·ª•c ch·ª©a ·∫£nh ƒë·∫ßu v√†o
    input_dir = "input"
    if not os.path.exists(input_dir):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c: {input_dir}")
        return
    
    # Th∆∞ m·ª•c ƒë·∫ßu ra
    output_dir = "table_extractor_output"
    ensure_dir(output_dir)
    
    print(f"üöÄ KI·ªÇM TRA API ADVANCEDTABLEEXTRACTOR")
    print(f"üìÅ Th∆∞ m·ª•c ·∫£nh ƒë·∫ßu v√†o: {input_dir}")
    print(f"üìÅ Th∆∞ m·ª•c ƒë·∫ßu ra: {output_dir}")
    print(f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Li·ªát k√™ c√°c file ·∫£nh
    image_files = list_image_files(input_dir)
    if not image_files:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file ·∫£nh n√†o trong th∆∞ m·ª•c: {input_dir}")
        return
    
    print(f"‚úÖ T√¨m th·∫•y {len(image_files)} file ·∫£nh")
    
    # X·ª≠ l√Ω t·ª´ng ·∫£nh
    results = []
    for image_path in image_files:
        result = test_table_extractor(image_path, output_dir)
        if result:
            results.append(result)
    
    # T·ªïng k·∫øt
    print(f"\n{'='*50}")
    print("T·ªîNG K·∫æT")
    print(f"{'='*50}")
    
    print(f"üéâ HO√ÄN TH√ÄNH KI·ªÇM TRA API ADVANCEDTABLEEXTRACTOR!")
    print(f"‚úÖ ƒê√£ x·ª≠ l√Ω {len(image_files)} ·∫£nh")
    print(f"‚úÖ ƒê√£ tr√≠ch xu·∫•t ƒë∆∞·ª£c b·∫£ng t·ª´ {len(results)} ·∫£nh")
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£ chi ti·∫øt
    total_tables = sum(len(result["tables"]) for result in results)
    print(f"‚úÖ T·ªïng s·ªë b·∫£ng ƒë√£ tr√≠ch xu·∫•t: {total_tables}")
    
    print(f"üìÅ K·∫øt qu·∫£ l∆∞u t·∫°i: {output_dir}/")

if __name__ == "__main__":
    main() 