#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Ph√¢n t√≠ch c·∫•u tr√∫c b·∫£ng n√¢ng cao - DetectRow
===========================================

Script n√†y t·∫≠p trung v√†o ph√¢n t√≠ch c·∫•u tr√∫c b·∫£ng n√¢ng cao:
1. Ph√°t hi·ªán header v√† footer
2. Ph√¢n t√≠ch c·∫•u tr√∫c h√†ng v√† c·ªôt
3. T·∫°o visualization chi ti·∫øt
"""

import os
import sys
import cv2
import numpy as np
from pathlib import Path
import json
from datetime import datetime

# Import c√°c module t·ª´ detect_row
from detect_row import (
    AdvancedTableExtractor,
    AdvancedRowExtractorMain,
    AdvancedColumnExtractor
)

def ensure_dir(path):
    """T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i"""
    os.makedirs(path, exist_ok=True)
    print(f"üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c: {path}")

def preprocess_image(image):
    """Ti·ªÅn x·ª≠ l√Ω ·∫£nh"""
    # Chuy·ªÉn sang ·∫£nh x√°m
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # Kh·ª≠ nhi·ªÖu
    blur = cv2.GaussianBlur(gray, (5, 5), 0)
    
    # Nh·ªã ph√¢n h√≥a
    _, binary = cv2.threshold(blur, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
    
    return gray, binary

def detect_table_lines(binary, image):
    """Ph√°t hi·ªán ƒë∆∞·ªùng k·∫ª ngang v√† d·ªçc trong b·∫£ng"""
    # Ph√°t hi·ªán ƒë∆∞·ªùng k·∫ª ngang
    horizontal_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (40, 1))
    horizontal_lines = cv2.morphologyEx(binary, cv2.MORPH_OPEN, horizontal_kernel, iterations=2)
    
    # Ph√°t hi·ªán ƒë∆∞·ªùng k·∫ª d·ªçc
    vertical_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (1, 40))
    vertical_lines = cv2.morphologyEx(binary, cv2.MORPH_OPEN, vertical_kernel, iterations=2)
    
    # K·∫øt h·ª£p ƒë∆∞·ªùng k·∫ª ngang v√† d·ªçc
    table_lines = cv2.add(horizontal_lines, vertical_lines)
    
    # T√¨m contours
    contours, _ = cv2.findContours(table_lines, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    # V·∫Ω contours
    visualization = image.copy()
    cv2.drawContours(visualization, contours, -1, (0, 255, 0), 2)
    
    # T√¨m ƒë∆∞·ªùng k·∫ª ngang
    h_lines = []
    contours, _ = cv2.findContours(horizontal_lines, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    for contour in contours:
        x, y, w, h = cv2.boundingRect(contour)
        if w > image.shape[1] * 0.5:  # Ch·ªâ l·∫•y ƒë∆∞·ªùng k·∫ª ngang ƒë·ªß d√†i
            h_lines.append(y + h//2)
            cv2.line(visualization, (0, y + h//2), (image.shape[1], y + h//2), (0, 0, 255), 2)
    
    # T√¨m ƒë∆∞·ªùng k·∫ª d·ªçc
    v_lines = []
    contours, _ = cv2.findContours(vertical_lines, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    for contour in contours:
        x, y, w, h = cv2.boundingRect(contour)
        if h > image.shape[0] * 0.5:  # Ch·ªâ l·∫•y ƒë∆∞·ªùng k·∫ª d·ªçc ƒë·ªß d√†i
            v_lines.append(x + w//2)
            cv2.line(visualization, (x + w//2, 0), (x + w//2, image.shape[0]), (255, 0, 0), 2)
    
    # S·∫Øp x·∫øp c√°c ƒë∆∞·ªùng k·∫ª
    h_lines.sort()
    v_lines.sort()
    
    return {
        "horizontal_lines": h_lines,
        "vertical_lines": v_lines,
        "visualization": visualization
    }

def detect_header_footer(image, h_lines, v_lines):
    """Ph√°t hi·ªán header v√† footer c·ªßa b·∫£ng"""
    h, w = image.shape[:2]
    
    # Ph√°t hi·ªán header (d√≤ng ƒë·∫ßu ti√™n)
    header_y1 = 0
    header_y2 = h_lines[0] if h_lines else h // 10
    
    # Ph√°t hi·ªán footer (d√≤ng cu·ªëi c√πng)
    footer_y1 = h_lines[-1] if h_lines else h * 9 // 10
    footer_y2 = h
    
    # C·∫Øt header v√† footer
    header_img = image[header_y1:header_y2, :]
    footer_img = image[footer_y1:footer_y2, :]
    
    # T·∫°o visualization
    visualization = image.copy()
    
    # V·∫Ω header
    cv2.rectangle(visualization, (0, header_y1), (w, header_y2), (0, 255, 0), 2)
    cv2.putText(visualization, "HEADER", (10, header_y1 + 20), 
                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
    
    # V·∫Ω footer
    cv2.rectangle(visualization, (0, footer_y1), (w, footer_y2), (0, 0, 255), 2)
    cv2.putText(visualization, "FOOTER", (10, footer_y1 + 20), 
                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
    
    return {
        "header": {
            "y1": header_y1,
            "y2": header_y2,
            "image": header_img
        },
        "footer": {
            "y1": footer_y1,
            "y2": footer_y2,
            "image": footer_img
        },
        "visualization": visualization
    }

def analyze_table_cells(image, h_lines, v_lines):
    """Ph√¢n t√≠ch c√°c √¥ trong b·∫£ng"""
    # Th√™m c√°c ƒë∆∞·ªùng bi√™n
    h_lines = [0] + h_lines + [image.shape[0]]
    v_lines = [0] + v_lines + [image.shape[1]]
    
    # T·∫°o visualization
    visualization = image.copy()
    
    # Ph√¢n t√≠ch c√°c √¥
    cells = []
    
    for i in range(len(h_lines) - 1):
        row_cells = []
        for j in range(len(v_lines) - 1):
            # T·ªça ƒë·ªô c·ªßa √¥
            x1, y1 = v_lines[j], h_lines[i]
            x2, y2 = v_lines[j+1], h_lines[i+1]
            
            # C·∫Øt √¥
            cell_img = image[y1:y2, x1:x2]
            
            # Th√™m √¥ v√†o danh s√°ch
            cell = {
                "row": i,
                "col": j,
                "x1": x1,
                "y1": y1,
                "x2": x2,
                "y2": y2,
                "width": x2 - x1,
                "height": y2 - y1,
                "image": cell_img
            }
            row_cells.append(cell)
            
            # V·∫Ω √¥
            cv2.rectangle(visualization, (x1, y1), (x2, y2), (0, 255, 0), 1)
            cv2.putText(visualization, f"{i},{j}", (x1 + 5, y1 + 20), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 1)
        
        cells.append(row_cells)
    
    return {
        "cells": cells,
        "rows": len(cells),
        "cols": len(cells[0]) if cells else 0,
        "visualization": visualization
    }

def analyze_table_structure(image_path, output_dir):
    """Ph√¢n t√≠ch c·∫•u tr√∫c b·∫£ng"""
    print(f"\nüîç PH√ÇN T√çCH C·∫§U TR√öC B·∫¢NG N√ÇNG CAO")
    print("=" * 50)
    
    # ƒê·ªçc ·∫£nh
    image = cv2.imread(image_path)
    if image is None:
        print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh: {image_path}")
        return None
    
    # T·∫°o th∆∞ m·ª•c output
    ensure_dir(output_dir)
    
    # L∆∞u ·∫£nh g·ªëc
    original_path = os.path.join(output_dir, "original.jpg")
    cv2.imwrite(original_path, image)
    
    # Ti·ªÅn x·ª≠ l√Ω ·∫£nh
    gray, binary = preprocess_image(image)
    
    # L∆∞u ·∫£nh nh·ªã ph√¢n
    binary_path = os.path.join(output_dir, "binary.jpg")
    cv2.imwrite(binary_path, binary)
    
    # Ph√°t hi·ªán ƒë∆∞·ªùng k·∫ª
    lines_result = detect_table_lines(binary, image)
    h_lines = lines_result["horizontal_lines"]
    v_lines = lines_result["vertical_lines"]
    
    # L∆∞u visualization ƒë∆∞·ªùng k·∫ª
    lines_path = os.path.join(output_dir, "table_lines.jpg")
    cv2.imwrite(lines_path, lines_result["visualization"])
    
    print(f"‚úÖ Ph√°t hi·ªán {len(h_lines)} ƒë∆∞·ªùng k·∫ª ngang")
    print(f"‚úÖ Ph√°t hi·ªán {len(v_lines)} ƒë∆∞·ªùng k·∫ª d·ªçc")
    
    # Ph√°t hi·ªán header v√† footer
    header_footer_result = detect_header_footer(image, h_lines, v_lines)
    
    # L∆∞u visualization header v√† footer
    header_footer_path = os.path.join(output_dir, "header_footer.jpg")
    cv2.imwrite(header_footer_path, header_footer_result["visualization"])
    
    # L∆∞u header v√† footer
    header_path = os.path.join(output_dir, "header.jpg")
    footer_path = os.path.join(output_dir, "footer.jpg")
    cv2.imwrite(header_path, header_footer_result["header"]["image"])
    cv2.imwrite(footer_path, header_footer_result["footer"]["image"])
    
    print(f"‚úÖ Ph√°t hi·ªán header: {header_footer_result['header']['y1']} - {header_footer_result['header']['y2']}")
    print(f"‚úÖ Ph√°t hi·ªán footer: {header_footer_result['footer']['y1']} - {header_footer_result['footer']['y2']}")
    
    # Ph√¢n t√≠ch c√°c √¥
    cells_result = analyze_table_cells(image, h_lines, v_lines)
    
    # L∆∞u visualization c√°c √¥
    cells_path = os.path.join(output_dir, "table_cells.jpg")
    cv2.imwrite(cells_path, cells_result["visualization"])
    
    print(f"‚úÖ Ph√¢n t√≠ch {cells_result['rows']} h√†ng x {cells_result['cols']} c·ªôt = {cells_result['rows'] * cells_result['cols']} √¥")
    
    # T·∫°o th∆∞ m·ª•c ƒë·ªÉ l∆∞u c√°c √¥
    cells_dir = os.path.join(output_dir, "cells")
    ensure_dir(cells_dir)
    
    # L∆∞u c√°c √¥
    for i, row in enumerate(cells_result["cells"]):
        for j, cell in enumerate(row):
            cell_path = os.path.join(cells_dir, f"cell_{i}_{j}.jpg")
            cv2.imwrite(cell_path, cell["image"])
    
    # T·∫°o k·∫øt qu·∫£
    result = {
        "image_path": image_path,
        "output_dir": output_dir,
        "horizontal_lines": h_lines,
        "vertical_lines": v_lines,
        "header": header_footer_result["header"],
        "footer": header_footer_result["footer"],
        "cells": cells_result["cells"],
        "rows": cells_result["rows"],
        "cols": cells_result["cols"]
    }
    
    # L∆∞u k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON
    result_path = os.path.join(output_dir, "structure_analysis.json")
    with open(result_path, "w", encoding="utf-8") as f:
        # Ch·ªâ l∆∞u th√¥ng tin c·∫ßn thi·∫øt, kh√¥ng l∆∞u ·∫£nh
        result_json = {
            "image_path": image_path,
            "output_dir": output_dir,
            "horizontal_lines": h_lines,
            "vertical_lines": v_lines,
            "header": {
                "y1": header_footer_result["header"]["y1"],
                "y2": header_footer_result["header"]["y2"]
            },
            "footer": {
                "y1": header_footer_result["footer"]["y1"],
                "y2": header_footer_result["footer"]["y2"]
            },
            "rows": cells_result["rows"],
            "cols": cells_result["cols"]
        }
        json.dump(result_json, f, indent=2)
    
    print(f"üíæ ƒê√£ l∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch: {result_path}")
    
    return result

def analyze_with_advanced_api(image_path, output_dir):
    """Ph√¢n t√≠ch b·∫£ng s·ª≠ d·ª•ng API n√¢ng cao"""
    print(f"\nüîç PH√ÇN T√çCH B·∫¢NG V·ªöI API N√ÇNG CAO")
    print("=" * 50)
    
    # T·∫°o th∆∞ m·ª•c output
    ensure_dir(output_dir)
    api_output_dir = os.path.join(output_dir, "api_results")
    ensure_dir(api_output_dir)
    
    # ƒê·ªçc ·∫£nh
    image = cv2.imread(image_path)
    if image is None:
        print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh: {image_path}")
        return None
    
    # S·ª≠ d·ª•ng AdvancedTableExtractor
    table_extractor = AdvancedTableExtractor(
        input_dir=os.path.dirname(image_path),
        output_dir=os.path.join(api_output_dir, "tables"),
        debug_dir=os.path.join(api_output_dir, "debug")
    )
    
    # Tr√≠ch xu·∫•t b·∫£ng
    print("\n1. Tr√≠ch xu·∫•t b·∫£ng")
    tables = table_extractor.process_image(os.path.basename(image_path), margin=5, check_text=True)
    
    # T√¨m c√°c b·∫£ng ƒë√£ tr√≠ch xu·∫•t
    tables_dir = os.path.join(api_output_dir, "tables")
    table_files = []
    
    if os.path.exists(tables_dir):
        table_files = [f for f in os.listdir(tables_dir) if f.endswith('.jpg')]
        table_files.sort()
    
    print(f"‚úÖ Tr√≠ch xu·∫•t ƒë∆∞·ª£c {len(table_files)} b·∫£ng")
    
    # S·ª≠ d·ª•ng AdvancedRowExtractorMain
    row_extractor = AdvancedRowExtractorMain(
        input_dir=tables_dir,
        output_dir=os.path.join(api_output_dir, "rows"),
        debug_dir=os.path.join(api_output_dir, "debug")
    )
    
    # Tr√≠ch xu·∫•t h√†ng
    print("\n2. Tr√≠ch xu·∫•t h√†ng")
    for table_file in table_files:
        print(f"  üîç X·ª≠ l√Ω b·∫£ng: {table_file}")
        rows = row_extractor.process_image(table_file)
        print(f"  ‚úÖ Tr√≠ch xu·∫•t ƒë∆∞·ª£c {len(rows) if rows else 0} h√†ng")
    
    # S·ª≠ d·ª•ng AdvancedColumnExtractor
    column_extractor = AdvancedColumnExtractor(
        input_dir=tables_dir,
        output_dir=os.path.join(api_output_dir, "columns"),
        debug_dir=os.path.join(api_output_dir, "debug")
    )
    
    # Tr√≠ch xu·∫•t c·ªôt
    print("\n3. Tr√≠ch xu·∫•t c·ªôt")
    for table_file in table_files:
        print(f"  üîç X·ª≠ l√Ω b·∫£ng: {table_file}")
        
        # ƒê·ªçc ·∫£nh b·∫£ng
        table_path = os.path.join(tables_dir, table_file)
        table_image = cv2.imread(table_path)
        
        if table_image is None:
            print(f"  ‚ùå Kh√¥ng th·ªÉ ƒë·ªçc {table_path}")
            continue
        
        # Ph√°t hi·ªán ƒë∆∞·ªùng k·∫ª d·ªçc
        gray = cv2.cvtColor(table_image, cv2.COLOR_BGR2GRAY)
        binary = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 
                                      cv2.THRESH_BINARY_INV, 15, 3)
        
        v_lines = column_extractor.detect_vertical_lines(binary, min_line_length_ratio=0.4)
        print(f"  ‚úÖ Ph√°t hi·ªán {len(v_lines)} ƒë∆∞·ªùng k·∫ª d·ªçc")
        
        # Tr√≠ch xu·∫•t c·ªôt
        columns = column_extractor.extract_columns(table_image, v_lines)
        print(f"  ‚úÖ Tr√≠ch xu·∫•t ƒë∆∞·ª£c {len(columns) if columns else 0} c·ªôt")
    
    return {
        "tables": table_files,
        "tables_dir": tables_dir,
        "rows_dir": os.path.join(api_output_dir, "rows"),
        "columns_dir": os.path.join(api_output_dir, "columns")
    }

def main():
    """H√†m ch√≠nh"""
    # Ki·ªÉm tra tham s·ªë d√≤ng l·ªánh
    if len(sys.argv) < 2:
        print("S·ª≠ d·ª•ng: python test_advanced_structure.py <ƒë∆∞·ªùng_d·∫´n_·∫£nh>")
        return
    
    # L·∫•y ƒë∆∞·ªùng d·∫´n ·∫£nh t·ª´ tham s·ªë d√≤ng l·ªánh
    image_path = sys.argv[1]
    output_dir = "advanced_structure_output"
    
    print(f"üöÄ PH√ÇN T√çCH C·∫§U TR√öC B·∫¢NG N√ÇNG CAO")
    print(f"üì∏ ·∫¢nh ƒë·∫ßu v√†o: {image_path}")
    print(f"üìÅ Th∆∞ m·ª•c ƒë·∫ßu ra: {output_dir}")
    print(f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Ki·ªÉm tra file
    if not os.path.exists(image_path):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {image_path}")
        return
    
    # T·∫°o th∆∞ m·ª•c output
    ensure_dir(output_dir)
    
    # Ph√¢n t√≠ch c·∫•u tr√∫c b·∫£ng
    structure_dir = os.path.join(output_dir, "structure")
    ensure_dir(structure_dir)
    
    structure_result = analyze_table_structure(image_path, structure_dir)
    
    # Ph√¢n t√≠ch b·∫£ng v·ªõi API n√¢ng cao
    api_dir = os.path.join(output_dir, "api")
    ensure_dir(api_dir)
    
    api_result = analyze_with_advanced_api(image_path, api_dir)
    
    # T·ªïng k·∫øt
    print(f"\n{'='*50}")
    print("T·ªîNG K·∫æT")
    print(f"{'='*50}")
    
    print(f"üéâ HO√ÄN TH√ÄNH PH√ÇN T√çCH C·∫§U TR√öC B·∫¢NG N√ÇNG CAO!")
    print(f"‚úÖ ƒê√£ ph√¢n t√≠ch c·∫•u tr√∫c b·∫£ng")
    print(f"‚úÖ ƒê√£ tr√≠ch xu·∫•t {len(api_result['tables'])} b·∫£ng")
    print(f"üìÅ K·∫øt qu·∫£ l∆∞u t·∫°i: {output_dir}/")

if __name__ == "__main__":
    main() 