"""
T√°ch ri√™ng t·ª´ng b·∫£ng v√† tr√≠ch xu·∫•t c·ªôt cho m·ªói b·∫£ng
=================================================

Script n√†y th·ª±c hi·ªán:
1. T√¨m v√† crop t·ª´ng b·∫£ng ri√™ng bi·ªát t·ª´ ·∫£nh g·ªëc
2. L∆∞u t·ª´ng b·∫£ng th√†nh file ri√™ng 
3. V·ªõi m·ªói b·∫£ng ƒë√£ crop, tr√≠ch xu·∫•t c√°c c·ªôt
4. L∆∞u k·∫øt qu·∫£ theo c·∫•u tr√∫c th∆∞ m·ª•c r√µ r√†ng
"""

import os
import sys
import cv2
import shutil
import numpy as np
from pathlib import Path

# Th√™m ƒë∆∞·ªùng d·∫´n ƒë·ªÉ import detect_row
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from detect_row import AdvancedTableExtractor, AdvancedColumnExtractor

class TableAndColumnExtractor:
    """Class ƒë·ªÉ t√°ch b·∫£ng v√† tr√≠ch xu·∫•t c·ªôt m·ªôt c√°ch c√≥ t·ªï ch·ª©c"""
    
    def __init__(self, 
                 input_dir: str = "input",
                 output_dir: str = "output/tables_and_columns",
                 debug_dir: str = "debug/tables_and_columns"):
        """Kh·ªüi t·∫°o extractor
        
        Args:
            input_dir: Th∆∞ m·ª•c ch·ª©a ·∫£nh ƒë·∫ßu v√†o
            output_dir: Th∆∞ m·ª•c l∆∞u k·∫øt qu·∫£
            debug_dir: Th∆∞ m·ª•c l∆∞u debug
        """
        self.input_dir = input_dir
        self.output_dir = output_dir
        self.debug_dir = debug_dir
        
        # T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c
        self.setup_directories()
        
        # Kh·ªüi t·∫°o c√°c extractor con
        self.table_extractor = AdvancedTableExtractor(
            input_dir=input_dir,
            output_dir=os.path.join(output_dir, "tables"),
            debug_dir=os.path.join(debug_dir, "tables")
        )
        
    def setup_directories(self):
        """T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c c·∫ßn thi·∫øt"""
        directories = [
            self.output_dir,
            os.path.join(self.output_dir, "tables"),           # B·∫£ng ƒë√£ crop
            os.path.join(self.output_dir, "columns"),          # C·ªôt t·ª´ t·∫•t c·∫£ b·∫£ng
            self.debug_dir,
            os.path.join(self.debug_dir, "tables"),
            os.path.join(self.debug_dir, "columns")
        ]
        
        for directory in directories:
            os.makedirs(directory, exist_ok=True)
    
    def detect_and_filter_tables(self, image: np.ndarray) -> list:
        """Ph√°t hi·ªán b·∫£ng s·ª≠ d·ª•ng thu·∫≠t to√°n t·ª´ extract_tables_final.py (ch√≠nh x√°c h∆°n)
        
        Args:
            image: ·∫¢nh ƒë·∫ßu v√†o
            
        Returns:
            list: Danh s√°ch c√°c b·∫£ng ƒë√£ l·ªçc (x, y, w, h)
        """
        print(f"üîç S·ª≠ d·ª•ng thu·∫≠t to√°n t·ªëi ∆∞u t·ª´ extract_tables_final.py...")
        
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        h, w = gray.shape
        
        print("üöÄ THU·∫¨T TO√ÅN T·ªêI ∆ØU - B·∫Øt c·∫£ 3 b·∫£ng ri√™ng bi·ªát...")
        
        # S·ª≠ d·ª•ng adaptive threshold t·ªët nh·∫•t t·ª´ extract_tables_final.py
        binary_adaptive = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 
                                               cv2.THRESH_BINARY_INV, 15, 3)
        
        # L∆∞u debug
        debug_binary_path = os.path.join(self.debug_dir, "tables", "final_binary.jpg")
        cv2.imwrite(debug_binary_path, binary_adaptive)
        
        # Ph√°t hi·ªán ƒë∆∞·ªùng k·∫ª v·ªõi kernel nh·ªè (t·ª´ extract_tables_final.py)
        h_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (w//45, 1))  # Nh·ªè h∆°n
        h_lines = cv2.morphologyEx(binary_adaptive, cv2.MORPH_OPEN, h_kernel, iterations=1)
        
        v_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (1, h//45))  # Nh·ªè h∆°n
        v_lines = cv2.morphologyEx(binary_adaptive, cv2.MORPH_OPEN, v_kernel, iterations=1)
        
        # K·∫øt h·ª£p
        table_structure = cv2.addWeighted(h_lines, 0.3, v_lines, 0.3, 0.0)
        
        # L∆∞u debug
        debug_structure_path = os.path.join(self.debug_dir, "tables", "final_structure.jpg")
        cv2.imwrite(debug_structure_path, table_structure)
        
        # T√¨m contours
        contours, _ = cv2.findContours(table_structure, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        # L·ªçc contours v·ªõi ti√™u ch√≠ t·ªëi ∆∞u t·ª´ extract_tables_final.py
        table_boxes = []
        
        for cnt in contours:
            area = cv2.contourArea(cnt)
            
            # Ng∆∞·ª°ng di·ªán t√≠ch r·∫•t linh ho·∫°t t·ª´ extract_tables_final.py
            min_area = 0.003 * h * w  # 0.3% - th·∫•p h∆°n
            max_area = 0.25 * h * w   # 25% - cho ph√©p l·ªõn h∆°n ch√∫t
            
            if min_area <= area <= max_area:
                x, y, width, height = cv2.boundingRect(cnt)
                
                # Ti√™u ch√≠ k√≠ch th∆∞·ªõc linh ho·∫°t h∆°n t·ª´ extract_tables_final.py
                min_width = w * 0.12   # 12% - th·∫•p h∆°n
                max_width = w * 0.90   # 90% - cao h∆°n
                min_height = h * 0.015 # 1.5% - th·∫•p h∆°n
                max_height = h * 0.45  # 45% - cao h∆°n
                
                if (min_width <= width <= max_width and 
                    min_height <= height <= max_height):
                    
                    aspect_ratio = width / height
                    # Aspect ratio r·ªông h∆°n t·ª´ extract_tables_final.py
                    if 1.0 <= aspect_ratio <= 15.0:  # R·ªông h∆°n
                        table_boxes.append((x, y, x + width, y + height))
        
        print(f"üìä Ph√°t hi·ªán {len(table_boxes)} b·∫£ng ·ª©ng vi√™n")
        
        # Lo·∫°i b·ªè overlap v√† gi·ªØ ƒë·ªôc l·∫≠p (t·ª´ extract_tables_final.py)
        unique_boxes = self._remove_overlaps_final(table_boxes)
        
        # S·∫Øp x·∫øp t·ª´ tr√™n xu·ªëng
        unique_boxes.sort(key=lambda x: x[1])
        
        # Chuy·ªÉn ƒë·ªïi format t·ª´ (x1,y1,x2,y2) v·ªÅ (x,y,w,h)
        valid_tables = []
        for x1, y1, x2, y2 in unique_boxes:
            valid_tables.append((x1, y1, x2-x1, y2-y1))
        
        # V·∫Ω debug
        debug_img = image.copy()
        for i, (x, y, w, h) in enumerate(valid_tables):
            cv2.rectangle(debug_img, (x, y), (x+w, y+h), (0, 255, 0), 3)
            cv2.putText(debug_img, f"Final Table {i+1}", (x+5, y+25), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 0, 0), 2)
            print(f"‚úÖ B·∫£ng {i+1}: x={x}, y={y}, w={w}, h={h}, ratio={w/h:.2f}")
        
        debug_result_path = os.path.join(self.debug_dir, "tables", "final_result.jpg")
        cv2.imwrite(debug_result_path, debug_img)
        
        print(f"üéØ ƒê√£ ph√°t hi·ªán {len(valid_tables)} b·∫£ng cu·ªëi c√πng")
        return valid_tables
    

    def _clean_table_borders(self, table_image: np.ndarray) -> np.ndarray:
        """L√†m s·∫°ch vi·ªÅn b·∫£ng v√† lo·∫°i b·ªè text xung quanh b·∫±ng projection analysis
        
        Args:
            table_image: ·∫¢nh b·∫£ng g·ªëc
            
        Returns:
            np.ndarray: ·∫¢nh b·∫£ng ƒë√£ l√†m s·∫°ch
        """
        h, w = table_image.shape[:2]
        gray = cv2.cvtColor(table_image, cv2.COLOR_BGR2GRAY)
        
        # Binary threshold
        _, binary = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
        
        # Horizontal projection ƒë·ªÉ t√¨m v√πng c√≥ n·ªôi dung
        h_projection = np.sum(binary, axis=1)
        v_projection = np.sum(binary, axis=0)
        
        # T√¨m ng∆∞·ª°ng ƒë·ªÉ lo·∫°i b·ªè v√πng sparse (√≠t n·ªôi dung)
        h_threshold = np.mean(h_projection) * 0.3  # 30% trung b√¨nh
        v_threshold = np.mean(v_projection) * 0.3
        
        # T√¨m v√πng content ch√≠nh (li√™n t·ª•c)
        h_content_rows = np.where(h_projection > h_threshold)[0]
        v_content_cols = np.where(v_projection > v_threshold)[0]
        
        if len(h_content_rows) == 0 or len(v_content_cols) == 0:
            return table_image
        
        # T√¨m v√πng li√™n t·ª•c l·ªõn nh·∫•t
        h_start, h_end = h_content_rows[0], h_content_rows[-1]
        v_start, v_end = v_content_cols[0], v_content_cols[-1]
        
        # M·ªü r·ªông m·ªôt ch√∫t ƒë·ªÉ kh√¥ng c·∫Øt m·∫•t vi·ªÅn
        margin = 5
        h_start = max(0, h_start - margin)
        h_end = min(h, h_end + margin)
        v_start = max(0, v_start - margin)
        v_end = min(w, v_end + margin)
        
        # Crop v√πng content ch√≠nh
        cleaned_table = table_image[h_start:h_end, v_start:v_end]
        
        print(f"   üßπ L√†m s·∫°ch b·∫£ng: {w}x{h} -> {v_end-v_start}x{h_end-h_start}")
        
        return cleaned_table
    
    def _remove_overlaps_final(self, boxes: list) -> list:
        """Lo·∫°i b·ªè overlap th√¥ng minh t·ª´ extract_tables_final.py"""
        if not boxes:
            return []
        
        unique_boxes = []
        for box in boxes:
            x1, y1, x2, y2 = box
            
            # Ki·ªÉm tra overlap v·ªõi boxes ƒë√£ c√≥
            is_overlap = False
            for i, existing in enumerate(unique_boxes):
                ex1, ey1, ex2, ey2 = existing
                
                # T√≠nh overlap
                overlap_area = max(0, min(x2, ex2) - max(x1, ex1)) * max(0, min(y2, ey2) - max(y1, ey1))
                box_area = (x2 - x1) * (y2 - y1)
                existing_area = (ex2 - ex1) * (ey2 - ey1)
                
                # N·∫øu overlap > 30%
                if overlap_area > 0.3 * min(box_area, existing_area):
                    # Gi·ªØ box c√≥ aspect ratio t·ªët h∆°n (g·∫ßn v·ªõi b·∫£ng th·∫≠t)
                    box_aspect = (x2 - x1) / (y2 - y1)
                    existing_aspect = (ex2 - ex1) / (ey2 - ey1)
                    
                    # Aspect ratio l√Ω t∆∞·ªüng cho b·∫£ng: 2.0 - 6.0
                    box_score = min(abs(box_aspect - 3.0), 3.0)
                    existing_score = min(abs(existing_aspect - 3.0), 3.0)
                    
                    if box_score < existing_score:  # Box m·ªõi t·ªët h∆°n
                        unique_boxes[i] = box
                    is_overlap = True
                    break
            
            if not is_overlap:
                unique_boxes.append(box)
        
        return unique_boxes
    
    def extract_tables_from_image(self, image_path: str) -> list:
        """Tr√≠ch xu·∫•t v√† l∆∞u t·ª´ng b·∫£ng ri√™ng bi·ªát v·ªõi filtered_tables
        
        Args:
            image_path: ƒê∆∞·ªùng d·∫´n ·∫£nh
            
        Returns:
            list: Danh s√°ch th√¥ng tin c√°c b·∫£ng ƒë√£ tr√≠ch xu·∫•t
        """
        print(f"üîç T√¨m v√† t√°ch c√°c b·∫£ng t·ª´: {image_path}")
        
        # ƒê·ªçc ·∫£nh g·ªëc
        full_image_path = os.path.join(self.input_dir, image_path)
        image = cv2.imread(full_image_path)
        
        if image is None:
            print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh: {full_image_path}")
            return []
        
        print(f"üìè K√≠ch th∆∞·ªõc ·∫£nh g·ªëc: {image.shape[1]}x{image.shape[0]} pixels")
        
        # S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c filtered tables m·ªõi
        tables = self.detect_and_filter_tables(image)
        
        if not tables:
            print("‚ùå Kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c b·∫£ng n√†o")
            return []
        
        print(f"üìä ƒê√£ ph√°t hi·ªán {len(tables)} b·∫£ng sau khi l·ªçc")
        
        # Tr√≠ch xu·∫•t v√† l∆∞u t·ª´ng b·∫£ng
        extracted_tables = []
        image_name = Path(image_path).stem
        
        for i, (x, y, w, h) in enumerate(tables):
            table_info = {
                'table_index': i,
                'table_name': f"{image_name}_table_{i}",
                'bbox': (x, y, w, h),
                'original_image': image_path
            }
            
            print(f"\nüìã X·ª≠ l√Ω b·∫£ng {i+1}:")
            print(f"   üìç V·ªã tr√≠: x={x}, y={y}")
            print(f"   üìè K√≠ch th∆∞·ªõc: {w}x{h} pixels")
            print(f"   üìê Di·ªán t√≠ch: {w*h:,} pixels")
            
            # Crop b·∫£ng t·ª´ ·∫£nh g·ªëc
            table_image = image[y:y+h, x:x+w]
            
            # L√†m s·∫°ch b·∫£ng - lo·∫°i b·ªè text xung quanh
            cleaned_table = self._clean_table_borders(table_image)
            
            # L∆∞u b·∫£ng ƒë√£ crop v√† l√†m s·∫°ch
            table_filename = f"{table_info['table_name']}.jpg"
            table_path = os.path.join(self.output_dir, "tables", table_filename)
            cv2.imwrite(table_path, cleaned_table)
            
            table_info['table_file'] = table_path
            table_info['table_image'] = cleaned_table
            
            print(f"   üíæ ƒê√£ l∆∞u b·∫£ng: {table_filename}")
            
            extracted_tables.append(table_info)
        
        return extracted_tables
    
    def extract_columns_from_table(self, table_info: dict, column_groups: dict = None) -> dict:
        """Tr√≠ch xu·∫•t c·ªôt t·ª´ m·ªôt b·∫£ng c·ª• th·ªÉ
        
        Args:
            table_info: Th√¥ng tin b·∫£ng
            column_groups: ƒê·ªãnh nghƒ©a nh√≥m c·ªôt
            
        Returns:
            dict: K·∫øt qu·∫£ tr√≠ch xu·∫•t c·ªôt
        """
        table_name = table_info['table_name']
        table_image = table_info['table_image']
        
        print(f"\nüîß Tr√≠ch xu·∫•t c·ªôt t·ª´ {table_name}...")
        
        # T·∫°o th∆∞ m·ª•c ri√™ng cho b·∫£ng n√†y
        table_columns_dir = os.path.join(self.output_dir, "columns", table_name)
        table_debug_dir = os.path.join(self.debug_dir, "columns", table_name)
        
        os.makedirs(table_columns_dir, exist_ok=True)
        os.makedirs(table_debug_dir, exist_ok=True)
        
        # Kh·ªüi t·∫°o column extractor cho b·∫£ng n√†y
        column_extractor = AdvancedColumnExtractor(
            input_dir="temp",  # Kh√¥ng d√πng
            output_dir=table_columns_dir,
            debug_dir=table_debug_dir,
            min_column_width=20
        )
        
        # Tr√≠ch xu·∫•t th√¥ng tin c·ªôt
        columns_info = column_extractor.extract_columns_from_table(table_image, table_name)
        
        if not columns_info:
            print(f"   ‚ùå Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c c·ªôt n√†o t·ª´ {table_name}")
            return {"success": False, "columns_count": 0}
        
        print(f"   üìä ƒê√£ ph√°t hi·ªán {len(columns_info)} c·ªôt")
        
        # T·∫°o th∆∞ m·ª•c con
        individual_dir = os.path.join(table_columns_dir, "individual_columns")
        merged_dir = os.path.join(table_columns_dir, "merged_columns")
        os.makedirs(individual_dir, exist_ok=True)
        os.makedirs(merged_dir, exist_ok=True)
        
        # L∆∞u t·ª´ng c·ªôt ri√™ng bi·ªát
        individual_files = []
        for column_info in columns_info:
            filepath = os.path.join(individual_dir, column_info['filename'])
            cv2.imwrite(filepath, column_info['image'])
            individual_files.append(filepath)
            print(f"   üíæ ƒê√£ l∆∞u c·ªôt {column_info['column_index']}: {column_info['filename']}")
        
        # L∆∞u c·ªôt ƒë√£ g·ªôp n·∫øu c√≥ c·∫•u h√¨nh
        merged_files = []
        if column_groups:
            # C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n cho merged files
            temp_extractor = AdvancedColumnExtractor(
                input_dir="temp",
                output_dir=table_columns_dir,
                debug_dir=table_debug_dir
            )
            temp_extractor.merged_columns_dir = merged_dir
            
            merged_files = temp_extractor.save_merged_columns(columns_info, table_name, column_groups)
            
            for file_path in merged_files:
                filename = os.path.basename(file_path)
                print(f"   üîó ƒê√£ g·ªôp: {filename}")
        
        return {
            "success": True,
            "table_name": table_name,
            "columns_count": len(columns_info),
            "individual_files": individual_files,
            "merged_files": merged_files,
            "columns_info": columns_info
        }
    
    def process_image_full_workflow(self, image_path: str, column_groups: dict = None) -> dict:
        """Workflow ho√†n ch·ªânh: t√°ch b·∫£ng v√† tr√≠ch xu·∫•t c·ªôt
        
        Args:
            image_path: ƒê∆∞·ªùng d·∫´n ·∫£nh
            column_groups: ƒê·ªãnh nghƒ©a nh√≥m c·ªôt
            
        Returns:
            dict: K·∫øt qu·∫£ to√†n b·ªô qu√° tr√¨nh
        """
        print(f"üöÄ B·∫Øt ƒë·∫ßu workflow ho√†n ch·ªânh cho: {image_path}")
        print("=" * 70)
        
        # B∆∞·ªõc 1: T√°ch c√°c b·∫£ng
        extracted_tables = self.extract_tables_from_image(image_path)
        
        if not extracted_tables:
            return {
                "success": False,
                "error": "Kh√¥ng t√¨m th·∫•y b·∫£ng n√†o",
                "tables_count": 0
            }
        
        print(f"\n‚úÖ ƒê√£ t√°ch th√†nh c√¥ng {len(extracted_tables)} b·∫£ng")
        
        # B∆∞·ªõc 2: Tr√≠ch xu·∫•t c·ªôt t·ª´ t·ª´ng b·∫£ng
        tables_results = []
        total_columns = 0
        total_individual_files = 0
        total_merged_files = 0
        
        for table_info in extracted_tables:
            print(f"\n{'='*50}")
            column_result = self.extract_columns_from_table(table_info, column_groups)
            
            if column_result["success"]:
                total_columns += column_result["columns_count"]
                total_individual_files += len(column_result["individual_files"])
                total_merged_files += len(column_result["merged_files"])
            
            tables_results.append(column_result)
        
        # T·ªïng k·∫øt
        result = {
            "success": True,
            "image_path": image_path,
            "tables_count": len(extracted_tables),
            "total_columns": total_columns,
            "total_individual_files": total_individual_files,
            "total_merged_files": total_merged_files,
            "tables_results": tables_results,
            "extracted_tables": extracted_tables
        }
        
        print(f"\nüéâ HO√ÄN TH√ÄNH WORKFLOW!")
        print(f"üìä T·ªïng s·ªë b·∫£ng: {result['tables_count']}")
        print(f"üìä T·ªïng s·ªë c·ªôt: {result['total_columns']}")
        print(f"üìÅ File c·ªôt ri√™ng: {result['total_individual_files']}")
        print(f"üìÅ File c·ªôt g·ªôp: {result['total_merged_files']}")
        
        return result
    
    def show_results_summary(self, result: dict):
        """Hi·ªÉn th·ªã t√≥m t·∫Øt k·∫øt qu·∫£"""
        if not result["success"]:
            print(f"‚ùå L·ªói: {result.get('error')}")
            return
        
        print(f"\nüìã T√ìM T·∫ÆT K·∫æT QU·∫¢:")
        print(f"   üñºÔ∏è  ·∫¢nh g·ªëc: {result['image_path']}")
        print(f"   üìä S·ªë b·∫£ng: {result['tables_count']}")
        print(f"   üìä T·ªïng c·ªôt: {result['total_columns']}")
        print(f"   üìÅ File c·ªôt ri√™ng: {result['total_individual_files']}")
        print(f"   üìÅ File c·ªôt g·ªôp: {result['total_merged_files']}")
        
        print(f"\nüìÇ C·∫§U TR√öC K·∫æT QU·∫¢:")
        print(f"   {self.output_dir}/")
        print(f"   ‚îú‚îÄ‚îÄ tables/                    # C√°c b·∫£ng ƒë√£ t√°ch")
        print(f"   ‚îî‚îÄ‚îÄ columns/                   # C·ªôt t·ª´ t·ª´ng b·∫£ng")
        
        for table_result in result["tables_results"]:
            if table_result["success"]:
                table_name = table_result["table_name"]
                print(f"       ‚îú‚îÄ‚îÄ {table_name}/")
                print(f"       ‚îÇ   ‚îú‚îÄ‚îÄ individual_columns/  # {len(table_result['individual_files'])} file")
                print(f"       ‚îÇ   ‚îî‚îÄ‚îÄ merged_columns/      # {len(table_result['merged_files'])} file")
        
        # Hi·ªÉn th·ªã danh s√°ch file b·∫£ng
        print(f"\nüìã C√ÅC B·∫¢NG ƒê√É T√ÅCH:")
        for table_info in result["extracted_tables"]:
            table_file = os.path.basename(table_info["table_file"])
            bbox = table_info["bbox"]
            print(f"   üìÑ {table_file} (v·ªã tr√≠: {bbox[0]},{bbox[1]} - k√≠ch th∆∞·ªõc: {bbox[2]}x{bbox[3]})")

def parse_column_groups(groups_str: str) -> dict:
    """Parse chu·ªói ƒë·ªãnh nghƒ©a nh√≥m c·ªôt t·ª´ command line
    
    Format: group_name:col1,col2,col3;another_group:col1,col4
    V√≠ d·ª•: "cols_1_2:1,2;col_3:3;cols_1_2_3:1,2,3"
    
    Args:
        groups_str: Chu·ªói ƒë·ªãnh nghƒ©a nh√≥m c·ªôt
        
    Returns:
        dict: Dictionary c√°c nh√≥m c·ªôt
    """
    if not groups_str:
        return {}
    
    column_groups = {}
    try:
        groups = groups_str.split(';')
        for group in groups:
            if ':' not in group:
                continue
            name, cols = group.split(':', 1)
            name = name.strip()
            col_indices = [int(c.strip()) for c in cols.split(',') if c.strip().isdigit()]
            if name and col_indices:
                column_groups[name] = col_indices
                print(f"üìã Nh√≥m '{name}': c·ªôt {col_indices}")
    except Exception as e:
        print(f"‚ùå L·ªói parse nh√≥m c·ªôt: {e}")
        return {}
    
    return column_groups

def get_default_column_groups() -> dict:
    """Tr·∫£ v·ªÅ nh√≥m c·ªôt m·∫∑c ƒë·ªãnh"""
    return {
        "cols_1_2": [1, 2],        # C·ªôt 1 v√† 2 g·ªôp th√†nh 1 file
        "col_3": [3],              # C·ªôt 3 th√†nh file ri√™ng
        "col_4": [4],              # C·ªôt 4 th√†nh file ri√™ng
        "cols_1_2_3": [1, 2, 3],  # Merge c·ªôt 1+2 v·ªõi c·ªôt 3
        "cols_1_2_4": [1, 2, 4],  # Merge c·ªôt 1+2 v·ªõi c·ªôt 4
        "col_5": [5],              # C·ªôt 5 n·∫øu c√≥
        "col_6": [6]               # C·ªôt 6 n·∫øu c√≥
    }

def show_column_groups_help():
    """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng nh√≥m c·ªôt"""
    print("üîß H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG NH√ìM C·ªòT:")
    print("=" * 60)
    print("üìù Format: --column-groups 'group_name:col1,col2;another_group:col3'")
    print()
    print("üìã V√≠ d·ª•:")
    print("   --column-groups 'cols_1_2:1,2;col_3:3;cols_all:1,2,3,4'")
    print("   --column-groups 'header:1;content:2,3;footer:4'")
    print("   --column-groups 'left_side:1,2;right_side:3,4;full:1,2,3,4'")
    print()
    print("üìã Nh√≥m m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng ch·ªâ ƒë·ªãnh:")
    default_groups = get_default_column_groups()
    for name, cols in default_groups.items():
        print(f"   - {name}: c·ªôt {cols}")
    print()
    print("üí° M·∫πo:")
    print("   - T√™n nh√≥m ch·ªâ d√πng ch·ªØ, s·ªë v√† d·∫•u g·∫°ch d∆∞·ªõi")
    print("   - S·ªë c·ªôt b·∫Øt ƒë·∫ßu t·ª´ 1")
    print("   - D√πng d·∫•u ; ƒë·ªÉ ph√¢n t√°ch c√°c nh√≥m")
    print("   - D√πng d·∫•u , ƒë·ªÉ ph√¢n t√°ch c√°c c·ªôt trong nh√≥m")

def interactive_column_groups_setup() -> dict:
    """Thi·∫øt l·∫≠p nh√≥m c·ªôt t∆∞∆°ng t√°c"""
    print("üéØ THI·∫æT L·∫¨P NH√ìM C·ªòT T∆Ø∆†NG T√ÅC")
    print("=" * 50)
    print("Nh·∫≠p c√°c nh√≥m c·ªôt b·∫°n mu·ªën t·∫°o (Enter ƒë·ªÉ k·∫øt th√∫c):")
    print("Format: <t√™n_nh√≥m>:<c·ªôt1,c·ªôt2,...>")
    print("V√≠ d·ª•: cols_1_2:1,2")
    print()
    
    column_groups = {}
    while True:
        try:
            user_input = input("üëâ Nh·∫≠p nh√≥m c·ªôt (ho·∫∑c Enter ƒë·ªÉ k·∫øt th√∫c): ").strip()
            if not user_input:
                break
            
            if ':' not in user_input:
                print("‚ùå Format sai! C·∫ßn c√≥ d·∫•u : ƒë·ªÉ ph√¢n t√°ch t√™n v√† c·ªôt")
                continue
            
            name, cols = user_input.split(':', 1)
            name = name.strip()
            
            try:
                col_indices = [int(c.strip()) for c in cols.split(',') if c.strip().isdigit()]
                if not col_indices:
                    print("‚ùå Kh√¥ng c√≥ c·ªôt h·ª£p l·ªá!")
                    continue
                
                column_groups[name] = col_indices
                print(f"‚úÖ ƒê√£ th√™m nh√≥m '{name}': c·ªôt {col_indices}")
                
            except ValueError:
                print("‚ùå S·ªë c·ªôt kh√¥ng h·ª£p l·ªá!")
                
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è H·ªßy thi·∫øt l·∫≠p")
            return {}
    
    if column_groups:
        print(f"\nüìã ƒê√£ thi·∫øt l·∫≠p {len(column_groups)} nh√≥m c·ªôt:")
        for name, cols in column_groups.items():
            print(f"   - {name}: c·ªôt {cols}")
    else:
        print("üìã S·ª≠ d·ª•ng nh√≥m c·ªôt m·∫∑c ƒë·ªãnh")
        column_groups = get_default_column_groups()
    
    return column_groups

def main():
    """H√†m ch√≠nh v·ªõi t√πy ch·ªçn linh ho·∫°t cho nh√≥m c·ªôt"""
    import argparse
    
    parser = argparse.ArgumentParser(
        description='T√°ch b·∫£ng v√† tr√≠ch xu·∫•t c·ªôt v·ªõi t√πy ch·ªçn merge linh ho·∫°t',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
V√≠ d·ª• s·ª≠ d·ª•ng:
  %(prog)s image.png                                    # S·ª≠ d·ª•ng nh√≥m c·ªôt m·∫∑c ƒë·ªãnh
  %(prog)s image.png --column-groups "cols_1_2:1,2;col_3:3"  # T·ª± ƒë·ªãnh nghƒ©a nh√≥m c·ªôt
  %(prog)s --interactive                                # Thi·∫øt l·∫≠p nh√≥m c·ªôt t∆∞∆°ng t√°c
  %(prog)s --help-columns                              # Xem h∆∞·ªõng d·∫´n nh√≥m c·ªôt
        """)
    
    parser.add_argument('image_path', nargs='?', help='ƒê∆∞·ªùng d·∫´n ·∫£nh')
    parser.add_argument('--input-dir', default='input', help='Th∆∞ m·ª•c ch·ª©a ·∫£nh')
    parser.add_argument('--output-dir', default='output/tables_and_columns', help='Th∆∞ m·ª•c l∆∞u k·∫øt qu·∫£')
    parser.add_argument('--debug-dir', default='debug/tables_and_columns', help='Th∆∞ m·ª•c debug')
    
    parser.add_argument('--column-groups', type=str, 
                       help='ƒê·ªãnh nghƒ©a nh√≥m c·ªôt (format: group_name:col1,col2;another_group:col3)')
    parser.add_argument('--interactive', action='store_true', 
                       help='Thi·∫øt l·∫≠p nh√≥m c·ªôt t∆∞∆°ng t√°c')
    parser.add_argument('--help-columns', action='store_true', 
                       help='Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng nh√≥m c·ªôt')
    parser.add_argument('--no-merge', action='store_true', 
                       help='Ch·ªâ t√°ch c·ªôt ri√™ng bi·ªát, kh√¥ng merge')
    
    args = parser.parse_args()
    
    # Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n nh√≥m c·ªôt
    if args.help_columns:
        show_column_groups_help()
        return
    
    # Kh·ªüi t·∫°o extractor
    extractor = TableAndColumnExtractor(
        input_dir=args.input_dir,
        output_dir=args.output_dir,
        debug_dir=args.debug_dir
    )
    
    # X√°c ƒë·ªãnh nh√≥m c·ªôt
    column_groups = None
    if args.no_merge:
        print("üö´ Ch·∫ø ƒë·ªô kh√¥ng merge - ch·ªâ t√°ch c·ªôt ri√™ng bi·ªát")
        column_groups = {}
    elif args.interactive:
        column_groups = interactive_column_groups_setup()
    elif args.column_groups:
        print("üîß S·ª≠ d·ª•ng nh√≥m c·ªôt t·ª± ƒë·ªãnh nghƒ©a:")
        column_groups = parse_column_groups(args.column_groups)
        if not column_groups:
            print("‚ùå Nh√≥m c·ªôt kh√¥ng h·ª£p l·ªá, s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh")
            column_groups = get_default_column_groups()
    else:
        print("üîß S·ª≠ d·ª•ng nh√≥m c·ªôt m·∫∑c ƒë·ªãnh:")
        column_groups = get_default_column_groups()
        for name, cols in column_groups.items():
            print(f"   üìã {name}: c·ªôt {cols}")
    
    print()  # D√≤ng tr·ªëng
    
    if args.image_path:
        # X·ª≠ l√Ω ·∫£nh c·ª• th·ªÉ
        result = extractor.process_image_full_workflow(args.image_path, column_groups)
        extractor.show_results_summary(result)
    else:
        # X·ª≠ l√Ω t·∫•t c·∫£ ·∫£nh trong th∆∞ m·ª•c input
        image_files = []
        if os.path.exists(args.input_dir):
            for ext in ['*.jpg', '*.jpeg', '*.png', '*.bmp']:
                image_files.extend(Path(args.input_dir).glob(ext))
        
        if not image_files:
            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ·∫£nh n√†o trong {args.input_dir}")
            return
        
        for image_file in image_files:
            print(f"\n{'='*80}")
            result = extractor.process_image_full_workflow(image_file.name, column_groups)
            extractor.show_results_summary(result)

if __name__ == "__main__":
    main()