#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Th·ª≠ nghi·ªám t√≠nh nƒÉng n√¢ng cao c·ªßa DetectRow 2.0
===============================================

Script n√†y th·ª≠ nghi·ªám c√°c t√≠nh nƒÉng n√¢ng cao c·ªßa DetectRow 2.0:
1. Ph√°t hi·ªán b·∫£ng v√† ph√¢n t√≠ch c·∫•u tr√∫c chi ti·∫øt
2. Tr√≠ch xu·∫•t c·ªôt v·ªõi c√°c t√πy ch·ªçn n√¢ng cao
3. G·ªôp c·ªôt theo nh√≥m t√πy ch·ªânh
4. Ph√°t hi·ªán header/footer th√¥ng minh
5. T·ªëi ∆∞u h√≥a hi·ªáu su·∫•t v·ªõi GPU (n·∫øu c√≥)
"""

import os
import sys
import cv2
import numpy as np
import json
import time
from pathlib import Path
from datetime import datetime

# Import c√°c module t·ª´ detect_row
try:
    from detect_row import (
        AdvancedTableExtractor, 
        AdvancedColumnExtractor,
        AdvancedRowExtractor
    )
    print("‚úÖ ƒê√£ import th√†nh c√¥ng c√°c module t·ª´ detect_row")
except ImportError as e:
    print(f"‚ùå L·ªói import: {e}")
    sys.exit(1)

# Import GPU support n·∫øu c√≥
try:
    from detect_row.gpu_support import GPUManager
    has_gpu = True
    print("‚úÖ ƒê√£ import th√†nh c√¥ng GPU support")
except ImportError:
    has_gpu = False
    print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y GPU support")

def ensure_dir(path):
    """T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i"""
    os.makedirs(path, exist_ok=True)
    print(f"üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c: {path}")

def check_gpu_support():
    """Ki·ªÉm tra h·ªó tr·ª£ GPU"""
    if has_gpu:
        gpu_manager = GPUManager()
        if gpu_manager.is_gpu_available():
            gpu_info = gpu_manager.get_gpu_info()
            print(f"üéÆ GPU kh·∫£ d·ª•ng: {gpu_info}")
            return True
        else:
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y GPU h·ªó tr·ª£ CUDA")
    return False

def analyze_image_structure(image_path, output_dir):
    """Ph√¢n t√≠ch c·∫•u tr√∫c ·∫£nh v√† tr√≠ch xu·∫•t b·∫£ng"""
    print(f"\nüîç PH√ÇN T√çCH C·∫§U TR√öC ·∫¢NH: {image_path}")
    print("=" * 60)
    
    # ƒê·ªçc ·∫£nh
    image = cv2.imread(image_path)
    if image is None:
        print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh: {image_path}")
        return None
    
    # T·∫°o th∆∞ m·ª•c output
    image_name = Path(image_path).stem
    image_output_dir = os.path.join(output_dir, image_name)
    ensure_dir(image_output_dir)
    
    # L∆∞u ·∫£nh g·ªëc
    original_path = os.path.join(image_output_dir, "original.jpg")
    cv2.imwrite(original_path, image)
    
    # Kh·ªüi t·∫°o table extractor
    table_extractor = AdvancedTableExtractor(
        input_dir="",
        output_dir=os.path.join(image_output_dir, "tables"),
        debug_dir=os.path.join(image_output_dir, "debug")
    )
    
    # ƒêo th·ªùi gian x·ª≠ l√Ω
    start_time = time.time()
    
    # Tr√≠ch xu·∫•t b·∫£ng
    print(f"üîÑ ƒêang tr√≠ch xu·∫•t b·∫£ng t·ª´ {image_path}...")
    tables = table_extractor.process_image(image_path)
    
    if not tables:
        print(f"‚ö†Ô∏è Kh√¥ng ph√°t hi·ªán b·∫£ng n√†o trong {image_path}")
        return None
    
    print(f"‚úÖ ƒê√£ ph√°t hi·ªán {len(tables)} b·∫£ng trong {time.time() - start_time:.2f} gi√¢y")
    
    # Ph√¢n t√≠ch c·∫•u tr√∫c t·ª´ng b·∫£ng
    table_results = []
    
    for i, table_img in enumerate(tables):
        table_name = f"{image_name}_table_{i}"
        print(f"\nüìä Ph√¢n t√≠ch b·∫£ng {i+1}/{len(tables)}: {table_name}")
        
        # L∆∞u ·∫£nh b·∫£ng
        table_path = os.path.join(image_output_dir, "tables", f"{table_name}.jpg")
        cv2.imwrite(table_path, table_img)
        
        # Ph√¢n t√≠ch c·∫•u tr√∫c b·∫£ng
        try:
            structure = table_extractor.detect_table_structure(table_img)
            
            # T·∫°o visualization
            viz_img = table_img.copy()
            
            # V·∫Ω ƒë∆∞·ªùng k·∫ª ngang
            for y in structure.horizontal_lines:
                cv2.line(viz_img, (0, y), (table_img.shape[1], y), (0, 255, 0), 2)
            
            # V·∫Ω ƒë∆∞·ªùng k·∫ª d·ªçc
            for x in structure.vertical_lines:
                cv2.line(viz_img, (x, 0), (x, table_img.shape[0]), (0, 0, 255), 2)
            
            # ƒê√°nh d·∫•u header rows
            for row_idx in structure.header_rows:
                if row_idx < len(structure.horizontal_lines) - 1:
                    y1 = structure.horizontal_lines[row_idx]
                    y2 = structure.horizontal_lines[row_idx + 1]
                    cv2.rectangle(viz_img, (0, y1), (table_img.shape[1], y2), (255, 0, 0), 3)
            
            # L∆∞u visualization
            viz_path = os.path.join(image_output_dir, "debug", f"{table_name}_structure.jpg")
            cv2.imwrite(viz_path, viz_img)
            
            print(f"‚úÖ C·∫•u tr√∫c b·∫£ng: {len(structure.horizontal_lines)-1} h√†ng x {len(structure.vertical_lines)-1} c·ªôt")
            print(f"‚úÖ Header rows: {structure.header_rows}")
            print(f"‚úÖ Merged cells: {len(structure.merged_cells)}")
            
            table_results.append({
                "table_name": table_name,
                "path": table_path,
                "structure": structure,
                "visualization": viz_path
            })
            
        except Exception as e:
            print(f"‚ùå L·ªói khi ph√¢n t√≠ch c·∫•u tr√∫c b·∫£ng: {str(e)}")
    
    return table_results

def extract_columns_with_merging(table_results, output_dir, column_groups=None):
    """Tr√≠ch xu·∫•t c·ªôt v√† g·ªôp c·ªôt theo nh√≥m"""
    if not table_results:
        print("‚ùå Kh√¥ng c√≥ b·∫£ng n√†o ƒë·ªÉ tr√≠ch xu·∫•t c·ªôt")
        return None
    
    print("\nüîç TR√çCH XU·∫§T V√Ä G·ªòP C·ªòT")
    print("=" * 60)
    
    # N·∫øu kh√¥ng c√≥ column_groups, t·∫°o m·ªôt c·∫•u h√¨nh m·∫∑c ƒë·ªãnh
    if column_groups is None:
        column_groups = {
            "header": [1],
            "content": [2, 3],
            "footer": [4],
            "all": [1, 2, 3, 4, 5]
        }
    
    column_results = []
    
    for table_info in table_results:
        table_name = table_info["table_name"]
        table_path = table_info["path"]
        
        print(f"\nüìä Tr√≠ch xu·∫•t c·ªôt t·ª´ b·∫£ng: {table_name}")
        
        # ƒê·ªçc ·∫£nh b·∫£ng
        table_img = cv2.imread(table_path)
        if table_img is None:
            print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh b·∫£ng: {table_path}")
            continue
        
        # T·∫°o th∆∞ m·ª•c output cho c·ªôt
        columns_dir = os.path.join(output_dir, table_name, "columns")
        merged_dir = os.path.join(output_dir, table_name, "merged_columns")
        ensure_dir(columns_dir)
        ensure_dir(merged_dir)
        
        # Kh·ªüi t·∫°o column extractor
        column_extractor = AdvancedColumnExtractor(
            input_dir="",
            output_dir=columns_dir,
            debug_dir=os.path.join(output_dir, table_name, "debug")
        )
        
        # Tr√≠ch xu·∫•t c·ªôt
        try:
            columns_info = column_extractor.extract_columns_from_table(table_img, table_name)
            
            if not columns_info:
                print(f"‚ö†Ô∏è Kh√¥ng ph√°t hi·ªán c·ªôt n√†o trong b·∫£ng {table_name}")
                continue
            
            print(f"‚úÖ ƒê√£ ph√°t hi·ªán {len(columns_info)} c·ªôt")
            
            # L∆∞u t·ª´ng c·ªôt ri√™ng bi·ªát
            saved_columns = column_extractor.save_individual_columns(columns_info, table_name)
            print(f"‚úÖ ƒê√£ l∆∞u {len(saved_columns)} c·ªôt ri√™ng bi·ªát")
            
            # G·ªôp c·ªôt theo nh√≥m
            saved_merged = column_extractor.save_merged_columns(columns_info, table_name, column_groups)
            print(f"‚úÖ ƒê√£ l∆∞u {len(saved_merged)} nh√≥m c·ªôt ƒë√£ g·ªôp")
            
            # T·∫°o visualization
            viz_img = table_img.copy()
            
            # V·∫Ω c√°c c·ªôt ƒë√£ ph√°t hi·ªán
            for i, col in enumerate(columns_info):
                x1, x2 = col["x1"], col["x2"]
                cv2.rectangle(viz_img, (x1, 0), (x2, table_img.shape[0]), (0, 255, 0), 2)
                cv2.putText(viz_img, f"Col {i+1}", (x1+5, 30), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)
            
            # L∆∞u visualization
            viz_path = os.path.join(output_dir, table_name, "columns_visualization.jpg")
            cv2.imwrite(viz_path, viz_img)
            
            column_results.append({
                "table_name": table_name,
                "columns": columns_info,
                "merged_groups": column_groups,
                "visualization": viz_path
            })
            
        except Exception as e:
            print(f"‚ùå L·ªói khi tr√≠ch xu·∫•t c·ªôt: {str(e)}")
    
    return column_results

def main():
    """H√†m ch√≠nh"""
    print("üöÄ TH·ª¨ NGHI·ªÜM T√çNH NƒÇNG N√ÇNG CAO C·ª¶A DETECTROW 2.0")
    print("=" * 60)
    
    # Ki·ªÉm tra GPU
    has_gpu_support = check_gpu_support()
    
    # T·∫°o th∆∞ m·ª•c output
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_dir = f"output/advanced_test_{timestamp}"
    ensure_dir(output_dir)
    
    # T√¨m c√°c ·∫£nh trong th∆∞ m·ª•c input
    input_dir = "input"
    image_files = []
    
    for ext in ['.jpg', '.jpeg', '.png', '.bmp']:
        image_files.extend(list(Path(input_dir).glob(f"*{ext}")))
        image_files.extend(list(Path(input_dir).glob(f"*{ext.upper()}")))
    
    if not image_files:
        print("‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh n√†o trong th∆∞ m·ª•c input/")
        return
    
    print(f"üîç T√¨m th·∫•y {len(image_files)} ·∫£nh trong th∆∞ m·ª•c input/")
    
    # C·∫•u h√¨nh nh√≥m c·ªôt t√πy ch·ªânh
    column_groups = {
        "header": [1],
        "content": [2, 3],
        "footer": [4],
        "all": [1, 2, 3, 4, 5]
    }
    
    # X·ª≠ l√Ω t·ª´ng ·∫£nh
    all_results = {}
    
    for image_path in image_files:
        image_path_str = str(image_path)
        print(f"\nüñºÔ∏è X·ª¨ L√ù ·∫¢NH: {image_path.name}")
        print("-" * 60)
        
        # Ph√¢n t√≠ch c·∫•u tr√∫c ·∫£nh v√† tr√≠ch xu·∫•t b·∫£ng
        table_results = analyze_image_structure(image_path_str, output_dir)
        
        if table_results:
            # Tr√≠ch xu·∫•t c·ªôt v√† g·ªôp c·ªôt
            column_results = extract_columns_with_merging(table_results, output_dir, column_groups)
            
            all_results[image_path.name] = {
                "tables": table_results,
                "columns": column_results
            }
    
    # L∆∞u k·∫øt qu·∫£ t·ªïng h·ª£p
    result_summary = {
        "timestamp": timestamp,
        "total_images": len(image_files),
        "gpu_support": has_gpu_support,
        "results": all_results
    }
    
    with open(os.path.join(output_dir, "results_summary.json"), "w", encoding="utf-8") as f:
        json.dump(result_summary, f, indent=2, ensure_ascii=False)
    
    print("\n‚úÖ HO√ÄN TH√ÄNH TH·ª¨ NGHI·ªÜM")
    print(f"üìÅ K·∫øt qu·∫£ ƒë∆∞·ª£c l∆∞u trong: {output_dir}")

if __name__ == "__main__":
    main() 