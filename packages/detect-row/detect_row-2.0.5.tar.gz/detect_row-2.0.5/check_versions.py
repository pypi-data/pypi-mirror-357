#!/usr/bin/env python3
"""
Script ki·ªÉm tra t√≠nh nh·∫•t qu√°n c·ªßa version trong c√°c file c·∫•u h√¨nh
"""

import re
import sys
import os
from pathlib import Path

def read_version_from_setup_py():
    """ƒê·ªçc version t·ª´ setup.py"""
    try:
        with open('setup.py', 'r', encoding='utf-8') as f:
            content = f.read()
            match = re.search(r'version\s*=\s*["\']([^"\']+)["\']', content)
            if match:
                return match.group(1)
    except FileNotFoundError:
        pass
    return None

def read_version_from_pyproject_toml():
    """ƒê·ªçc version t·ª´ pyproject.toml"""
    try:
        with open('pyproject.toml', 'r', encoding='utf-8') as f:
            content = f.read()
            match = re.search(r'version\s*=\s*["\']([^"\']+)["\']', content)
            if match:
                return match.group(1)
    except FileNotFoundError:
        pass
    return None

def read_version_from_init_py():
    """ƒê·ªçc version t·ª´ detect_row/__init__.py"""
    try:
        with open('detect_row/__init__.py', 'r', encoding='utf-8') as f:
            content = f.read()
            match = re.search(r'__version__\s*=\s*["\']([^"\']+)["\']', content)
            if match:
                return match.group(1)
    except FileNotFoundError:
        pass
    return None

def main():
    """Main function"""
    print("üîç Ki·ªÉm tra version consistency...")
    print("=" * 50)
    
    # ƒê·ªçc versions t·ª´ c√°c file
    setup_version = read_version_from_setup_py()
    toml_version = read_version_from_pyproject_toml()
    init_version = read_version_from_init_py()
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    print(f"üìÑ setup.py:           {setup_version or '‚ùå Kh√¥ng t√¨m th·∫•y'}")
    print(f"üìÑ pyproject.toml:     {toml_version or '‚ùå Kh√¥ng t√¨m th·∫•y'}")
    print(f"üìÑ __init__.py:        {init_version or '‚ùå Kh√¥ng t√¨m th·∫•y'}")
    print("=" * 50)
    
    # Ki·ªÉm tra consistency
    versions = [v for v in [setup_version, toml_version, init_version] if v is not None]
    
    if not versions:
        print("‚ùå Kh√¥ng t√¨m th·∫•y version n√†o!")
        return 1
    
    if len(set(versions)) == 1:
        print(f"‚úÖ T·∫•t c·∫£ versions ƒë·ªÅu nh·∫•t qu√°n: {versions[0]}")
        
        # Ki·ªÉm tra th√™m c√°c file kh√°c
        check_additional_files(versions[0])
        
        return 0
    else:
        print("‚ùå Versions kh√¥ng nh·∫•t qu√°n!")
        print("üîß C·∫ßn c·∫≠p nh·∫≠t ƒë·ªÉ ƒë·ªìng b·ªô t·∫•t c·∫£ versions")
        
        # G·ª£i √Ω fix
        suggest_fix(versions)
        
        return 1

def check_additional_files(version):
    """Ki·ªÉm tra version trong c√°c file kh√°c"""
    print("\nüîç Ki·ªÉm tra c√°c file kh√°c...")
    
    # Ki·ªÉm tra README.md
    if os.path.exists('README.md'):
        with open('README.md', 'r', encoding='utf-8') as f:
            content = f.read()
            if version in content:
                print(f"‚úÖ README.md c√≥ ch·ª©a version {version}")
            else:
                print(f"‚ö†Ô∏è  README.md kh√¥ng ch·ª©a version {version}")
    
    # Ki·ªÉm tra CHANGELOG.md n·∫øu c√≥
    if os.path.exists('CHANGELOG.md'):
        with open('CHANGELOG.md', 'r', encoding='utf-8') as f:
            content = f.read()
            if version in content:
                print(f"‚úÖ CHANGELOG.md c√≥ ch·ª©a version {version}")
            else:
                print(f"‚ö†Ô∏è  CHANGELOG.md kh√¥ng ch·ª©a version {version}")

def suggest_fix(versions):
    """G·ª£i √Ω c√°ch fix version mismatch"""
    print("\nüîß G·ª£i √Ω fix:")
    
    # T√¨m version ph·ªï bi·∫øn nh·∫•t
    from collections import Counter
    version_counts = Counter(versions)
    most_common_version = version_counts.most_common(1)[0][0]
    
    print(f"üí° Khuy·∫øn ngh·ªã s·ª≠ d·ª•ng version: {most_common_version}")
    print("\nüìù Commands ƒë·ªÉ fix:")
    
    # Setup.py
    setup_version = read_version_from_setup_py()
    if setup_version != most_common_version:
        print(f"# Fix setup.py:")
        print(f"sed -i 's/version=\"{setup_version}\"/version=\"{most_common_version}\"/' setup.py")
    
    # pyproject.toml
    toml_version = read_version_from_pyproject_toml()
    if toml_version != most_common_version:
        print(f"# Fix pyproject.toml:")
        print(f"sed -i 's/version = \"{toml_version}\"/version = \"{most_common_version}\"/' pyproject.toml")
    
    # __init__.py
    init_version = read_version_from_init_py()
    if init_version != most_common_version:
        print(f"# Fix __init__.py:")
        print(f"sed -i 's/__version__ = \"{init_version}\"/__version__ = \"{most_common_version}\"/' detect_row/__init__.py")

if __name__ == "__main__":
    sys.exit(main()) 