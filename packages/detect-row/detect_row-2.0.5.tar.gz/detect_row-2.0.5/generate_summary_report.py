#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
T·∫°o b√°o c√°o t·ªïng h·ª£p cho t·∫•t c·∫£ c√°c ·∫£nh ƒë√£ x·ª≠ l√Ω
===============================================

Script n√†y t·∫°o b√°o c√°o t·ªïng h·ª£p HTML cho t·∫•t c·∫£ c√°c ·∫£nh ƒë√£ x·ª≠ l√Ω.
"""

import os
import sys
import json
import base64
from datetime import datetime
from pathlib import Path

def ensure_dir(path):
    """T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i"""
    os.makedirs(path, exist_ok=True)
    print(f"üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c: {path}")

def image_to_base64(image_path):
    """Chuy·ªÉn ƒë·ªïi ·∫£nh th√†nh chu·ªói base64"""
    if not os.path.exists(image_path):
        return ""
    
    with open(image_path, "rb") as image_file:
        encoded_string = base64.b64encode(image_file.read()).decode("utf-8")
    
    ext = os.path.splitext(image_path)[1].lower()
    if ext in [".jpg", ".jpeg"]:
        mime_type = "image/jpeg"
    elif ext == ".png":
        mime_type = "image/png"
    elif ext == ".gif":
        mime_type = "image/gif"
    else:
        mime_type = "image/jpeg"
    
    return f"data:{mime_type};base64,{encoded_string}"

def collect_reports(input_dir):
    """Thu th·∫≠p t·∫•t c·∫£ c√°c b√°o c√°o t·ª´ th∆∞ m·ª•c ƒë·∫ßu v√†o"""
    reports = []
    
    # T√¨m file summary.json
    summary_path = os.path.join(input_dir, "summary.json")
    if os.path.exists(summary_path):
        with open(summary_path, "r", encoding="utf-8") as f:
            summary_data = json.load(f)
            if "results" in summary_data:
                return summary_data
    
    # T√¨m c√°c th∆∞ m·ª•c con
    for item in os.listdir(input_dir):
        item_path = os.path.join(input_dir, item)
        if os.path.isdir(item_path):
            # T√¨m file report.json trong th∆∞ m·ª•c con
            report_path = os.path.join(item_path, "report.json")
            if os.path.exists(report_path):
                with open(report_path, "r", encoding="utf-8") as f:
                    report_data = json.load(f)
                    reports.append(report_data)
    
    # T·∫°o summary data
    summary_data = {
        "input_dir": input_dir,
        "output_dir": input_dir,
        "images": len(reports),
        "processed_images": len(reports),
        "results": reports,
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    
    return summary_data

def generate_summary_report(input_dir, output_file):
    """T·∫°o b√°o c√°o t·ªïng h·ª£p HTML t·ª´ th∆∞ m·ª•c k·∫øt qu·∫£"""
    print(f"üîç ƒêang ph√¢n t√≠ch th∆∞ m·ª•c k·∫øt qu·∫£: {input_dir}")
    
    # Thu th·∫≠p b√°o c√°o
    summary_data = collect_reports(input_dir)
    if not summary_data or not summary_data.get("results"):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y b√°o c√°o n√†o trong th∆∞ m·ª•c: {input_dir}")
        return False
    
    # T·∫°o n·ªôi dung HTML
    html_content = f"""<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>B√°o c√°o t·ªïng h·ª£p tr√≠ch xu·∫•t b·∫£ng, h√†ng v√† c·ªôt</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            color: #333;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
        }}
        h1, h2, h3, h4 {{
            color: #2c3e50;
        }}
        .header {{
            background-color: #3498db;
            color: white;
            padding: 20px;
            margin-bottom: 20px;
            border-radius: 5px;
        }}
        .section {{
            margin-bottom: 30px;
            padding: 20px;
            background-color: #f9f9f9;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }}
        .image-section {{
            margin-bottom: 40px;
            border-left: 5px solid #3498db;
            padding-left: 15px;
        }}
        .image-container {{
            margin: 20px 0;
            text-align: center;
        }}
        .image-container img {{
            max-width: 100%;
            border: 1px solid #ddd;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }}
        .grid {{
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }}
        .grid-item {{
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 10px;
            background-color: white;
        }}
        .grid-item h4 {{
            margin-top: 0;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }}
        table {{
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }}
        table, th, td {{
            border: 1px solid #ddd;
        }}
        th, td {{
            padding: 12px;
            text-align: left;
        }}
        th {{
            background-color: #f2f2f2;
        }}
        tr:nth-child(even) {{
            background-color: #f9f9f9;
        }}
        .info {{
            background-color: #d4edda;
            color: #155724;
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
        }}
        .timestamp {{
            color: #6c757d;
            font-style: italic;
        }}
        .summary-table {{
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }}
        .summary-table th {{
            background-color: #3498db;
            color: white;
        }}
        .btn {{
            display: inline-block;
            padding: 8px 16px;
            background-color: #3498db;
            color: white;
            text-decoration: none;
            border-radius: 4px;
            margin: 5px 0;
        }}
        .btn:hover {{
            background-color: #2980b9;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>B√°o c√°o t·ªïng h·ª£p tr√≠ch xu·∫•t b·∫£ng, h√†ng v√† c·ªôt</h1>
            <p class="timestamp">Th·ªùi gian: {summary_data.get("timestamp", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))}</p>
        </div>
        
        <div class="section">
            <h2>Th√¥ng tin t·ªïng quan</h2>
            <table>
                <tr>
                    <th>Th∆∞ m·ª•c ƒë·∫ßu v√†o</th>
                    <td>{summary_data.get("input_dir", "")}</td>
                </tr>
                <tr>
                    <th>S·ªë l∆∞·ª£ng ·∫£nh</th>
                    <td>{summary_data.get("images", 0)}</td>
                </tr>
                <tr>
                    <th>S·ªë l∆∞·ª£ng ·∫£nh ƒë√£ x·ª≠ l√Ω</th>
                    <td>{summary_data.get("processed_images", 0)}</td>
                </tr>
            </table>
        </div>
        
        <div class="section">
            <h2>B·∫£ng t·ªïng h·ª£p k·∫øt qu·∫£</h2>
            <table class="summary-table">
                <tr>
                    <th>STT</th>
                    <th>·∫¢nh</th>
                    <th>S·ªë l∆∞·ª£ng b·∫£ng</th>
                    <th>S·ªë l∆∞·ª£ng h√†ng</th>
                    <th>S·ªë l∆∞·ª£ng c·ªôt</th>
                    <th>S·ªë l∆∞·ª£ng nh√≥m c·ªôt g·ªôp</th>
                    <th>B√°o c√°o chi ti·∫øt</th>
                </tr>
"""
    
    # Th√™m d√≤ng cho t·ª´ng ·∫£nh
    for i, result in enumerate(summary_data.get("results", [])):
        image_name = os.path.basename(result.get("image", f"image_{i+1}"))
        output_dir = result.get("output_dir", "")
        report_path = os.path.join(output_dir, "report.html")
        
        # T√≠nh t·ªïng s·ªë h√†ng
        total_rows = sum(len(rows.get("rows", [])) for rows in result.get("rows", []))
        
        # T√≠nh t·ªïng s·ªë c·ªôt
        total_columns = sum(len(cols.get("columns", [])) for cols in result.get("columns", []))
        
        # T√≠nh t·ªïng s·ªë nh√≥m c·ªôt g·ªôp
        total_merged = sum(len(cols.get("merged_columns", [])) for cols in result.get("columns", []))
        
        html_content += f"""
                <tr>
                    <td>{i+1}</td>
                    <td>{image_name}</td>
                    <td>{len(result.get("tables", []))}</td>
                    <td>{total_rows}</td>
                    <td>{total_columns}</td>
                    <td>{total_merged}</td>
                    <td><a href="{os.path.basename(report_path)}" class="btn">Xem chi ti·∫øt</a></td>
                </tr>
"""
    
    html_content += """
            </table>
        </div>
        
        <div class="section">
            <h2>Chi ti·∫øt t·ª´ng ·∫£nh</h2>
"""
    
    # Th√™m ph·∫ßn chi ti·∫øt cho t·ª´ng ·∫£nh
    for i, result in enumerate(summary_data.get("results", [])):
        image_name = os.path.basename(result.get("image", f"image_{i+1}"))
        output_dir = result.get("output_dir", "")
        
        # ƒê∆∞·ªùng d·∫´n ·∫£nh
        original_path = os.path.join(output_dir, "original.jpg")
        detected_tables_path = os.path.join(output_dir, "detected_tables.jpg")
        
        html_content += f"""
            <div class="image-section">
                <h3>{i+1}. {image_name}</h3>
                
                <div class="grid">
                    <div class="grid-item">
                        <h4>·∫¢nh g·ªëc</h4>
                        <img src="{image_to_base64(original_path)}" alt="·∫¢nh g·ªëc">
                    </div>
                    
                    <div class="grid-item">
                        <h4>B·∫£ng ƒë√£ ph√°t hi·ªán</h4>
                        <img src="{image_to_base64(detected_tables_path)}" alt="B·∫£ng ƒë√£ ph√°t hi·ªán">
                    </div>
                </div>
                
                <h4>Th√¥ng tin chi ti·∫øt</h4>
                <table>
                    <tr>
                        <th>S·ªë l∆∞·ª£ng b·∫£ng</th>
                        <td>{len(result.get("tables", []))}</td>
                    </tr>
                    <tr>
                        <th>S·ªë l∆∞·ª£ng h√†ng</th>
                        <td>{sum(len(rows.get("rows", [])) for rows in result.get("rows", []))}</td>
                    </tr>
                    <tr>
                        <th>S·ªë l∆∞·ª£ng c·ªôt ri√™ng l·∫ª</th>
                        <td>{sum(len(cols.get("columns", [])) for cols in result.get("columns", []))}</td>
                    </tr>
                    <tr>
                        <th>S·ªë l∆∞·ª£ng nh√≥m c·ªôt g·ªôp</th>
                        <td>{sum(len(cols.get("merged_columns", [])) for cols in result.get("columns", []))}</td>
                    </tr>
                </table>
                
                <p><a href="{os.path.basename(os.path.join(output_dir, 'report.html'))}" class="btn">Xem b√°o c√°o chi ti·∫øt</a></p>
            </div>
"""
    
    # K·∫øt th√∫c HTML
    html_content += """
        </div>
    </div>
</body>
</html>
"""
    
    # Ghi file HTML
    with open(output_file, "w", encoding="utf-8") as f:
        f.write(html_content)
    
    print(f"‚úÖ ƒê√£ t·∫°o b√°o c√°o t·ªïng h·ª£p HTML: {output_file}")
    return True

def main():
    """H√†m ch√≠nh"""
    # Ki·ªÉm tra tham s·ªë d√≤ng l·ªánh
    if len(sys.argv) < 2:
        print("S·ª≠ d·ª•ng: python generate_summary_report.py <th∆∞_m·ª•c_k·∫øt_qu·∫£>")
        print("Ho·∫∑c:    python generate_summary_report.py <th∆∞_m·ª•c_k·∫øt_qu·∫£> <file_html_ƒë·∫ßu_ra>")
        return
    
    # Th∆∞ m·ª•c k·∫øt qu·∫£ ƒë·∫ßu v√†o
    input_dir = sys.argv[1]
    if not os.path.exists(input_dir):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c: {input_dir}")
        return
    
    # File HTML ƒë·∫ßu ra
    output_file = sys.argv[2] if len(sys.argv) > 2 else os.path.join(input_dir, "summary.html")
    
    print(f"üöÄ T·∫†O B√ÅO C√ÅO T·ªîNG H·ª¢P HTML")
    print(f"üìÅ Th∆∞ m·ª•c k·∫øt qu·∫£: {input_dir}")
    print(f"üìÑ File HTML ƒë·∫ßu ra: {output_file}")
    print(f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # T·∫°o b√°o c√°o HTML
    if generate_summary_report(input_dir, output_file):
        print(f"\n{'='*50}")
        print("T·ªîNG K·∫æT")
        print(f"{'='*50}")
        
        print(f"üéâ HO√ÄN TH√ÄNH T·∫†O B√ÅO C√ÅO T·ªîNG H·ª¢P HTML!")
        print(f"‚úÖ ƒê√£ t·∫°o b√°o c√°o t·ªïng h·ª£p HTML: {output_file}")
        print(f"üëÄ M·ªü file HTML ƒë·ªÉ xem k·∫øt qu·∫£ tr·ª±c quan.")

if __name__ == "__main__":
    main() 