#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
T·∫°o b√°o c√°o HTML hi·ªÉn th·ªã k·∫øt qu·∫£ tr√≠ch xu·∫•t
============================================

Script n√†y t·∫°o b√°o c√°o HTML hi·ªÉn th·ªã k·∫øt qu·∫£ tr√≠ch xu·∫•t t·ª´ quy tr√¨nh ho√†n ch·ªânh.
"""

import os
import sys
import json
import base64
from datetime import datetime
from pathlib import Path

def ensure_dir(path):
    """T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i"""
    os.makedirs(path, exist_ok=True)
    print(f"üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c: {path}")

def image_to_base64(image_path):
    """Chuy·ªÉn ƒë·ªïi ·∫£nh th√†nh chu·ªói base64"""
    if not os.path.exists(image_path):
        return ""
    
    with open(image_path, "rb") as image_file:
        encoded_string = base64.b64encode(image_file.read()).decode("utf-8")
    
    ext = os.path.splitext(image_path)[1].lower()
    if ext in [".jpg", ".jpeg"]:
        mime_type = "image/jpeg"
    elif ext == ".png":
        mime_type = "image/png"
    elif ext == ".gif":
        mime_type = "image/gif"
    else:
        mime_type = "image/jpeg"
    
    return f"data:{mime_type};base64,{encoded_string}"

def generate_html_report(input_dir, output_file):
    """T·∫°o b√°o c√°o HTML t·ª´ th∆∞ m·ª•c k·∫øt qu·∫£"""
    print(f"üîç ƒêang ph√¢n t√≠ch th∆∞ m·ª•c k·∫øt qu·∫£: {input_dir}")
    
    # T√¨m file report.json
    report_path = os.path.join(input_dir, "report.json")
    if not os.path.exists(report_path):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file b√°o c√°o: {report_path}")
        return False
    
    # ƒê·ªçc file b√°o c√°o
    with open(report_path, "r", encoding="utf-8") as f:
        report_data = json.load(f)
    
    # T·∫°o n·ªôi dung HTML
    html_content = f"""<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>B√°o c√°o tr√≠ch xu·∫•t b·∫£ng, h√†ng v√† c·ªôt</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            color: #333;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
        }}
        h1, h2, h3, h4 {{
            color: #2c3e50;
        }}
        .header {{
            background-color: #3498db;
            color: white;
            padding: 20px;
            margin-bottom: 20px;
            border-radius: 5px;
        }}
        .section {{
            margin-bottom: 30px;
            padding: 20px;
            background-color: #f9f9f9;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }}
        .table-section {{
            margin-bottom: 40px;
            border-left: 5px solid #3498db;
            padding-left: 15px;
        }}
        .image-container {{
            margin: 20px 0;
            text-align: center;
        }}
        .image-container img {{
            max-width: 100%;
            border: 1px solid #ddd;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }}
        .grid {{
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }}
        .grid-item {{
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 10px;
            background-color: white;
        }}
        .grid-item h4 {{
            margin-top: 0;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }}
        table {{
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }}
        table, th, td {{
            border: 1px solid #ddd;
        }}
        th, td {{
            padding: 12px;
            text-align: left;
        }}
        th {{
            background-color: #f2f2f2;
        }}
        tr:nth-child(even) {{
            background-color: #f9f9f9;
        }}
        .info {{
            background-color: #d4edda;
            color: #155724;
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
        }}
        .timestamp {{
            color: #6c757d;
            font-style: italic;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>B√°o c√°o tr√≠ch xu·∫•t b·∫£ng, h√†ng v√† c·ªôt</h1>
            <p class="timestamp">Th·ªùi gian: {report_data.get("timestamp", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))}</p>
        </div>
        
        <div class="section">
            <h2>Th√¥ng tin t·ªïng quan</h2>
            <table>
                <tr>
                    <th>·∫¢nh g·ªëc</th>
                    <td>{os.path.basename(report_data.get("image", ""))}</td>
                </tr>
                <tr>
                    <th>S·ªë l∆∞·ª£ng b·∫£ng</th>
                    <td>{len(report_data.get("tables", []))}</td>
                </tr>
                <tr>
                    <th>S·ªë l∆∞·ª£ng h√†ng</th>
                    <td>{sum(len(rows.get("rows", [])) for rows in report_data.get("rows", []))}</td>
                </tr>
                <tr>
                    <th>S·ªë l∆∞·ª£ng c·ªôt ri√™ng l·∫ª</th>
                    <td>{sum(len(cols.get("columns", [])) for cols in report_data.get("columns", []))}</td>
                </tr>
                <tr>
                    <th>S·ªë l∆∞·ª£ng nh√≥m c·ªôt g·ªôp</th>
                    <td>{sum(len(cols.get("merged_columns", [])) for cols in report_data.get("columns", []))}</td>
                </tr>
            </table>
            
            <div class="image-container">
                <h3>·∫¢nh g·ªëc</h3>
                <img src="{image_to_base64(os.path.join(input_dir, 'original.jpg'))}" alt="·∫¢nh g·ªëc">
            </div>
            
            <div class="image-container">
                <h3>B·∫£ng ƒë√£ ph√°t hi·ªán</h3>
                <img src="{image_to_base64(os.path.join(input_dir, 'detected_tables.jpg'))}" alt="B·∫£ng ƒë√£ ph√°t hi·ªán">
            </div>
        </div>
"""
    
    # Th√™m ph·∫ßn chi ti·∫øt cho t·ª´ng b·∫£ng
    for i, table in enumerate(report_data.get("tables", [])):
        table_id = table.get("id", i+1)
        table_path = table.get("path", "")
        
        # T√¨m th√¥ng tin h√†ng v√† c·ªôt t∆∞∆°ng ·ª©ng
        rows_info = next((rows for rows in report_data.get("rows", []) if os.path.basename(rows.get("table", "")) == os.path.basename(table_path)), {})
        columns_info = next((cols for cols in report_data.get("columns", []) if os.path.basename(cols.get("table", "")) == os.path.basename(table_path)), {})
        
        rows = rows_info.get("rows", [])
        columns = columns_info.get("columns", [])
        merged_columns = columns_info.get("merged_columns", [])
        
        html_content += f"""
        <div class="table-section">
            <h2>B·∫£ng {table_id}</h2>
            
            <div class="image-container">
                <h3>·∫¢nh b·∫£ng</h3>
                <img src="{image_to_base64(table_path)}" alt="B·∫£ng {table_id}">
            </div>
            
            <h3>Th√¥ng tin chi ti·∫øt</h3>
            <table>
                <tr>
                    <th>K√≠ch th∆∞·ªõc</th>
                    <td>{table.get("width", 0)}x{table.get("height", 0)}</td>
                </tr>
                <tr>
                    <th>S·ªë l∆∞·ª£ng h√†ng</th>
                    <td>{len(rows)}</td>
                </tr>
                <tr>
                    <th>S·ªë l∆∞·ª£ng c·ªôt</th>
                    <td>{len(columns)}</td>
                </tr>
                <tr>
                    <th>S·ªë l∆∞·ª£ng nh√≥m c·ªôt g·ªôp</th>
                    <td>{len(merged_columns)}</td>
                </tr>
            </table>
            
            <h3>H√†ng ƒë√£ tr√≠ch xu·∫•t</h3>
"""
        
        # Hi·ªÉn th·ªã c√°c h√†ng
        if rows:
            html_content += """
            <div class="grid">
"""
            
            for row in rows:
                row_id = row.get("id", 0)
                row_path = row.get("path", "")
                
                html_content += f"""
                <div class="grid-item">
                    <h4>H√†ng {row_id}</h4>
                    <img src="{image_to_base64(row_path)}" alt="H√†ng {row_id}">
                    <p>K√≠ch th∆∞·ªõc: {row.get("width", 0)}x{row.get("height", 0)}</p>
                </div>
"""
            
            html_content += """
            </div>
"""
        else:
            html_content += """
            <div class="info">Kh√¥ng c√≥ h√†ng n√†o ƒë∆∞·ª£c tr√≠ch xu·∫•t.</div>
"""
        
        # Hi·ªÉn th·ªã c√°c c·ªôt ri√™ng l·∫ª
        html_content += """
            <h3>C·ªôt ƒë√£ tr√≠ch xu·∫•t</h3>
"""
        
        if columns:
            html_content += """
            <div class="grid">
"""
            
            for column in columns:
                col_id = column.get("id", 0)
                col_path = column.get("path", "")
                
                html_content += f"""
                <div class="grid-item">
                    <h4>C·ªôt {col_id}</h4>
                    <img src="{image_to_base64(col_path)}" alt="C·ªôt {col_id}">
                    <p>K√≠ch th∆∞·ªõc: {column.get("width", 0)}x{column.get("height", 0)}</p>
                </div>
"""
            
            html_content += """
            </div>
"""
        else:
            html_content += """
            <div class="info">Kh√¥ng c√≥ c·ªôt n√†o ƒë∆∞·ª£c tr√≠ch xu·∫•t.</div>
"""
        
        # Hi·ªÉn th·ªã c√°c nh√≥m c·ªôt g·ªôp
        html_content += """
            <h3>Nh√≥m c·ªôt g·ªôp</h3>
"""
        
        if merged_columns:
            html_content += """
            <div class="grid">
"""
            
            for merged in merged_columns:
                name = merged.get("name", "")
                merged_path = merged.get("path", "")
                
                html_content += f"""
                <div class="grid-item">
                    <h4>Nh√≥m '{name}'</h4>
                    <img src="{image_to_base64(merged_path)}" alt="Nh√≥m {name}">
                    <p>K√≠ch th∆∞·ªõc: {merged.get("width", 0)}x{merged.get("height", 0)}</p>
                    <p>C·ªôt: {', '.join(map(str, merged.get("columns", [])))}</p>
                </div>
"""
            
            html_content += """
            </div>
"""
        else:
            html_content += """
            <div class="info">Kh√¥ng c√≥ nh√≥m c·ªôt g·ªôp n√†o ƒë∆∞·ª£c t·∫°o.</div>
"""
        
        html_content += """
        </div>
"""
    
    # K·∫øt th√∫c HTML
    html_content += """
    </div>
</body>
</html>
"""
    
    # Ghi file HTML
    with open(output_file, "w", encoding="utf-8") as f:
        f.write(html_content)
    
    print(f"‚úÖ ƒê√£ t·∫°o b√°o c√°o HTML: {output_file}")
    return True

def main():
    """H√†m ch√≠nh"""
    # Ki·ªÉm tra tham s·ªë d√≤ng l·ªánh
    if len(sys.argv) < 2:
        print("S·ª≠ d·ª•ng: python generate_html_report.py <th∆∞_m·ª•c_k·∫øt_qu·∫£>")
        print("Ho·∫∑c:    python generate_html_report.py <th∆∞_m·ª•c_k·∫øt_qu·∫£> <file_html_ƒë·∫ßu_ra>")
        return
    
    # Th∆∞ m·ª•c k·∫øt qu·∫£ ƒë·∫ßu v√†o
    input_dir = sys.argv[1]
    if not os.path.exists(input_dir):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c: {input_dir}")
        return
    
    # File HTML ƒë·∫ßu ra
    output_file = sys.argv[2] if len(sys.argv) > 2 else os.path.join(input_dir, "report.html")
    
    print(f"üöÄ T·∫†O B√ÅO C√ÅO HTML")
    print(f"üìÅ Th∆∞ m·ª•c k·∫øt qu·∫£: {input_dir}")
    print(f"üìÑ File HTML ƒë·∫ßu ra: {output_file}")
    print(f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # T·∫°o b√°o c√°o HTML
    if generate_html_report(input_dir, output_file):
        print(f"\n{'='*50}")
        print("T·ªîNG K·∫æT")
        print(f"{'='*50}")
        
        print(f"üéâ HO√ÄN TH√ÄNH T·∫†O B√ÅO C√ÅO HTML!")
        print(f"‚úÖ ƒê√£ t·∫°o b√°o c√°o HTML: {output_file}")
        print(f"üëÄ M·ªü file HTML ƒë·ªÉ xem k·∫øt qu·∫£ tr·ª±c quan.")

if __name__ == "__main__":
    main() 