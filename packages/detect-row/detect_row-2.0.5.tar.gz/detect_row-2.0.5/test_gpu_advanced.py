#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Ki·ªÉm tra kh·∫£ nƒÉng GPU n√¢ng cao - DetectRow
=========================================

Script n√†y ki·ªÉm tra v√† ƒë√°nh gi√° kh·∫£ nƒÉng s·ª≠ d·ª•ng GPU c·ªßa th∆∞ vi·ªán DetectRow:
1. Ki·ªÉm tra GPU c√≥ s·∫µn
2. So s√°nh t·ªëc ƒë·ªô x·ª≠ l√Ω gi·ªØa CPU v√† GPU
3. Ki·ªÉm tra c√°c t√πy ch·ªçn GPU n√¢ng cao
"""

import os
import sys
import cv2
import numpy as np
import time
import json
from datetime import datetime
from pathlib import Path

# Import c√°c module t·ª´ detect_row
from detect_row import (
    AdvancedTableExtractor, 
    AdvancedColumnExtractor,
    AdvancedRowExtractorMain
)

# Import module GPU support
try:
    from detect_row.gpu_support import GPUSupport
    has_gpu_support = True
except ImportError:
    has_gpu_support = False

def ensure_dir(path):
    """T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i"""
    os.makedirs(path, exist_ok=True)
    print(f"üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c: {path}")

def check_gpu_availability():
    """Ki·ªÉm tra GPU c√≥ s·∫µn kh√¥ng"""
    print("\nüîç KI·ªÇM TRA GPU")
    print("=" * 50)
    
    if not has_gpu_support:
        print("‚ùå Module GPU support kh√¥ng c√≥ s·∫µn")
        return False
    
    try:
        gpu_support = GPUSupport()
        if gpu_support.is_gpu_available():
            print("‚úÖ GPU c√≥ s·∫µn")
            
            # Ki·ªÉm tra th√¥ng tin GPU
            gpu_info = gpu_support.get_gpu_info()
            if gpu_info:
                print(f"üìä Th√¥ng tin GPU:")
                for key, value in gpu_info.items():
                    print(f"  - {key}: {value}")
            
            return True
        else:
            print("‚ùå GPU kh√¥ng c√≥ s·∫µn")
            return False
    except Exception as e:
        print(f"‚ùå L·ªói khi ki·ªÉm tra GPU: {e}")
        return False

def benchmark_cpu_vs_gpu(image_path, output_dir):
    """So s√°nh hi·ªáu su·∫•t gi·ªØa CPU v√† GPU"""
    print("\nüîç SO S√ÅNH HI·ªÜU SU·∫§T CPU VS GPU")
    print("=" * 50)
    
    # ƒê·ªçc ·∫£nh
    image = cv2.imread(image_path)
    if image is None:
        print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh: {image_path}")
        return None
    
    # T·∫°o th∆∞ m·ª•c output
    ensure_dir(output_dir)
    
    # L∆∞u ·∫£nh g·ªëc
    original_path = os.path.join(output_dir, "original.jpg")
    cv2.imwrite(original_path, image)
    
    # K·∫øt qu·∫£ benchmark
    benchmark_results = {
        "image_path": image_path,
        "image_size": f"{image.shape[1]}x{image.shape[0]}",
        "cpu": {},
        "gpu": {}
    }
    
    # Benchmark v·ªõi CPU
    print("\nüìä Benchmark v·ªõi CPU:")
    
    # 1. Tr√≠ch xu·∫•t b·∫£ng
    print("  1. Tr√≠ch xu·∫•t b·∫£ng")
    cpu_table_extractor = AdvancedTableExtractor(
        input_dir=os.path.dirname(image_path),
        output_dir=os.path.join(output_dir, "cpu_tables"),
        debug_dir=os.path.join(output_dir, "cpu_debug"),
        use_gpu=False
    )
    
    cpu_start_time = time.time()
    cpu_tables = cpu_table_extractor.process_image(os.path.basename(image_path), margin=5, check_text=True)
    cpu_table_time = time.time() - cpu_start_time
    
    print(f"     ‚è±Ô∏è Th·ªùi gian: {cpu_table_time:.2f}s")
    benchmark_results["cpu"]["table_extraction"] = cpu_table_time
    
    # T√¨m c√°c b·∫£ng ƒë√£ tr√≠ch xu·∫•t
    cpu_tables_dir = os.path.join(output_dir, "cpu_tables")
    cpu_table_files = []
    
    if os.path.exists(cpu_tables_dir):
        cpu_table_files = [f for f in os.listdir(cpu_tables_dir) if f.endswith('.jpg')]
        cpu_table_files.sort()
    
    print(f"     ‚úÖ Tr√≠ch xu·∫•t ƒë∆∞·ª£c {len(cpu_table_files)} b·∫£ng")
    benchmark_results["cpu"]["tables_count"] = len(cpu_table_files)
    
    # 2. Tr√≠ch xu·∫•t h√†ng
    print("  2. Tr√≠ch xu·∫•t h√†ng")
    cpu_row_extractor = AdvancedRowExtractorMain(
        input_dir=cpu_tables_dir,
        output_dir=os.path.join(output_dir, "cpu_rows"),
        debug_dir=os.path.join(output_dir, "cpu_debug"),
        use_gpu=False
    )
    
    cpu_rows_count = 0
    cpu_row_time = 0
    
    for table_file in cpu_table_files:
        table_start_time = time.time()
        rows = cpu_row_extractor.process_image(table_file)
        table_time = time.time() - table_start_time
        cpu_row_time += table_time
        
        if rows:
            cpu_rows_count += len(rows)
    
    print(f"     ‚è±Ô∏è Th·ªùi gian: {cpu_row_time:.2f}s")
    print(f"     ‚úÖ Tr√≠ch xu·∫•t ƒë∆∞·ª£c {cpu_rows_count} h√†ng")
    benchmark_results["cpu"]["row_extraction"] = cpu_row_time
    benchmark_results["cpu"]["rows_count"] = cpu_rows_count
    
    # 3. Tr√≠ch xu·∫•t c·ªôt
    print("  3. Tr√≠ch xu·∫•t c·ªôt")
    cpu_column_extractor = AdvancedColumnExtractor(
        input_dir=cpu_tables_dir,
        output_dir=os.path.join(output_dir, "cpu_columns"),
        debug_dir=os.path.join(output_dir, "cpu_debug"),
        use_gpu=False
    )
    
    cpu_columns_count = 0
    cpu_column_time = 0
    
    for table_file in cpu_table_files:
        # ƒê·ªçc ·∫£nh b·∫£ng
        table_path = os.path.join(cpu_tables_dir, table_file)
        table_image = cv2.imread(table_path)
        
        if table_image is None:
            continue
        
        # Ph√°t hi·ªán ƒë∆∞·ªùng k·∫ª d·ªçc
        gray = cv2.cvtColor(table_image, cv2.COLOR_BGR2GRAY)
        binary = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 
                                      cv2.THRESH_BINARY_INV, 15, 3)
        
        table_start_time = time.time()
        v_lines = cpu_column_extractor.detect_vertical_lines(binary, min_line_length_ratio=0.4)
        
        # Tr√≠ch xu·∫•t c·ªôt
        columns = cpu_column_extractor.extract_columns(table_image, v_lines)
        table_time = time.time() - table_start_time
        cpu_column_time += table_time
        
        if columns:
            cpu_columns_count += len(columns)
    
    print(f"     ‚è±Ô∏è Th·ªùi gian: {cpu_column_time:.2f}s")
    print(f"     ‚úÖ Tr√≠ch xu·∫•t ƒë∆∞·ª£c {cpu_columns_count} c·ªôt")
    benchmark_results["cpu"]["column_extraction"] = cpu_column_time
    benchmark_results["cpu"]["columns_count"] = cpu_columns_count
    
    # T·ªïng th·ªùi gian CPU
    cpu_total_time = cpu_table_time + cpu_row_time + cpu_column_time
    print(f"  ‚è±Ô∏è T·ªïng th·ªùi gian CPU: {cpu_total_time:.2f}s")
    benchmark_results["cpu"]["total_time"] = cpu_total_time
    
    # N·∫øu kh√¥ng c√≥ GPU support, d·ª´ng t·∫°i ƒë√¢y
    if not has_gpu_support:
        print("\n‚ùå Kh√¥ng c√≥ GPU support, b·ªè qua benchmark GPU")
        return benchmark_results
    
    # Ki·ªÉm tra GPU c√≥ s·∫µn kh√¥ng
    gpu_support = GPUSupport()
    if not gpu_support.is_gpu_available():
        print("\n‚ùå GPU kh√¥ng c√≥ s·∫µn, b·ªè qua benchmark GPU")
        return benchmark_results
    
    # Benchmark v·ªõi GPU
    print("\nüìä Benchmark v·ªõi GPU:")
    
    # 1. Tr√≠ch xu·∫•t b·∫£ng
    print("  1. Tr√≠ch xu·∫•t b·∫£ng")
    gpu_table_extractor = AdvancedTableExtractor(
        input_dir=os.path.dirname(image_path),
        output_dir=os.path.join(output_dir, "gpu_tables"),
        debug_dir=os.path.join(output_dir, "gpu_debug"),
        use_gpu=True
    )
    
    gpu_start_time = time.time()
    gpu_tables = gpu_table_extractor.process_image(os.path.basename(image_path), margin=5, check_text=True)
    gpu_table_time = time.time() - gpu_start_time
    
    print(f"     ‚è±Ô∏è Th·ªùi gian: {gpu_table_time:.2f}s")
    benchmark_results["gpu"]["table_extraction"] = gpu_table_time
    
    # T√¨m c√°c b·∫£ng ƒë√£ tr√≠ch xu·∫•t
    gpu_tables_dir = os.path.join(output_dir, "gpu_tables")
    gpu_table_files = []
    
    if os.path.exists(gpu_tables_dir):
        gpu_table_files = [f for f in os.listdir(gpu_tables_dir) if f.endswith('.jpg')]
        gpu_table_files.sort()
    
    print(f"     ‚úÖ Tr√≠ch xu·∫•t ƒë∆∞·ª£c {len(gpu_table_files)} b·∫£ng")
    benchmark_results["gpu"]["tables_count"] = len(gpu_table_files)
    
    # 2. Tr√≠ch xu·∫•t h√†ng
    print("  2. Tr√≠ch xu·∫•t h√†ng")
    gpu_row_extractor = AdvancedRowExtractorMain(
        input_dir=gpu_tables_dir,
        output_dir=os.path.join(output_dir, "gpu_rows"),
        debug_dir=os.path.join(output_dir, "gpu_debug"),
        use_gpu=True
    )
    
    gpu_rows_count = 0
    gpu_row_time = 0
    
    for table_file in gpu_table_files:
        table_start_time = time.time()
        rows = gpu_row_extractor.process_image(table_file)
        table_time = time.time() - table_start_time
        gpu_row_time += table_time
        
        if rows:
            gpu_rows_count += len(rows)
    
    print(f"     ‚è±Ô∏è Th·ªùi gian: {gpu_row_time:.2f}s")
    print(f"     ‚úÖ Tr√≠ch xu·∫•t ƒë∆∞·ª£c {gpu_rows_count} h√†ng")
    benchmark_results["gpu"]["row_extraction"] = gpu_row_time
    benchmark_results["gpu"]["rows_count"] = gpu_rows_count
    
    # 3. Tr√≠ch xu·∫•t c·ªôt
    print("  3. Tr√≠ch xu·∫•t c·ªôt")
    gpu_column_extractor = AdvancedColumnExtractor(
        input_dir=gpu_tables_dir,
        output_dir=os.path.join(output_dir, "gpu_columns"),
        debug_dir=os.path.join(output_dir, "gpu_debug"),
        use_gpu=True
    )
    
    gpu_columns_count = 0
    gpu_column_time = 0
    
    for table_file in gpu_table_files:
        # ƒê·ªçc ·∫£nh b·∫£ng
        table_path = os.path.join(gpu_tables_dir, table_file)
        table_image = cv2.imread(table_path)
        
        if table_image is None:
            continue
        
        # Ph√°t hi·ªán ƒë∆∞·ªùng k·∫ª d·ªçc
        gray = cv2.cvtColor(table_image, cv2.COLOR_BGR2GRAY)
        binary = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 
                                      cv2.THRESH_BINARY_INV, 15, 3)
        
        table_start_time = time.time()
        v_lines = gpu_column_extractor.detect_vertical_lines(binary, min_line_length_ratio=0.4)
        
        # Tr√≠ch xu·∫•t c·ªôt
        columns = gpu_column_extractor.extract_columns(table_image, v_lines)
        table_time = time.time() - table_start_time
        gpu_column_time += table_time
        
        if columns:
            gpu_columns_count += len(columns)
    
    print(f"     ‚è±Ô∏è Th·ªùi gian: {gpu_column_time:.2f}s")
    print(f"     ‚úÖ Tr√≠ch xu·∫•t ƒë∆∞·ª£c {gpu_columns_count} c·ªôt")
    benchmark_results["gpu"]["column_extraction"] = gpu_column_time
    benchmark_results["gpu"]["columns_count"] = gpu_columns_count
    
    # T·ªïng th·ªùi gian GPU
    gpu_total_time = gpu_table_time + gpu_row_time + gpu_column_time
    print(f"  ‚è±Ô∏è T·ªïng th·ªùi gian GPU: {gpu_total_time:.2f}s")
    benchmark_results["gpu"]["total_time"] = gpu_total_time
    
    # So s√°nh t·ªëc ƒë·ªô
    if cpu_total_time > 0:
        speedup = cpu_total_time / gpu_total_time if gpu_total_time > 0 else float('inf')
        print(f"\nüöÄ GPU nhanh h∆°n CPU {speedup:.2f}x")
        benchmark_results["speedup"] = speedup
    
    # L∆∞u k·∫øt qu·∫£ benchmark
    result_path = os.path.join(output_dir, "benchmark_results.json")
    with open(result_path, "w", encoding="utf-8") as f:
        json.dump(benchmark_results, f, indent=2)
    
    print(f"üíæ ƒê√£ l∆∞u k·∫øt qu·∫£ benchmark: {result_path}")
    
    return benchmark_results

def test_gpu_advanced_options(image_path, output_dir):
    """Ki·ªÉm tra c√°c t√πy ch·ªçn GPU n√¢ng cao"""
    print("\nüîç KI·ªÇM TRA T√ôY CH·ªåN GPU N√ÇNG CAO")
    print("=" * 50)
    
    # N·∫øu kh√¥ng c√≥ GPU support, d·ª´ng t·∫°i ƒë√¢y
    if not has_gpu_support:
        print("‚ùå Kh√¥ng c√≥ GPU support, b·ªè qua ki·ªÉm tra t√πy ch·ªçn n√¢ng cao")
        return None
    
    # Ki·ªÉm tra GPU c√≥ s·∫µn kh√¥ng
    gpu_support = GPUSupport()
    if not gpu_support.is_gpu_available():
        print("‚ùå GPU kh√¥ng c√≥ s·∫µn, b·ªè qua ki·ªÉm tra t√πy ch·ªçn n√¢ng cao")
        return None
    
    # ƒê·ªçc ·∫£nh
    image = cv2.imread(image_path)
    if image is None:
        print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh: {image_path}")
        return None
    
    # T·∫°o th∆∞ m·ª•c output
    ensure_dir(output_dir)
    
    # Ki·ªÉm tra c√°c t√πy ch·ªçn GPU n√¢ng cao
    advanced_options = {
        "default": {},
        "high_precision": {"precision": "high"},
        "low_precision": {"precision": "low"},
        "batch_processing": {"batch_size": 2},
        "custom_memory": {"memory_limit": 1024}  # 1GB
    }
    
    results = {}
    
    for option_name, options in advanced_options.items():
        print(f"\nüìä Ki·ªÉm tra t√πy ch·ªçn: {option_name}")
        
        option_dir = os.path.join(output_dir, option_name)
        ensure_dir(option_dir)
        
        try:
            # T·∫°o GPU support v·ªõi t√πy ch·ªçn
            custom_gpu_support = GPUSupport(**options)
            
            # Tr√≠ch xu·∫•t b·∫£ng
            table_extractor = AdvancedTableExtractor(
                input_dir=os.path.dirname(image_path),
                output_dir=os.path.join(option_dir, "tables"),
                debug_dir=os.path.join(option_dir, "debug"),
                use_gpu=True,
                gpu_options=options
            )
            
            start_time = time.time()
            tables = table_extractor.process_image(os.path.basename(image_path), margin=5, check_text=True)
            processing_time = time.time() - start_time
            
            # T√¨m c√°c b·∫£ng ƒë√£ tr√≠ch xu·∫•t
            tables_dir = os.path.join(option_dir, "tables")
            table_files = []
            
            if os.path.exists(tables_dir):
                table_files = [f for f in os.listdir(tables_dir) if f.endswith('.jpg')]
            
            print(f"  ‚è±Ô∏è Th·ªùi gian: {processing_time:.2f}s")
            print(f"  ‚úÖ Tr√≠ch xu·∫•t ƒë∆∞·ª£c {len(table_files)} b·∫£ng")
            
            results[option_name] = {
                "time": processing_time,
                "tables_count": len(table_files),
                "options": options
            }
            
        except Exception as e:
            print(f"  ‚ùå L·ªói: {e}")
            results[option_name] = {
                "error": str(e),
                "options": options
            }
    
    # L∆∞u k·∫øt qu·∫£
    result_path = os.path.join(output_dir, "advanced_options_results.json")
    with open(result_path, "w", encoding="utf-8") as f:
        json.dump(results, f, indent=2)
    
    print(f"üíæ ƒê√£ l∆∞u k·∫øt qu·∫£ ki·ªÉm tra t√πy ch·ªçn n√¢ng cao: {result_path}")
    
    return results

def main():
    """H√†m ch√≠nh"""
    # Ki·ªÉm tra tham s·ªë d√≤ng l·ªánh
    if len(sys.argv) < 2:
        print("S·ª≠ d·ª•ng: python test_gpu_advanced.py <ƒë∆∞·ªùng_d·∫´n_·∫£nh>")
        return
    
    # L·∫•y ƒë∆∞·ªùng d·∫´n ·∫£nh t·ª´ tham s·ªë d√≤ng l·ªánh
    image_path = sys.argv[1]
    output_dir = "gpu_test_output"
    
    print(f"üöÄ KI·ªÇM TRA KH·∫¢ NƒÇNG GPU N√ÇNG CAO")
    print(f"üì∏ ·∫¢nh ƒë·∫ßu v√†o: {image_path}")
    print(f"üìÅ Th∆∞ m·ª•c ƒë·∫ßu ra: {output_dir}")
    print(f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Ki·ªÉm tra file
    if not os.path.exists(image_path):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {image_path}")
        return
    
    # T·∫°o th∆∞ m·ª•c output
    ensure_dir(output_dir)
    
    # Ki·ªÉm tra GPU c√≥ s·∫µn kh√¥ng
    has_gpu = check_gpu_availability()
    
    # Benchmark CPU vs GPU
    benchmark_dir = os.path.join(output_dir, "benchmark")
    ensure_dir(benchmark_dir)
    
    benchmark_results = benchmark_cpu_vs_gpu(image_path, benchmark_dir)
    
    # Ki·ªÉm tra c√°c t√πy ch·ªçn GPU n√¢ng cao
    if has_gpu:
        advanced_dir = os.path.join(output_dir, "advanced_options")
        ensure_dir(advanced_dir)
        
        advanced_results = test_gpu_advanced_options(image_path, advanced_dir)
    
    # T·ªïng k·∫øt
    print(f"\n{'='*50}")
    print("T·ªîNG K·∫æT")
    print(f"{'='*50}")
    
    print(f"üéâ HO√ÄN TH√ÄNH KI·ªÇM TRA KH·∫¢ NƒÇNG GPU N√ÇNG CAO!")
    print(f"üìÅ K·∫øt qu·∫£ l∆∞u t·∫°i: {output_dir}/")
    
    if has_gpu and benchmark_results:
        cpu_time = benchmark_results.get("cpu", {}).get("total_time", 0)
        gpu_time = benchmark_results.get("gpu", {}).get("total_time", 0)
        
        if cpu_time > 0 and gpu_time > 0:
            speedup = cpu_time / gpu_time
            print(f"üöÄ GPU nhanh h∆°n CPU {speedup:.2f}x")
        
        print(f"‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω CPU: {cpu_time:.2f}s")
        print(f"‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω GPU: {gpu_time:.2f}s")

if __name__ == "__main__":
    main() 