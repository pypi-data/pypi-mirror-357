#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Ki·ªÉm tra API AdvancedColumnExtractor
==================================

Script n√†y ki·ªÉm tra API AdvancedColumnExtractor v·ªõi c√°c b·∫£ng ƒë√£ tr√≠ch xu·∫•t.
"""

import os
import sys
import cv2
import numpy as np
from pathlib import Path
from datetime import datetime

# Import module t·ª´ detect_row
from detect_row import AdvancedColumnExtractor

def ensure_dir(path):
    """T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i"""
    os.makedirs(path, exist_ok=True)
    print(f"üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c: {path}")

def list_image_files(directory):
    """Li·ªát k√™ t·∫•t c·∫£ c√°c file ·∫£nh trong th∆∞ m·ª•c"""
    image_extensions = ['.jpg', '.jpeg', '.png', '.bmp', '.tif', '.tiff']
    image_files = []
    
    for file in os.listdir(directory):
        file_path = os.path.join(directory, file)
        if os.path.isfile(file_path):
            ext = os.path.splitext(file)[1].lower()
            if ext in image_extensions:
                image_files.append(file_path)
    
    return image_files

def test_column_extractor(tables_dir, output_dir, column_groups=None):
    """Ki·ªÉm tra AdvancedColumnExtractor v·ªõi c√°c b·∫£ng"""
    print(f"\n--- X·ª≠ l√Ω c√°c b·∫£ng trong th∆∞ m·ª•c: {tables_dir} ---")
    
    # T·∫°o th∆∞ m·ª•c output
    columns_dir = os.path.join(output_dir, "columns")
    merged_dir = os.path.join(output_dir, "merged_columns")
    debug_dir = os.path.join(output_dir, "debug")
    ensure_dir(columns_dir)
    ensure_dir(merged_dir)
    ensure_dir(debug_dir)
    
    # Kh·ªüi t·∫°o AdvancedColumnExtractor
    extractor = AdvancedColumnExtractor(
        input_dir=tables_dir,
        output_dir=columns_dir,
        debug_dir=debug_dir
    )
    
    # N·∫øu kh√¥ng c√≥ column_groups, t·∫°o m·ªôt c·∫•u h√¨nh m·∫∑c ƒë·ªãnh
    if column_groups is None:
        column_groups = {
            "first_two": [1, 2],
            "middle": [3, 4],
            "first_three": [1, 2, 3],
            "all": [1, 2, 3, 4, 5]
        }
    
    # Li·ªát k√™ c√°c file b·∫£ng
    table_files = list_image_files(tables_dir)
    if not table_files:
        print(f"  ‚ùå Kh√¥ng t√¨m th·∫•y file b·∫£ng n√†o trong th∆∞ m·ª•c: {tables_dir}")
        return None
    
    print(f"  ‚úÖ T√¨m th·∫•y {len(table_files)} b·∫£ng")
    
    # X·ª≠ l√Ω t·ª´ng b·∫£ng
    results = []
    total_columns = 0
    total_merged = 0
    
    for table_path in table_files:
        table_name = os.path.basename(table_path)
        print(f"  üîç Tr√≠ch xu·∫•t c·ªôt t·ª´ b·∫£ng: {table_name}")
        
        try:
            # ƒê·ªçc ·∫£nh b·∫£ng
            table_img = cv2.imread(table_path)
            if table_img is None:
                print(f"    ‚ùå Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh b·∫£ng: {table_path}")
                continue
            
            # T·∫°o th∆∞ m·ª•c cho b·∫£ng n√†y
            table_columns_dir = os.path.join(columns_dir, os.path.splitext(table_name)[0])
            table_merged_dir = os.path.join(merged_dir, os.path.splitext(table_name)[0])
            ensure_dir(table_columns_dir)
            ensure_dir(table_merged_dir)
            
            # Ph√°t hi·ªán ƒë∆∞·ªùng k·∫ª d·ªçc
            gray = cv2.cvtColor(table_img, cv2.COLOR_BGR2GRAY)
            binary = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 
                                          cv2.THRESH_BINARY_INV, 15, 3)
            
            v_lines = extractor.detect_vertical_lines(binary, min_line_length_ratio=0.4)
            print(f"    ‚úÖ Ph√°t hi·ªán {len(v_lines)} ƒë∆∞·ªùng k·∫ª d·ªçc")
            
            # V·∫Ω ƒë∆∞·ªùng k·∫ª d·ªçc
            h, w = table_img.shape[:2]
            lines_img = table_img.copy()
            for x in v_lines:
                cv2.line(lines_img, (x, 0), (x, h), (0, 0, 255), 2)
            
            # L∆∞u ·∫£nh ƒë∆∞·ªùng k·∫ª d·ªçc
            lines_path = os.path.join(debug_dir, f"{os.path.splitext(table_name)[0]}_vertical_lines.jpg")
            cv2.imwrite(lines_path, lines_img)
            
            # Tr√≠ch xu·∫•t c·ªôt
            columns = []
            
            for i in range(len(v_lines) - 1):
                x1, x2 = v_lines[i], v_lines[i+1]
                
                # B·ªè qua c·ªôt qu√° h·∫πp
                if x2 - x1 < 20:
                    continue
                
                # Crop c·ªôt
                column_img = table_img[:, x1:x2]
                
                # L∆∞u c·ªôt
                column_filename = f"column_{i+1}.jpg"
                column_path = os.path.join(table_columns_dir, column_filename)
                cv2.imwrite(column_path, column_img)
                
                columns.append({
                    "id": i+1,
                    "x1": x1,
                    "x2": x2,
                    "width": x2-x1,
                    "height": h,
                    "filename": column_filename,
                    "path": column_path
                })
                
                print(f"      ‚úÖ C·ªôt {i+1}: {x2-x1}x{h}")
            
            total_columns += len(columns)
            
            # G·ªôp c·ªôt theo nh√≥m
            merged_columns = []
            
            for group_name, column_ids in column_groups.items():
                print(f"      üîÑ G·ªôp nh√≥m '{group_name}': c·ªôt {column_ids}")
                
                # T√¨m c√°c c·ªôt c·∫ßn g·ªôp
                cols_to_merge = []
                for col in columns:
                    if col["id"] in column_ids:
                        cols_to_merge.append(col)
                
                if not cols_to_merge:
                    print(f"        ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·ªôt n√†o trong nh√≥m '{group_name}'")
                    continue
                
                # S·∫Øp x·∫øp c·ªôt theo th·ª© t·ª±
                cols_to_merge.sort(key=lambda x: x["id"])
                
                # T√¨m v·ªã tr√≠ b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c
                x1 = min(col["x1"] for col in cols_to_merge)
                x2 = max(col["x2"] for col in cols_to_merge)
                
                # Crop ·∫£nh
                merged_img = table_img[:, x1:x2]
                
                # L∆∞u ·∫£nh
                merged_filename = f"{group_name}.jpg"
                merged_path = os.path.join(table_merged_dir, merged_filename)
                cv2.imwrite(merged_path, merged_img)
                
                merged_columns.append({
                    "name": group_name,
                    "x1": x1,
                    "x2": x2,
                    "width": x2-x1,
                    "height": h,
                    "columns": [col["id"] for col in cols_to_merge],
                    "filename": merged_filename,
                    "path": merged_path
                })
                
                print(f"        ‚úÖ ƒê√£ g·ªôp nh√≥m '{group_name}': {x2-x1}x{h}")
            
            total_merged += len(merged_columns)
            
            # V·∫Ω c√°c c·ªôt ƒë√£ g·ªôp
            result_img = table_img.copy()
            for merged in merged_columns:
                x1, x2 = merged["x1"], merged["x2"]
                name = merged["name"]
                cv2.rectangle(result_img, (x1, 0), (x2, h), (0, 255, 0), 2)
                cv2.putText(result_img, name, (x1+5, 30), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)
            
            # L∆∞u ·∫£nh k·∫øt qu·∫£
            result_path = os.path.join(debug_dir, f"{os.path.splitext(table_name)[0]}_merged_columns.jpg")
            cv2.imwrite(result_path, result_img)
            
            results.append({
                "table": table_path,
                "columns": columns,
                "merged_columns": merged_columns,
                "columns_dir": table_columns_dir,
                "merged_dir": table_merged_dir
            })
        
        except Exception as e:
            print(f"    ‚ùå L·ªói khi x·ª≠ l√Ω b·∫£ng: {e}")
    
    return {
        "tables_dir": tables_dir,
        "results": results,
        "total_columns": total_columns,
        "total_merged": total_merged
    }

def main():
    """H√†m ch√≠nh"""
    # Ki·ªÉm tra tham s·ªë d√≤ng l·ªánh
    if len(sys.argv) < 2:
        print("S·ª≠ d·ª•ng: python test_column_extractor.py <th∆∞_m·ª•c_ch·ª©a_b·∫£ng>")
        print("Ho·∫∑c:    python test_column_extractor.py <th∆∞_m·ª•c_ch·ª©a_b·∫£ng> <th∆∞_m·ª•c_ƒë·∫ßu_ra>")
        return
    
    # Th∆∞ m·ª•c ch·ª©a b·∫£ng ƒë·∫ßu v√†o
    tables_dir = sys.argv[1]
    if not os.path.exists(tables_dir):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c: {tables_dir}")
        return
    
    # Th∆∞ m·ª•c ƒë·∫ßu ra
    output_dir = sys.argv[2] if len(sys.argv) > 2 else "column_extractor_output"
    ensure_dir(output_dir)
    
    print(f"üöÄ KI·ªÇM TRA API ADVANCEDCOLUMNEXTRACTOR")
    print(f"üìÅ Th∆∞ m·ª•c b·∫£ng ƒë·∫ßu v√†o: {tables_dir}")
    print(f"üìÅ Th∆∞ m·ª•c ƒë·∫ßu ra: {output_dir}")
    print(f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # ƒê·ªãnh nghƒ©a nh√≥m c·ªôt
    column_groups = {
        "info": [1, 2],           # C·ªôt th√¥ng tin
        "result": [3, 4],         # C·ªôt k·∫øt qu·∫£
        "info_result": [1, 2, 3], # C·ªôt th√¥ng tin v√† k·∫øt qu·∫£ ƒë·∫ßu
        "all_data": [1, 2, 3, 4]  # T·∫•t c·∫£ d·ªØ li·ªáu
    }
    
    # Ki·ªÉm tra column extractor
    result = test_column_extractor(tables_dir, output_dir, column_groups)
    if not result:
        print("‚ùå Kh√¥ng th·ªÉ tr√≠ch xu·∫•t c·ªôt")
        return
    
    # T·ªïng k·∫øt
    print(f"\n{'='*50}")
    print("T·ªîNG K·∫æT")
    print(f"{'='*50}")
    
    print(f"üéâ HO√ÄN TH√ÄNH KI·ªÇM TRA API ADVANCEDCOLUMNEXTRACTOR!")
    print(f"‚úÖ ƒê√£ x·ª≠ l√Ω {len(result['results'])} b·∫£ng")
    print(f"‚úÖ ƒê√£ tr√≠ch xu·∫•t ƒë∆∞·ª£c t·ªïng c·ªông {result['total_columns']} c·ªôt ri√™ng l·∫ª")
    print(f"‚úÖ ƒê√£ t·∫°o ƒë∆∞·ª£c t·ªïng c·ªông {result['total_merged']} nh√≥m c·ªôt g·ªôp")
    print(f"üìÅ K·∫øt qu·∫£ l∆∞u t·∫°i: {output_dir}/")

if __name__ == "__main__":
    main() 