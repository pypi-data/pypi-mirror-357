#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Tr√≠ch xu·∫•t b·∫£ng v√† rows - S·ª≠ d·ª•ng Local Package detect-row
========================================================

Script s·ª≠ d·ª•ng package detect-row t·ª´ source code local
Kh√¥ng s·ª≠ d·ª•ng pip package do pip package b·ªã l·ªói thi·∫øu BaseRowExtractor

L∆∞u √Ω: M·∫∑c d√π c√≥ import detect_row, nh∆∞ng Python ∆∞u ti√™n local code
S·ª≠ d·ª•ng: python extract_table_local_package.py
"""

import os
import sys
import cv2
import numpy as np
import json
import re
from datetime import datetime
from typing import List, Tuple, Dict, Any
import matplotlib.pyplot as plt
import pytesseract

# FORCE s·ª≠ d·ª•ng local code thay v√¨ pip package
# Th√™m th∆∞ m·ª•c hi·ªán t·∫°i v√†o ƒë·∫ßu sys.path ƒë·ªÉ ∆∞u ti√™n local code
current_dir = os.path.dirname(os.path.abspath(__file__))
if current_dir not in sys.path:
    sys.path.insert(0, current_dir)

print(f"üîß Forced local import path: {current_dir}")
print(f"üìç sys.path[0]: {sys.path[0]}")

# Import package detect-row t·ª´ LOCAL CODE
try:
    from detect_row import AdvancedTableExtractor, AdvancedRowExtractorMain, TesseractRowExtractor
    print(f"‚úÖ Imported detect-row package from LOCAL CODE successfully")
    print(f"üìç Note: Using local source code, not pip package (pip package has BaseRowExtractor issue)")
except ImportError as e:
    print(f"‚ùå Import error: {e}")
    print("üí° ƒê·∫£m b·∫£o th∆∞ m·ª•c detect_row/ t·ªìn t·∫°i v·ªõi ƒë·∫ßy ƒë·ªß source code")
    print(f"üîç Current directory: {current_dir}")
    print(f"üîç detect_row path exists: {os.path.exists(os.path.join(current_dir, 'detect_row'))}")
    exit(1)

def ensure_dir(path: str):
    """T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥"""
    os.makedirs(path, exist_ok=True)
    print(f"üìÅ Created directory: {path}")

def extract_rows_from_table(table_image_path: str, table_name: str, output_base: str) -> Dict[str, Any]:
    """
    Tr√≠ch xu·∫•t rows t·ª´ m·ªôt b·∫£ng s·ª≠ d·ª•ng detect-row package
    
    Args:
        table_image_path: ƒê∆∞·ªùng d·∫´n ·∫£nh b·∫£ng
        table_name: T√™n b·∫£ng
        output_base: Th∆∞ m·ª•c output
    
    Returns:
        Dict: Th√¥ng tin k·∫øt qu·∫£ tr√≠ch xu·∫•t
    """
    print(f"\n--- X·ª≠ l√Ω {table_name} ---")
    
    # ƒê·ªçc ·∫£nh b·∫£ng
    table_image = cv2.imread(table_image_path)
    if table_image is None:
        print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc {table_image_path}")
        return {"error": "Cannot read image"}
    
    # S·ª≠ d·ª•ng AdvancedRowExtractorMain ƒë·ªÉ tr√≠ch xu·∫•t rows
    print("üîç S·ª≠ d·ª•ng AdvancedRowExtractorMain...")
    row_extractor = AdvancedRowExtractorMain()
    
    try:
        # Tr√≠ch xu·∫•t rows
        rows_result = row_extractor.extract_rows_from_table(table_image, table_name)
        
        print(f"üîç K·∫øt qu·∫£ tr√≠ch xu·∫•t: {type(rows_result)}")
        
        # X·ª≠ l√Ω k·∫øt qu·∫£ d·ª±a tr√™n c·∫•u tr√∫c th·ª±c t·∫ø
        rows = []
        if isinstance(rows_result, dict):
            if 'rows' in rows_result:
                rows = rows_result['rows']
            elif 'extracted_rows' in rows_result:
                rows = rows_result['extracted_rows']
            else:
                # N·∫øu kh√¥ng c√≥ key c·ª• th·ªÉ, th·ª≠ l·∫•y t·∫•t c·∫£ values l√† list
                for key, value in rows_result.items():
                    if isinstance(value, list) and len(value) > 0:
                        rows = value
                        break
        elif isinstance(rows_result, list):
            rows = rows_result
        
        if not rows:
            print("‚ö†Ô∏è Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c rows")
            print(f"üîç C·∫•u tr√∫c k·∫øt qu·∫£: {rows_result}")
            return {"error": "No rows extracted", "debug_info": str(rows_result)}
        
        print(f"‚úÖ Tr√≠ch xu·∫•t ƒë∆∞·ª£c {len(rows)} rows")
        
        # L∆∞u t·ª´ng row
        saved_files = []
        rows_dir = os.path.join(output_base, "rows")
        
        for i, row_data in enumerate(rows):
            row_image = None
            
            # X·ª≠ l√Ω c√°c c·∫•u tr√∫c d·ªØ li·ªáu kh√°c nhau
            if isinstance(row_data, dict):
                if 'image' in row_data:
                    row_image = row_data['image']
                elif 'row_image' in row_data:
                    row_image = row_data['row_image']
                else:
                    # T√¨m key ch·ª©a image data
                    for key, value in row_data.items():
                        if isinstance(value, np.ndarray) and len(value.shape) >= 2:
                            row_image = value
                            break
            elif isinstance(row_data, np.ndarray):
                row_image = row_data
            
            if row_image is not None:
                filename = f"{table_name}_row_{i:02d}.jpg"
                filepath = os.path.join(rows_dir, filename)
                
                cv2.imwrite(filepath, row_image)
                saved_files.append(filepath)
                print(f"üíæ ƒê√£ l∆∞u: {filename}")
            else:
                print(f"‚ö†Ô∏è Row {i}: Kh√¥ng t√¨m th·∫•y image data")
        
        # OCR cho t·ª´ng row
        print("üî§ Th·ª±c hi·ªán OCR c·ªôt ƒë·∫ßu ti√™n (STT) cho c√°c rows...")
        ocr_results = []
        
        for i, row_data in enumerate(rows):
            row_image = None
            bbox = []
            
            # X·ª≠ l√Ω c√°c c·∫•u tr√∫c d·ªØ li·ªáu kh√°c nhau
            if isinstance(row_data, dict):
                if 'image' in row_data:
                    row_image = row_data['image']
                elif 'row_image' in row_data:
                    row_image = row_data['row_image']
                else:
                    # T√¨m key ch·ª©a image data
                    for key, value in row_data.items():
                        if isinstance(value, np.ndarray) and len(value.shape) >= 2:
                            row_image = value
                            break
                
                bbox = row_data.get('bbox', row_data.get('coordinates', []))
            elif isinstance(row_data, np.ndarray):
                row_image = row_data
            
            if row_image is not None:
                try:
                    # Ph√°t hi·ªán ƒë∆∞·ªùng g·∫°ch d·ªçc ƒë·ªÉ c·∫Øt c·ªôt ƒë·∫ßu ti√™n ch√≠nh x√°c
                    height, width = row_image.shape[:2]
                    
                    # Chuy·ªÉn sang grayscale n·∫øu c·∫ßn
                    if len(row_image.shape) == 3:
                        gray = cv2.cvtColor(row_image, cv2.COLOR_BGR2GRAY)
                    else:
                        gray = row_image.copy()
                    
                    # Ph√°t hi·ªán ƒë∆∞·ªùng th·∫≥ng d·ªçc b·∫±ng HoughLinesP
                    edges = cv2.Canny(gray, 50, 150, apertureSize=3)
                    
                    # T√¨m ƒë∆∞·ªùng th·∫≥ng d·ªçc
                    lines = cv2.HoughLinesP(edges, 1, np.pi/180, threshold=int(height*0.3), 
                                          minLineLength=int(height*0.5), maxLineGap=10)
                    
                    vertical_lines = []
                    if lines is not None:
                        for line in lines:
                            x1, y1, x2, y2 = line[0]
                            # Ki·ªÉm tra ƒë∆∞·ªùng th·∫≥ng d·ªçc (g√≥c g·∫ßn 90 ƒë·ªô)
                            if abs(x2 - x1) < 10:  # ƒê∆∞·ªùng g·∫ßn nh∆∞ th·∫≥ng ƒë·ª©ng
                                vertical_lines.append((x1 + x2) // 2)  # L·∫•y t·ªça ƒë·ªô x trung b√¨nh
                    
                    # T√¨m ƒë∆∞·ªùng g·∫°ch d·ªçc ƒë·∫ßu ti√™n (g·∫ßn nh·∫•t v·ªõi b√™n tr√°i)
                    if vertical_lines:
                        vertical_lines.sort()
                        # L·ªçc c√°c ƒë∆∞·ªùng qu√° g·∫ßn b√™n tr√°i (c√≥ th·ªÉ l√† vi·ªÅn b·∫£ng)
                        valid_lines = [x for x in vertical_lines if x > width * 0.05]
                        
                        if valid_lines:
                            first_column_width = valid_lines[0]
                            print(f"üîç Ph√°t hi·ªán ƒë∆∞·ªùng g·∫°ch d·ªçc t·∫°i x={first_column_width}px")
                        else:
                            # Fallback: s·ª≠ d·ª•ng 20% n·∫øu kh√¥ng t√¨m th·∫•y ƒë∆∞·ªùng g·∫°ch d·ªçc h·ª£p l·ªá
                            first_column_width = int(width * 0.2)
                            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ƒë∆∞·ªùng g·∫°ch d·ªçc, s·ª≠ d·ª•ng 20% chi·ªÅu r·ªông: {first_column_width}px")
                    else:
                        # Fallback: s·ª≠ d·ª•ng 20% n·∫øu kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c ƒë∆∞·ªùng g·∫°ch d·ªçc
                        first_column_width = int(width * 0.2)
                        print(f"‚ö†Ô∏è Kh√¥ng ph√°t hi·ªán ƒë∆∞·ªùng g·∫°ch d·ªçc, s·ª≠ d·ª•ng 20% chi·ªÅu r·ªông: {first_column_width}px")
                    
                    # C·∫Øt c·ªôt ƒë·∫ßu ti√™n
                    first_column = row_image[:, :first_column_width]
                    
                    # L∆∞u c·ªôt ƒë·∫ßu ti√™n ƒë·ªÉ debug
                    first_col_filename = f"{table_name}_row_{i:02d}_stt.jpg"
                    first_col_path = os.path.join(output_base, "rows", first_col_filename)
                    cv2.imwrite(first_col_path, first_column)
                    
                    # OCR c·ªôt ƒë·∫ßu ti√™n b·∫±ng pytesseract tr·ª±c ti·∫øp
                    import pytesseract
                    
                    # C·∫•u h√¨nh OCR cho s·ªë
                    custom_config = r'--oem 3 --psm 8 -c tessedit_char_whitelist=0123456789'
                    stt_text = pytesseract.image_to_string(first_column, config=custom_config).strip()
                    
                    # L·ªçc ch·ªâ l·∫•y s·ªë
                    import re
                    stt_numbers = re.findall(r'\d+', stt_text)
                    stt = stt_numbers[0] if stt_numbers else ""
                    
                    row_ocr = {
                        "row_index": i,
                        "filename": f"{table_name}_row_{i:02d}.jpg",
                        "first_column_file": first_col_filename,
                        "stt": stt,
                        "raw_ocr_text": stt_text,
                        "bbox": bbox,
                        "first_column_width": first_column_width
                    }
                    ocr_results.append(row_ocr)
                    
                    if stt:
                        print(f"üìù Row {i}: STT = {stt}")
                    else:
                        print(f"‚ö†Ô∏è Row {i}: Kh√¥ng ph√°t hi·ªán STT (raw: '{stt_text}')")
                        
                except Exception as ocr_error:
                    print(f"‚ö†Ô∏è L·ªói OCR row {i}: {ocr_error}")
                    row_ocr = {
                        "row_index": i,
                        "filename": f"{table_name}_row_{i:02d}.jpg",
                        "first_column_file": "",
                        "stt": "",
                        "raw_ocr_text": "",
                        "bbox": bbox,
                        "error": str(ocr_error)
                    }
                    ocr_results.append(row_ocr)
        
        # L∆∞u k·∫øt qu·∫£ OCR
        ocr_file = os.path.join(output_base, "ocr", f"{table_name}_ocr.json")
        with open(ocr_file, 'w', encoding='utf-8') as f:
            json.dump(ocr_results, f, indent=2, ensure_ascii=False)
        
        return {
            "table_name": table_name,
            "total_rows": len(rows),
            "saved_files": saved_files,
            "ocr_results": ocr_results,
            "success": True
        }
        
    except Exception as e:
        print(f"‚ùå L·ªói khi tr√≠ch xu·∫•t rows: {e}")
        return {"error": str(e)}

def create_summary_visualization(all_results: List[Dict], output_path: str):
    """
    T·∫°o visualization t·ªïng h·ª£p
    
    Args:
        all_results: Danh s√°ch k·∫øt qu·∫£ t·ª´ t·∫•t c·∫£ b·∫£ng
        output_path: ƒê∆∞·ªùng d·∫´n l∆∞u visualization
    """
    fig, axes = plt.subplots(1, 2, figsize=(15, 6))
    
    # Bi·ªÉu ƒë·ªì s·ªë rows theo b·∫£ng
    table_names = []
    row_counts = []
    
    for result in all_results:
        if result.get('success'):
            table_names.append(result['table_name'])
            row_counts.append(result['total_rows'])
    
    if table_names:
        axes[0].bar(table_names, row_counts, alpha=0.7, color='skyblue')
        axes[0].set_title('S·ªë Rows theo B·∫£ng')
        axes[0].set_xlabel('B·∫£ng')
        axes[0].set_ylabel('S·ªë Rows')
        axes[0].grid(True, alpha=0.3)
        
        # Th√™m s·ªë li·ªáu tr√™n c·ªôt
        for i, count in enumerate(row_counts):
            axes[0].text(i, count + 0.5, str(count), ha='center', fontweight='bold')
    
    # Bi·ªÉu ƒë·ªì t·ªïng h·ª£p
    total_tables = len([r for r in all_results if r.get('success')])
    total_rows = sum(r.get('total_rows', 0) for r in all_results if r.get('success'))
    
    categories = ['B·∫£ng', 'Rows']
    values = [total_tables, total_rows]
    colors = ['lightcoral', 'lightgreen']
    
    axes[1].bar(categories, values, color=colors, alpha=0.7)
    axes[1].set_title('T·ªïng H·ª£p K·∫øt Qu·∫£')
    axes[1].set_ylabel('S·ªë L∆∞·ª£ng')
    axes[1].grid(True, alpha=0.3)
    
    # Th√™m s·ªë li·ªáu tr√™n c·ªôt
    for i, value in enumerate(values):
        axes[1].text(i, value + max(values) * 0.02, str(value), ha='center', fontweight='bold')
    
    plt.tight_layout()
    plt.savefig(output_path, dpi=150, bbox_inches='tight')
    plt.close()
    
    print(f"üìä ƒê√£ l∆∞u visualization t·ªïng h·ª£p: {output_path}")

def main():
    """H√†m ch√≠nh"""
    image_path = "image0524.png"
    output_base = "pip_package_extraction_output"
    
    print(f"üöÄ TR√çCH XU·∫§T B·∫¢NG S·ª¨ D·ª§NG LOCAL PACKAGE DETECT-ROW")
    print(f"üì∏ ·∫¢nh ƒë·∫ßu v√†o: {image_path}")
    print(f"üìÅ Th∆∞ m·ª•c ƒë·∫ßu ra: {output_base}")
    print(f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üì¶ Package: detect-row (t·ª´ LOCAL CODE)")
    
    if not os.path.exists(image_path):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh: {image_path}")
        return
    
    # T·∫°o th∆∞ m·ª•c output
    ensure_dir(output_base)
    ensure_dir(f"{output_base}/tables")
    ensure_dir(f"{output_base}/rows")
    ensure_dir(f"{output_base}/ocr")
    ensure_dir(f"{output_base}/analysis")
    
    # B∆∞·ªõc 1: Tr√≠ch xu·∫•t b·∫£ng b·∫±ng AdvancedTableExtractor
    print(f"\n{'='*60}")
    print("B∆Ø·ªöC 1: TR√çCH XU·∫§T B·∫¢NG B·∫∞NG ADVANCEDTABLEEXTRACTOR")
    print(f"{'='*60}")
    
    table_extractor = AdvancedTableExtractor(
        input_dir=os.path.dirname(image_path),
        output_dir=f"{output_base}/tables"
    )
    
    # Tr√≠ch xu·∫•t b·∫£ng
    result = table_extractor.process_image(image_path, margin=5, check_text=True)
    
    # T√¨m c√°c b·∫£ng ƒë√£ tr√≠ch xu·∫•t
    table_files = []
    tables_dir = f"{output_base}/tables"
    
    if os.path.exists(tables_dir):
        table_files = [f for f in os.listdir(tables_dir) if f.endswith('.jpg')]
        table_files.sort()
    
    if not table_files:
        print("‚ùå Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c b·∫£ng n√†o!")
        return
    
    print(f"‚úÖ Tr√≠ch xu·∫•t ƒë∆∞·ª£c {len(table_files)} b·∫£ng")
    
    # B∆∞·ªõc 2: Tr√≠ch xu·∫•t rows cho t·ª´ng b·∫£ng
    print(f"\n{'='*60}")
    print("B∆Ø·ªöC 2: TR√çCH XU·∫§T ROWS B·∫∞NG ADVANCEDROWEXTRACTORMAIN")
    print(f"{'='*60}")
    
    all_results = []
    
    for table_file in table_files:
        table_path = os.path.join(tables_dir, table_file)
        table_name = os.path.splitext(table_file)[0]
        
        # Tr√≠ch xu·∫•t rows t·ª´ b·∫£ng
        result = extract_rows_from_table(table_path, table_name, output_base)
        all_results.append(result)
    
    # B∆∞·ªõc 3: T·∫°o b√°o c√°o t·ªïng h·ª£p
    print(f"\n{'='*60}")
    print("B∆Ø·ªöC 3: B√ÅO C√ÅO T·ªîNG H·ª¢P")
    print(f"{'='*60}")
    
    successful_results = [r for r in all_results if r.get('success')]
    total_tables = len(successful_results)
    total_rows = sum(r.get('total_rows', 0) for r in successful_results)
    
    # T·∫°o visualization
    viz_path = os.path.join(output_base, "analysis", "summary_visualization.png")
    create_summary_visualization(all_results, viz_path)
    
    # L∆∞u b√°o c√°o JSON
    summary = {
        "timestamp": datetime.now().isoformat(),
        "method": "Local Package detect-row",
        "package_version": "detect-row from LOCAL CODE",
        "total_tables": total_tables,
        "total_rows_extracted": total_rows,
        "results": all_results
    }
    
    summary_file = os.path.join(output_base, "pip_package_summary.json")
    with open(summary_file, 'w', encoding='utf-8') as f:
        json.dump(summary, f, indent=2, ensure_ascii=False)
    
    # B√°o c√°o text
    report_file = os.path.join(output_base, "local_package_report.txt")
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write("B√ÅO C√ÅO TR√çCH XU·∫§T B·∫¢NG - LOCAL PACKAGE DETECT-ROW\n")
        f.write("=" * 60 + "\n\n")
        f.write(f"Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"Package: detect-row (t·ª´ LOCAL CODE)\n")
        f.write(f"T·ªïng s·ªë b·∫£ng: {total_tables}\n")
        f.write(f"T·ªïng s·ªë rows: {total_rows}\n\n")
        
        f.write("CHI TI·∫æT:\n")
        f.write("-" * 30 + "\n")
        for result in successful_results:
            f.write(f"\nB·∫£ng: {result['table_name']}\n")
            f.write(f"  Rows tr√≠ch xu·∫•t: {result['total_rows']}\n")
            f.write(f"  Files l∆∞u: {len(result['saved_files'])}\n")
            
            # OCR results
            ocr_results = result.get('ocr_results', [])
            stt_rows = [r for r in ocr_results if r.get('stt', '').strip()]
            f.write(f"  Rows c√≥ STT: {len(stt_rows)}\n")
    
    # T·ªïng k·∫øt
    print(f"üéâ HO√ÄN TH√ÄNH TR√çCH XU·∫§T S·ª¨ D·ª§NG PACKAGE DETECT-ROW!")
    print(f"‚úÖ ƒê√£ x·ª≠ l√Ω: {total_tables} b·∫£ng")
    print(f"‚úÖ ƒê√£ tr√≠ch xu·∫•t: {total_rows} rows")
    print(f"üì¶ S·ª≠ d·ª•ng: detect-row package t·ª´ PyPI")
    print(f"üìÅ K·∫øt qu·∫£ l∆∞u t·∫°i: {output_base}/")
    print(f"  üìä B·∫£ng: {output_base}/tables/")
    print(f"  üìã Rows: {output_base}/rows/")
    print(f"  üî§ OCR: {output_base}/ocr/")
    print(f"  üìà Ph√¢n t√≠ch: {output_base}/analysis/")
    
    # Hi·ªÉn th·ªã danh s√°ch rows
    rows_dir = f"{output_base}/rows"
    if os.path.exists(rows_dir):
        row_files = sorted([f for f in os.listdir(rows_dir) if f.endswith('.jpg')])
        if row_files:
            print(f"\nüìã {len(row_files)} rows ƒë√£ tr√≠ch xu·∫•t:")
            for row_file in row_files[:10]:  # Hi·ªÉn th·ªã 10 file ƒë·∫ßu
                print(f"  - {row_file}")
            if len(row_files) > 10:
                print(f"  ... v√† {len(row_files) - 10} files kh√°c")
    
    # Hi·ªÉn th·ªã m·ªôt s·ªë k·∫øt qu·∫£ OCR STT
    print(f"\nüî§ M·ªòT S·ªê K·∫æT QU·∫¢ OCR STT:")
    for result in successful_results[:2]:  # Hi·ªÉn th·ªã 2 b·∫£ng ƒë·∫ßu
        ocr_results = result.get('ocr_results', [])
        stt_rows = [r for r in ocr_results if r.get('stt', '').strip()][:5]  # 5 rows ƒë·∫ßu c√≥ STT
        
        if stt_rows:
            print(f"\nüìã {result['table_name']}:")
            for row in stt_rows:
                stt = row['stt']
                raw_text = row.get('raw_ocr_text', '')
                print(f"  Row {row['row_index']}: STT = {stt} (raw: '{raw_text}')")
        else:
            print(f"\nüìã {result['table_name']}: Ch∆∞a ph√°t hi·ªán STT n√†o")

if __name__ == "__main__":
    main() 