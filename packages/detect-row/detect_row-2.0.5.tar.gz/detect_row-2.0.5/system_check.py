#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SCRIPT KI·ªÇM TRA H·ªÜ TH·ªêNG HO√ÄN CH·ªàNH
======================================

Ki·ªÉm tra t·∫•t c·∫£ c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt cho h·ªá th·ªëng tr√≠ch xu·∫•t b·∫£ng:
- Dependencies v√† packages
- GPU support v√† CUDA
- Memory v√† storage
- Input/output directories  
- Configuration files
- Sample data

C√°ch s·ª≠ d·ª•ng:
    python system_check.py
    python system_check.py --detailed
    python system_check.py --fix-issues
"""

import os
import sys
import json
import platform
import subprocess
import importlib
import logging
import argparse
from pathlib import Path
import psutil
import cv2
import numpy as np

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class SystemChecker:
    """Ki·ªÉm tra h·ªá th·ªëng ho√†n ch·ªânh"""
    
    def __init__(self, detailed=False, fix_issues=False):
        self.detailed = detailed
        self.fix_issues = fix_issues
        self.issues = []
        self.warnings = []
        self.successes = []
        
    def print_header(self, title):
        """In header ƒë·∫πp"""
        print(f"\n{'='*60}")
        print(f"üîç {title}")
        print(f"{'='*60}")
    
    def print_status(self, message, status="info", details=None):
        """In status v·ªõi m√†u s·∫Øc"""
        icons = {
            "success": "‚úÖ",
            "warning": "‚ö†Ô∏è", 
            "error": "‚ùå",
            "info": "‚ÑπÔ∏è"
        }
        
        icon = icons.get(status, "‚ÑπÔ∏è")
        print(f"{icon} {message}")
        
        if details and self.detailed:
            print(f"   ‚îî‚îÄ {details}")
            
        # Track issues
        if status == "error":
            self.issues.append(message)
        elif status == "warning":
            self.warnings.append(message)
        elif status == "success":
            self.successes.append(message)
    
    def check_python_version(self):
        """Ki·ªÉm tra phi√™n b·∫£n Python"""
        self.print_header("KI·ªÇM TRA PYTHON")
        
        version = sys.version_info
        version_str = f"{version.major}.{version.minor}.{version.micro}"
        
        if version.major == 3 and version.minor >= 8:
            self.print_status(f"Python {version_str}", "success")
        elif version.major == 3 and version.minor >= 6:
            self.print_status(f"Python {version_str} (khuy·∫øn ngh·ªã >= 3.8)", "warning")
        else:
            self.print_status(f"Python {version_str} kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£", "error")
        
        # Platform info
        self.print_status(f"Platform: {platform.system()} {platform.release()}", "info")
        self.print_status(f"Architecture: {platform.machine()}", "info")
    
    def check_dependencies(self):
        """Ki·ªÉm tra c√°c dependencies"""
        self.print_header("KI·ªÇM TRA DEPENDENCIES")
        
        # Core dependencies
        required_packages = {
            'cv2': 'opencv-python',
            'numpy': 'numpy', 
            'PIL': 'Pillow',
            'scipy': 'scipy',
            'skimage': 'scikit-image'
        }
        
        # Optional dependencies
        optional_packages = {
            'torch': 'torch',
            'torchvision': 'torchvision',
            'psutil': 'psutil',
            'matplotlib': 'matplotlib'
        }
        
        # Check required
        for module, package in required_packages.items():
            try:
                mod = importlib.import_module(module)
                version = getattr(mod, '__version__', 'unknown')
                self.print_status(f"{package}: {version}", "success")
            except ImportError:
                self.print_status(f"{package}: Ch∆∞a c√†i ƒë·∫∑t", "error")
                if self.fix_issues:
                    self._install_package(package)
        
        # Check optional  
        for module, package in optional_packages.items():
            try:
                mod = importlib.import_module(module)
                version = getattr(mod, '__version__', 'unknown')
                self.print_status(f"{package}: {version}", "success")
            except ImportError:
                self.print_status(f"{package}: Kh√¥ng c√≥ (t√πy ch·ªçn)", "warning")
    
    def check_gpu_support(self):
        """Ki·ªÉm tra GPU support"""
        self.print_header("KI·ªÇM TRA GPU SUPPORT")
        
        # Check CUDA
        try:
            result = subprocess.run(['nvidia-smi'], 
                                   capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                lines = result.stdout.split('\n')
                for line in lines:
                    if 'Driver Version' in line:
                        driver_info = line.strip()
                        self.print_status(f"NVIDIA GPU detected: {driver_info}", "success")
                        break
            else:
                self.print_status("nvidia-smi kh√¥ng kh·∫£ d·ª•ng", "warning")
        except (subprocess.TimeoutExpired, FileNotFoundError):
            self.print_status("NVIDIA GPU kh√¥ng ph√°t hi·ªán", "warning")
        
        # Check PyTorch CUDA
        try:
            import torch
            if torch.cuda.is_available():
                device_count = torch.cuda.device_count()
                current_device = torch.cuda.current_device()
                device_name = torch.cuda.get_device_name(current_device)
                
                self.print_status(f"PyTorch CUDA: C√≥ ({device_count} GPU)", "success")
                self.print_status(f"Current GPU: {device_name}", "info")
                
                # Memory info
                memory_info = torch.cuda.get_device_properties(current_device)
                memory_gb = memory_info.total_memory / (1024**3)
                self.print_status(f"GPU Memory: {memory_gb:.1f}GB", "info")
                
            else:
                self.print_status("PyTorch CUDA: Kh√¥ng kh·∫£ d·ª•ng", "warning")
        except ImportError:
            self.print_status("PyTorch: Ch∆∞a c√†i ƒë·∫∑t", "warning")
    
    def check_memory_storage(self):
        """Ki·ªÉm tra memory v√† storage"""
        self.print_header("KI·ªÇM TRA MEMORY & STORAGE")
        
        # System memory
        memory = psutil.virtual_memory()
        memory_gb = memory.total / (1024**3)
        used_percent = memory.percent
        
        if memory_gb >= 8:
            self.print_status(f"RAM: {memory_gb:.1f}GB (s·ª≠ d·ª•ng {used_percent:.1f}%)", "success")
        elif memory_gb >= 4:
            self.print_status(f"RAM: {memory_gb:.1f}GB (khuy·∫øn ngh·ªã ‚â•8GB)", "warning")
        else:
            self.print_status(f"RAM: {memory_gb:.1f}GB (kh√¥ng ƒë·ªß)", "error")
        
        # Disk space
        disk = psutil.disk_usage('.')
        disk_free_gb = disk.free / (1024**3)
        
        if disk_free_gb >= 5:
            self.print_status(f"Disk free: {disk_free_gb:.1f}GB", "success")
        elif disk_free_gb >= 1:
            self.print_status(f"Disk free: {disk_free_gb:.1f}GB (khuy·∫øn ngh·ªã ‚â•5GB)", "warning")
        else:
            self.print_status(f"Disk free: {disk_free_gb:.1f}GB (kh√¥ng ƒë·ªß)", "error")
        
        # CPU info
        cpu_count = psutil.cpu_count()
        cpu_percent = psutil.cpu_percent(interval=1)
        self.print_status(f"CPU: {cpu_count} cores (s·ª≠ d·ª•ng {cpu_percent:.1f}%)", "info")
    
    def check_directories(self):
        """Ki·ªÉm tra c·∫•u tr√∫c th∆∞ m·ª•c"""
        self.print_header("KI·ªÇM TRA THU M·ª§C")
        
        required_dirs = [
            'input',
            'output', 
            'debug',
            'detect_row'
        ]
        
        for dir_name in required_dirs:
            if os.path.exists(dir_name):
                self.print_status(f"Th∆∞ m·ª•c {dir_name}/", "success")
            else:
                self.print_status(f"Th∆∞ m·ª•c {dir_name}/ kh√¥ng t·ªìn t·∫°i", "warning")
                if self.fix_issues:
                    os.makedirs(dir_name, exist_ok=True)
                    self.print_status(f"ƒê√£ t·∫°o th∆∞ m·ª•c {dir_name}/", "success")
        
        # Check permissions
        for dir_name in ['input', 'output', 'debug']:
            if os.path.exists(dir_name):
                if os.access(dir_name, os.W_OK):
                    self.print_status(f"Quy·ªÅn ghi {dir_name}/", "success")
                else:
                    self.print_status(f"Kh√¥ng c√≥ quy·ªÅn ghi {dir_name}/", "error")
    
    def check_config_files(self):
        """Ki·ªÉm tra config files"""
        self.print_header("KI·ªÇM TRA CONFIG FILES")
        
        config_files = [
            'config_template.json',
            'requirements.txt',
            'setup.py'
        ]
        
        for config_file in config_files:
            if os.path.exists(config_file):
                try:
                    if config_file.endswith('.json'):
                        with open(config_file, 'r') as f:
                            json.load(f)
                    self.print_status(f"Config {config_file}", "success")
                except json.JSONDecodeError:
                    self.print_status(f"Config {config_file} (JSON kh√¥ng h·ª£p l·ªá)", "error")
                except Exception as e:
                    self.print_status(f"Config {config_file} (l·ªói: {e})", "error")
            else:
                self.print_status(f"Config {config_file} kh√¥ng t·ªìn t·∫°i", "warning")
    
    def check_sample_data(self):
        """Ki·ªÉm tra sample data"""
        self.print_header("KI·ªÇM TRA SAMPLE DATA")
        
        input_dir = Path('input')
        if input_dir.exists():
            image_files = list(input_dir.glob('*.jpg')) + \
                         list(input_dir.glob('*.png')) + \
                         list(input_dir.glob('*.jpeg'))
            
            if image_files:
                self.print_status(f"T√¨m th·∫•y {len(image_files)} ·∫£nh m·∫´u", "success")
                
                # Check first image
                first_image = image_files[0]
                try:
                    img = cv2.imread(str(first_image))
                    if img is not None:
                        h, w = img.shape[:2]
                        self.print_status(f"·∫¢nh m·∫´u: {first_image.name} ({w}x{h})", "info")
                    else:
                        self.print_status(f"Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh {first_image.name}", "error")
                except Exception as e:
                    self.print_status(f"L·ªói ƒë·ªçc ·∫£nh: {e}", "error")
            else:
                self.print_status("Kh√¥ng c√≥ ·∫£nh m·∫´u trong input/", "warning")
                if self.fix_issues:
                    self._create_sample_image()
        else:
            self.print_status("Th∆∞ m·ª•c input/ kh√¥ng t·ªìn t·∫°i", "error")
    
    def check_core_modules(self):
        """Ki·ªÉm tra core modules c·ªßa package"""
        self.print_header("KI·ªÇM TRA CORE MODULES")
        
        core_modules = [
            'detect_row/__init__.py',
            'detect_row/base.py',
            'detect_row/advanced_table_extractor.py',
            'detect_row/advanced_row_extractor.py', 
            'detect_row/advanced_column_extractor.py',
            'detect_row/gpu_support.py'
        ]
        
        for module_path in core_modules:
            if os.path.exists(module_path):
                try:
                    with open(module_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                        if len(content) > 100:  # Basic check
                            self.print_status(f"Module {module_path}", "success")
                        else:
                            self.print_status(f"Module {module_path} (qu√° ng·∫Øn)", "warning")
                except Exception as e:
                    self.print_status(f"Module {module_path} (l·ªói: {e})", "error")
            else:
                self.print_status(f"Module {module_path} kh√¥ng t·ªìn t·∫°i", "error")
    
    def test_basic_functionality(self):
        """Test ch·ª©c nƒÉng c∆° b·∫£n"""
        self.print_header("TEST CH·ª®C NƒÇNG C∆† B·∫¢N")
        
        try:
            # Test import package
            sys.path.insert(0, '.')
            from detect_row import AdvancedTableExtractor
            self.print_status("Import AdvancedTableExtractor", "success")
            
            # Test t·∫°o instance
            extractor = AdvancedTableExtractor(
                input_dir="input",
                output_dir="output/test",
                debug_dir="debug/test"
            )
            self.print_status("T·∫°o TableExtractor instance", "success")
            
        except ImportError as e:
            self.print_status(f"L·ªói import: {e}", "error")
        except Exception as e:
            self.print_status(f"L·ªói test: {e}", "error")
    
    def _install_package(self, package):
        """C√†i ƒë·∫∑t package"""
        try:
            subprocess.run([sys.executable, '-m', 'pip', 'install', package], 
                          check=True, capture_output=True)
            self.print_status(f"ƒê√£ c√†i ƒë·∫∑t {package}", "success")
        except subprocess.CalledProcessError:
            self.print_status(f"L·ªói c√†i ƒë·∫∑t {package}", "error")
    
    def _create_sample_image(self):
        """T·∫°o ·∫£nh m·∫´u"""
        try:
            # T·∫°o ·∫£nh tr·∫Øng ƒë∆°n gi·∫£n v·ªõi text
            img = np.ones((600, 800, 3), dtype=np.uint8) * 255
            cv2.putText(img, 'Sample Table Image', (50, 50), 
                       cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 0), 2)
            
            # V·∫Ω khung b·∫£ng ƒë∆°n gi·∫£n
            cv2.rectangle(img, (50, 100), (750, 400), (0, 0, 0), 2)
            cv2.line(img, (50, 200), (750, 200), (0, 0, 0), 1)
            cv2.line(img, (250, 100), (250, 400), (0, 0, 0), 1)
            cv2.line(img, (500, 100), (500, 400), (0, 0, 0), 1)
            
            # Save
            cv2.imwrite('input/sample_table.jpg', img)
            self.print_status("ƒê√£ t·∫°o ·∫£nh m·∫´u sample_table.jpg", "success")
            
        except Exception as e:
            self.print_status(f"L·ªói t·∫°o ·∫£nh m·∫´u: {e}", "error")
    
    def print_summary(self):
        """In t√≥m t·∫Øt k·∫øt qu·∫£"""
        self.print_header("T√ìM T·∫ÆT K·∫æT QU·∫¢")
        
        print(f"‚úÖ Th√†nh c√¥ng: {len(self.successes)}")
        print(f"‚ö†Ô∏è  C·∫£nh b√°o: {len(self.warnings)}") 
        print(f"‚ùå L·ªói: {len(self.issues)}")
        
        if self.issues:
            print(f"\nüö® C√ÅC V·∫§N ƒê·ªÄ C·∫¶N S·ª¨A:")
            for issue in self.issues:
                print(f"   ‚Ä¢ {issue}")
        
        if self.warnings:
            print(f"\n‚ö†Ô∏è  C√ÅC C·∫¢NH B√ÅO:")
            for warning in self.warnings:
                print(f"   ‚Ä¢ {warning}")
        
        # ƒê√°nh gi√° t·ªïng th·ªÉ
        if not self.issues:
            if not self.warnings:
                print(f"\nüéâ H·ªÜ TH·ªêNG HO√ÄN H·∫¢O! S·∫µn s√†ng s·ª≠ d·ª•ng.")
            else:
                print(f"\n‚úÖ H·ªÜ TH·ªêNG OK! C√≥ m·ªôt s·ªë c·∫£nh b√°o nh·ªè.")
        else:
            print(f"\nüîß H·ªÜ TH·ªêNG C·∫¶N S·ª¨A! Vui l√≤ng x·ª≠ l√Ω c√°c l·ªói tr√™n.")
    
    def run_full_check(self):
        """Ch·∫°y ki·ªÉm tra to√†n b·ªô"""
        print("üöÄ KI·ªÇM TRA H·ªÜ TH·ªêNG TR√çCH XU·∫§T B·∫¢NG")
        print("=" * 60)
        
        self.check_python_version()
        self.check_dependencies()
        self.check_gpu_support()
        self.check_memory_storage()
        self.check_directories()
        self.check_config_files()
        self.check_sample_data()
        self.check_core_modules()
        self.test_basic_functionality()
        
        self.print_summary()

def main():
    """Main function"""
    parser = argparse.ArgumentParser(description='Ki·ªÉm tra h·ªá th·ªëng tr√≠ch xu·∫•t b·∫£ng')
    parser.add_argument('--detailed', action='store_true', 
                       help='Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt')
    parser.add_argument('--fix-issues', action='store_true',
                       help='T·ª± ƒë·ªông s·ª≠a m·ªôt s·ªë v·∫•n ƒë·ªÅ')
    
    args = parser.parse_args()
    
    checker = SystemChecker(detailed=args.detailed, fix_issues=args.fix_issues)
    checker.run_full_check()

if __name__ == "__main__":
    main() 