// AUTO-GENERATED FILE - DO NOT EDIT
#[allow(unused_imports)]
use super::FontMetrics;
use lazy_static::lazy_static;
use std::collections::HashMap;

lazy_static! {
    pub static ref AvantGarde_BookOblique: FontMetrics = FontMetrics {
        ascent: 740.0,
        descent: -192.0,
        cap_height: 740.0,
        x_height: 547.0,
        italic_angle: -10.5,
        bbox: (-113.0, -222.0, 1279.0, 955.0),
        flags: 64,
        font_family: "ITC".to_string(),
        font_weight: "Book".to_string(),
        glyph_widths: vec![
(73, 226.0),(183, 606.0),(92, 605.0),(79, 869.0),(66, 574.0),(103, 673.0),(161, 295.0),(78, 740.0),(206, 302.0),(82, 607.0),(39, 351.0),(64, 867.0),(63, 591.0),(67, 813.0),(168, 554.0),(101, 650.0),(180, 277.0),(86, 702.0),(235, 369.0),(172, 251.0),(80, 592.0),(87, 960.0),(171, 425.0),(191, 591.0),(162, 554.0),(188, 1000.0),(72, 683.0),(195, 502.0),(57, 554.0),(81, 871.0),(120, 480.0),(68, 744.0),(178, 553.0),(167, 615.0),(107, 502.0),(169, 198.0),(59, 277.0),(174, 487.0),(118, 554.0),(89, 592.0),(196, 439.0),(121, 536.0),(99, 647.0),(249, 653.0),(182, 564.0),(105, 200.0),(164, 166.0),(248, 300.0),(97, 683.0),(166, 554.0),(184, 354.0),(194, 375.0),(232, 517.0),(58, 277.0),(40, 369.0),(125, 351.0),(110, 610.0),(207, 502.0),(43, 606.0),(179, 553.0),(198, 453.0),(111, 655.0),(170, 502.0),(65, 740.0),(74, 482.0),(185, 502.0),(106, 203.0),(205, 552.0),(108, 200.0),(37, 775.0),(77, 919.0),(69, 536.0),(38, 757.0),(45, 332.0),(56, 554.0),(41, 369.0),(113, 682.0),(75, 591.0),(90, 480.0),(50, 554.0),(62, 606.0),(46, 277.0),(61, 606.0),(53, 554.0),(36, 554.0),(44, 277.0),(245, 200.0),(33, 295.0),(250, 1137.0),(119, 831.0),(187, 425.0),(233, 868.0),(71, 872.0),(227, 369.0),(234, 1194.0),(186, 484.0),(109, 938.0),(251, 554.0),(91, 351.0),(200, 369.0),(124, 672.0),(54, 554.0),(70, 485.0),(34, 309.0),(241, 1157.0),(35, 554.0),(60, 606.0),(114, 301.0),(115, 388.0),(225, 992.0),(85, 655.0),(47, 437.0),(49, 554.0),(84, 426.0),(163, 554.0),(104, 610.0),(98, 682.0),(208, 1000.0),(42, 425.0),(126, 606.0),(177, 500.0),(173, 251.0),(94, 606.0),(55, 554.0),(95, 500.0),(102, 314.0),(123, 351.0),(48, 554.0),(83, 498.0),(199, 222.0),(96, 351.0),(165, 554.0),(197, 485.0),(32, 277.0),(116, 339.0),(100, 685.0),(189, 1174.0),(202, 332.0),(122, 425.0),(88, 609.0),(175, 485.0),(52, 554.0),(193, 378.0),(112, 682.0),(117, 608.0),(203, 324.0),(51, 554.0),(76, 462.0),(93, 351.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Bookman_Light: FontMetrics = FontMetrics {
        ascent: 717.0,
        descent: -228.0,
        cap_height: 681.0,
        x_height: 484.0,
        italic_angle: 0.0,
        bbox: (-188.0, -251.0, 1266.0, 908.0),
        flags: 0,
        font_family: "ITC".to_string(),
        font_weight: "Light".to_string(),
        glyph_widths: vec![
(186, 400.0),(99, 520.0),(196, 440.0),(179, 540.0),(87, 960.0),(100, 620.0),(121, 540.0),(58, 320.0),(200, 420.0),(32, 320.0),(94, 600.0),(97, 580.0),(122, 480.0),(50, 620.0),(73, 340.0),(197, 440.0),(109, 940.0),(61, 600.0),(118, 520.0),(43, 600.0),(75, 720.0),(105, 300.0),(165, 620.0),(162, 620.0),(39, 220.0),(59, 320.0),(116, 380.0),(70, 640.0),(191, 540.0),(233, 800.0),(51, 620.0),(234, 1240.0),(35, 620.0),(68, 800.0),(115, 520.0),(203, 320.0),(107, 620.0),(177, 500.0),(52, 620.0),(170, 400.0),(96, 220.0),(64, 820.0),(112, 620.0),(55, 620.0),(119, 780.0),(124, 600.0),(166, 620.0),(175, 620.0),(34, 380.0),(180, 320.0),(95, 500.0),(189, 1280.0),(102, 320.0),(185, 400.0),(241, 860.0),(66, 740.0),(76, 600.0),(40, 300.0),(69, 720.0),(104, 660.0),(38, 800.0),(207, 420.0),(37, 900.0),(33, 300.0),(208, 1000.0),(67, 740.0),(250, 900.0),(206, 320.0),(194, 340.0),(44, 320.0),(90, 640.0),(46, 320.0),(245, 300.0),(42, 440.0),(85, 780.0),(80, 620.0),(113, 580.0),(205, 380.0),(111, 560.0),(82, 720.0),(182, 600.0),(193, 340.0),(188, 1000.0),(89, 640.0),(62, 600.0),(74, 600.0),(86, 700.0),(163, 620.0),(93, 300.0),(232, 600.0),(169, 220.0),(53, 620.0),(71, 800.0),(174, 620.0),(114, 440.0),(108, 300.0),(225, 1260.0),(227, 420.0),(187, 360.0),(195, 420.0),(202, 320.0),(235, 420.0),(199, 260.0),(83, 660.0),(56, 620.0),(84, 620.0),(77, 920.0),(60, 600.0),(106, 300.0),(48, 620.0),(98, 620.0),(117, 680.0),(183, 460.0),(45, 400.0),(184, 220.0),(72, 800.0),(168, 620.0),(120, 560.0),(36, 620.0),(78, 740.0),(126, 600.0),(81, 820.0),(63, 540.0),(161, 300.0),(65, 680.0),(249, 560.0),(47, 600.0),(57, 620.0),(171, 360.0),(92, 600.0),(167, 520.0),(248, 320.0),(251, 660.0),(41, 300.0),(91, 300.0),(101, 520.0),(54, 620.0),(49, 620.0),(110, 660.0),(172, 240.0),(178, 540.0),(198, 460.0),(79, 800.0),(123, 280.0),(125, 280.0),(164, 140.0),(173, 240.0),(88, 720.0),(103, 540.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Courier: FontMetrics = FontMetrics {
        ascent: 629.0,
        descent: -157.0,
        cap_height: 562.0,
        x_height: 426.0,
        italic_angle: 0.0,
        bbox: (-23.0, -250.0, 715.0, 805.0),
        flags: 1,
        font_family: "Courier".to_string(),
        font_weight: "Medium".to_string(),
        glyph_widths: vec![
(250, 600.0),(120, 600.0),(68, 600.0),(101, 600.0),(85, 600.0),(189, 600.0),(45, 600.0),(173, 600.0),(184, 600.0),(185, 600.0),(187, 600.0),(89, 600.0),(195, 600.0),(200, 600.0),(241, 600.0),(83, 600.0),(93, 600.0),(65, 600.0),(182, 600.0),(188, 600.0),(163, 600.0),(208, 600.0),(49, 600.0),(227, 600.0),(41, 600.0),(82, 600.0),(196, 600.0),(235, 600.0),(66, 600.0),(88, 600.0),(102, 600.0),(53, 600.0),(57, 600.0),(86, 600.0),(94, 600.0),(54, 600.0),(67, 600.0),(92, 600.0),(126, 600.0),(167, 600.0),(104, 600.0),(225, 600.0),(107, 600.0),(38, 600.0),(251, 600.0),(76, 600.0),(111, 600.0),(119, 600.0),(180, 600.0),(73, 600.0),(198, 600.0),(87, 600.0),(99, 600.0),(117, 600.0),(95, 600.0),(61, 600.0),(40, 600.0),(124, 600.0),(39, 600.0),(71, 600.0),(179, 600.0),(55, 600.0),(174, 600.0),(110, 600.0),(103, 600.0),(118, 600.0),(123, 600.0),(161, 600.0),(168, 600.0),(69, 600.0),(112, 600.0),(113, 600.0),(50, 600.0),(194, 600.0),(203, 600.0),(33, 600.0),(59, 600.0),(64, 600.0),(121, 600.0),(62, 600.0),(43, 600.0),(206, 600.0),(97, 600.0),(35, 600.0),(46, 600.0),(172, 600.0),(234, 600.0),(175, 600.0),(72, 600.0),(233, 600.0),(42, 600.0),(202, 600.0),(177, 600.0),(81, 600.0),(199, 600.0),(162, 600.0),(166, 600.0),(98, 600.0),(125, 600.0),(47, 600.0),(178, 600.0),(205, 600.0),(91, 600.0),(248, 600.0),(44, 600.0),(51, 600.0),(70, 600.0),(114, 600.0),(90, 600.0),(183, 600.0),(58, 600.0),(106, 600.0),(165, 600.0),(193, 600.0),(79, 600.0),(36, 600.0),(197, 600.0),(63, 600.0),(77, 600.0),(207, 600.0),(34, 600.0),(232, 600.0),(52, 600.0),(80, 600.0),(191, 600.0),(164, 600.0),(245, 600.0),(60, 600.0),(75, 600.0),(249, 600.0),(96, 600.0),(56, 600.0),(100, 600.0),(115, 600.0),(116, 600.0),(169, 600.0),(78, 600.0),(108, 600.0),(170, 600.0),(105, 600.0),(32, 600.0),(122, 600.0),(37, 600.0),(48, 600.0),(109, 600.0),(84, 600.0),(171, 600.0),(186, 600.0),(74, 600.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Times_BoldItalic: FontMetrics = FontMetrics {
        ascent: 683.0,
        descent: -217.0,
        cap_height: 669.0,
        x_height: 462.0,
        italic_angle: -15.0,
        bbox: (-200.0, -218.0, 996.0, 921.0),
        flags: 64,
        font_family: "Times".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(116, 278.0),(111, 500.0),(119, 667.0),(191, 500.0),(123, 348.0),(206, 333.0),(90, 611.0),(225, 944.0),(48, 500.0),(47, 278.0),(75, 667.0),(68, 722.0),(250, 722.0),(77, 889.0),(182, 500.0),(82, 667.0),(189, 1000.0),(126, 570.0),(249, 500.0),(73, 389.0),(169, 278.0),(96, 333.0),(183, 350.0),(72, 778.0),(39, 333.0),(43, 570.0),(49, 500.0),(62, 570.0),(83, 556.0),(175, 556.0),(208, 1000.0),(41, 333.0),(79, 722.0),(59, 333.0),(200, 333.0),(234, 944.0),(93, 333.0),(125, 348.0),(106, 278.0),(64, 832.0),(248, 278.0),(113, 500.0),(172, 333.0),(104, 556.0),(207, 333.0),(53, 500.0),(199, 333.0),(56, 500.0),(227, 266.0),(118, 444.0),(97, 500.0),(184, 333.0),(162, 500.0),(167, 500.0),(87, 889.0),(89, 611.0),(193, 333.0),(85, 722.0),(70, 667.0),(163, 500.0),(114, 389.0),(196, 333.0),(65, 667.0),(170, 500.0),(44, 250.0),(110, 556.0),(122, 389.0),(185, 500.0),(194, 333.0),(50, 500.0),(57, 500.0),(171, 500.0),(202, 333.0),(100, 500.0),(34, 555.0),(115, 389.0),(92, 278.0),(40, 333.0),(46, 250.0),(168, 500.0),(74, 500.0),(105, 278.0),(63, 500.0),(69, 667.0),(95, 500.0),(187, 500.0),(120, 500.0),(161, 389.0),(60, 570.0),(80, 611.0),(203, 333.0),(61, 570.0),(101, 444.0),(107, 500.0),(38, 778.0),(67, 667.0),(124, 220.0),(165, 500.0),(35, 500.0),(78, 722.0),(245, 278.0),(102, 333.0),(112, 500.0),(42, 500.0),(58, 333.0),(84, 611.0),(178, 500.0),(121, 444.0),(179, 500.0),(251, 500.0),(36, 500.0),(198, 333.0),(94, 570.0),(86, 667.0),(33, 389.0),(177, 500.0),(99, 444.0),(166, 500.0),(32, 250.0),(174, 556.0),(180, 250.0),(45, 333.0),(81, 722.0),(173, 333.0),(188, 1000.0),(205, 333.0),(98, 500.0),(76, 611.0),(66, 667.0),(37, 833.0),(54, 500.0),(91, 333.0),(233, 722.0),(241, 722.0),(88, 667.0),(164, 167.0),(232, 611.0),(51, 500.0),(103, 500.0),(55, 500.0),(109, 778.0),(52, 500.0),(71, 722.0),(186, 500.0),(195, 333.0),(197, 333.0),(117, 556.0),(108, 278.0),(235, 300.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref AvantGarde_DemiOblique: FontMetrics = FontMetrics {
        ascent: 740.0,
        descent: -192.0,
        cap_height: 740.0,
        x_height: 555.0,
        italic_angle: -10.5,
        bbox: (-123.0, -251.0, 1256.0, 1021.0),
        flags: 64,
        font_family: "ITC".to_string(),
        font_weight: "Demi".to_string(),
        glyph_widths: vec![
(66, 580.0),(88, 680.0),(57, 560.0),(114, 320.0),(32, 280.0),(93, 320.0),(96, 280.0),(199, 280.0),(241, 1080.0),(250, 1080.0),(50, 560.0),(94, 600.0),(60, 600.0),(99, 640.0),(34, 360.0),(188, 1000.0),(202, 360.0),(112, 660.0),(71, 840.0),(63, 560.0),(115, 440.0),(186, 480.0),(198, 480.0),(40, 380.0),(183, 600.0),(172, 240.0),(113, 660.0),(233, 840.0),(126, 600.0),(56, 560.0),(180, 280.0),(36, 560.0),(196, 480.0),(42, 440.0),(122, 460.0),(162, 560.0),(72, 680.0),(84, 420.0),(103, 660.0),(168, 560.0),(189, 1280.0),(100, 660.0),(123, 340.0),(41, 380.0),(44, 280.0),(173, 240.0),(185, 480.0),(68, 700.0),(205, 700.0),(251, 600.0),(78, 740.0),(51, 560.0),(38, 680.0),(77, 900.0),(109, 940.0),(163, 560.0),(187, 460.0),(195, 540.0),(53, 560.0),(74, 480.0),(64, 740.0),(124, 600.0),(177, 500.0),(171, 460.0),(45, 420.0),(52, 560.0),(75, 620.0),(116, 300.0),(48, 560.0),(174, 520.0),(39, 280.0),(90, 500.0),(76, 440.0),(92, 640.0),(200, 500.0),(169, 220.0),(111, 640.0),(37, 860.0),(81, 840.0),(225, 900.0),(79, 840.0),(46, 280.0),(110, 600.0),(49, 560.0),(203, 340.0),(54, 560.0),(62, 600.0),(91, 320.0),(69, 520.0),(227, 360.0),(206, 340.0),(161, 280.0),(232, 480.0),(65, 740.0),(82, 580.0),(235, 360.0),(59, 280.0),(73, 280.0),(98, 660.0),(184, 280.0),(249, 660.0),(85, 640.0),(117, 600.0),(80, 560.0),(89, 620.0),(70, 480.0),(118, 560.0),(197, 420.0),(33, 280.0),(165, 560.0),(164, 160.0),(87, 900.0),(55, 560.0),(95, 500.0),(125, 340.0),(178, 560.0),(166, 560.0),(58, 280.0),(120, 560.0),(35, 560.0),(61, 600.0),(86, 700.0),(121, 580.0),(194, 420.0),(175, 520.0),(208, 1000.0),(119, 800.0),(179, 560.0),(207, 540.0),(104, 600.0),(97, 660.0),(107, 580.0),(234, 1060.0),(245, 240.0),(102, 280.0),(105, 240.0),(106, 260.0),(47, 460.0),(67, 780.0),(83, 520.0),(170, 480.0),(182, 600.0),(248, 320.0),(101, 640.0),(191, 560.0),(193, 420.0),(108, 240.0),(43, 600.0),(167, 560.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Palatino_Roman: FontMetrics = FontMetrics {
        ascent: 726.0,
        descent: -281.0,
        cap_height: 692.0,
        x_height: 469.0,
        italic_angle: 0.0,
        bbox: (-166.0, -283.0, 1021.0, 927.0),
        flags: 0,
        font_family: "Palatino".to_string(),
        font_weight: "Medium".to_string(),
        glyph_widths: vec![
(187, 500.0),(43, 606.0),(102, 333.0),(169, 208.0),(162, 500.0),(202, 333.0),(225, 944.0),(35, 500.0),(78, 831.0),(109, 883.0),(183, 606.0),(205, 380.0),(199, 250.0),(76, 611.0),(90, 667.0),(101, 479.0),(172, 331.0),(195, 333.0),(111, 546.0),(99, 444.0),(165, 500.0),(180, 250.0),(250, 827.0),(47, 606.0),(93, 333.0),(164, 167.0),(248, 291.0),(179, 500.0),(92, 606.0),(85, 778.0),(118, 565.0),(67, 709.0),(107, 556.0),(171, 500.0),(42, 389.0),(97, 500.0),(74, 333.0),(235, 333.0),(61, 606.0),(184, 278.0),(112, 601.0),(48, 500.0),(96, 278.0),(119, 834.0),(121, 556.0),(251, 556.0),(208, 1000.0),(33, 278.0),(53, 500.0),(79, 786.0),(88, 667.0),(64, 747.0),(249, 556.0),(60, 606.0),(40, 333.0),(83, 525.0),(37, 840.0),(50, 500.0),(100, 611.0),(105, 291.0),(174, 605.0),(86, 722.0),(104, 582.0),(124, 606.0),(46, 250.0),(206, 313.0),(38, 778.0),(233, 833.0),(72, 832.0),(55, 500.0),(95, 500.0),(45, 333.0),(115, 424.0),(41, 333.0),(196, 333.0),(66, 611.0),(36, 500.0),(56, 500.0),(185, 500.0),(234, 998.0),(120, 516.0),(32, 250.0),(58, 250.0),(80, 604.0),(82, 668.0),(44, 250.0),(98, 553.0),(110, 582.0),(163, 500.0),(51, 500.0),(113, 560.0),(116, 326.0),(182, 628.0),(191, 444.0),(193, 333.0),(203, 333.0),(227, 333.0),(245, 287.0),(94, 606.0),(122, 500.0),(232, 611.0),(241, 758.0),(49, 500.0),(117, 603.0),(57, 500.0),(114, 395.0),(68, 774.0),(84, 613.0),(91, 333.0),(168, 500.0),(197, 333.0),(188, 1000.0),(87, 1000.0),(75, 726.0),(198, 333.0),(106, 234.0),(126, 606.0),(103, 556.0),(125, 333.0),(123, 333.0),(194, 333.0),(70, 556.0),(59, 250.0),(34, 371.0),(54, 500.0),(89, 667.0),(108, 291.0),(207, 333.0),(73, 337.0),(81, 786.0),(173, 331.0),(161, 278.0),(65, 778.0),(39, 278.0),(71, 763.0),(175, 608.0),(62, 606.0),(186, 500.0),(166, 500.0),(69, 611.0),(200, 333.0),(63, 444.0),(189, 1144.0),(178, 500.0),(170, 500.0),(52, 500.0),(177, 500.0),(167, 500.0),(77, 946.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref ZapfChancery_MediumItalic: FontMetrics = FontMetrics {
        ascent: 714.0,
        descent: -314.0,
        cap_height: 708.0,
        x_height: 438.0,
        italic_angle: -14.0,
        bbox: (-181.0, -314.0, 1065.0, 831.0),
        flags: 64,
        font_family: "ITC".to_string(),
        font_weight: "Medium".to_string(),
        glyph_widths: vec![
(92, 480.0),(96, 240.0),(232, 580.0),(70, 580.0),(163, 440.0),(82, 600.0),(198, 440.0),(248, 300.0),(233, 660.0),(208, 1000.0),(194, 300.0),(46, 220.0),(61, 520.0),(109, 620.0),(182, 500.0),(44, 220.0),(205, 400.0),(69, 620.0),(58, 260.0),(64, 700.0),(126, 520.0),(122, 440.0),(112, 440.0),(187, 380.0),(39, 240.0),(119, 680.0),(84, 500.0),(97, 420.0),(179, 480.0),(87, 880.0),(73, 380.0),(81, 600.0),(99, 340.0),(104, 440.0),(117, 460.0),(162, 440.0),(171, 340.0),(234, 820.0),(125, 240.0),(227, 260.0),(68, 700.0),(41, 220.0),(45, 280.0),(107, 440.0),(43, 520.0),(63, 380.0),(185, 280.0),(116, 320.0),(164, 60.0),(123, 240.0),(178, 460.0),(196, 440.0),(225, 740.0),(121, 400.0),(173, 260.0),(177, 500.0),(203, 300.0),(51, 440.0),(54, 440.0),(172, 240.0),(76, 580.0),(202, 300.0),(245, 240.0),(207, 340.0),(94, 520.0),(106, 220.0),(111, 400.0),(91, 240.0),(200, 360.0),(100, 440.0),(103, 400.0),(120, 420.0),(189, 960.0),(250, 560.0),(36, 440.0),(40, 260.0),(193, 220.0),(174, 520.0),(191, 400.0),(114, 300.0),(166, 440.0),(83, 460.0),(124, 520.0),(80, 540.0),(167, 420.0),(118, 440.0),(195, 340.0),(199, 220.0),(251, 420.0),(57, 440.0),(72, 680.0),(85, 740.0),(113, 400.0),(165, 440.0),(206, 280.0),(93, 320.0),(235, 260.0),(33, 280.0),(53, 440.0),(74, 400.0),(71, 620.0),(186, 360.0),(105, 240.0),(50, 440.0),(95, 500.0),(48, 440.0),(60, 520.0),(67, 520.0),(42, 420.0),(102, 320.0),(65, 620.0),(66, 600.0),(108, 240.0),(55, 440.0),(62, 520.0),(59, 240.0),(52, 440.0),(34, 220.0),(77, 840.0),(183, 600.0),(78, 700.0),(49, 440.0),(161, 280.0),(56, 440.0),(88, 560.0),(168, 440.0),(79, 600.0),(35, 440.0),(86, 640.0),(180, 220.0),(184, 180.0),(249, 440.0),(90, 620.0),(75, 660.0),(170, 340.0),(98, 420.0),(89, 560.0),(115, 320.0),(169, 160.0),(241, 540.0),(47, 340.0),(175, 520.0),(188, 1000.0),(101, 340.0),(38, 780.0),(197, 440.0),(37, 680.0),(110, 460.0),(32, 220.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Helvetica_Narrow: FontMetrics = FontMetrics {
        ascent: 718.0,
        descent: -207.0,
        cap_height: 718.0,
        x_height: 523.0,
        italic_angle: 0.0,
        bbox: (-136.0, -225.0, 820.0, 931.0),
        flags: 0,
        font_family: "Helvetica".to_string(),
        font_weight: "Medium".to_string(),
        glyph_widths: vec![
(50, 456.0),(93, 228.0),(207, 273.0),(208, 820.0),(67, 592.0),(123, 274.0),(36, 456.0),(249, 501.0),(58, 228.0),(126, 479.0),(203, 273.0),(248, 182.0),(108, 182.0),(122, 410.0),(34, 291.0),(188, 820.0),(164, 137.0),(76, 456.0),(86, 547.0),(46, 228.0),(39, 182.0),(184, 182.0),(55, 456.0),(202, 273.0),(42, 319.0),(60, 479.0),(165, 456.0),(124, 213.0),(113, 456.0),(166, 456.0),(103, 456.0),(205, 273.0),(110, 456.0),(117, 456.0),(71, 638.0),(101, 456.0),(100, 456.0),(187, 456.0),(112, 456.0),(38, 547.0),(43, 479.0),(91, 228.0),(84, 501.0),(98, 456.0),(196, 273.0),(99, 410.0),(90, 501.0),(33, 228.0),(250, 774.0),(185, 273.0),(49, 456.0),(92, 228.0),(121, 410.0),(35, 456.0),(85, 592.0),(118, 410.0),(177, 456.0),(115, 410.0),(65, 547.0),(69, 547.0),(87, 774.0),(40, 273.0),(195, 273.0),(32, 228.0),(53, 456.0),(163, 456.0),(57, 456.0),(59, 228.0),(116, 228.0),(37, 729.0),(106, 182.0),(174, 410.0),(97, 456.0),(179, 456.0),(109, 683.0),(191, 501.0),(194, 273.0),(41, 273.0),(70, 501.0),(95, 456.0),(235, 299.0),(161, 273.0),(82, 592.0),(167, 456.0),(78, 592.0),(227, 303.0),(233, 638.0),(89, 547.0),(189, 820.0),(234, 820.0),(251, 501.0),(52, 456.0),(104, 456.0),(241, 729.0),(51, 456.0),(61, 479.0),(175, 410.0),(74, 410.0),(225, 820.0),(197, 273.0),(232, 456.0),(63, 456.0),(68, 592.0),(169, 157.0),(125, 274.0),(183, 287.0),(245, 228.0),(62, 479.0),(180, 228.0),(168, 456.0),(73, 228.0),(48, 456.0),(198, 273.0),(170, 273.0),(72, 592.0),(120, 410.0),(186, 273.0),(47, 228.0),(182, 440.0),(111, 456.0),(199, 273.0),(178, 456.0),(77, 683.0),(206, 273.0),(54, 456.0),(96, 182.0),(83, 547.0),(64, 832.0),(79, 638.0),(162, 456.0),(94, 385.0),(193, 273.0),(171, 456.0),(66, 547.0),(75, 547.0),(172, 273.0),(80, 547.0),(107, 410.0),(114, 273.0),(44, 228.0),(200, 273.0),(102, 228.0),(56, 456.0),(45, 273.0),(173, 273.0),(105, 182.0),(81, 638.0),(119, 592.0),(88, 547.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref AvantGarde_Book: FontMetrics = FontMetrics {
        ascent: 740.0,
        descent: -192.0,
        cap_height: 740.0,
        x_height: 547.0,
        italic_angle: 0.0,
        bbox: (-113.0, -222.0, 1148.0, 955.0),
        flags: 0,
        font_family: "ITC".to_string(),
        font_weight: "Book".to_string(),
        glyph_widths: vec![
(245, 200.0),(89, 592.0),(250, 1137.0),(188, 1000.0),(251, 554.0),(206, 302.0),(42, 425.0),(58, 277.0),(65, 740.0),(80, 592.0),(73, 226.0),(116, 339.0),(105, 200.0),(40, 369.0),(92, 605.0),(166, 554.0),(84, 426.0),(34, 309.0),(104, 610.0),(97, 683.0),(208, 1000.0),(101, 650.0),(70, 485.0),(99, 647.0),(109, 938.0),(113, 682.0),(182, 564.0),(249, 653.0),(125, 351.0),(87, 960.0),(39, 351.0),(96, 351.0),(179, 553.0),(180, 277.0),(203, 324.0),(102, 314.0),(175, 485.0),(93, 351.0),(186, 484.0),(191, 591.0),(233, 868.0),(122, 425.0),(68, 744.0),(178, 553.0),(46, 277.0),(107, 502.0),(115, 388.0),(169, 198.0),(54, 554.0),(119, 831.0),(121, 536.0),(123, 351.0),(198, 453.0),(55, 554.0),(76, 462.0),(85, 655.0),(49, 554.0),(53, 554.0),(62, 606.0),(197, 485.0),(195, 502.0),(227, 369.0),(248, 300.0),(44, 277.0),(43, 606.0),(189, 1174.0),(163, 554.0),(63, 591.0),(83, 498.0),(41, 369.0),(232, 517.0),(32, 277.0),(234, 1194.0),(72, 683.0),(64, 867.0),(45, 332.0),(59, 277.0),(167, 615.0),(33, 295.0),(200, 369.0),(126, 606.0),(202, 332.0),(69, 536.0),(194, 375.0),(56, 554.0),(51, 554.0),(88, 609.0),(57, 554.0),(112, 682.0),(66, 574.0),(164, 166.0),(225, 992.0),(171, 425.0),(199, 222.0),(79, 869.0),(94, 606.0),(60, 606.0),(78, 740.0),(108, 200.0),(117, 608.0),(177, 500.0),(196, 439.0),(110, 610.0),(71, 872.0),(95, 500.0),(81, 871.0),(103, 673.0),(114, 301.0),(100, 685.0),(124, 672.0),(168, 554.0),(61, 606.0),(98, 682.0),(86, 702.0),(90, 480.0),(187, 425.0),(205, 552.0),(118, 554.0),(50, 554.0),(91, 351.0),(170, 502.0),(235, 369.0),(48, 554.0),(207, 502.0),(36, 554.0),(174, 487.0),(165, 554.0),(75, 591.0),(67, 813.0),(173, 251.0),(52, 554.0),(38, 757.0),(111, 655.0),(172, 251.0),(184, 354.0),(106, 203.0),(74, 482.0),(47, 437.0),(82, 607.0),(120, 480.0),(37, 775.0),(35, 554.0),(161, 295.0),(77, 919.0),(162, 554.0),(183, 606.0),(185, 502.0),(193, 378.0),(241, 1157.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref NewCenturySchlbk_Bold: FontMetrics = FontMetrics {
        ascent: 737.0,
        descent: -205.0,
        cap_height: 722.0,
        x_height: 475.0,
        italic_angle: 0.0,
        bbox: (-165.0, -250.0, 1000.0, 988.0),
        flags: 0,
        font_family: "New".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(35, 574.0),(74, 648.0),(166, 574.0),(42, 500.0),(57, 574.0),(174, 685.0),(241, 870.0),(51, 574.0),(193, 333.0),(49, 574.0),(34, 333.0),(249, 611.0),(99, 556.0),(225, 981.0),(68, 833.0),(187, 500.0),(97, 611.0),(184, 241.0),(70, 722.0),(179, 500.0),(91, 389.0),(109, 963.0),(32, 287.0),(115, 500.0),(178, 500.0),(119, 889.0),(76, 722.0),(194, 333.0),(66, 778.0),(53, 574.0),(93, 389.0),(60, 606.0),(40, 389.0),(95, 500.0),(103, 611.0),(89, 722.0),(50, 574.0),(183, 606.0),(116, 426.0),(251, 611.0),(64, 747.0),(167, 500.0),(177, 500.0),(202, 333.0),(182, 747.0),(65, 759.0),(163, 574.0),(125, 389.0),(105, 370.0),(250, 907.0),(48, 574.0),(113, 648.0),(112, 667.0),(123, 389.0),(82, 815.0),(206, 333.0),(245, 370.0),(180, 278.0),(122, 537.0),(63, 500.0),(110, 685.0),(124, 606.0),(75, 815.0),(161, 296.0),(171, 500.0),(44, 278.0),(88, 722.0),(208, 1000.0),(33, 296.0),(198, 333.0),(108, 352.0),(117, 685.0),(36, 574.0),(52, 574.0),(185, 481.0),(85, 833.0),(169, 241.0),(170, 481.0),(106, 352.0),(77, 981.0),(62, 606.0),(72, 870.0),(168, 574.0),(126, 606.0),(41, 389.0),(46, 278.0),(81, 833.0),(114, 519.0),(186, 481.0),(56, 574.0),(197, 333.0),(73, 444.0),(79, 833.0),(248, 352.0),(100, 667.0),(59, 278.0),(87, 981.0),(45, 333.0),(101, 574.0),(90, 667.0),(234, 1000.0),(104, 685.0),(118, 611.0),(172, 333.0),(203, 333.0),(162, 574.0),(232, 722.0),(175, 685.0),(67, 778.0),(86, 759.0),(54, 574.0),(205, 333.0),(207, 333.0),(196, 333.0),(96, 241.0),(189, 1000.0),(38, 852.0),(120, 611.0),(58, 278.0),(165, 574.0),(200, 333.0),(102, 389.0),(199, 333.0),(107, 667.0),(111, 611.0),(233, 833.0),(80, 759.0),(55, 574.0),(84, 722.0),(191, 500.0),(37, 833.0),(47, 278.0),(83, 667.0),(71, 833.0),(43, 606.0),(188, 1000.0),(92, 606.0),(121, 611.0),(164, 167.0),(39, 241.0),(61, 606.0),(235, 367.0),(94, 606.0),(98, 648.0),(173, 333.0),(195, 333.0),(227, 367.0),(78, 833.0),(69, 759.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Helvetica_Bold: FontMetrics = FontMetrics {
        ascent: 718.0,
        descent: -207.0,
        cap_height: 718.0,
        x_height: 532.0,
        italic_angle: 0.0,
        bbox: (-170.0, -228.0, 1003.0, 962.0),
        flags: 0,
        font_family: "Helvetica".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(57, 556.0),(202, 333.0),(225, 1000.0),(79, 778.0),(194, 333.0),(88, 667.0),(96, 278.0),(248, 278.0),(62, 584.0),(121, 556.0),(33, 333.0),(98, 611.0),(164, 167.0),(101, 556.0),(182, 556.0),(205, 333.0),(60, 584.0),(99, 556.0),(45, 333.0),(114, 389.0),(187, 556.0),(235, 365.0),(234, 1000.0),(178, 556.0),(75, 722.0),(203, 333.0),(207, 333.0),(52, 556.0),(55, 556.0),(183, 350.0),(198, 333.0),(122, 500.0),(66, 722.0),(199, 333.0),(106, 278.0),(35, 556.0),(110, 611.0),(208, 1000.0),(115, 556.0),(120, 556.0),(241, 889.0),(58, 333.0),(173, 333.0),(46, 278.0),(65, 722.0),(70, 611.0),(111, 611.0),(69, 667.0),(91, 333.0),(245, 278.0),(87, 944.0),(85, 722.0),(117, 611.0),(177, 556.0),(36, 556.0),(47, 278.0),(197, 333.0),(251, 611.0),(37, 889.0),(126, 584.0),(161, 333.0),(185, 500.0),(78, 722.0),(124, 280.0),(206, 333.0),(63, 611.0),(107, 556.0),(250, 944.0),(179, 556.0),(93, 333.0),(59, 333.0),(103, 611.0),(92, 278.0),(104, 611.0),(193, 333.0),(232, 611.0),(94, 584.0),(61, 584.0),(51, 556.0),(86, 667.0),(89, 667.0),(100, 611.0),(165, 556.0),(233, 778.0),(53, 556.0),(188, 1000.0),(125, 389.0),(189, 1000.0),(56, 556.0),(170, 500.0),(95, 556.0),(105, 278.0),(168, 556.0),(175, 611.0),(67, 722.0),(191, 611.0),(195, 333.0),(76, 611.0),(77, 833.0),(84, 611.0),(40, 333.0),(50, 556.0),(167, 556.0),(80, 667.0),(163, 556.0),(196, 333.0),(174, 611.0),(54, 556.0),(38, 722.0),(102, 333.0),(68, 722.0),(162, 556.0),(166, 556.0),(118, 556.0),(171, 556.0),(172, 333.0),(186, 500.0),(112, 611.0),(32, 278.0),(64, 975.0),(97, 556.0),(249, 611.0),(180, 278.0),(123, 389.0),(71, 778.0),(113, 611.0),(184, 278.0),(73, 278.0),(44, 278.0),(116, 333.0),(109, 889.0),(41, 333.0),(200, 333.0),(42, 389.0),(72, 722.0),(108, 278.0),(82, 722.0),(169, 238.0),(48, 556.0),(81, 778.0),(83, 667.0),(49, 556.0),(39, 278.0),(43, 584.0),(227, 370.0),(74, 556.0),(119, 778.0),(34, 474.0),(90, 611.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Courier_BoldOblique: FontMetrics = FontMetrics {
        ascent: 629.0,
        descent: -157.0,
        cap_height: 562.0,
        x_height: 439.0,
        italic_angle: -12.0,
        bbox: (-57.0, -250.0, 869.0, 801.0),
        flags: 65,
        font_family: "Courier".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(102, 600.0),(115, 600.0),(97, 600.0),(53, 600.0),(166, 600.0),(92, 600.0),(100, 600.0),(163, 600.0),(107, 600.0),(188, 600.0),(66, 600.0),(203, 600.0),(112, 600.0),(106, 600.0),(167, 600.0),(207, 600.0),(51, 600.0),(85, 600.0),(45, 600.0),(73, 600.0),(119, 600.0),(34, 600.0),(71, 600.0),(95, 600.0),(109, 600.0),(32, 600.0),(93, 600.0),(96, 600.0),(43, 600.0),(171, 600.0),(101, 600.0),(88, 600.0),(81, 600.0),(75, 600.0),(122, 600.0),(248, 600.0),(77, 600.0),(205, 600.0),(90, 600.0),(161, 600.0),(165, 600.0),(198, 600.0),(86, 600.0),(118, 600.0),(173, 600.0),(64, 600.0),(235, 600.0),(172, 600.0),(76, 600.0),(40, 600.0),(87, 600.0),(234, 600.0),(38, 600.0),(103, 600.0),(164, 600.0),(232, 600.0),(125, 600.0),(55, 600.0),(121, 600.0),(59, 600.0),(126, 600.0),(245, 600.0),(180, 600.0),(195, 600.0),(162, 600.0),(197, 600.0),(225, 600.0),(67, 600.0),(250, 600.0),(44, 600.0),(63, 600.0),(114, 600.0),(189, 600.0),(110, 600.0),(105, 600.0),(35, 600.0),(70, 600.0),(57, 600.0),(78, 600.0),(82, 600.0),(91, 600.0),(175, 600.0),(60, 600.0),(79, 600.0),(193, 600.0),(227, 600.0),(98, 600.0),(99, 600.0),(187, 600.0),(249, 600.0),(54, 600.0),(177, 600.0),(42, 600.0),(124, 600.0),(50, 600.0),(108, 600.0),(47, 600.0),(174, 600.0),(178, 600.0),(169, 600.0),(46, 600.0),(199, 600.0),(41, 600.0),(233, 600.0),(123, 600.0),(111, 600.0),(185, 600.0),(183, 600.0),(80, 600.0),(170, 600.0),(179, 600.0),(74, 600.0),(89, 600.0),(113, 600.0),(61, 600.0),(48, 600.0),(68, 600.0),(120, 600.0),(191, 600.0),(94, 600.0),(65, 600.0),(83, 600.0),(200, 600.0),(56, 600.0),(84, 600.0),(39, 600.0),(69, 600.0),(33, 600.0),(72, 600.0),(241, 600.0),(52, 600.0),(194, 600.0),(202, 600.0),(49, 600.0),(36, 600.0),(37, 600.0),(117, 600.0),(182, 600.0),(196, 600.0),(186, 600.0),(116, 600.0),(206, 600.0),(208, 600.0),(104, 600.0),(62, 600.0),(168, 600.0),(251, 600.0),(58, 600.0),(184, 600.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Palatino_Italic: FontMetrics = FontMetrics {
        ascent: 726.0,
        descent: -281.0,
        cap_height: 692.0,
        x_height: 482.0,
        italic_angle: -10.0,
        bbox: (-170.0, -276.0, 1010.0, 918.0),
        flags: 64,
        font_family: "Palatino".to_string(),
        font_weight: "Medium".to_string(),
        glyph_widths: vec![
(55, 500.0),(64, 747.0),(89, 667.0),(170, 500.0),(203, 333.0),(48, 500.0),(124, 606.0),(80, 611.0),(208, 1000.0),(36, 500.0),(113, 463.0),(95, 500.0),(97, 444.0),(207, 333.0),(164, 167.0),(58, 250.0),(32, 250.0),(195, 333.0),(250, 669.0),(100, 500.0),(115, 389.0),(57, 500.0),(73, 333.0),(249, 444.0),(90, 667.0),(225, 941.0),(81, 778.0),(39, 278.0),(163, 500.0),(72, 778.0),(52, 500.0),(78, 778.0),(96, 278.0),(191, 500.0),(111, 444.0),(84, 611.0),(104, 500.0),(184, 278.0),(85, 778.0),(114, 389.0),(187, 500.0),(200, 333.0),(35, 500.0),(50, 500.0),(165, 500.0),(59, 250.0),(123, 333.0),(173, 333.0),(74, 333.0),(188, 1000.0),(174, 528.0),(76, 556.0),(112, 500.0),(63, 500.0),(126, 606.0),(205, 333.0),(235, 333.0),(44, 250.0),(45, 333.0),(42, 389.0),(178, 500.0),(234, 1028.0),(93, 333.0),(65, 722.0),(61, 606.0),(125, 333.0),(166, 500.0),(172, 333.0),(37, 889.0),(248, 278.0),(119, 722.0),(98, 463.0),(70, 556.0),(33, 333.0),(101, 389.0),(107, 444.0),(43, 606.0),(198, 333.0),(88, 722.0),(53, 500.0),(46, 250.0),(109, 778.0),(120, 500.0),(41, 333.0),(103, 500.0),(180, 250.0),(162, 500.0),(116, 333.0),(60, 606.0),(68, 778.0),(102, 278.0),(106, 278.0),(168, 500.0),(82, 667.0),(108, 278.0),(161, 333.0),(241, 638.0),(183, 500.0),(179, 500.0),(251, 500.0),(38, 778.0),(40, 333.0),(34, 500.0),(87, 944.0),(75, 667.0),(79, 778.0),(83, 556.0),(196, 333.0),(67, 667.0),(185, 500.0),(91, 333.0),(94, 606.0),(121, 500.0),(227, 333.0),(77, 944.0),(169, 333.0),(197, 333.0),(232, 556.0),(245, 278.0),(117, 556.0),(186, 500.0),(171, 500.0),(51, 500.0),(167, 500.0),(92, 606.0),(182, 500.0),(206, 333.0),(233, 778.0),(47, 296.0),(62, 606.0),(177, 500.0),(202, 333.0),(49, 500.0),(66, 611.0),(54, 500.0),(193, 333.0),(69, 611.0),(110, 556.0),(99, 407.0),(105, 278.0),(122, 444.0),(56, 500.0),(175, 545.0),(189, 1000.0),(194, 333.0),(71, 722.0),(86, 722.0),(118, 500.0),(199, 333.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref NewCenturySchlbk_Roman: FontMetrics = FontMetrics {
        ascent: 737.0,
        descent: -205.0,
        cap_height: 722.0,
        x_height: 464.0,
        italic_angle: 0.0,
        bbox: (-195.0, -250.0, 1000.0, 965.0),
        flags: 0,
        font_family: "New".to_string(),
        font_weight: "Medium".to_string(),
        glyph_widths: vec![
(165, 556.0),(71, 778.0),(64, 737.0),(206, 333.0),(117, 611.0),(95, 500.0),(225, 1000.0),(233, 778.0),(65, 722.0),(191, 444.0),(78, 815.0),(59, 278.0),(125, 333.0),(182, 606.0),(61, 606.0),(96, 204.0),(68, 778.0),(193, 333.0),(115, 463.0),(205, 333.0),(234, 1000.0),(41, 333.0),(34, 389.0),(186, 389.0),(60, 606.0),(33, 296.0),(82, 722.0),(40, 333.0),(110, 611.0),(171, 426.0),(81, 778.0),(202, 333.0),(38, 815.0),(84, 667.0),(43, 606.0),(118, 537.0),(175, 611.0),(112, 574.0),(32, 278.0),(98, 556.0),(235, 300.0),(107, 593.0),(169, 204.0),(120, 537.0),(45, 333.0),(87, 981.0),(122, 481.0),(200, 333.0),(86, 722.0),(42, 500.0),(89, 704.0),(100, 574.0),(73, 407.0),(35, 556.0),(74, 556.0),(66, 722.0),(104, 611.0),(39, 204.0),(109, 889.0),(184, 204.0),(114, 444.0),(93, 333.0),(85, 815.0),(189, 1000.0),(203, 333.0),(56, 556.0),(180, 278.0),(207, 333.0),(103, 537.0),(80, 667.0),(69, 722.0),(105, 315.0),(102, 333.0),(72, 833.0),(126, 606.0),(62, 606.0),(161, 296.0),(123, 333.0),(51, 556.0),(196, 333.0),(90, 611.0),(76, 667.0),(248, 315.0),(70, 667.0),(54, 556.0),(57, 556.0),(172, 259.0),(188, 1000.0),(249, 500.0),(194, 333.0),(183, 606.0),(163, 556.0),(79, 778.0),(46, 278.0),(111, 500.0),(44, 278.0),(55, 556.0),(232, 667.0),(119, 778.0),(97, 556.0),(36, 556.0),(101, 500.0),(49, 556.0),(67, 722.0),(75, 778.0),(108, 315.0),(58, 278.0),(185, 389.0),(187, 426.0),(174, 611.0),(199, 333.0),(48, 556.0),(195, 333.0),(53, 556.0),(116, 389.0),(113, 556.0),(121, 537.0),(124, 606.0),(162, 556.0),(173, 259.0),(164, 167.0),(106, 296.0),(94, 606.0),(227, 334.0),(168, 556.0),(251, 574.0),(250, 833.0),(197, 333.0),(91, 333.0),(63, 444.0),(47, 278.0),(99, 444.0),(92, 606.0),(177, 556.0),(179, 500.0),(241, 796.0),(167, 500.0),(50, 556.0),(52, 556.0),(83, 630.0),(166, 556.0),(198, 333.0),(88, 704.0),(37, 833.0),(170, 389.0),(178, 500.0),(245, 315.0),(77, 944.0),(208, 1000.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref NewCenturySchlbk_Italic: FontMetrics = FontMetrics {
        ascent: 737.0,
        descent: -205.0,
        cap_height: 722.0,
        x_height: 466.0,
        italic_angle: -16.0,
        bbox: (-166.0, -250.0, 994.0, 958.0),
        flags: 64,
        font_family: "New".to_string(),
        font_weight: "Medium".to_string(),
        glyph_widths: vec![
(70, 667.0),(196, 333.0),(32, 278.0),(193, 333.0),(57, 556.0),(199, 333.0),(48, 556.0),(51, 556.0),(36, 556.0),(234, 981.0),(245, 333.0),(189, 1000.0),(207, 333.0),(96, 204.0),(166, 556.0),(38, 852.0),(67, 722.0),(44, 278.0),(197, 333.0),(54, 556.0),(203, 333.0),(118, 519.0),(248, 333.0),(250, 778.0),(47, 606.0),(64, 747.0),(180, 278.0),(194, 333.0),(123, 333.0),(105, 333.0),(198, 333.0),(76, 667.0),(58, 278.0),(78, 815.0),(60, 606.0),(108, 333.0),(35, 556.0),(79, 778.0),(46, 278.0),(75, 741.0),(163, 556.0),(82, 741.0),(40, 333.0),(99, 444.0),(104, 611.0),(109, 889.0),(126, 606.0),(167, 500.0),(168, 556.0),(63, 444.0),(182, 650.0),(121, 500.0),(185, 389.0),(77, 944.0),(110, 611.0),(69, 722.0),(206, 333.0),(232, 667.0),(91, 333.0),(86, 704.0),(101, 444.0),(178, 500.0),(113, 556.0),(89, 685.0),(114, 444.0),(83, 667.0),(122, 463.0),(161, 333.0),(97, 574.0),(251, 556.0),(37, 833.0),(235, 372.0),(39, 204.0),(165, 556.0),(205, 333.0),(106, 315.0),(112, 574.0),(87, 926.0),(249, 500.0),(53, 556.0),(107, 556.0),(73, 407.0),(74, 611.0),(233, 778.0),(164, 167.0),(200, 333.0),(42, 500.0),(183, 606.0),(172, 333.0),(119, 778.0),(52, 556.0),(170, 389.0),(115, 444.0),(241, 722.0),(103, 537.0),(65, 704.0),(173, 333.0),(55, 556.0),(34, 400.0),(33, 333.0),(117, 611.0),(169, 278.0),(49, 556.0),(90, 667.0),(187, 426.0),(102, 333.0),(71, 778.0),(174, 611.0),(62, 606.0),(208, 1000.0),(81, 778.0),(111, 500.0),(93, 333.0),(175, 611.0),(184, 204.0),(61, 606.0),(227, 422.0),(162, 556.0),(125, 333.0),(41, 333.0),(188, 1000.0),(179, 500.0),(124, 606.0),(59, 278.0),(80, 667.0),(50, 556.0),(92, 606.0),(43, 606.0),(98, 556.0),(186, 389.0),(191, 444.0),(120, 500.0),(195, 333.0),(177, 500.0),(225, 870.0),(202, 333.0),(72, 833.0),(95, 500.0),(171, 426.0),(94, 606.0),(84, 685.0),(85, 815.0),(88, 704.0),(66, 722.0),(45, 333.0),(100, 611.0),(68, 778.0),(116, 352.0),(56, 556.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Courier_Oblique: FontMetrics = FontMetrics {
        ascent: 629.0,
        descent: -157.0,
        cap_height: 562.0,
        x_height: 426.0,
        italic_angle: -12.0,
        bbox: (-27.0, -250.0, 849.0, 805.0),
        flags: 65,
        font_family: "Courier".to_string(),
        font_weight: "Medium".to_string(),
        glyph_widths: vec![
(163, 600.0),(66, 600.0),(52, 600.0),(83, 600.0),(109, 600.0),(59, 600.0),(179, 600.0),(251, 600.0),(63, 600.0),(39, 600.0),(40, 600.0),(120, 600.0),(108, 600.0),(91, 600.0),(102, 600.0),(65, 600.0),(189, 600.0),(41, 600.0),(42, 600.0),(49, 600.0),(79, 600.0),(84, 600.0),(115, 600.0),(186, 600.0),(184, 600.0),(193, 600.0),(53, 600.0),(195, 600.0),(35, 600.0),(165, 600.0),(118, 600.0),(202, 600.0),(206, 600.0),(166, 600.0),(43, 600.0),(119, 600.0),(69, 600.0),(171, 600.0),(56, 600.0),(194, 600.0),(90, 600.0),(121, 600.0),(234, 600.0),(37, 600.0),(173, 600.0),(161, 600.0),(71, 600.0),(50, 600.0),(46, 600.0),(105, 600.0),(73, 600.0),(126, 600.0),(77, 600.0),(32, 600.0),(162, 600.0),(205, 600.0),(227, 600.0),(64, 600.0),(103, 600.0),(106, 600.0),(116, 600.0),(104, 600.0),(168, 600.0),(107, 600.0),(61, 600.0),(113, 600.0),(178, 600.0),(87, 600.0),(197, 600.0),(172, 600.0),(225, 600.0),(95, 600.0),(74, 600.0),(167, 600.0),(78, 600.0),(100, 600.0),(101, 600.0),(191, 600.0),(250, 600.0),(72, 600.0),(111, 600.0),(199, 600.0),(122, 600.0),(174, 600.0),(80, 600.0),(241, 600.0),(60, 600.0),(58, 600.0),(75, 600.0),(86, 600.0),(235, 600.0),(51, 600.0),(203, 600.0),(38, 600.0),(232, 600.0),(233, 600.0),(182, 600.0),(175, 600.0),(45, 600.0),(125, 600.0),(62, 600.0),(48, 600.0),(114, 600.0),(124, 600.0),(180, 600.0),(196, 600.0),(200, 600.0),(88, 600.0),(249, 600.0),(36, 600.0),(164, 600.0),(34, 600.0),(68, 600.0),(177, 600.0),(183, 600.0),(98, 600.0),(76, 600.0),(85, 600.0),(207, 600.0),(188, 600.0),(92, 600.0),(96, 600.0),(169, 600.0),(99, 600.0),(117, 600.0),(33, 600.0),(185, 600.0),(97, 600.0),(70, 600.0),(81, 600.0),(55, 600.0),(57, 600.0),(170, 600.0),(187, 600.0),(208, 600.0),(248, 600.0),(93, 600.0),(110, 600.0),(54, 600.0),(67, 600.0),(198, 600.0),(94, 600.0),(112, 600.0),(123, 600.0),(44, 600.0),(47, 600.0),(245, 600.0),(89, 600.0),(82, 600.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Bookman_LightItalic: FontMetrics = FontMetrics {
        ascent: 717.0,
        descent: -228.0,
        cap_height: 681.0,
        x_height: 494.0,
        italic_angle: -10.0,
        bbox: (-228.0, -250.0, 1269.0, 883.0),
        flags: 64,
        font_family: "ITC".to_string(),
        font_weight: "Light".to_string(),
        glyph_widths: vec![
(67, 720.0),(196, 440.0),(193, 340.0),(32, 300.0),(59, 300.0),(81, 780.0),(172, 180.0),(205, 340.0),(85, 720.0),(194, 320.0),(245, 280.0),(74, 560.0),(95, 500.0),(173, 180.0),(115, 540.0),(117, 620.0),(103, 560.0),(72, 800.0),(186, 440.0),(33, 320.0),(41, 280.0),(62, 600.0),(208, 1000.0),(53, 620.0),(233, 760.0),(83, 640.0),(250, 900.0),(70, 620.0),(49, 620.0),(50, 620.0),(110, 620.0),(175, 660.0),(249, 540.0),(107, 600.0),(248, 340.0),(68, 740.0),(241, 880.0),(114, 400.0),(232, 580.0),(56, 620.0),(37, 800.0),(90, 580.0),(106, 280.0),(109, 880.0),(93, 260.0),(35, 620.0),(108, 280.0),(183, 460.0),(77, 860.0),(202, 300.0),(120, 540.0),(82, 700.0),(48, 620.0),(126, 600.0),(188, 1000.0),(34, 360.0),(64, 780.0),(166, 620.0),(206, 260.0),(52, 620.0),(111, 540.0),(167, 620.0),(78, 720.0),(46, 300.0),(102, 340.0),(99, 480.0),(179, 620.0),(203, 320.0),(199, 260.0),(94, 600.0),(116, 340.0),(97, 620.0),(165, 620.0),(87, 960.0),(122, 520.0),(88, 700.0),(169, 200.0),(125, 380.0),(200, 420.0),(105, 280.0),(234, 1180.0),(121, 600.0),(84, 600.0),(98, 600.0),(251, 620.0),(66, 720.0),(113, 560.0),(43, 600.0),(39, 280.0),(44, 300.0),(164, 20.0),(118, 540.0),(60, 600.0),(182, 620.0),(197, 440.0),(189, 1180.0),(69, 680.0),(79, 760.0),(178, 620.0),(198, 440.0),(51, 620.0),(45, 320.0),(63, 540.0),(38, 820.0),(57, 620.0),(80, 600.0),(119, 880.0),(185, 480.0),(170, 440.0),(86, 680.0),(180, 300.0),(36, 620.0),(40, 280.0),(187, 300.0),(92, 600.0),(168, 620.0),(235, 400.0),(71, 760.0),(191, 540.0),(124, 600.0),(163, 620.0),(47, 600.0),(195, 440.0),(73, 320.0),(54, 620.0),(55, 620.0),(91, 260.0),(177, 500.0),(96, 280.0),(123, 360.0),(75, 720.0),(104, 620.0),(161, 320.0),(184, 320.0),(112, 600.0),(162, 620.0),(76, 580.0),(61, 600.0),(65, 700.0),(225, 1220.0),(227, 440.0),(174, 640.0),(101, 540.0),(100, 640.0),(89, 660.0),(42, 440.0),(207, 440.0),(58, 300.0),(171, 300.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Times_Italic: FontMetrics = FontMetrics {
        ascent: 683.0,
        descent: -217.0,
        cap_height: 653.0,
        x_height: 441.0,
        italic_angle: -15.5,
        bbox: (-169.0, -217.0, 1010.0, 883.0),
        flags: 64,
        font_family: "Times".to_string(),
        font_weight: "Medium".to_string(),
        glyph_widths: vec![
(170, 556.0),(72, 722.0),(97, 500.0),(250, 667.0),(232, 556.0),(249, 500.0),(171, 500.0),(100, 500.0),(186, 556.0),(56, 500.0),(107, 444.0),(110, 500.0),(88, 611.0),(76, 556.0),(197, 333.0),(47, 278.0),(121, 444.0),(178, 500.0),(188, 889.0),(167, 500.0),(52, 500.0),(117, 500.0),(162, 500.0),(80, 611.0),(180, 250.0),(102, 278.0),(61, 675.0),(225, 889.0),(165, 500.0),(95, 500.0),(161, 389.0),(70, 611.0),(116, 278.0),(200, 333.0),(109, 722.0),(119, 667.0),(202, 333.0),(53, 500.0),(124, 275.0),(169, 214.0),(81, 722.0),(120, 444.0),(98, 500.0),(175, 500.0),(208, 889.0),(234, 944.0),(37, 833.0),(39, 333.0),(71, 722.0),(112, 500.0),(235, 310.0),(125, 400.0),(189, 1000.0),(57, 500.0),(68, 722.0),(183, 350.0),(122, 389.0),(206, 333.0),(92, 278.0),(86, 611.0),(64, 920.0),(94, 422.0),(79, 722.0),(205, 333.0),(41, 333.0),(54, 500.0),(63, 500.0),(89, 556.0),(55, 500.0),(99, 444.0),(48, 500.0),(126, 541.0),(185, 556.0),(83, 500.0),(108, 278.0),(203, 333.0),(227, 276.0),(166, 500.0),(62, 675.0),(78, 667.0),(69, 611.0),(49, 500.0),(84, 556.0),(105, 278.0),(113, 500.0),(34, 420.0),(32, 250.0),(85, 722.0),(93, 389.0),(103, 500.0),(191, 500.0),(193, 333.0),(40, 333.0),(75, 667.0),(90, 556.0),(199, 333.0),(43, 675.0),(111, 500.0),(35, 500.0),(74, 444.0),(118, 444.0),(123, 400.0),(163, 500.0),(182, 523.0),(174, 500.0),(96, 333.0),(44, 250.0),(59, 333.0),(164, 167.0),(177, 500.0),(51, 500.0),(195, 333.0),(198, 333.0),(66, 611.0),(179, 500.0),(58, 333.0),(248, 278.0),(42, 500.0),(184, 333.0),(207, 333.0),(87, 833.0),(194, 333.0),(241, 667.0),(245, 278.0),(38, 778.0),(65, 611.0),(114, 389.0),(45, 333.0),(50, 500.0),(82, 611.0),(187, 500.0),(172, 333.0),(196, 333.0),(233, 722.0),(91, 389.0),(67, 667.0),(73, 333.0),(251, 500.0),(168, 500.0),(101, 444.0),(77, 833.0),(104, 500.0),(60, 675.0),(115, 389.0),(36, 500.0),(173, 333.0),(106, 278.0),(46, 250.0),(33, 333.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref AvantGarde_Demi: FontMetrics = FontMetrics {
        ascent: 740.0,
        descent: -192.0,
        cap_height: 740.0,
        x_height: 555.0,
        italic_angle: 0.0,
        bbox: (-123.0, -251.0, 1222.0, 1021.0),
        flags: 0,
        font_family: "ITC".to_string(),
        font_weight: "Demi".to_string(),
        glyph_widths: vec![
(96, 280.0),(104, 600.0),(65, 740.0),(88, 680.0),(202, 360.0),(52, 560.0),(118, 560.0),(40, 380.0),(61, 600.0),(46, 280.0),(174, 520.0),(119, 800.0),(120, 560.0),(107, 580.0),(53, 560.0),(208, 1000.0),(35, 560.0),(193, 420.0),(199, 280.0),(249, 660.0),(44, 280.0),(191, 560.0),(71, 840.0),(121, 580.0),(179, 560.0),(64, 740.0),(38, 680.0),(183, 600.0),(250, 1080.0),(43, 600.0),(48, 560.0),(182, 600.0),(72, 680.0),(161, 280.0),(58, 280.0),(172, 240.0),(203, 340.0),(81, 840.0),(125, 340.0),(110, 600.0),(184, 280.0),(41, 380.0),(86, 700.0),(115, 440.0),(33, 280.0),(175, 520.0),(69, 520.0),(85, 640.0),(173, 240.0),(162, 560.0),(171, 460.0),(93, 320.0),(198, 480.0),(235, 360.0),(123, 340.0),(167, 560.0),(170, 480.0),(234, 1060.0),(79, 840.0),(50, 560.0),(59, 280.0),(90, 500.0),(103, 660.0),(113, 660.0),(206, 340.0),(66, 580.0),(37, 860.0),(164, 160.0),(232, 480.0),(233, 840.0),(67, 780.0),(98, 660.0),(54, 560.0),(108, 240.0),(124, 600.0),(177, 500.0),(245, 240.0),(42, 440.0),(39, 280.0),(63, 560.0),(111, 640.0),(116, 300.0),(225, 900.0),(180, 280.0),(117, 600.0),(82, 580.0),(87, 900.0),(74, 480.0),(94, 600.0),(95, 500.0),(169, 220.0),(251, 600.0),(194, 420.0),(165, 560.0),(168, 560.0),(106, 260.0),(112, 660.0),(195, 540.0),(83, 520.0),(92, 640.0),(80, 560.0),(197, 420.0),(89, 620.0),(62, 600.0),(97, 660.0),(76, 440.0),(75, 620.0),(57, 560.0),(68, 700.0),(91, 320.0),(105, 240.0),(114, 320.0),(36, 560.0),(188, 1000.0),(78, 740.0),(49, 560.0),(109, 940.0),(73, 280.0),(205, 700.0),(122, 460.0),(189, 1280.0),(196, 480.0),(185, 480.0),(207, 540.0),(34, 360.0),(241, 1080.0),(187, 460.0),(45, 420.0),(70, 480.0),(227, 360.0),(99, 640.0),(77, 900.0),(126, 600.0),(178, 560.0),(102, 280.0),(60, 600.0),(56, 560.0),(200, 500.0),(248, 320.0),(51, 560.0),(55, 560.0),(186, 480.0),(84, 420.0),(166, 560.0),(32, 280.0),(101, 640.0),(163, 560.0),(47, 460.0),(100, 660.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Helvetica_Narrow_Oblique: FontMetrics = FontMetrics {
        ascent: 718.0,
        descent: -207.0,
        cap_height: 718.0,
        x_height: 523.0,
        italic_angle: -12.0,
        bbox: (-139.0, -225.0, 915.0, 931.0),
        flags: 64,
        font_family: "Helvetica".to_string(),
        font_weight: "Medium".to_string(),
        glyph_widths: vec![
(63, 456.0),(166, 456.0),(126, 479.0),(97, 456.0),(234, 820.0),(72, 592.0),(43, 479.0),(112, 456.0),(64, 832.0),(94, 385.0),(115, 410.0),(113, 456.0),(54, 456.0),(41, 273.0),(46, 228.0),(79, 638.0),(227, 303.0),(107, 410.0),(88, 547.0),(104, 456.0),(171, 456.0),(42, 319.0),(163, 456.0),(249, 501.0),(32, 228.0),(122, 410.0),(67, 592.0),(174, 410.0),(84, 501.0),(96, 182.0),(169, 157.0),(62, 479.0),(207, 273.0),(65, 547.0),(198, 273.0),(248, 182.0),(80, 547.0),(197, 273.0),(86, 547.0),(208, 820.0),(55, 456.0),(100, 456.0),(40, 273.0),(78, 592.0),(82, 592.0),(110, 456.0),(117, 456.0),(178, 456.0),(232, 456.0),(161, 273.0),(52, 456.0),(187, 456.0),(123, 274.0),(51, 456.0),(35, 456.0),(53, 456.0),(103, 456.0),(225, 820.0),(184, 182.0),(233, 638.0),(120, 410.0),(75, 547.0),(180, 228.0),(85, 592.0),(191, 501.0),(99, 410.0),(106, 182.0),(108, 182.0),(118, 410.0),(168, 456.0),(179, 456.0),(251, 501.0),(182, 440.0),(91, 228.0),(34, 291.0),(183, 287.0),(189, 820.0),(175, 410.0),(33, 228.0),(48, 456.0),(109, 683.0),(116, 228.0),(125, 274.0),(71, 638.0),(87, 774.0),(170, 273.0),(193, 273.0),(36, 456.0),(124, 213.0),(74, 410.0),(200, 273.0),(245, 228.0),(44, 228.0),(90, 501.0),(98, 456.0),(172, 273.0),(195, 273.0),(114, 273.0),(102, 228.0),(203, 273.0),(121, 410.0),(89, 547.0),(111, 456.0),(162, 456.0),(173, 273.0),(59, 228.0),(206, 273.0),(70, 501.0),(66, 547.0),(76, 456.0),(45, 273.0),(119, 592.0),(177, 456.0),(202, 273.0),(81, 638.0),(49, 456.0),(58, 228.0),(101, 456.0),(186, 273.0),(37, 729.0),(61, 479.0),(57, 456.0),(69, 547.0),(95, 456.0),(68, 592.0),(73, 228.0),(188, 820.0),(194, 273.0),(196, 273.0),(205, 273.0),(93, 228.0),(167, 456.0),(235, 299.0),(92, 228.0),(165, 456.0),(56, 456.0),(47, 228.0),(60, 479.0),(105, 182.0),(241, 729.0),(250, 774.0),(50, 456.0),(185, 273.0),(199, 273.0),(39, 182.0),(77, 683.0),(164, 137.0),(38, 547.0),(83, 547.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Helvetica_Narrow_BoldOblique: FontMetrics = FontMetrics {
        ascent: 718.0,
        descent: -207.0,
        cap_height: 718.0,
        x_height: 532.0,
        italic_angle: -12.0,
        bbox: (-143.0, -228.0, 913.0, 962.0),
        flags: 64,
        font_family: "Helvetica".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(123, 319.0),(126, 479.0),(113, 501.0),(104, 501.0),(103, 501.0),(125, 319.0),(182, 456.0),(52, 456.0),(235, 299.0),(89, 547.0),(170, 410.0),(46, 228.0),(61, 479.0),(119, 638.0),(38, 592.0),(53, 456.0),(116, 273.0),(85, 592.0),(82, 592.0),(206, 273.0),(34, 389.0),(200, 273.0),(241, 729.0),(47, 228.0),(84, 501.0),(69, 547.0),(203, 273.0),(110, 501.0),(111, 501.0),(86, 547.0),(208, 820.0),(63, 501.0),(94, 479.0),(167, 456.0),(179, 456.0),(202, 273.0),(174, 501.0),(112, 501.0),(76, 501.0),(59, 273.0),(32, 228.0),(186, 410.0),(250, 774.0),(117, 501.0),(44, 228.0),(49, 456.0),(105, 228.0),(73, 228.0),(245, 228.0),(51, 456.0),(75, 592.0),(172, 273.0),(108, 228.0),(35, 456.0),(100, 501.0),(165, 456.0),(65, 592.0),(88, 547.0),(66, 592.0),(180, 228.0),(183, 287.0),(97, 456.0),(249, 501.0),(58, 273.0),(79, 638.0),(162, 456.0),(175, 501.0),(184, 228.0),(171, 456.0),(95, 456.0),(227, 303.0),(193, 273.0),(71, 638.0),(225, 820.0),(163, 456.0),(121, 456.0),(36, 456.0),(45, 273.0),(161, 273.0),(72, 592.0),(232, 501.0),(96, 228.0),(101, 456.0),(107, 456.0),(122, 410.0),(92, 228.0),(115, 456.0),(199, 273.0),(188, 820.0),(55, 456.0),(81, 638.0),(195, 273.0),(185, 410.0),(248, 228.0),(234, 820.0),(54, 456.0),(68, 592.0),(102, 273.0),(109, 729.0),(62, 479.0),(37, 729.0),(80, 547.0),(98, 501.0),(77, 683.0),(42, 319.0),(205, 273.0),(114, 319.0),(33, 273.0),(78, 592.0),(198, 273.0),(50, 456.0),(40, 273.0),(178, 456.0),(166, 456.0),(191, 501.0),(164, 137.0),(39, 228.0),(74, 456.0),(91, 273.0),(169, 195.0),(233, 638.0),(70, 501.0),(67, 592.0),(168, 456.0),(189, 820.0),(56, 456.0),(64, 800.0),(251, 501.0),(118, 456.0),(194, 273.0),(207, 273.0),(83, 547.0),(57, 456.0),(48, 456.0),(196, 273.0),(87, 774.0),(43, 479.0),(187, 456.0),(106, 228.0),(197, 273.0),(90, 501.0),(60, 479.0),(173, 273.0),(99, 456.0),(41, 273.0),(93, 273.0),(124, 230.0),(177, 456.0),(120, 456.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Bookman_DemiItalic: FontMetrics = FontMetrics {
        ascent: 717.0,
        descent: -228.0,
        cap_height: 681.0,
        x_height: 515.0,
        italic_angle: -10.0,
        bbox: (-231.0, -250.0, 1333.0, 941.0),
        flags: 64,
        font_family: "ITC".to_string(),
        font_weight: "Demi".to_string(),
        glyph_widths: vec![
(99, 560.0),(206, 320.0),(53, 680.0),(69, 720.0),(163, 680.0),(45, 280.0),(62, 620.0),(49, 680.0),(67, 700.0),(73, 380.0),(108, 380.0),(161, 320.0),(36, 680.0),(32, 340.0),(165, 680.0),(101, 560.0),(119, 860.0),(199, 380.0),(184, 300.0),(205, 560.0),(76, 640.0),(111, 600.0),(233, 760.0),(235, 440.0),(93, 260.0),(79, 760.0),(82, 740.0),(61, 600.0),(197, 480.0),(121, 600.0),(116, 440.0),(179, 420.0),(106, 320.0),(200, 520.0),(198, 460.0),(107, 700.0),(248, 380.0),(117, 680.0),(68, 760.0),(98, 600.0),(122, 560.0),(177, 500.0),(46, 340.0),(162, 680.0),(120, 620.0),(109, 960.0),(97, 680.0),(33, 320.0),(48, 680.0),(63, 620.0),(169, 180.0),(105, 380.0),(194, 340.0),(251, 660.0),(186, 520.0),(234, 1180.0),(175, 820.0),(232, 640.0),(164, 120.0),(74, 620.0),(85, 740.0),(114, 500.0),(185, 520.0),(70, 660.0),(191, 620.0),(92, 580.0),(90, 680.0),(170, 520.0),(96, 320.0),(110, 680.0),(66, 720.0),(126, 620.0),(182, 680.0),(64, 780.0),(54, 680.0),(65, 720.0),(72, 800.0),(94, 620.0),(208, 1000.0),(81, 760.0),(83, 700.0),(102, 420.0),(196, 480.0),(71, 760.0),(39, 320.0),(125, 300.0),(41, 260.0),(40, 260.0),(84, 700.0),(60, 620.0),(75, 780.0),(95, 500.0),(241, 880.0),(58, 340.0),(168, 680.0),(78, 740.0),(88, 740.0),(166, 680.0),(250, 920.0),(80, 640.0),(249, 600.0),(50, 680.0),(113, 620.0),(189, 1360.0),(52, 680.0),(56, 680.0),(51, 680.0),(42, 460.0),(103, 620.0),(77, 860.0),(203, 360.0),(44, 340.0),(174, 820.0),(89, 660.0),(104, 700.0),(245, 380.0),(100, 680.0),(124, 620.0),(57, 680.0),(171, 380.0),(183, 360.0),(227, 440.0),(59, 340.0),(180, 340.0),(207, 480.0),(86, 660.0),(123, 300.0),(195, 480.0),(178, 420.0),(115, 540.0),(35, 680.0),(202, 360.0),(38, 980.0),(173, 220.0),(91, 260.0),(225, 1140.0),(47, 360.0),(118, 540.0),(188, 1000.0),(112, 660.0),(34, 380.0),(43, 600.0),(172, 220.0),(187, 380.0),(193, 380.0),(55, 680.0),(37, 880.0),(167, 620.0),(87, 1000.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Palatino_Bold: FontMetrics = FontMetrics {
        ascent: 726.0,
        descent: -281.0,
        cap_height: 681.0,
        x_height: 471.0,
        italic_angle: 0.0,
        bbox: (-152.0, -266.0, 1000.0, 924.0),
        flags: 0,
        font_family: "Palatino".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(184, 333.0),(194, 333.0),(75, 778.0),(182, 641.0),(249, 556.0),(250, 833.0),(64, 747.0),(72, 833.0),(126, 606.0),(40, 333.0),(49, 500.0),(59, 250.0),(61, 606.0),(125, 310.0),(167, 500.0),(87, 1000.0),(94, 606.0),(118, 556.0),(202, 333.0),(58, 250.0),(168, 500.0),(101, 500.0),(43, 606.0),(104, 611.0),(114, 389.0),(119, 833.0),(163, 500.0),(77, 1000.0),(115, 444.0),(100, 611.0),(35, 500.0),(70, 556.0),(71, 833.0),(84, 667.0),(107, 611.0),(172, 389.0),(199, 333.0),(53, 500.0),(85, 778.0),(95, 500.0),(32, 250.0),(97, 500.0),(188, 1000.0),(178, 500.0),(207, 333.0),(251, 611.0),(187, 500.0),(65, 778.0),(195, 333.0),(180, 250.0),(44, 250.0),(169, 227.0),(54, 500.0),(203, 333.0),(79, 833.0),(185, 500.0),(111, 556.0),(121, 556.0),(37, 889.0),(76, 611.0),(78, 833.0),(56, 500.0),(175, 611.0),(186, 500.0),(46, 250.0),(112, 611.0),(80, 611.0),(96, 278.0),(170, 500.0),(241, 778.0),(189, 1000.0),(109, 889.0),(51, 500.0),(50, 500.0),(165, 500.0),(34, 402.0),(57, 500.0),(73, 389.0),(67, 722.0),(166, 500.0),(122, 500.0),(123, 310.0),(234, 1000.0),(66, 667.0),(161, 278.0),(33, 278.0),(191, 444.0),(193, 333.0),(248, 333.0),(205, 333.0),(63, 444.0),(39, 278.0),(227, 438.0),(42, 444.0),(116, 333.0),(99, 444.0),(47, 296.0),(60, 606.0),(89, 667.0),(90, 667.0),(110, 611.0),(124, 606.0),(174, 611.0),(179, 500.0),(98, 611.0),(36, 500.0),(92, 606.0),(93, 333.0),(38, 833.0),(102, 389.0),(183, 606.0),(45, 333.0),(117, 611.0),(105, 333.0),(164, 167.0),(91, 333.0),(108, 333.0),(233, 833.0),(74, 389.0),(86, 778.0),(41, 333.0),(52, 500.0),(82, 722.0),(83, 611.0),(198, 333.0),(162, 500.0),(171, 500.0),(48, 500.0),(69, 611.0),(68, 833.0),(206, 333.0),(197, 333.0),(208, 1000.0),(81, 833.0),(62, 606.0),(120, 500.0),(173, 389.0),(225, 1000.0),(177, 500.0),(113, 611.0),(196, 333.0),(200, 333.0),(88, 667.0),(235, 488.0),(103, 556.0),(55, 500.0),(106, 333.0),(232, 611.0),(245, 333.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref ZapfDingbats: FontMetrics = FontMetrics {
        ascent: 0.0,
        descent: 0.0,
        cap_height: 0.0,
        x_height: 0.0,
        italic_angle: 0.0,
        bbox: (-1.0, -143.0, 981.0, 820.0),
        flags: 0,
        font_family: "ITC".to_string(),
        font_weight: "Medium".to_string(),
        glyph_widths: vec![
(101, 696.0),(179, 788.0),(36, 980.0),(189, 788.0),(45, 855.0),(187, 788.0),(218, 748.0),(115, 892.0),(225, 828.0),(170, 694.0),(235, 867.0),(33, 974.0),(239, 874.0),(190, 788.0),(216, 748.0),(125, 668.0),(193, 788.0),(200, 788.0),(53, 762.0),(113, 759.0),(197, 788.0),(77, 833.0),(103, 786.0),(207, 788.0),(213, 838.0),(132, 276.0),(185, 788.0),(195, 788.0),(222, 928.0),(237, 696.0),(60, 754.0),(188, 788.0),(57, 763.0),(98, 789.0),(42, 960.0),(82, 723.0),(137, 410.0),(48, 911.0),(50, 974.0),(253, 970.0),(129, 390.0),(246, 771.0),(204, 788.0),(105, 713.0),(76, 823.0),(39, 790.0),(214, 1016.0),(118, 784.0),(131, 317.0),(251, 873.0),(96, 815.0),(171, 626.0),(84, 790.0),(175, 788.0),(184, 788.0),(199, 788.0),(208, 788.0),(230, 931.0),(232, 883.0),(49, 945.0),(245, 865.0),(90, 759.0),(92, 708.0),(234, 836.0),(75, 841.0),(194, 788.0),(254, 918.0),(236, 867.0),(122, 415.0),(202, 788.0),(56, 677.0),(44, 549.0),(51, 755.0),(73, 823.0),(140, 334.0),(79, 831.0),(68, 788.0),(40, 791.0),(65, 692.0),(112, 762.0),(124, 392.0),(138, 234.0),(168, 776.0),(176, 788.0),(78, 816.0),(91, 707.0),(95, 826.0),(215, 458.0),(164, 910.0),(220, 927.0),(139, 234.0),(238, 696.0),(241, 874.0),(206, 788.0),(74, 789.0),(66, 786.0),(249, 888.0),(117, 788.0),(61, 494.0),(47, 933.0),(135, 509.0),(38, 789.0),(242, 760.0),(110, 761.0),(191, 788.0),(247, 888.0),(99, 707.0),(192, 788.0),(41, 690.0),(88, 768.0),(183, 788.0),(223, 834.0),(87, 776.0),(108, 791.0),(165, 667.0),(172, 788.0),(205, 788.0),(54, 761.0),(46, 911.0),(80, 923.0),(52, 846.0),(89, 792.0),(94, 701.0),(116, 892.0),(106, 791.0),(166, 760.0),(181, 788.0),(43, 939.0),(63, 537.0),(134, 509.0),(162, 544.0),(169, 595.0),(133, 276.0),(35, 974.0),(174, 788.0),(244, 771.0),(107, 785.0),(212, 894.0),(72, 816.0),(186, 788.0),(100, 687.0),(71, 794.0),(203, 788.0),(219, 918.0),(228, 917.0),(34, 961.0),(198, 788.0),(128, 390.0),(250, 831.0),(161, 732.0),(109, 873.0),(209, 788.0),(252, 927.0),(163, 544.0),(248, 967.0),(64, 577.0),(81, 744.0),(180, 788.0),(227, 924.0),(102, 689.0),(62, 552.0),(32, 278.0),(224, 873.0),(119, 438.0),(97, 789.0),(226, 924.0),(130, 317.0),(114, 759.0),(173, 788.0),(58, 760.0),(83, 749.0),(167, 760.0),(85, 792.0),(104, 787.0),(69, 790.0),(67, 788.0),(126, 668.0),(201, 788.0),(55, 571.0),(182, 788.0),(210, 788.0),(111, 762.0),(59, 759.0),(177, 788.0),(178, 788.0),(243, 946.0),(141, 334.0),(121, 277.0),(136, 410.0),(229, 930.0),(120, 138.0),(37, 719.0),(86, 695.0),(211, 788.0),(70, 793.0),(196, 788.0),(217, 924.0),(221, 928.0),(233, 836.0),(231, 463.0),(93, 682.0),(123, 392.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Bookman_Demi: FontMetrics = FontMetrics {
        ascent: 717.0,
        descent: -228.0,
        cap_height: 681.0,
        x_height: 502.0,
        italic_angle: 0.0,
        bbox: (-194.0, -250.0, 1346.0, 934.0),
        flags: 0,
        font_family: "ITC".to_string(),
        font_weight: "Demi".to_string(),
        glyph_widths: vec![
(180, 340.0),(97, 580.0),(245, 360.0),(196, 480.0),(115, 520.0),(33, 360.0),(89, 700.0),(75, 800.0),(105, 360.0),(188, 1000.0),(35, 660.0),(32, 340.0),(117, 660.0),(77, 940.0),(121, 620.0),(174, 740.0),(203, 360.0),(225, 1140.0),(112, 640.0),(227, 400.0),(233, 800.0),(96, 320.0),(69, 720.0),(110, 680.0),(79, 800.0),(103, 580.0),(104, 680.0),(175, 740.0),(49, 660.0),(101, 580.0),(165, 660.0),(102, 380.0),(202, 340.0),(67, 740.0),(55, 660.0),(58, 340.0),(182, 800.0),(166, 660.0),(114, 460.0),(70, 680.0),(34, 420.0),(63, 660.0),(99, 580.0),(164, 120.0),(168, 660.0),(195, 500.0),(241, 880.0),(173, 220.0),(80, 660.0),(107, 660.0),(44, 340.0),(52, 660.0),(90, 640.0),(251, 660.0),(87, 940.0),(37, 940.0),(42, 460.0),(83, 660.0),(232, 640.0),(199, 320.0),(249, 620.0),(62, 600.0),(81, 800.0),(68, 780.0),(113, 620.0),(119, 800.0),(124, 600.0),(111, 620.0),(171, 400.0),(167, 600.0),(120, 600.0),(116, 460.0),(36, 660.0),(161, 360.0),(43, 600.0),(186, 540.0),(109, 1000.0),(85, 740.0),(47, 600.0),(92, 600.0),(187, 400.0),(206, 320.0),(106, 340.0),(234, 1220.0),(61, 600.0),(86, 720.0),(39, 320.0),(179, 380.0),(51, 660.0),(59, 340.0),(40, 320.0),(72, 820.0),(76, 640.0),(78, 740.0),(162, 660.0),(191, 660.0),(41, 320.0),(250, 940.0),(184, 320.0),(126, 600.0),(64, 820.0),(169, 240.0),(207, 500.0),(54, 660.0),(198, 500.0),(123, 320.0),(48, 660.0),(60, 600.0),(46, 340.0),(197, 460.0),(163, 660.0),(200, 500.0),(194, 400.0),(235, 400.0),(88, 780.0),(122, 560.0),(185, 540.0),(183, 460.0),(71, 780.0),(74, 640.0),(91, 300.0),(53, 660.0),(94, 600.0),(98, 600.0),(50, 660.0),(82, 780.0),(208, 1000.0),(38, 800.0),(66, 720.0),(172, 220.0),(248, 340.0),(65, 720.0),(56, 660.0),(193, 400.0),(205, 440.0),(100, 640.0),(57, 660.0),(118, 600.0),(178, 440.0),(170, 540.0),(177, 500.0),(108, 340.0),(93, 300.0),(189, 1360.0),(45, 360.0),(73, 400.0),(95, 500.0),(84, 700.0),(125, 320.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Helvetica_Narrow_Bold: FontMetrics = FontMetrics {
        ascent: 718.0,
        descent: -207.0,
        cap_height: 718.0,
        x_height: 532.0,
        italic_angle: 0.0,
        bbox: (-139.0, -228.0, 822.0, 962.0),
        flags: 0,
        font_family: "Helvetica".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(65, 592.0),(93, 273.0),(94, 479.0),(165, 456.0),(33, 273.0),(251, 501.0),(51, 456.0),(123, 319.0),(104, 501.0),(164, 137.0),(172, 273.0),(180, 228.0),(49, 456.0),(166, 456.0),(125, 319.0),(168, 456.0),(119, 638.0),(202, 273.0),(191, 501.0),(89, 547.0),(120, 456.0),(193, 273.0),(83, 547.0),(71, 638.0),(56, 456.0),(68, 592.0),(177, 456.0),(174, 501.0),(91, 273.0),(99, 456.0),(95, 456.0),(39, 228.0),(92, 228.0),(53, 456.0),(186, 410.0),(182, 456.0),(67, 592.0),(241, 729.0),(73, 228.0),(122, 410.0),(40, 273.0),(97, 456.0),(108, 228.0),(189, 820.0),(197, 273.0),(227, 303.0),(75, 592.0),(52, 456.0),(234, 820.0),(235, 299.0),(32, 228.0),(74, 456.0),(88, 547.0),(90, 501.0),(87, 774.0),(111, 501.0),(72, 592.0),(36, 456.0),(79, 638.0),(62, 479.0),(110, 501.0),(170, 410.0),(113, 501.0),(38, 592.0),(117, 501.0),(208, 820.0),(245, 228.0),(198, 273.0),(70, 501.0),(114, 319.0),(101, 456.0),(175, 501.0),(178, 456.0),(115, 456.0),(232, 501.0),(34, 389.0),(37, 729.0),(82, 592.0),(35, 456.0),(55, 456.0),(200, 273.0),(54, 456.0),(183, 287.0),(184, 228.0),(47, 228.0),(126, 479.0),(179, 456.0),(194, 273.0),(60, 479.0),(203, 273.0),(42, 319.0),(84, 501.0),(124, 230.0),(162, 456.0),(185, 410.0),(199, 273.0),(249, 501.0),(85, 592.0),(81, 638.0),(206, 273.0),(250, 774.0),(45, 273.0),(173, 273.0),(61, 479.0),(107, 456.0),(109, 729.0),(187, 456.0),(86, 547.0),(77, 683.0),(233, 638.0),(196, 273.0),(96, 228.0),(48, 456.0),(248, 228.0),(112, 501.0),(195, 273.0),(57, 456.0),(161, 273.0),(116, 273.0),(59, 273.0),(78, 592.0),(169, 195.0),(171, 456.0),(105, 228.0),(80, 547.0),(43, 479.0),(50, 456.0),(66, 592.0),(76, 501.0),(102, 273.0),(103, 501.0),(100, 501.0),(106, 228.0),(98, 501.0),(44, 228.0),(58, 273.0),(188, 820.0),(64, 800.0),(225, 820.0),(167, 456.0),(121, 456.0),(207, 273.0),(163, 456.0),(46, 228.0),(63, 501.0),(41, 273.0),(69, 547.0),(118, 456.0),(205, 273.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Palatino_BoldItalic: FontMetrics = FontMetrics {
        ascent: 726.0,
        descent: -281.0,
        cap_height: 681.0,
        x_height: 469.0,
        italic_angle: -10.0,
        bbox: (-170.0, -271.0, 1073.0, 926.0),
        flags: 64,
        font_family: "Palatino".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(111, 556.0),(36, 500.0),(122, 500.0),(175, 611.0),(98, 537.0),(58, 250.0),(117, 556.0),(71, 778.0),(241, 738.0),(75, 722.0),(82, 722.0),(40, 333.0),(93, 333.0),(101, 444.0),(45, 389.0),(76, 611.0),(81, 833.0),(120, 500.0),(161, 333.0),(77, 944.0),(177, 500.0),(171, 500.0),(105, 333.0),(94, 606.0),(178, 556.0),(186, 500.0),(195, 333.0),(104, 556.0),(189, 1000.0),(187, 500.0),(33, 333.0),(37, 889.0),(47, 315.0),(83, 556.0),(86, 667.0),(206, 333.0),(69, 611.0),(39, 278.0),(72, 778.0),(84, 611.0),(56, 500.0),(90, 667.0),(102, 333.0),(162, 500.0),(169, 250.0),(57, 500.0),(68, 778.0),(126, 606.0),(167, 556.0),(184, 250.0),(227, 333.0),(79, 833.0),(67, 685.0),(41, 333.0),(163, 500.0),(197, 333.0),(248, 333.0),(32, 250.0),(55, 500.0),(62, 606.0),(110, 556.0),(65, 722.0),(113, 537.0),(202, 556.0),(194, 333.0),(54, 500.0),(44, 250.0),(170, 500.0),(85, 778.0),(114, 389.0),(183, 606.0),(198, 333.0),(35, 500.0),(60, 606.0),(74, 389.0),(92, 606.0),(96, 278.0),(108, 333.0),(207, 333.0),(34, 500.0),(172, 333.0),(103, 500.0),(205, 333.0),(118, 556.0),(185, 500.0),(196, 333.0),(80, 667.0),(48, 500.0),(64, 833.0),(100, 556.0),(188, 1000.0),(91, 333.0),(116, 389.0),(179, 556.0),(235, 333.0),(182, 556.0),(112, 556.0),(53, 500.0),(193, 333.0),(61, 606.0),(51, 500.0),(73, 389.0),(97, 556.0),(200, 333.0),(208, 1000.0),(173, 333.0),(87, 1000.0),(119, 833.0),(249, 556.0),(121, 556.0),(203, 333.0),(109, 833.0),(233, 833.0),(245, 333.0),(42, 444.0),(49, 500.0),(99, 444.0),(124, 606.0),(66, 667.0),(125, 333.0),(50, 500.0),(168, 500.0),(78, 778.0),(225, 944.0),(232, 611.0),(166, 500.0),(164, 167.0),(115, 444.0),(38, 833.0),(251, 556.0),(234, 944.0),(43, 606.0),(165, 500.0),(180, 250.0),(199, 333.0),(95, 500.0),(63, 444.0),(89, 611.0),(70, 556.0),(106, 333.0),(191, 444.0),(88, 722.0),(107, 556.0),(52, 500.0),(174, 611.0),(59, 250.0),(46, 250.0),(123, 333.0),(250, 778.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Helvetica: FontMetrics = FontMetrics {
        ascent: 718.0,
        descent: -207.0,
        cap_height: 718.0,
        x_height: 523.0,
        italic_angle: 0.0,
        bbox: (-166.0, -225.0, 1000.0, 931.0),
        flags: 0,
        font_family: "Helvetica".to_string(),
        font_weight: "Medium".to_string(),
        glyph_widths: vec![
(177, 556.0),(206, 333.0),(71, 778.0),(169, 191.0),(80, 667.0),(86, 667.0),(198, 333.0),(234, 1000.0),(84, 611.0),(120, 500.0),(248, 222.0),(164, 167.0),(77, 833.0),(174, 500.0),(191, 611.0),(207, 333.0),(66, 667.0),(168, 556.0),(241, 889.0),(170, 333.0),(53, 556.0),(75, 667.0),(202, 333.0),(69, 667.0),(179, 556.0),(227, 370.0),(104, 556.0),(70, 611.0),(163, 556.0),(167, 556.0),(250, 944.0),(106, 222.0),(171, 556.0),(62, 584.0),(87, 944.0),(200, 333.0),(63, 556.0),(76, 556.0),(45, 333.0),(114, 333.0),(97, 556.0),(249, 611.0),(82, 722.0),(89, 667.0),(175, 500.0),(32, 278.0),(251, 611.0),(203, 333.0),(58, 278.0),(109, 833.0),(123, 334.0),(93, 278.0),(113, 556.0),(183, 350.0),(112, 556.0),(92, 278.0),(72, 722.0),(188, 1000.0),(116, 278.0),(46, 278.0),(44, 278.0),(83, 667.0),(78, 722.0),(85, 722.0),(208, 1000.0),(166, 556.0),(98, 556.0),(40, 333.0),(36, 556.0),(79, 778.0),(124, 260.0),(187, 556.0),(195, 333.0),(91, 278.0),(95, 556.0),(52, 556.0),(101, 556.0),(126, 584.0),(182, 537.0),(99, 500.0),(185, 333.0),(117, 556.0),(33, 278.0),(161, 333.0),(119, 722.0),(74, 500.0),(245, 278.0),(47, 278.0),(35, 556.0),(233, 778.0),(48, 556.0),(34, 355.0),(178, 556.0),(180, 278.0),(81, 778.0),(42, 389.0),(49, 556.0),(184, 222.0),(196, 333.0),(121, 500.0),(50, 556.0),(37, 889.0),(197, 333.0),(55, 556.0),(60, 584.0),(105, 222.0),(73, 278.0),(122, 500.0),(186, 333.0),(90, 611.0),(94, 469.0),(235, 365.0),(67, 722.0),(115, 500.0),(51, 556.0),(162, 556.0),(56, 556.0),(64, 1015.0),(100, 556.0),(107, 500.0),(88, 667.0),(173, 333.0),(65, 667.0),(225, 1000.0),(165, 556.0),(125, 334.0),(39, 222.0),(110, 556.0),(96, 222.0),(189, 1000.0),(193, 333.0),(57, 556.0),(68, 722.0),(38, 667.0),(61, 584.0),(54, 556.0),(103, 556.0),(108, 222.0),(111, 556.0),(199, 333.0),(118, 500.0),(205, 333.0),(41, 333.0),(59, 278.0),(232, 556.0),(172, 333.0),(43, 584.0),(102, 278.0),(194, 333.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref NewCenturySchlbk_BoldItalic: FontMetrics = FontMetrics {
        ascent: 737.0,
        descent: -205.0,
        cap_height: 722.0,
        x_height: 477.0,
        italic_angle: -16.0,
        bbox: (-205.0, -250.0, 1147.0, 991.0),
        flags: 64,
        font_family: "New".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(64, 747.0),(36, 574.0),(81, 833.0),(34, 400.0),(114, 519.0),(52, 574.0),(80, 741.0),(95, 500.0),(116, 407.0),(63, 481.0),(90, 704.0),(186, 481.0),(165, 574.0),(60, 606.0),(232, 704.0),(161, 333.0),(227, 412.0),(71, 815.0),(177, 500.0),(62, 606.0),(113, 630.0),(111, 574.0),(93, 407.0),(180, 287.0),(89, 704.0),(104, 685.0),(100, 667.0),(184, 259.0),(66, 759.0),(39, 259.0),(49, 574.0),(119, 833.0),(168, 574.0),(194, 333.0),(121, 519.0),(196, 333.0),(200, 333.0),(208, 1000.0),(53, 574.0),(78, 852.0),(74, 667.0),(69, 741.0),(76, 704.0),(188, 1000.0),(32, 287.0),(57, 574.0),(77, 944.0),(189, 1167.0),(202, 333.0),(38, 889.0),(203, 333.0),(249, 574.0),(115, 481.0),(47, 278.0),(234, 963.0),(185, 481.0),(68, 833.0),(87, 944.0),(41, 407.0),(45, 333.0),(54, 574.0),(120, 574.0),(250, 852.0),(55, 574.0),(206, 333.0),(164, 167.0),(94, 606.0),(92, 606.0),(126, 606.0),(37, 889.0),(42, 500.0),(166, 574.0),(84, 722.0),(46, 287.0),(48, 574.0),(70, 704.0),(56, 574.0),(248, 389.0),(225, 889.0),(43, 606.0),(75, 778.0),(162, 574.0),(175, 685.0),(65, 741.0),(85, 833.0),(99, 537.0),(50, 574.0),(83, 685.0),(235, 356.0),(118, 556.0),(112, 648.0),(67, 759.0),(105, 389.0),(97, 667.0),(195, 333.0),(58, 287.0),(197, 333.0),(205, 333.0),(122, 519.0),(191, 481.0),(163, 574.0),(109, 944.0),(198, 333.0),(125, 407.0),(178, 500.0),(179, 500.0),(182, 650.0),(61, 606.0),(241, 815.0),(174, 685.0),(102, 389.0),(169, 287.0),(51, 574.0),(96, 259.0),(107, 648.0),(183, 606.0),(91, 407.0),(110, 685.0),(171, 481.0),(88, 741.0),(59, 287.0),(124, 606.0),(207, 333.0),(86, 741.0),(82, 796.0),(173, 278.0),(199, 333.0),(35, 574.0),(117, 685.0),(123, 407.0),(73, 444.0),(33, 333.0),(72, 870.0),(40, 407.0),(103, 611.0),(101, 519.0),(106, 370.0),(108, 389.0),(172, 278.0),(193, 333.0),(233, 833.0),(245, 389.0),(167, 500.0),(251, 574.0),(79, 833.0),(170, 481.0),(187, 481.0),(98, 611.0),(44, 287.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Symbol: FontMetrics = FontMetrics {
        ascent: 0.0,
        descent: 0.0,
        cap_height: 0.0,
        x_height: 0.0,
        italic_angle: 0.0,
        bbox: (-180.0, -293.0, 1090.0, 1010.0),
        flags: 0,
        font_family: "Symbol".to_string(),
        font_weight: "Medium".to_string(),
        glyph_widths: vec![
(93, 333.0),(170, 753.0),(116, 439.0),(204, 713.0),(228, 786.0),(234, 384.0),(168, 753.0),(191, 658.0),(230, 384.0),(117, 576.0),(106, 603.0),(197, 768.0),(96, 500.0),(37, 833.0),(186, 549.0),(121, 686.0),(205, 713.0),(81, 741.0),(219, 1042.0),(208, 768.0),(40, 333.0),(194, 795.0),(215, 250.0),(222, 987.0),(202, 713.0),(224, 494.0),(217, 603.0),(229, 713.0),(245, 686.0),(203, 713.0),(238, 494.0),(45, 549.0),(126, 549.0),(207, 713.0),(86, 439.0),(200, 768.0),(94, 658.0),(216, 713.0),(65, 722.0),(249, 384.0),(70, 763.0),(50, 500.0),(108, 549.0),(64, 549.0),(84, 611.0),(231, 384.0),(226, 790.0),(74, 631.0),(123, 480.0),(85, 690.0),(38, 778.0),(87, 768.0),(73, 333.0),(97, 631.0),(113, 521.0),(115, 603.0),(43, 549.0),(55, 500.0),(111, 549.0),(167, 753.0),(110, 521.0),(185, 549.0),(190, 1000.0),(225, 329.0),(227, 790.0),(233, 384.0),(187, 549.0),(237, 494.0),(52, 500.0),(71, 603.0),(98, 549.0),(176, 400.0),(232, 384.0),(118, 713.0),(90, 611.0),(34, 713.0),(160, 750.0),(235, 384.0),(184, 549.0),(248, 384.0),(35, 500.0),(57, 500.0),(241, 329.0),(212, 890.0),(105, 329.0),(125, 480.0),(69, 611.0),(72, 722.0),(88, 645.0),(201, 713.0),(95, 500.0),(209, 713.0),(119, 686.0),(220, 987.0),(78, 722.0),(44, 250.0),(188, 1000.0),(76, 686.0),(79, 722.0),(82, 556.0),(53, 500.0),(112, 549.0),(163, 549.0),(102, 521.0),(174, 987.0),(175, 603.0),(177, 549.0),(33, 333.0),(182, 494.0),(49, 500.0),(47, 278.0),(75, 722.0),(172, 987.0),(32, 250.0),(221, 603.0),(92, 863.0),(114, 549.0),(192, 823.0),(39, 439.0),(223, 603.0),(247, 384.0),(250, 384.0),(60, 549.0),(166, 500.0),(178, 411.0),(254, 494.0),(251, 384.0),(83, 592.0),(165, 713.0),(68, 612.0),(107, 549.0),(198, 823.0),(242, 274.0),(253, 494.0),(120, 493.0),(61, 549.0),(183, 460.0),(189, 603.0),(41, 333.0),(171, 1042.0),(236, 494.0),(213, 823.0),(54, 500.0),(58, 278.0),(48, 500.0),(67, 722.0),(210, 790.0),(214, 549.0),(100, 494.0),(66, 667.0),(161, 620.0),(124, 200.0),(211, 790.0),(36, 549.0),(179, 549.0),(173, 603.0),(243, 686.0),(244, 686.0),(195, 987.0),(63, 444.0),(62, 549.0),(101, 439.0),(252, 494.0),(104, 603.0),(169, 753.0),(180, 549.0),(46, 250.0),(164, 167.0),(181, 713.0),(89, 795.0),(103, 411.0),(59, 278.0),(196, 768.0),(246, 384.0),(199, 768.0),(51, 500.0),(122, 494.0),(239, 494.0),(77, 889.0),(80, 768.0),(109, 576.0),(99, 549.0),(218, 603.0),(162, 247.0),(56, 500.0),(91, 333.0),(193, 686.0),(206, 713.0),(42, 500.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Times_Bold: FontMetrics = FontMetrics {
        ascent: 683.0,
        descent: -217.0,
        cap_height: 676.0,
        x_height: 461.0,
        italic_angle: 0.0,
        bbox: (-168.0, -218.0, 1000.0, 935.0),
        flags: 0,
        font_family: "Times".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(166, 500.0),(175, 556.0),(199, 333.0),(245, 278.0),(85, 722.0),(49, 500.0),(168, 500.0),(46, 250.0),(56, 500.0),(98, 556.0),(167, 500.0),(121, 500.0),(60, 570.0),(186, 500.0),(234, 1000.0),(57, 500.0),(78, 722.0),(115, 389.0),(205, 333.0),(69, 667.0),(81, 778.0),(104, 556.0),(200, 333.0),(66, 667.0),(34, 555.0),(70, 611.0),(196, 333.0),(202, 333.0),(177, 500.0),(96, 333.0),(108, 278.0),(55, 500.0),(161, 333.0),(164, 167.0),(99, 444.0),(95, 500.0),(40, 333.0),(162, 500.0),(174, 556.0),(83, 556.0),(118, 500.0),(52, 500.0),(172, 333.0),(39, 333.0),(94, 581.0),(107, 556.0),(105, 278.0),(170, 500.0),(227, 300.0),(65, 722.0),(33, 333.0),(89, 722.0),(106, 333.0),(103, 500.0),(113, 556.0),(179, 500.0),(180, 250.0),(188, 1000.0),(249, 500.0),(183, 350.0),(53, 500.0),(77, 944.0),(163, 500.0),(187, 500.0),(232, 667.0),(195, 333.0),(79, 778.0),(47, 278.0),(169, 278.0),(68, 722.0),(44, 250.0),(42, 500.0),(102, 333.0),(178, 500.0),(235, 330.0),(208, 1000.0),(61, 570.0),(74, 500.0),(110, 556.0),(50, 500.0),(206, 333.0),(117, 556.0),(123, 394.0),(126, 520.0),(251, 556.0),(225, 1000.0),(35, 500.0),(86, 722.0),(112, 556.0),(75, 778.0),(58, 333.0),(185, 500.0),(197, 333.0),(84, 667.0),(116, 333.0),(36, 500.0),(48, 500.0),(114, 444.0),(38, 833.0),(88, 722.0),(193, 333.0),(100, 556.0),(51, 500.0),(63, 500.0),(87, 1000.0),(191, 500.0),(92, 278.0),(82, 722.0),(67, 722.0),(111, 500.0),(120, 500.0),(37, 1000.0),(54, 500.0),(184, 333.0),(80, 611.0),(76, 667.0),(59, 333.0),(189, 1000.0),(203, 333.0),(207, 333.0),(171, 500.0),(182, 540.0),(241, 722.0),(43, 570.0),(62, 570.0),(122, 444.0),(72, 778.0),(109, 833.0),(45, 333.0),(73, 389.0),(97, 500.0),(101, 444.0),(165, 500.0),(32, 250.0),(119, 722.0),(248, 278.0),(173, 333.0),(125, 394.0),(250, 722.0),(93, 333.0),(91, 333.0),(194, 333.0),(233, 778.0),(64, 930.0),(41, 333.0),(71, 778.0),(124, 220.0),(198, 333.0),(90, 667.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Helvetica_Oblique: FontMetrics = FontMetrics {
        ascent: 718.0,
        descent: -207.0,
        cap_height: 718.0,
        x_height: 523.0,
        italic_angle: -12.0,
        bbox: (-170.0, -225.0, 1116.0, 931.0),
        flags: 64,
        font_family: "Helvetica".to_string(),
        font_weight: "Medium".to_string(),
        glyph_widths: vec![
(187, 556.0),(55, 556.0),(36, 556.0),(67, 722.0),(123, 334.0),(61, 584.0),(96, 222.0),(101, 556.0),(88, 667.0),(49, 556.0),(76, 556.0),(40, 333.0),(121, 500.0),(97, 556.0),(98, 556.0),(100, 556.0),(107, 500.0),(200, 333.0),(47, 278.0),(92, 278.0),(241, 889.0),(184, 222.0),(232, 556.0),(248, 222.0),(64, 1015.0),(225, 1000.0),(58, 278.0),(33, 278.0),(208, 1000.0),(68, 722.0),(112, 556.0),(70, 611.0),(80, 667.0),(199, 333.0),(59, 278.0),(167, 556.0),(89, 667.0),(43, 584.0),(180, 278.0),(60, 584.0),(79, 778.0),(235, 365.0),(169, 191.0),(71, 778.0),(250, 944.0),(94, 469.0),(87, 944.0),(227, 370.0),(52, 556.0),(39, 222.0),(205, 333.0),(175, 500.0),(174, 500.0),(56, 556.0),(164, 167.0),(196, 333.0),(202, 333.0),(35, 556.0),(185, 333.0),(115, 500.0),(163, 556.0),(69, 667.0),(124, 260.0),(186, 333.0),(41, 333.0),(206, 333.0),(125, 334.0),(245, 278.0),(86, 667.0),(165, 556.0),(109, 833.0),(45, 333.0),(168, 556.0),(77, 833.0),(119, 722.0),(44, 278.0),(50, 556.0),(57, 556.0),(75, 667.0),(172, 333.0),(81, 778.0),(182, 537.0),(91, 278.0),(191, 611.0),(195, 333.0),(103, 556.0),(234, 1000.0),(233, 778.0),(251, 611.0),(73, 278.0),(63, 556.0),(193, 333.0),(203, 333.0),(72, 722.0),(249, 611.0),(183, 350.0),(173, 333.0),(51, 556.0),(90, 611.0),(37, 889.0),(170, 333.0),(178, 556.0),(113, 556.0),(117, 556.0),(122, 500.0),(189, 1000.0),(114, 333.0),(74, 500.0),(111, 556.0),(207, 333.0),(85, 722.0),(42, 389.0),(65, 667.0),(198, 333.0),(171, 556.0),(83, 667.0),(116, 278.0),(102, 278.0),(197, 333.0),(177, 556.0),(46, 278.0),(54, 556.0),(105, 222.0),(120, 500.0),(194, 333.0),(161, 333.0),(166, 556.0),(53, 556.0),(82, 722.0),(66, 667.0),(32, 278.0),(188, 1000.0),(78, 722.0),(93, 278.0),(38, 667.0),(104, 556.0),(179, 556.0),(162, 556.0),(34, 355.0),(99, 500.0),(108, 222.0),(110, 556.0),(118, 500.0),(126, 584.0),(62, 584.0),(48, 556.0),(106, 222.0),(95, 556.0),(84, 611.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Helvetica_BoldOblique: FontMetrics = FontMetrics {
        ascent: 718.0,
        descent: -207.0,
        cap_height: 718.0,
        x_height: 532.0,
        italic_angle: -12.0,
        bbox: (-174.0, -228.0, 1114.0, 962.0),
        flags: 64,
        font_family: "Helvetica".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(171, 556.0),(35, 556.0),(37, 889.0),(191, 611.0),(198, 333.0),(45, 333.0),(56, 556.0),(194, 333.0),(81, 778.0),(74, 556.0),(39, 278.0),(97, 556.0),(104, 611.0),(68, 722.0),(197, 333.0),(36, 556.0),(203, 333.0),(234, 1000.0),(46, 278.0),(32, 278.0),(75, 722.0),(126, 584.0),(161, 333.0),(57, 556.0),(61, 584.0),(114, 389.0),(167, 556.0),(195, 333.0),(175, 611.0),(107, 556.0),(55, 556.0),(44, 278.0),(41, 333.0),(180, 278.0),(225, 1000.0),(245, 278.0),(250, 944.0),(38, 722.0),(85, 722.0),(251, 611.0),(116, 333.0),(208, 1000.0),(64, 975.0),(82, 722.0),(80, 667.0),(106, 278.0),(40, 333.0),(65, 722.0),(94, 584.0),(88, 667.0),(49, 556.0),(100, 611.0),(178, 556.0),(79, 778.0),(174, 611.0),(111, 611.0),(189, 1000.0),(92, 278.0),(123, 389.0),(47, 278.0),(170, 500.0),(120, 556.0),(165, 556.0),(50, 556.0),(95, 556.0),(66, 722.0),(93, 333.0),(118, 556.0),(182, 556.0),(196, 333.0),(249, 611.0),(86, 667.0),(89, 667.0),(101, 556.0),(235, 365.0),(54, 556.0),(52, 556.0),(105, 278.0),(164, 167.0),(202, 333.0),(233, 778.0),(78, 722.0),(199, 333.0),(241, 889.0),(124, 280.0),(125, 389.0),(98, 611.0),(162, 556.0),(188, 1000.0),(83, 667.0),(187, 556.0),(121, 556.0),(109, 889.0),(248, 278.0),(60, 584.0),(179, 556.0),(163, 556.0),(90, 611.0),(99, 556.0),(177, 556.0),(58, 333.0),(119, 778.0),(96, 278.0),(43, 584.0),(103, 611.0),(173, 333.0),(193, 333.0),(77, 833.0),(62, 584.0),(206, 333.0),(168, 556.0),(48, 556.0),(84, 611.0),(227, 370.0),(59, 333.0),(113, 611.0),(34, 474.0),(108, 278.0),(76, 611.0),(205, 333.0),(200, 333.0),(207, 333.0),(102, 333.0),(71, 778.0),(110, 611.0),(117, 611.0),(53, 556.0),(63, 611.0),(70, 611.0),(33, 333.0),(169, 238.0),(184, 278.0),(185, 500.0),(91, 333.0),(186, 500.0),(232, 611.0),(115, 556.0),(166, 556.0),(73, 278.0),(42, 389.0),(72, 722.0),(172, 333.0),(122, 500.0),(87, 944.0),(183, 350.0),(51, 556.0),(69, 667.0),(112, 611.0),(67, 722.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Courier_Bold: FontMetrics = FontMetrics {
        ascent: 629.0,
        descent: -157.0,
        cap_height: 562.0,
        x_height: 439.0,
        italic_angle: 0.0,
        bbox: (-113.0, -250.0, 749.0, 801.0),
        flags: 1,
        font_family: "Courier".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(249, 600.0),(67, 600.0),(104, 600.0),(76, 600.0),(92, 600.0),(103, 600.0),(51, 600.0),(88, 600.0),(251, 600.0),(48, 600.0),(207, 600.0),(112, 600.0),(248, 600.0),(79, 600.0),(169, 600.0),(59, 600.0),(73, 600.0),(180, 600.0),(170, 600.0),(40, 600.0),(57, 600.0),(191, 600.0),(168, 600.0),(198, 600.0),(120, 600.0),(241, 600.0),(110, 600.0),(225, 600.0),(126, 600.0),(55, 600.0),(185, 600.0),(235, 600.0),(63, 600.0),(64, 600.0),(91, 600.0),(96, 600.0),(106, 600.0),(195, 600.0),(74, 600.0),(84, 600.0),(166, 600.0),(102, 600.0),(208, 600.0),(62, 600.0),(114, 600.0),(39, 600.0),(53, 600.0),(43, 600.0),(58, 600.0),(90, 600.0),(93, 600.0),(108, 600.0),(124, 600.0),(165, 600.0),(61, 600.0),(175, 600.0),(77, 600.0),(65, 600.0),(71, 600.0),(82, 600.0),(69, 600.0),(200, 600.0),(164, 600.0),(182, 600.0),(250, 600.0),(178, 600.0),(118, 600.0),(205, 600.0),(99, 600.0),(81, 600.0),(171, 600.0),(184, 600.0),(196, 600.0),(101, 600.0),(36, 600.0),(197, 600.0),(98, 600.0),(42, 600.0),(234, 600.0),(33, 600.0),(54, 600.0),(52, 600.0),(100, 600.0),(107, 600.0),(44, 600.0),(109, 600.0),(35, 600.0),(113, 600.0),(227, 600.0),(163, 600.0),(174, 600.0),(41, 600.0),(49, 600.0),(70, 600.0),(97, 600.0),(85, 600.0),(89, 600.0),(83, 600.0),(193, 600.0),(34, 600.0),(50, 600.0),(46, 600.0),(122, 600.0),(45, 600.0),(94, 600.0),(72, 600.0),(32, 600.0),(60, 600.0),(38, 600.0),(167, 600.0),(194, 600.0),(161, 600.0),(78, 600.0),(117, 600.0),(186, 600.0),(187, 600.0),(179, 600.0),(121, 600.0),(66, 600.0),(75, 600.0),(177, 600.0),(202, 600.0),(183, 600.0),(162, 600.0),(232, 600.0),(95, 600.0),(119, 600.0),(123, 600.0),(188, 600.0),(203, 600.0),(115, 600.0),(199, 600.0),(37, 600.0),(189, 600.0),(86, 600.0),(173, 600.0),(68, 600.0),(116, 600.0),(206, 600.0),(47, 600.0),(80, 600.0),(87, 600.0),(56, 600.0),(105, 600.0),(111, 600.0),(172, 600.0),(125, 600.0),(245, 600.0),(233, 600.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref Times_Roman: FontMetrics = FontMetrics {
        ascent: 683.0,
        descent: -217.0,
        cap_height: 662.0,
        x_height: 450.0,
        italic_angle: 0.0,
        bbox: (-168.0, -218.0, 1000.0, 898.0),
        flags: 0,
        font_family: "Times".to_string(),
        font_weight: "Roman".to_string(),
        glyph_widths: vec![
(175, 556.0),(183, 350.0),(188, 1000.0),(207, 333.0),(250, 722.0),(52, 500.0),(107, 500.0),(233, 722.0),(113, 500.0),(205, 333.0),(51, 500.0),(63, 444.0),(227, 276.0),(75, 722.0),(248, 278.0),(72, 722.0),(185, 444.0),(110, 500.0),(104, 500.0),(86, 722.0),(164, 167.0),(172, 333.0),(114, 333.0),(179, 500.0),(251, 500.0),(225, 889.0),(57, 500.0),(70, 556.0),(88, 722.0),(182, 453.0),(168, 500.0),(169, 180.0),(180, 250.0),(235, 310.0),(61, 564.0),(82, 667.0),(167, 500.0),(60, 564.0),(48, 500.0),(66, 667.0),(85, 722.0),(163, 500.0),(203, 333.0),(208, 1000.0),(43, 564.0),(53, 500.0),(112, 500.0),(37, 833.0),(106, 278.0),(97, 444.0),(115, 389.0),(39, 333.0),(178, 500.0),(118, 500.0),(189, 1000.0),(195, 333.0),(249, 500.0),(171, 500.0),(68, 722.0),(59, 278.0),(202, 333.0),(42, 500.0),(125, 480.0),(33, 333.0),(81, 722.0),(105, 278.0),(232, 611.0),(119, 722.0),(99, 444.0),(77, 889.0),(74, 389.0),(120, 500.0),(121, 500.0),(67, 667.0),(36, 500.0),(65, 722.0),(98, 500.0),(173, 333.0),(92, 278.0),(126, 541.0),(103, 500.0),(170, 444.0),(177, 500.0),(83, 556.0),(199, 333.0),(166, 500.0),(109, 778.0),(198, 333.0),(49, 500.0),(196, 333.0),(100, 500.0),(187, 500.0),(200, 333.0),(117, 500.0),(71, 722.0),(58, 278.0),(44, 250.0),(34, 408.0),(62, 564.0),(80, 556.0),(101, 444.0),(122, 444.0),(165, 500.0),(69, 611.0),(193, 333.0),(234, 889.0),(241, 667.0),(55, 500.0),(123, 480.0),(161, 333.0),(95, 500.0),(89, 722.0),(206, 333.0),(38, 778.0),(40, 333.0),(87, 944.0),(56, 500.0),(191, 444.0),(46, 250.0),(50, 500.0),(54, 500.0),(184, 333.0),(186, 444.0),(73, 333.0),(111, 500.0),(162, 500.0),(93, 333.0),(64, 921.0),(32, 250.0),(90, 611.0),(45, 333.0),(35, 500.0),(78, 722.0),(108, 278.0),(124, 200.0),(174, 556.0),(47, 278.0),(76, 611.0),(91, 333.0),(41, 333.0),(84, 611.0),(94, 469.0),(102, 333.0),(194, 333.0),(116, 278.0),(96, 333.0),(197, 333.0),(79, 722.0),(245, 278.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSansCondensed_BoldOblique: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSansCondensed".to_string(),
        font_weight: "BoldOblique".to_string(),
        glyph_widths: vec![
(92, 282.3),(66, 588.9),(62, 647.7),(102, 336.0),(106, 264.7),(39, 236.6),(53, 537.8),(117, 550.3),(125, 550.3),(126, 647.7),(33, 352.3),(86, 598.2),(108, 264.7),(34, 402.7),(87, 852.8),(119, 713.9),(52, 537.8),(70, 528.1),(55, 537.8),(60, 647.7),(64, 773.1),(83, 556.6),(95, 386.3),(54, 537.8),(98, 553.3),(75, 599.0),(74, 287.3),(57, 537.8),(79, 656.9),(45, 320.9),(38, 674.1),(73, 287.3),(82, 595.2),(89, 559.6),(96, 386.3),(103, 553.3),(104, 550.3),(71, 634.2),(47, 282.3),(51, 537.8),(67, 567.1),(110, 550.3),(46, 293.6),(120, 498.3),(42, 403.9),(50, 537.8),(78, 646.8),(43, 647.7),(63, 448.4),(90, 560.4),(80, 566.3),(112, 553.3),(121, 503.8),(122, 449.7),(123, 550.3),(88, 596.1),(41, 353.2),(114, 381.3),(58, 309.1),(32, 268.9),(35, 537.8),(44, 293.6),(65, 598.2),(36, 537.8),(48, 537.8),(69, 528.1),(85, 627.5),(101, 524.3),(105, 264.7),(37, 774.3),(113, 553.3),(118, 503.8),(68, 641.8),(81, 656.9),(56, 537.8),(59, 309.1),(72, 646.8),(93, 353.2),(94, 647.7),(116, 369.5),(124, 282.3),(109, 805.4),(49, 537.8),(107, 513.8),(115, 460.2),(76, 492.4),(97, 521.4),(111, 531.0),(61, 647.7),(77, 769.3),(100, 553.3),(99, 458.1),(91, 353.2),(40, 353.2),(84, 527.3),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuMathTeXGyre: FontMetrics = FontMetrics {
        ascent: 792.0,
        descent: -208.0,
        cap_height: 792.0,
        x_height: 396.0,
        italic_angle: 0.0,
        bbox: (0.0, -208.0, 1000.0, 792.0),
        flags: 0,
        font_family: "DejaVuMathTeXGyre".to_string(),
        font_weight: "Regular".to_string(),
        glyph_widths: vec![
(101, 591.0),(70, 693.0),(63, 536.0),(62, 795.0),(123, 418.0),(109, 948.0),(83, 685.0),(79, 819.0),(100, 640.0),(45, 337.0),(67, 765.0),(81, 819.0),(108, 319.0),(80, 672.0),(53, 636.0),(90, 694.0),(103, 640.0),(119, 855.0),(121, 564.0),(85, 842.0),(40, 424.0),(125, 418.0),(51, 636.0),(42, 500.0),(76, 664.0),(92, 452.0),(72, 872.0),(114, 478.0),(41, 424.0),(69, 729.0),(75, 747.0),(52, 636.0),(97, 596.0),(37, 950.0),(34, 459.0),(54, 636.0),(93, 419.0),(55, 636.0),(47, 452.0),(94, 837.0),(102, 370.0),(60, 795.0),(32, 317.0),(88, 711.0),(33, 401.0),(56, 636.0),(105, 319.0),(113, 640.0),(115, 513.0),(36, 636.0),(50, 636.0),(116, 401.0),(118, 564.0),(43, 788.0),(124, 224.0),(107, 605.0),(38, 890.0),(87, 1027.0),(73, 395.0),(95, 500.0),(111, 602.0),(46, 317.0),(77, 1023.0),(61, 788.0),(71, 798.0),(66, 734.0),(82, 752.0),(84, 666.0),(96, 500.0),(64, 1000.0),(99, 560.0),(104, 644.0),(58, 336.0),(74, 400.0),(91, 419.0),(39, 274.0),(106, 310.0),(65, 722.0),(44, 317.0),(49, 636.0),(117, 644.0),(89, 660.0),(98, 640.0),(120, 563.0),(126, 837.0),(78, 875.0),(57, 636.0),(48, 636.0),(110, 644.0),(112, 640.0),(122, 526.0),(86, 722.0),(59, 336.0),(68, 801.0),(35, 837.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSansCondensed: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSansCondensed".to_string(),
        font_weight: "Regular".to_string(),
        glyph_widths: vec![
(79, 608.2),(36, 491.6),(60, 647.7),(50, 491.6),(70, 444.6),(39, 212.2),(105, 214.8),(106, 214.8),(107, 447.6),(40, 301.6),(84, 471.9),(52, 491.6),(86, 528.5),(114, 317.5),(92, 260.5),(123, 491.6),(41, 301.6),(74, 227.8),(75, 506.7),(48, 491.6),(71, 599.0),(78, 578.0),(98, 490.8),(125, 491.6),(94, 647.7),(54, 491.6),(42, 386.3),(77, 666.9),(115, 402.7),(38, 602.8),(102, 271.8),(49, 491.6),(64, 773.1),(118, 457.2),(113, 490.8),(32, 245.4),(73, 227.8),(76, 430.4),(85, 565.9),(103, 490.8),(53, 491.6),(56, 491.6),(63, 410.2),(108, 214.8),(58, 260.5),(109, 752.9),(66, 530.2),(117, 489.9),(90, 529.4),(121, 457.2),(81, 608.2),(101, 475.7),(87, 764.3),(116, 302.9),(126, 647.7),(46, 245.4),(55, 491.6),(88, 529.4),(61, 647.7),(62, 647.7),(91, 301.6),(100, 490.8),(82, 536.9),(111, 472.7),(120, 457.2),(67, 539.8),(124, 260.5),(45, 278.9),(99, 424.9),(112, 490.8),(96, 386.3),(122, 405.6),(119, 632.1),(95, 386.3),(44, 245.4),(51, 491.6),(89, 471.9),(104, 489.9),(35, 647.7),(59, 260.5),(83, 490.8),(37, 734.5),(47, 260.5),(97, 473.6),(43, 647.7),(33, 309.6),(93, 301.6),(34, 355.3),(65, 528.5),(68, 595.2),(80, 466.0),(57, 491.6),(69, 488.3),(110, 489.9),(72, 581.4),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSansCondensed_Bold: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSansCondensed".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(89, 559.6),(79, 656.9),(76, 492.4),(38, 674.1),(106, 264.7),(58, 309.1),(51, 537.8),(46, 293.6),(65, 598.2),(78, 646.8),(82, 595.2),(98, 553.3),(62, 647.7),(54, 537.8),(104, 550.3),(84, 527.3),(74, 287.3),(72, 646.8),(92, 282.3),(35, 647.7),(69, 528.1),(114, 381.3),(94, 647.7),(118, 503.8),(44, 293.6),(110, 550.3),(59, 309.1),(93, 353.2),(48, 537.8),(75, 599.0),(45, 320.9),(61, 647.7),(112, 553.3),(123, 550.3),(42, 403.9),(80, 566.3),(101, 524.3),(73, 287.3),(103, 553.3),(41, 353.2),(91, 353.2),(55, 537.8),(68, 641.8),(88, 596.1),(116, 369.5),(119, 713.9),(39, 236.6),(66, 588.9),(99, 458.1),(108, 264.7),(125, 550.3),(126, 647.7),(63, 448.4),(77, 769.3),(86, 598.2),(57, 537.8),(97, 521.4),(107, 513.8),(40, 353.2),(60, 647.7),(43, 647.7),(47, 282.3),(71, 634.2),(34, 402.7),(37, 774.3),(33, 352.3),(105, 264.7),(67, 567.1),(115, 460.2),(50, 537.8),(32, 268.9),(109, 805.4),(83, 556.6),(64, 773.1),(56, 537.8),(85, 627.5),(96, 386.3),(121, 503.8),(124, 282.3),(95, 386.3),(87, 852.8),(90, 560.4),(120, 498.3),(111, 531.0),(100, 553.3),(102, 336.0),(36, 537.8),(113, 553.3),(49, 537.8),(117, 550.3),(52, 537.8),(53, 537.8),(70, 528.1),(81, 656.9),(122, 449.7),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSerifCondensed_Bold: FontMetrics = FontMetrics {
        ascent: 799.3,
        descent: -200.7,
        cap_height: 799.3,
        x_height: 399.6,
        italic_angle: 0.0,
        bbox: (0.0, -200.7, 1000.0, 799.3),
        flags: 0,
        font_family: "DejaVuSerifCondensed".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(76, 538.7),(35, 641.7),(54, 532.8),(70, 543.6),(78, 699.9),(109, 810.5),(115, 431.0),(94, 641.7),(106, 276.8),(81, 667.1),(122, 434.7),(45, 318.0),(102, 329.2),(123, 492.5),(46, 266.4),(121, 445.1),(82, 636.3),(116, 353.7),(32, 266.4),(97, 496.3),(85, 667.9),(36, 532.8),(44, 266.4),(71, 654.2),(64, 766.0),(73, 358.3),(74, 362.4),(99, 466.3),(37, 727.8),(40, 362.4),(66, 647.1),(67, 609.7),(93, 362.4),(48, 532.8),(53, 532.8),(87, 860.3),(101, 487.1),(113, 535.3),(39, 234.4),(91, 362.4),(126, 641.7),(57, 532.8),(42, 400.2),(56, 532.8),(60, 641.7),(79, 667.1),(90, 559.0),(100, 535.3),(105, 290.9),(75, 665.8),(89, 546.6),(118, 445.1),(41, 362.4),(51, 532.8),(62, 641.7),(43, 641.7),(107, 530.8),(49, 532.8),(110, 556.9),(112, 535.3),(69, 583.5),(33, 336.2),(68, 664.2),(77, 847.9),(83, 553.2),(50, 532.8),(59, 282.6),(86, 594.3),(95, 382.8),(98, 535.3),(111, 510.8),(58, 282.6),(119, 659.2),(61, 641.7),(47, 279.7),(55, 532.8),(125, 492.5),(103, 535.3),(120, 456.4),(72, 723.6),(38, 691.6),(84, 569.8),(96, 382.8),(65, 594.3),(108, 290.9),(88, 594.3),(92, 279.7),(124, 278.5),(114, 403.6),(80, 576.1),(52, 532.8),(117, 556.9),(104, 556.9),(63, 448.9),(34, 399.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSerif_BoldItalic: FontMetrics = FontMetrics {
        ascent: 799.3,
        descent: -200.7,
        cap_height: 799.3,
        x_height: 399.6,
        italic_angle: 0.0,
        bbox: (0.0, -200.7, 1000.0, 799.3),
        flags: 0,
        font_family: "DejaVuSerif".to_string(),
        font_weight: "BoldItalic".to_string(),
        glyph_widths: vec![
(60, 713.2),(94, 713.2),(95, 425.6),(102, 366.2),(75, 739.8),(103, 595.2),(38, 768.5),(36, 592.3),(100, 595.2),(114, 448.5),(43, 713.2),(58, 314.2),(50, 592.3),(41, 402.7),(51, 592.3),(65, 660.4),(76, 598.5),(49, 592.3),(106, 308.0),(117, 618.9),(64, 851.2),(112, 595.2),(99, 518.3),(52, 592.3),(98, 595.2),(120, 507.5),(42, 445.1),(108, 323.4),(55, 592.3),(116, 393.2),(119, 732.8),(83, 614.7),(126, 713.2),(90, 621.4),(124, 309.6),(89, 607.6),(111, 567.7),(47, 310.9),(125, 547.4),(82, 707.4),(40, 402.7),(57, 592.3),(115, 479.2),(32, 296.3),(104, 618.9),(122, 483.4),(39, 260.6),(84, 633.4),(53, 592.3),(67, 677.5),(77, 942.2),(85, 742.3),(93, 402.7),(44, 296.3),(46, 296.3),(121, 494.6),(79, 741.5),(72, 804.2),(80, 640.1),(101, 541.6),(105, 323.4),(97, 551.5),(54, 592.3),(63, 498.8),(87, 955.9),(96, 425.6),(68, 738.2),(62, 713.2),(59, 314.2),(92, 310.9),(107, 589.8),(109, 900.7),(35, 713.2),(48, 592.3),(113, 595.2),(88, 660.4),(78, 778.1),(86, 660.4),(91, 402.7),(56, 592.3),(34, 443.5),(74, 402.7),(110, 618.9),(70, 604.3),(81, 741.5),(45, 353.3),(66, 719.5),(118, 494.6),(123, 547.4),(73, 398.2),(37, 808.8),(33, 373.6),(69, 648.8),(61, 713.2),(71, 726.9),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSerifCondensed_BoldItalic: FontMetrics = FontMetrics {
        ascent: 799.3,
        descent: -200.7,
        cap_height: 799.3,
        x_height: 399.6,
        italic_angle: 0.0,
        bbox: (0.0, -200.7, 1000.0, 799.3),
        flags: 0,
        font_family: "DejaVuSerifCondensed".to_string(),
        font_weight: "BoldItalic".to_string(),
        glyph_widths: vec![
(78, 699.9),(46, 266.4),(50, 532.8),(75, 665.8),(76, 538.7),(40, 362.4),(91, 362.4),(68, 664.2),(67, 609.7),(49, 532.8),(38, 691.6),(53, 532.8),(52, 532.8),(79, 667.1),(94, 641.7),(101, 487.1),(58, 282.6),(95, 382.8),(81, 667.1),(64, 766.0),(107, 530.8),(55, 532.8),(111, 510.8),(114, 403.6),(115, 431.0),(88, 594.3),(89, 546.6),(100, 535.3),(103, 535.3),(108, 290.9),(122, 434.7),(123, 492.5),(66, 647.1),(72, 723.6),(85, 667.9),(80, 576.1),(56, 532.8),(82, 636.3),(118, 445.1),(125, 492.5),(126, 641.7),(48, 532.8),(71, 654.2),(70, 543.6),(83, 553.2),(99, 466.3),(109, 810.5),(65, 594.3),(104, 556.9),(32, 266.4),(124, 278.5),(120, 456.4),(36, 532.8),(41, 362.4),(42, 400.2),(33, 336.2),(73, 358.3),(57, 532.8),(77, 847.9),(45, 318.0),(112, 535.3),(63, 448.9),(84, 569.8),(62, 641.7),(105, 290.9),(97, 496.3),(69, 583.5),(60, 641.7),(110, 556.9),(113, 535.3),(117, 556.9),(61, 641.7),(106, 276.8),(74, 362.4),(96, 382.8),(92, 279.7),(86, 594.3),(121, 445.1),(44, 266.4),(59, 282.6),(119, 659.2),(47, 279.7),(116, 353.7),(37, 727.8),(35, 641.7),(43, 641.7),(54, 532.8),(93, 362.4),(51, 532.8),(98, 535.3),(34, 399.0),(90, 559.0),(87, 860.3),(102, 329.2),(39, 234.4),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSans_BoldOblique: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSans".to_string(),
        font_weight: "BoldOblique".to_string(),
        glyph_widths: vec![
(111, 590.2),(46, 326.3),(42, 449.2),(75, 665.7),(38, 749.2),(63, 498.3),(80, 629.6),(84, 586.0),(123, 611.6),(124, 313.8),(71, 705.1),(113, 614.9),(116, 410.7),(55, 597.7),(99, 509.2),(41, 392.6),(90, 622.9),(106, 294.5),(67, 630.5),(85, 697.6),(65, 664.8),(96, 429.5),(62, 719.8),(78, 719.0),(53, 597.7),(91, 392.6),(102, 373.7),(59, 343.5),(35, 597.7),(47, 313.8),(32, 299.1),(45, 356.5),(40, 392.6),(93, 392.6),(87, 947.6),(61, 719.8),(109, 895.1),(73, 319.6),(112, 614.9),(101, 582.6),(56, 597.7),(36, 597.7),(43, 719.8),(50, 597.7),(60, 719.8),(72, 719.0),(68, 713.1),(70, 586.8),(86, 664.8),(37, 860.7),(34, 447.6),(54, 597.7),(39, 263.0),(92, 313.8),(76, 547.4),(83, 618.7),(97, 579.7),(66, 654.8),(100, 614.9),(105, 294.5),(104, 611.6),(44, 326.3),(74, 319.6),(122, 500.0),(118, 560.0),(119, 793.6),(110, 611.6),(103, 614.9),(126, 719.8),(51, 597.7),(79, 730.3),(82, 661.5),(114, 423.7),(121, 560.0),(95, 429.5),(108, 294.5),(64, 859.1),(125, 611.6),(77, 854.9),(94, 719.8),(33, 391.8),(52, 597.7),(89, 622.1),(88, 662.3),(58, 343.5),(98, 614.9),(107, 571.3),(115, 511.3),(117, 611.6),(48, 597.7),(69, 586.8),(57, 597.7),(81, 730.3),(49, 597.7),(120, 554.1),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSans: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSans".to_string(),
        font_weight: "Regular".to_string(),
        glyph_widths: vec![
(39, 236.2),(98, 545.3),(77, 741.2),(62, 719.8),(59, 289.4),(68, 661.5),(96, 429.5),(60, 719.8),(119, 702.6),(123, 546.6),(52, 546.6),(71, 665.7),(57, 546.6),(109, 836.8),(118, 508.4),(66, 589.3),(117, 544.5),(65, 587.7),(75, 563.3),(114, 353.2),(113, 545.3),(72, 646.0),(79, 676.2),(61, 719.8),(33, 344.4),(67, 599.8),(36, 546.6),(86, 587.7),(56, 546.6),(85, 628.8),(89, 524.7),(35, 719.8),(47, 289.4),(112, 545.3),(116, 336.8),(46, 273.1),(76, 478.6),(48, 546.6),(44, 273.1),(43, 719.8),(50, 546.6),(95, 429.5),(38, 669.9),(111, 525.6),(45, 310.0),(88, 588.5),(100, 545.3),(40, 335.2),(115, 447.6),(84, 524.7),(92, 289.4),(107, 497.5),(83, 545.3),(99, 472.3),(53, 546.6),(87, 849.4),(124, 289.4),(34, 395.1),(55, 546.6),(63, 456.0),(74, 253.4),(97, 526.4),(51, 546.6),(58, 289.4),(78, 642.6),(101, 528.5),(69, 542.8),(81, 676.2),(82, 596.9),(54, 546.6),(73, 253.4),(32, 273.1),(37, 816.3),(64, 859.1),(70, 494.1),(80, 518.0),(104, 544.5),(105, 238.7),(91, 335.2),(122, 450.9),(49, 546.6),(106, 238.7),(102, 302.4),(41, 335.2),(103, 545.3),(108, 238.7),(90, 588.5),(110, 544.5),(42, 429.5),(120, 508.4),(94, 719.8),(93, 335.2),(121, 508.4),(125, 546.6),(126, 719.8),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSansCondensed_Oblique: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSansCondensed".to_string(),
        font_weight: "Oblique".to_string(),
        glyph_widths: vec![
(73, 227.8),(99, 424.9),(57, 491.6),(61, 647.7),(76, 430.4),(79, 608.2),(85, 565.9),(47, 260.5),(70, 444.6),(108, 214.8),(72, 581.4),(89, 471.9),(106, 214.8),(109, 752.9),(80, 466.0),(107, 447.6),(112, 490.8),(113, 490.8),(116, 302.9),(125, 491.6),(91, 301.6),(54, 491.6),(95, 386.3),(33, 309.6),(45, 278.9),(124, 260.5),(126, 647.7),(52, 491.6),(49, 491.6),(77, 666.9),(40, 301.6),(41, 301.6),(86, 528.5),(88, 529.4),(92, 260.5),(105, 214.8),(104, 489.9),(48, 491.6),(114, 317.5),(55, 491.6),(71, 599.0),(74, 227.8),(117, 489.9),(35, 647.7),(90, 529.4),(97, 473.6),(66, 530.2),(84, 471.9),(51, 491.6),(69, 488.3),(101, 475.7),(115, 402.7),(42, 386.3),(118, 457.2),(119, 632.1),(123, 491.6),(82, 536.9),(60, 647.7),(75, 506.7),(46, 245.4),(34, 355.3),(43, 647.7),(56, 491.6),(81, 608.2),(102, 271.8),(103, 490.8),(38, 602.8),(122, 405.6),(110, 489.9),(96, 386.3),(50, 491.6),(44, 245.4),(32, 245.4),(62, 647.7),(68, 595.2),(93, 301.6),(100, 490.8),(111, 472.7),(37, 734.5),(63, 410.2),(59, 260.5),(67, 539.8),(83, 490.8),(121, 457.2),(39, 212.2),(94, 647.7),(98, 490.8),(36, 491.6),(78, 578.0),(87, 764.3),(53, 491.6),(58, 260.5),(65, 528.5),(120, 457.2),(64, 773.1),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSerifCondensed_Italic: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSerifCondensed".to_string(),
        font_weight: "Italic".to_string(),
        glyph_widths: vec![
(97, 460.6),(110, 497.9),(47, 260.5),(90, 536.9),(56, 491.6),(103, 494.5),(119, 661.5),(53, 491.6),(41, 301.6),(94, 647.7),(111, 465.2),(104, 497.9),(108, 247.1),(64, 773.1),(69, 564.2),(35, 647.7),(61, 647.7),(121, 436.7),(79, 633.8),(86, 558.3),(107, 468.1),(113, 494.5),(125, 491.6),(34, 355.3),(83, 529.4),(91, 301.6),(68, 619.5),(44, 245.4),(93, 301.6),(106, 239.5),(105, 247.1),(70, 536.1),(123, 491.6),(92, 260.5),(33, 310.4),(101, 457.2),(65, 558.3),(84, 515.5),(39, 212.2),(114, 369.5),(57, 491.6),(87, 794.5),(36, 491.6),(78, 676.2),(32, 245.4),(82, 581.8),(102, 286.1),(112, 494.5),(88, 550.3),(118, 436.7),(73, 305.4),(55, 491.6),(54, 491.6),(60, 647.7),(75, 577.6),(100, 494.5),(89, 510.1),(109, 732.8),(42, 386.3),(49, 491.6),(71, 617.4),(85, 651.4),(51, 491.6),(116, 310.4),(98, 494.5),(50, 491.6),(38, 687.9),(72, 674.1),(37, 734.5),(46, 245.4),(74, 309.6),(76, 513.4),(48, 491.6),(63, 414.4),(67, 591.4),(120, 435.8),(59, 260.5),(80, 520.1),(122, 407.3),(40, 301.6),(124, 260.5),(99, 432.9),(115, 396.4),(95, 386.3),(62, 647.7),(66, 568.0),(81, 633.8),(96, 386.3),(117, 497.9),(126, 647.7),(52, 491.6),(45, 260.9),(58, 260.5),(43, 647.7),(77, 791.5),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSansMono_BoldOblique: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSansMono".to_string(),
        font_weight: "BoldOblique".to_string(),
        glyph_widths: vec![
(96, 517.2),(61, 517.2),(105, 517.2),(73, 517.2),(67, 517.2),(102, 517.2),(54, 517.2),(88, 517.2),(34, 517.2),(91, 517.2),(118, 517.2),(94, 517.2),(119, 517.2),(41, 517.2),(123, 517.2),(106, 517.2),(43, 517.2),(65, 517.2),(60, 517.2),(89, 517.2),(56, 517.2),(93, 517.2),(103, 517.2),(55, 517.2),(76, 517.2),(62, 517.2),(85, 517.2),(86, 517.2),(99, 517.2),(52, 517.2),(104, 517.2),(111, 517.2),(117, 517.2),(92, 517.2),(33, 517.2),(87, 517.2),(120, 517.2),(84, 517.2),(46, 517.2),(97, 517.2),(53, 517.2),(45, 517.2),(36, 517.2),(98, 517.2),(100, 517.2),(35, 517.2),(48, 517.2),(109, 517.2),(51, 517.2),(75, 517.2),(66, 517.2),(38, 517.2),(40, 517.2),(124, 517.2),(77, 517.2),(58, 517.2),(126, 517.2),(112, 517.2),(44, 517.2),(59, 517.2),(72, 517.2),(79, 517.2),(90, 517.2),(121, 517.2),(74, 517.2),(125, 517.2),(114, 517.2),(57, 517.2),(95, 517.2),(116, 517.2),(70, 517.2),(50, 517.2),(39, 517.2),(32, 517.2),(63, 517.2),(42, 517.2),(78, 517.2),(64, 517.2),(71, 517.2),(80, 517.2),(37, 517.2),(68, 517.2),(69, 517.2),(107, 517.2),(110, 517.2),(81, 517.2),(82, 517.2),(113, 517.2),(83, 517.2),(115, 517.2),(101, 517.2),(122, 517.2),(47, 517.2),(108, 517.2),(49, 517.2),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSerif: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSerif".to_string(),
        font_weight: "Regular".to_string(),
        glyph_widths: vec![
(107, 520.6),(32, 273.1),(44, 273.1),(72, 749.2),(89, 567.1),(77, 879.6),(38, 764.7),(33, 345.2),(84, 573.0),(98, 549.9),(101, 508.4),(90, 596.9),(76, 570.5),(34, 395.1),(113, 549.9),(50, 546.6),(121, 485.3),(123, 546.6),(125, 546.6),(40, 335.2),(69, 627.1),(60, 719.8),(39, 236.2),(78, 751.7),(100, 549.9),(108, 274.7),(117, 553.3),(116, 345.2),(79, 704.3),(93, 335.2),(94, 719.8),(102, 318.0),(59, 289.4),(74, 344.4),(106, 266.4),(104, 553.3),(109, 814.6),(82, 646.8),(118, 485.3),(120, 484.5),(35, 719.8),(45, 290.3),(64, 859.1),(71, 686.2),(56, 546.6),(42, 429.5),(68, 688.8),(80, 578.0),(52, 546.6),(37, 816.3),(58, 289.4),(88, 611.6),(95, 429.5),(47, 289.4),(57, 546.6),(63, 460.6),(83, 588.5),(103, 549.9),(54, 546.6),(46, 273.1),(92, 289.4),(105, 274.7),(48, 546.6),(75, 641.8),(86, 620.4),(112, 549.9),(114, 410.7),(126, 719.8),(53, 546.6),(65, 620.4),(111, 517.2),(122, 452.6),(62, 719.8),(115, 440.9),(87, 883.0),(73, 339.3),(70, 596.1),(99, 481.1),(61, 719.8),(119, 735.3),(97, 512.2),(36, 546.6),(41, 335.2),(49, 546.6),(55, 546.6),(66, 631.3),(43, 719.8),(67, 657.3),(81, 704.3),(96, 429.5),(110, 553.3),(51, 546.6),(91, 335.2),(124, 289.4),(85, 724.0),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSerifCondensed: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSerifCondensed".to_string(),
        font_weight: "Regular".to_string(),
        glyph_widths: vec![
(36, 491.6),(105, 247.1),(65, 558.3),(73, 305.4),(104, 497.9),(114, 369.5),(91, 301.6),(109, 732.8),(37, 734.5),(52, 491.6),(53, 491.6),(101, 457.2),(40, 301.6),(78, 676.2),(111, 465.2),(115, 396.4),(107, 468.1),(33, 310.4),(70, 536.1),(87, 794.5),(95, 386.3),(103, 494.5),(110, 497.9),(45, 260.9),(60, 647.7),(77, 791.5),(47, 260.5),(72, 674.1),(74, 309.6),(41, 301.6),(79, 633.8),(126, 647.7),(57, 491.6),(89, 510.1),(86, 558.3),(112, 494.5),(120, 435.8),(50, 491.6),(97, 460.6),(46, 245.4),(94, 647.7),(85, 651.4),(55, 491.6),(80, 520.1),(44, 245.4),(113, 494.5),(49, 491.6),(82, 581.8),(90, 536.9),(118, 436.7),(32, 245.4),(117, 497.9),(88, 550.3),(106, 239.5),(66, 568.0),(62, 647.7),(35, 647.7),(39, 212.2),(125, 491.6),(58, 260.5),(123, 491.6),(124, 260.5),(93, 301.6),(81, 633.8),(100, 494.5),(43, 647.7),(64, 773.1),(34, 355.3),(121, 436.7),(63, 414.4),(102, 286.1),(38, 687.9),(54, 491.6),(48, 491.6),(84, 515.5),(116, 310.4),(96, 386.3),(119, 661.5),(51, 491.6),(42, 386.3),(68, 619.5),(92, 260.5),(76, 513.4),(61, 647.7),(59, 260.5),(67, 591.4),(98, 494.5),(122, 407.3),(83, 529.4),(108, 247.1),(99, 432.9),(56, 491.6),(69, 564.2),(75, 577.6),(71, 617.4),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSansMono: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSansMono".to_string(),
        font_weight: "Regular".to_string(),
        glyph_widths: vec![
(114, 517.2),(116, 517.2),(79, 517.2),(93, 517.2),(121, 517.2),(104, 517.2),(105, 517.2),(37, 517.2),(52, 517.2),(122, 517.2),(109, 517.2),(73, 517.2),(63, 517.2),(35, 517.2),(99, 517.2),(107, 517.2),(123, 517.2),(41, 517.2),(110, 517.2),(120, 517.2),(125, 517.2),(76, 517.2),(81, 517.2),(34, 517.2),(117, 517.2),(49, 517.2),(66, 517.2),(78, 517.2),(87, 517.2),(42, 517.2),(82, 517.2),(113, 517.2),(89, 517.2),(115, 517.2),(119, 517.2),(53, 517.2),(64, 517.2),(67, 517.2),(54, 517.2),(65, 517.2),(112, 517.2),(97, 517.2),(60, 517.2),(45, 517.2),(36, 517.2),(39, 517.2),(59, 517.2),(84, 517.2),(83, 517.2),(70, 517.2),(61, 517.2),(111, 517.2),(47, 517.2),(58, 517.2),(91, 517.2),(108, 517.2),(50, 517.2),(46, 517.2),(40, 517.2),(68, 517.2),(69, 517.2),(101, 517.2),(103, 517.2),(51, 517.2),(75, 517.2),(32, 517.2),(74, 517.2),(106, 517.2),(95, 517.2),(118, 517.2),(96, 517.2),(124, 517.2),(62, 517.2),(44, 517.2),(38, 517.2),(80, 517.2),(92, 517.2),(94, 517.2),(98, 517.2),(90, 517.2),(126, 517.2),(71, 517.2),(86, 517.2),(88, 517.2),(43, 517.2),(100, 517.2),(55, 517.2),(56, 517.2),(57, 517.2),(33, 517.2),(72, 517.2),(77, 517.2),(85, 517.2),(48, 517.2),(102, 517.2),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSans_Bold: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSans".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(65, 664.8),(94, 719.8),(118, 560.0),(123, 611.6),(81, 730.3),(56, 597.7),(95, 429.5),(61, 719.8),(34, 447.6),(52, 597.7),(110, 611.6),(79, 730.3),(71, 705.1),(96, 429.5),(119, 793.6),(121, 560.0),(75, 665.7),(49, 597.7),(51, 597.7),(38, 749.2),(39, 263.0),(83, 618.7),(48, 597.7),(101, 582.6),(103, 614.9),(86, 664.8),(108, 294.5),(41, 392.6),(45, 356.5),(59, 343.5),(120, 554.1),(125, 611.6),(40, 392.6),(77, 854.9),(50, 597.7),(97, 579.7),(93, 392.6),(36, 597.7),(69, 586.8),(99, 509.2),(109, 895.1),(78, 719.0),(91, 392.6),(70, 586.8),(72, 719.0),(62, 719.8),(102, 373.7),(111, 590.2),(85, 697.6),(66, 654.8),(63, 498.3),(76, 547.4),(100, 614.9),(106, 294.5),(58, 343.5),(33, 391.8),(64, 859.1),(89, 622.1),(112, 614.9),(88, 662.3),(113, 614.9),(82, 661.5),(104, 611.6),(115, 511.3),(87, 947.6),(46, 326.3),(84, 586.0),(92, 313.8),(37, 860.7),(47, 313.8),(67, 630.5),(116, 410.7),(55, 597.7),(105, 294.5),(42, 449.2),(44, 326.3),(68, 713.1),(57, 597.7),(60, 719.8),(107, 571.3),(114, 423.7),(90, 622.9),(126, 719.8),(73, 319.6),(43, 719.8),(53, 597.7),(117, 611.6),(122, 500.0),(35, 719.8),(32, 299.1),(54, 597.7),(74, 319.6),(80, 629.6),(98, 614.9),(124, 313.8),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSansMono_Bold: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSansMono".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(81, 517.2),(52, 517.2),(79, 517.2),(89, 517.2),(100, 517.2),(47, 517.2),(102, 517.2),(124, 517.2),(111, 517.2),(85, 517.2),(91, 517.2),(112, 517.2),(88, 517.2),(115, 517.2),(117, 517.2),(92, 517.2),(62, 517.2),(105, 517.2),(50, 517.2),(49, 517.2),(69, 517.2),(83, 517.2),(58, 517.2),(39, 517.2),(57, 517.2),(71, 517.2),(32, 517.2),(82, 517.2),(48, 517.2),(53, 517.2),(121, 517.2),(44, 517.2),(73, 517.2),(74, 517.2),(68, 517.2),(90, 517.2),(99, 517.2),(94, 517.2),(56, 517.2),(64, 517.2),(55, 517.2),(101, 517.2),(106, 517.2),(59, 517.2),(104, 517.2),(109, 517.2),(41, 517.2),(76, 517.2),(78, 517.2),(103, 517.2),(87, 517.2),(114, 517.2),(61, 517.2),(113, 517.2),(125, 517.2),(46, 517.2),(34, 517.2),(77, 517.2),(42, 517.2),(33, 517.2),(98, 517.2),(97, 517.2),(66, 517.2),(120, 517.2),(63, 517.2),(70, 517.2),(35, 517.2),(80, 517.2),(110, 517.2),(123, 517.2),(36, 517.2),(75, 517.2),(126, 517.2),(93, 517.2),(43, 517.2),(45, 517.2),(122, 517.2),(72, 517.2),(118, 517.2),(86, 517.2),(108, 517.2),(119, 517.2),(96, 517.2),(116, 517.2),(65, 517.2),(38, 517.2),(40, 517.2),(84, 517.2),(51, 517.2),(54, 517.2),(37, 517.2),(60, 517.2),(67, 517.2),(95, 517.2),(107, 517.2),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSansMono_Oblique: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSansMono".to_string(),
        font_weight: "Oblique".to_string(),
        glyph_widths: vec![
(38, 517.2),(101, 517.2),(36, 517.2),(98, 517.2),(52, 517.2),(57, 517.2),(45, 517.2),(44, 517.2),(111, 517.2),(117, 517.2),(109, 517.2),(79, 517.2),(80, 517.2),(35, 517.2),(32, 517.2),(63, 517.2),(94, 517.2),(96, 517.2),(42, 517.2),(70, 517.2),(77, 517.2),(104, 517.2),(66, 517.2),(65, 517.2),(78, 517.2),(121, 517.2),(125, 517.2),(119, 517.2),(64, 517.2),(99, 517.2),(61, 517.2),(107, 517.2),(46, 517.2),(50, 517.2),(62, 517.2),(83, 517.2),(87, 517.2),(108, 517.2),(112, 517.2),(116, 517.2),(69, 517.2),(68, 517.2),(75, 517.2),(93, 517.2),(95, 517.2),(105, 517.2),(113, 517.2),(60, 517.2),(37, 517.2),(51, 517.2),(88, 517.2),(56, 517.2),(67, 517.2),(103, 517.2),(53, 517.2),(84, 517.2),(39, 517.2),(115, 517.2),(47, 517.2),(41, 517.2),(55, 517.2),(122, 517.2),(49, 517.2),(73, 517.2),(90, 517.2),(74, 517.2),(92, 517.2),(100, 517.2),(114, 517.2),(59, 517.2),(85, 517.2),(123, 517.2),(72, 517.2),(76, 517.2),(34, 517.2),(40, 517.2),(54, 517.2),(91, 517.2),(58, 517.2),(33, 517.2),(120, 517.2),(102, 517.2),(126, 517.2),(124, 517.2),(71, 517.2),(106, 517.2),(110, 517.2),(43, 517.2),(81, 517.2),(48, 517.2),(86, 517.2),(89, 517.2),(118, 517.2),(97, 517.2),(82, 517.2),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSans_ExtraLight: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSans".to_string(),
        font_weight: "ExtraLight".to_string(),
        glyph_widths: vec![
(81, 676.2),(44, 273.1),(111, 525.6),(46, 273.1),(90, 588.5),(38, 669.9),(54, 546.6),(99, 472.3),(119, 702.6),(123, 546.6),(41, 335.2),(49, 546.6),(120, 508.4),(89, 524.7),(35, 719.8),(106, 238.7),(53, 546.6),(64, 859.1),(71, 665.7),(36, 546.6),(40, 335.2),(66, 562.5),(43, 719.8),(86, 587.7),(108, 238.7),(113, 545.3),(117, 544.5),(55, 546.6),(105, 238.7),(126, 719.8),(59, 289.4),(104, 544.5),(93, 335.2),(39, 236.2),(48, 546.6),(74, 253.4),(68, 661.5),(75, 563.3),(92, 289.4),(109, 836.8),(102, 302.4),(37, 816.3),(85, 628.8),(63, 456.0),(33, 344.4),(79, 676.2),(100, 545.3),(67, 599.8),(76, 478.6),(34, 395.1),(56, 546.6),(77, 741.2),(96, 429.5),(42, 429.5),(32, 273.1),(103, 515.5),(58, 289.4),(98, 545.3),(107, 497.5),(114, 353.2),(118, 508.4),(47, 289.4),(124, 289.4),(61, 719.8),(50, 546.6),(73, 253.4),(112, 545.3),(88, 588.5),(91, 335.2),(70, 494.1),(121, 508.4),(80, 518.0),(87, 849.4),(115, 447.6),(84, 524.7),(122, 450.9),(51, 546.6),(83, 545.3),(94, 719.8),(60, 719.8),(72, 646.0),(82, 596.9),(65, 587.7),(69, 542.8),(101, 528.5),(110, 544.5),(116, 336.8),(125, 546.6),(52, 546.6),(97, 526.4),(62, 719.8),(78, 642.6),(95, 429.5),(45, 310.0),(57, 546.6),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSerif_Bold: FontMetrics = FontMetrics {
        ascent: 799.3,
        descent: -200.7,
        cap_height: 799.3,
        x_height: 399.6,
        italic_angle: 0.0,
        bbox: (0.0, -200.7, 1000.0, 799.3),
        flags: 0,
        font_family: "DejaVuSerif".to_string(),
        font_weight: "Bold".to_string(),
        glyph_widths: vec![
(124, 309.6),(32, 296.3),(98, 595.2),(110, 618.9),(114, 448.5),(39, 260.6),(75, 739.8),(47, 310.9),(66, 719.5),(69, 648.8),(48, 592.3),(76, 598.5),(77, 942.2),(50, 592.3),(74, 402.7),(122, 483.4),(86, 660.4),(88, 660.4),(97, 551.5),(55, 592.3),(60, 713.2),(35, 713.2),(95, 425.6),(52, 592.3),(63, 498.8),(73, 398.2),(115, 479.2),(116, 393.2),(117, 618.9),(102, 366.2),(93, 402.7),(109, 900.7),(78, 778.1),(120, 507.5),(42, 445.1),(57, 592.3),(38, 768.5),(104, 618.9),(112, 595.2),(125, 547.4),(43, 713.2),(62, 713.2),(96, 425.6),(54, 592.3),(105, 323.4),(106, 308.0),(92, 310.9),(84, 633.4),(68, 738.2),(64, 851.2),(46, 296.3),(53, 592.3),(36, 592.3),(40, 402.7),(41, 402.7),(65, 660.4),(81, 741.5),(87, 955.9),(113, 595.2),(126, 713.2),(67, 677.5),(70, 604.3),(80, 640.1),(94, 713.2),(72, 804.2),(107, 589.8),(89, 607.6),(37, 808.8),(111, 567.7),(118, 494.6),(108, 323.4),(71, 726.9),(85, 742.3),(49, 592.3),(59, 314.2),(121, 494.6),(79, 741.5),(123, 547.4),(90, 621.4),(82, 707.4),(100, 595.2),(34, 443.5),(56, 592.3),(119, 732.8),(58, 314.2),(51, 592.3),(103, 595.2),(99, 518.3),(45, 353.3),(33, 373.6),(61, 713.2),(83, 614.7),(101, 541.6),(44, 296.3),(91, 402.7),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSerif_Italic: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSerif".to_string(),
        font_weight: "Italic".to_string(),
        glyph_widths: vec![
(73, 339.3),(63, 460.6),(48, 546.6),(108, 274.7),(59, 289.4),(84, 573.0),(55, 546.6),(47, 289.4),(104, 553.3),(62, 719.8),(117, 553.3),(86, 620.4),(46, 273.1),(101, 508.4),(56, 546.6),(91, 335.2),(39, 236.2),(41, 335.2),(94, 719.8),(110, 553.3),(85, 724.0),(123, 546.6),(53, 546.6),(67, 657.3),(89, 567.1),(120, 484.5),(98, 549.9),(119, 735.3),(81, 704.3),(45, 290.3),(52, 546.6),(114, 410.7),(44, 273.1),(35, 719.8),(36, 546.6),(92, 289.4),(77, 879.6),(43, 719.8),(95, 429.5),(112, 549.9),(90, 596.9),(116, 345.2),(118, 485.3),(106, 266.4),(33, 345.2),(75, 641.8),(80, 578.0),(37, 816.3),(102, 318.0),(61, 719.8),(88, 611.6),(65, 620.4),(103, 549.9),(107, 520.6),(57, 546.6),(60, 719.8),(71, 686.2),(87, 883.0),(74, 344.4),(111, 517.2),(121, 485.3),(79, 704.3),(124, 289.4),(69, 627.1),(66, 631.3),(76, 570.5),(115, 440.9),(78, 751.7),(97, 512.2),(54, 546.6),(40, 335.2),(70, 596.1),(109, 814.6),(96, 429.5),(42, 429.5),(100, 549.9),(38, 764.7),(32, 273.1),(34, 395.1),(51, 546.6),(93, 335.2),(99, 481.1),(58, 289.4),(68, 688.8),(49, 546.6),(125, 546.6),(83, 588.5),(82, 646.8),(126, 719.8),(64, 859.1),(105, 274.7),(113, 549.9),(50, 546.6),(72, 749.2),(122, 452.6),].into_iter().collect(),
    };
}

lazy_static! {
    pub static ref DejaVuSans_Oblique: FontMetrics = FontMetrics {
        ascent: 797.4,
        descent: -202.6,
        cap_height: 797.4,
        x_height: 398.7,
        italic_angle: 0.0,
        bbox: (0.0, -202.6, 1000.0, 797.4),
        flags: 0,
        font_family: "DejaVuSans".to_string(),
        font_weight: "Oblique".to_string(),
        glyph_widths: vec![
(33, 344.4),(67, 599.8),(120, 508.4),(57, 546.6),(95, 429.5),(124, 289.4),(125, 546.6),(58, 289.4),(111, 525.6),(118, 508.4),(80, 518.0),(43, 719.8),(59, 289.4),(41, 335.2),(76, 478.6),(94, 719.8),(116, 336.8),(108, 238.7),(79, 676.2),(50, 546.6),(63, 456.0),(51, 546.6),(54, 546.6),(74, 253.4),(89, 524.7),(88, 588.5),(106, 238.7),(97, 526.4),(113, 545.3),(101, 528.5),(96, 429.5),(32, 273.1),(73, 253.4),(117, 544.5),(119, 702.6),(107, 497.5),(60, 719.8),(72, 646.0),(52, 546.6),(103, 545.3),(47, 289.4),(35, 719.8),(85, 628.8),(61, 719.8),(82, 596.9),(109, 836.8),(71, 665.7),(110, 544.5),(37, 816.3),(102, 302.4),(46, 273.1),(114, 353.2),(42, 429.5),(56, 546.6),(34, 395.1),(44, 273.1),(104, 544.5),(92, 289.4),(91, 335.2),(39, 236.2),(53, 546.6),(40, 335.2),(36, 546.6),(105, 238.7),(83, 545.3),(126, 719.8),(69, 542.8),(48, 546.6),(99, 472.3),(93, 335.2),(121, 508.4),(70, 494.1),(112, 545.3),(62, 719.8),(45, 310.0),(84, 524.7),(65, 587.7),(78, 642.6),(86, 587.7),(98, 545.3),(77, 741.2),(115, 447.6),(122, 450.9),(49, 546.6),(64, 859.1),(38, 669.9),(81, 676.2),(66, 589.3),(75, 563.3),(100, 545.3),(90, 588.5),(87, 849.4),(55, 546.6),(68, 661.5),(123, 546.6),].into_iter().collect(),
    };
}


lazy_static! {
    pub static ref FONT_METRICS: std::collections::HashMap<&'static str, &'static FontMetrics> = {
        let mut m = std::collections::HashMap::new();
        m.insert("AvantGarde-BookOblique", &*AvantGarde_BookOblique as &'static FontMetrics);
        m.insert("Bookman-Light", &*Bookman_Light as &'static FontMetrics);
        m.insert("Courier", &*Courier as &'static FontMetrics);
        m.insert("Times-BoldItalic", &*Times_BoldItalic as &'static FontMetrics);
        m.insert("AvantGarde-DemiOblique", &*AvantGarde_DemiOblique as &'static FontMetrics);
        m.insert("Palatino-Roman", &*Palatino_Roman as &'static FontMetrics);
        m.insert("ZapfChancery-MediumItalic", &*ZapfChancery_MediumItalic as &'static FontMetrics);
        m.insert("Helvetica-Narrow", &*Helvetica_Narrow as &'static FontMetrics);
        m.insert("AvantGarde-Book", &*AvantGarde_Book as &'static FontMetrics);
        m.insert("NewCenturySchlbk-Bold", &*NewCenturySchlbk_Bold as &'static FontMetrics);
        m.insert("Helvetica-Bold", &*Helvetica_Bold as &'static FontMetrics);
        m.insert("Courier-BoldOblique", &*Courier_BoldOblique as &'static FontMetrics);
        m.insert("Palatino-Italic", &*Palatino_Italic as &'static FontMetrics);
        m.insert("NewCenturySchlbk-Roman", &*NewCenturySchlbk_Roman as &'static FontMetrics);
        m.insert("NewCenturySchlbk-Italic", &*NewCenturySchlbk_Italic as &'static FontMetrics);
        m.insert("Courier-Oblique", &*Courier_Oblique as &'static FontMetrics);
        m.insert("Bookman-LightItalic", &*Bookman_LightItalic as &'static FontMetrics);
        m.insert("Times-Italic", &*Times_Italic as &'static FontMetrics);
        m.insert("AvantGarde-Demi", &*AvantGarde_Demi as &'static FontMetrics);
        m.insert("Helvetica-Narrow-Oblique", &*Helvetica_Narrow_Oblique as &'static FontMetrics);
        m.insert("Helvetica-Narrow-BoldOblique", &*Helvetica_Narrow_BoldOblique as &'static FontMetrics);
        m.insert("Bookman-DemiItalic", &*Bookman_DemiItalic as &'static FontMetrics);
        m.insert("Palatino-Bold", &*Palatino_Bold as &'static FontMetrics);
        m.insert("ZapfDingbats", &*ZapfDingbats as &'static FontMetrics);
        m.insert("Bookman-Demi", &*Bookman_Demi as &'static FontMetrics);
        m.insert("Helvetica-Narrow-Bold", &*Helvetica_Narrow_Bold as &'static FontMetrics);
        m.insert("Palatino-BoldItalic", &*Palatino_BoldItalic as &'static FontMetrics);
        m.insert("Helvetica", &*Helvetica as &'static FontMetrics);
        m.insert("NewCenturySchlbk-BoldItalic", &*NewCenturySchlbk_BoldItalic as &'static FontMetrics);
        m.insert("Symbol", &*Symbol as &'static FontMetrics);
        m.insert("Times-Bold", &*Times_Bold as &'static FontMetrics);
        m.insert("Helvetica-Oblique", &*Helvetica_Oblique as &'static FontMetrics);
        m.insert("Helvetica-BoldOblique", &*Helvetica_BoldOblique as &'static FontMetrics);
        m.insert("Courier-Bold", &*Courier_Bold as &'static FontMetrics);
        m.insert("Times-Roman", &*Times_Roman as &'static FontMetrics);
        m.insert("DejaVuSansCondensed-BoldOblique", &*DejaVuSansCondensed_BoldOblique as &'static FontMetrics);
        m.insert("DejaVuMathTeXGyre", &*DejaVuMathTeXGyre as &'static FontMetrics);
        m.insert("DejaVuSansCondensed", &*DejaVuSansCondensed as &'static FontMetrics);
        m.insert("DejaVuSansCondensed-Bold", &*DejaVuSansCondensed_Bold as &'static FontMetrics);
        m.insert("DejaVuSerifCondensed-Bold", &*DejaVuSerifCondensed_Bold as &'static FontMetrics);
        m.insert("DejaVuSerif-BoldItalic", &*DejaVuSerif_BoldItalic as &'static FontMetrics);
        m.insert("DejaVuSerifCondensed-BoldItalic", &*DejaVuSerifCondensed_BoldItalic as &'static FontMetrics);
        m.insert("DejaVuSans-BoldOblique", &*DejaVuSans_BoldOblique as &'static FontMetrics);
        m.insert("DejaVuSans", &*DejaVuSans as &'static FontMetrics);
        m.insert("DejaVuSansCondensed-Oblique", &*DejaVuSansCondensed_Oblique as &'static FontMetrics);
        m.insert("DejaVuSerifCondensed-Italic", &*DejaVuSerifCondensed_Italic as &'static FontMetrics);
        m.insert("DejaVuSansMono-BoldOblique", &*DejaVuSansMono_BoldOblique as &'static FontMetrics);
        m.insert("DejaVuSerif", &*DejaVuSerif as &'static FontMetrics);
        m.insert("DejaVuSerifCondensed", &*DejaVuSerifCondensed as &'static FontMetrics);
        m.insert("DejaVuSansMono", &*DejaVuSansMono as &'static FontMetrics);
        m.insert("DejaVuSans-Bold", &*DejaVuSans_Bold as &'static FontMetrics);
        m.insert("DejaVuSansMono-Bold", &*DejaVuSansMono_Bold as &'static FontMetrics);
        m.insert("DejaVuSansMono-Oblique", &*DejaVuSansMono_Oblique as &'static FontMetrics);
        m.insert("DejaVuSans-ExtraLight", &*DejaVuSans_ExtraLight as &'static FontMetrics);
        m.insert("DejaVuSerif-Bold", &*DejaVuSerif_Bold as &'static FontMetrics);
        m.insert("DejaVuSerif-Italic", &*DejaVuSerif_Italic as &'static FontMetrics);
        m.insert("DejaVuSans-Oblique", &*DejaVuSans_Oblique as &'static FontMetrics);
        m
    };
}
