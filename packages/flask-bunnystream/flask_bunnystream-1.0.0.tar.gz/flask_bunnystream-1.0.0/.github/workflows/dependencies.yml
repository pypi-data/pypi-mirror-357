name: Dependency Updates

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:  # Allow manual trigger

jobs:
  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Dependency Review
      uses: actions/dependency-review-action@v3

  security-audit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check || true

    - name: Run bandit security check
      run: |
        bandit -r src/flask_bunnystream/ -f json -o bandit-report.json || true
        bandit -r src/flask_bunnystream/ || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-${{ github.sha }}
        path: |
          safety-report.json
          bandit-report.json

  update-dependencies:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install pip-tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools

    - name: Check for outdated packages
      run: |
        pip list --outdated > outdated-packages.txt
        cat outdated-packages.txt

    - name: Create issue for outdated dependencies
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          try {
            const outdated = fs.readFileSync('outdated-packages.txt', 'utf8');
            const lines = outdated.split('\n').filter(line => line.trim() && !line.includes('Package') && !line.includes('---'));
            
            if (lines.length > 0) {
              const issueBody = `## Outdated Dependencies Found
              
              The following packages have newer versions available:
              
              \`\`\`
              ${outdated}
              \`\`\`
              
              Please review and update dependencies as appropriate.
              
              **Auto-generated on:** ${new Date().toISOString()}
              `;
              
              // Check if issue already exists
              const { data: issues } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['dependencies'],
                state: 'open'
              });
              
              const existingIssue = issues.find(issue => 
                issue.title.includes('Outdated Dependencies')
              );
              
              if (!existingIssue) {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `Outdated Dependencies - ${new Date().toISOString().split('T')[0]}`,
                  body: issueBody,
                  labels: ['dependencies', 'maintenance']
                });
              }
            }
          } catch (error) {
            console.log('No outdated packages file found or error reading it');
          }
