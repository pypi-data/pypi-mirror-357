Metadata-Version: 2.4
Name: wonderland-discord-mcp
Version: 0.1.0
Summary: Discord MCP Server - Model Context Protocol server for Discord API integration
Project-URL: Homepage, https://github.com/defi-wonderland/discord-mcp
Project-URL: Repository, https://github.com/defi-wonderland/discord-mcp
Project-URL: Issues, https://github.com/defi-wonderland/discord-mcp/issues
Author-email: Wonderland <security@wonderland.xyz>
License: MIT
License-File: LICENSE
Keywords: ai,chatbot,discord,mcp,model-context-protocol
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Communications :: Chat
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.10
Requires-Dist: httpx>=0.28.1
Requires-Dist: mcp>=1.9.4
Requires-Dist: python-dotenv>=1.1.0
Description-Content-Type: text/markdown

# Discord MCP Server

Discord MCP Server provides Discord API integration for MCP-compatible AI models through a simple, secure server.

## üöÄ Quick Start with uvx (Recommended)

The easiest way to use Discord MCP Server is with `uvx` - no installation required:

```bash
# Set your Discord bot token
export DISCORD_TOKEN="your_bot_token_here"

# Run directly with uvx (no installation needed!)
uvx discord-mcp
```

## üõ† Alternative Installation Methods

### Using pipx
```bash
pipx install discord-mcp
export DISCORD_TOKEN="your_bot_token_here"
discord-mcp
```

### Using pip
```bash
pip install discord-mcp
export DISCORD_TOKEN="your_bot_token_here" 
discord-mcp
```

### Development Installation
```bash
git clone https://github.com/defi-wonderland/discord-mcp
cd discord-mcp
uv add mcp httpx python-dotenv
cp .env.example .env  # Add your Discord token
uv run python -m discord_mcp
```

## üîß Discord Bot Setup

1. Go to https://discord.com/developers/applications
2. Create a new application and bot
3. Copy the bot token to your environment or `.env` file
4. Invite the bot to your server with these permissions:
   - View Channels
   - Send Messages
   - Read Message History  
   - Add Reactions
   - Create Public Threads

## üî® Available Tools (12 Total)

### Message Operations
- **send_message** - Send messages with mentions, formatting, and replies
- **get_messages** - Retrieve message history with pagination
- **add_reaction** - Add emoji reactions to messages

### Channel Management  
- **list_channels** - List server channels with type filtering
- **get_channel_info** - Get detailed channel information

### Thread Discovery & Management
- **create_thread** - Create new discussion threads
- **list_threads** - Discover active threads in channels
- **list_archived_threads** - Find archived threads (public/private)
- **join_thread** - Join existing threads
- **get_thread_members** - View thread membership

### Server Information
- **get_server_info** - Get server details and member counts
- **list_servers** - List all accessible Discord servers

## ‚ú® Features

- **Zero Installation**: Run directly with `uvx discord-mcp`
- **Direct REST API**: No persistent bot process required
- **Comprehensive Error Handling**: Helpful error messages with permission hints
- **Discord Formatting**: Full support for markdown and mentions
- **Thread Management**: Complete thread discovery and interaction
- **Secure**: Minimal permissions, read-only server access
- **MCP Standard**: Compatible with Claude Desktop and other MCP clients

## üîó Integration with MCP Clients

### Claude Desktop
Add to your Claude Desktop MCP configuration:
```json
{
  "mcpServers": {
    "discord": {
      "command": "uvx",
      "args": ["discord-mcp"],
      "env": {
        "DISCORD_TOKEN": "your_bot_token_here"
      }
    }
  }
}
```

### Other MCP Clients
The server communicates via stdio and follows the MCP protocol standard.

## üìù Usage Examples

### Send a Message with Mentions
```json
{
  "tool": "send_message",
  "arguments": {
    "channel_id": "123456789",
    "content": "Hello <@987654321>! Check out <#555666777>"
  }
}
```

### Create and Manage Threads
```json
{
  "tool": "create_thread", 
  "arguments": {
    "channel_id": "123456789",
    "name": "Discussion Thread"
  }
}
```

## ü§ù Contributing

This project is open source and contributions are welcome! See the repository for development setup and contribution guidelines.

## üìÑ License

MIT License - see LICENSE file for details.