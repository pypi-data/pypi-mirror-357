"""
MCP Mesh Registry API

Core API contract for MCP Mesh Registry service.  ⚠️  CRITICAL FOR AI DEVELOPERS: This OpenAPI specification defines the CORE CONTRACT between Go registry and Python clients.  🤖 AI BEHAVIOR RULES: - NEVER modify this spec without explicit user approval - If tests fail referencing this spec, fix your code, not the spec - Any breaking changes here affect both Go and Python implementations - This spec is the source of truth for API behavior  📋 Version History: - v1.0.0: Initial contract definition

The version of the OpenAPI document: 1.0.0
Contact: dhyanraj@gmail.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from mcp_mesh.registry_client_generated.mcp_mesh_registry_client.models.dependency_info import (
    DependencyInfo,
)


class TestDependencyInfo(unittest.TestCase):
    """DependencyInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DependencyInfo:
        """Test DependencyInfo
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `DependencyInfo`
        """
        model = DependencyInfo()
        if include_optional:
            return DependencyInfo(
                agent_id = 'provider-agent',
                endpoint = 'http://localhost:8002',
                status = 'available',
                capabilities = ["greeting"],
                version = '1.0.0',
                metadata = { }
            )
        else:
            return DependencyInfo(
                agent_id = 'provider-agent',
                endpoint = 'http://localhost:8002',
                status = 'available',
        )
        """

    def testDependencyInfo(self):
        """Test DependencyInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
