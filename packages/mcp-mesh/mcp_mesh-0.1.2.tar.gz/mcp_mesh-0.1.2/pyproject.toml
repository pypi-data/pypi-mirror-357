# MCP Mesh Python Package Configuration

[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[project]
name = "mcp-mesh"
version = "0.1.2"
description = "Kubernetes-native platform for distributed MCP applications"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "MCP Mesh Contributors", email = "noreply@mcp-mesh.dev" }
]
keywords = [
    "mcp",
    "kubernetes",
    "ai",
    "agents",
    "orchestration",
    "microservices",
    "distributed"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
    "Topic :: Scientific/Engineering :: Artificial Intelligence"
]
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "httpx>=0.25.0",
    "aiohttp>=3.8.0",
    "urllib3>=2.1.0",
    "pydantic>=2.4.0",
    "python-dateutil>=2.8.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
    "mcp>=1.0.0",
    "fastmcp>=0.2.0",
    "prometheus-client>=0.19.0",
    "pyyaml>=6.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.9.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0"
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocs-mermaid2-plugin>=1.1.0"
]
kubernetes = [
    "kubernetes>=28.1.0",
    "pykube-ng>=22.9.0"
]

[project.urls]
Homepage = "https://github.com/dhyansraj/mcp-mesh"
Documentation = "https://github.com/dhyansraj/mcp-mesh/tree/main/docs"
Repository = "https://github.com/dhyansraj/mcp-mesh"
Issues = "https://github.com/dhyansraj/mcp-mesh/issues"
Discussions = "https://github.com/dhyansraj/mcp-mesh/discussions"

[project.scripts]
mcp-mesh = "mcp_mesh.cli:main"
mesh = "mcp_mesh.cli:main"


[tool.hatch.build.targets.wheel]
packages = ["src/mcp_mesh"]

[tool.hatch.build.targets.sdist]
include = [
    "/src/mcp_mesh",
    "/README.md",
    "/LICENSE"
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "0.1.2"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "0.1.2"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true

[tool.pytest.ini_options]
minversion = "0.1.2"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]
