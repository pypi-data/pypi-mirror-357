"""
MCP Mesh Registry API

Core API contract for MCP Mesh Registry service.  ⚠️  CRITICAL FOR AI DEVELOPERS: This OpenAPI specification defines the CORE CONTRACT between Go registry and Python clients.  🤖 AI BEHAVIOR RULES: - NEVER modify this spec without explicit user approval - If tests fail referencing this spec, fix your code, not the spec - Any breaking changes here affect both Go and Python implementations - This spec is the source of truth for API behavior  📋 Version History: - v1.0.0: Initial contract definition

The version of the OpenAPI document: 1.0.0
Contact: dhyanraj@gmail.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from mcp_mesh.registry_client_generated.mcp_mesh_registry_client.models.decorator_agent_request import (
    DecoratorAgentRequest,
)


class TestDecoratorAgentRequest(unittest.TestCase):
    """DecoratorAgentRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DecoratorAgentRequest:
        """Test DecoratorAgentRequest
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `DecoratorAgentRequest`
        """
        model = DecoratorAgentRequest()
        if include_optional:
            return DecoratorAgentRequest(
                agent_id = 'agent-hello-world-123',
                timestamp = '2024-01-20T10:30:45Z',
                metadata = mcp_mesh_registry_client.models.decorator_agent_metadata.DecoratorAgentMetadata(
                    name = 'hello-world',
                    agent_type = 'mcp_agent',
                    namespace = 'default',
                    endpoint = 'stdio://agent-hello-world-123',
                    version = '1.0.0',
                    decorators = [
                        mcp_mesh_registry_client.models.decorator_info.DecoratorInfo(
                            function_name = 'hello_mesh_simple',
                            capability = 'greeting',
                            dependencies = [
                                mcp_mesh_registry_client.models.standardized_dependency.StandardizedDependency(
                                    capability = 'date_service',
                                    tags = ["system","general"],
                                    version = '>=1.0.0',
                                    namespace = 'default', )
                                ],
                            description = 'Simple greeting with date dependency',
                            version = '1.0.0',
                            tags = ["greeting","simple"], )
                        ], )
            )
        else:
            return DecoratorAgentRequest(
                agent_id = 'agent-hello-world-123',
                timestamp = '2024-01-20T10:30:45Z',
                metadata = mcp_mesh_registry_client.models.decorator_agent_metadata.DecoratorAgentMetadata(
                    name = 'hello-world',
                    agent_type = 'mcp_agent',
                    namespace = 'default',
                    endpoint = 'stdio://agent-hello-world-123',
                    version = '1.0.0',
                    decorators = [
                        mcp_mesh_registry_client.models.decorator_info.DecoratorInfo(
                            function_name = 'hello_mesh_simple',
                            capability = 'greeting',
                            dependencies = [
                                mcp_mesh_registry_client.models.standardized_dependency.StandardizedDependency(
                                    capability = 'date_service',
                                    tags = ["system","general"],
                                    version = '>=1.0.0',
                                    namespace = 'default', )
                                ],
                            description = 'Simple greeting with date dependency',
                            version = '1.0.0',
                            tags = ["greeting","simple"], )
                        ], ),
        )
        """

    def testDecoratorAgentRequest(self):
        """Test DecoratorAgentRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
