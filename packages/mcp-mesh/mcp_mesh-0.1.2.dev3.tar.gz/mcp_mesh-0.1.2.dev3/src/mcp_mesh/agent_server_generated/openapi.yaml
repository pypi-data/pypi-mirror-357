openapi: 3.0.3
info:
  contact:
    email: dhyanraj@gmail.com
    name: Dhyan Raj
    url: https://github.com/dhyansraj/mcp-mesh
  description: |
    API contract for MCP Mesh Agent HTTP endpoints.

    ‚ö†Ô∏è  CRITICAL FOR AI DEVELOPERS:
    This OpenAPI specification defines the AGENT-SIDE CONTRACT for Python agent HTTP wrappers.

    ü§ñ AI BEHAVIOR RULES:
    - NEVER modify this spec without explicit user approval
    - This is SEPARATE from the registry API contract
    - Only applies to Python agent HTTP wrapper endpoints
    - Used for agent-to-external and agent health monitoring

    üìã Scope:
    - Agent health and readiness endpoints
    - Agent capability and tool discovery
    - Agent metrics and monitoring
    - MCP protocol HTTP transport
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: MCP Mesh Agent API
  version: 1.0.0
servers:
  - description: Agent HTTP wrapper
    url: "http://localhost:{port}"
    variables:
      port:
        default: "8001"
        description: Dynamic port assigned to agent
tags:
  - description: Agent health and readiness endpoints
    name: health
  - description: Agent mesh integration endpoints
    name: mesh
  - description: MCP protocol endpoints
    name: mcp
  - description: Metrics and monitoring endpoints
    name: monitoring
paths:
  /health:
    get:
      description: |
        Returns agent health status and basic information.

        ü§ñ AI NOTE: This is AGENT health, not registry health.
        Used by Kubernetes health checks and external monitoring.
      operationId: getAgentHealth
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentHealthResponse"
          description: Agent is healthy
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentHealthResponse"
          description: Agent is unhealthy
      summary: Agent health check
      tags:
        - health
  /ready:
    get:
      description: |
        Returns agent readiness status for Kubernetes readiness probes.

        ü§ñ AI NOTE: Kubernetes-specific readiness endpoint.
      operationId: getAgentReadiness
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadinessResponse"
          description: Agent is ready
        "503":
          description: Agent is not ready
      summary: Agent readiness check
      tags:
        - health
  /livez:
    get:
      description: |
        Returns agent liveness status for Kubernetes liveness probes.

        ü§ñ AI NOTE: Kubernetes-specific liveness endpoint.
      operationId: getAgentLiveness
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: OK
                type: string
          description: Agent is alive
        "503":
          description: Agent is not alive
      summary: Agent liveness check
      tags:
        - health
  /mesh/info:
    get:
      description: |
        Returns agent capabilities, dependencies, and mesh integration info.

        ü§ñ AI CRITICAL: This provides agent discovery information for mesh routing.
      operationId: getAgentMeshInfo
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentMeshInfo"
          description: Agent mesh information
      summary: Agent mesh information
      tags:
        - mesh
  /mesh/tools:
    get:
      description: |
        Returns list of tools available from this agent.

        ü§ñ AI NOTE: Used for tool discovery in mesh routing.
      operationId: listAgentTools
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentToolsList"
          description: Agent tools list
      summary: List agent tools
      tags:
        - mesh
  /metrics:
    get:
      description: |
        Returns Prometheus metrics for agent monitoring.

        ü§ñ AI NOTE: Standard Prometheus metrics endpoint.
      operationId: getAgentMetrics
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: |
                  # HELP mcp_requests_total Total number of MCP requests
                  # TYPE mcp_requests_total counter
                  mcp_requests_total{method="tools/list",status="success",agent="hello-world"} 5
                type: string
          description: Prometheus metrics
      summary: Agent metrics
      tags:
        - monitoring
  /mcp:
    post:
      description: |
        HTTP transport endpoint for MCP protocol messages.

        ü§ñ AI CRITICAL CONTRACT:
        - This endpoint handles MCP JSON-RPC protocol over HTTP
        - Request/response format must match MCP specification
        - Used for agent communication in HTTP transport mode
      operationId: handleMcpMessage
      requestBody:
        content:
          application/json:
            examples:
              tools_list:
                summary: List tools request
                value:
                  jsonrpc: "2.0"
                  id: 1
                  method: tools/list
                  params: {}
              tools_call:
                summary: Call tool request
                value:
                  jsonrpc: "2.0"
                  id: 2
                  method: tools/call
                  params:
                    name: file_operations
                    arguments:
                      operation: read
                      path: /tmp/test.txt
            schema:
              $ref: "#/components/schemas/McpRequest"
        description: MCP JSON-RPC message
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/McpResponse"
          description: MCP response
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/McpErrorResponse"
          description: Invalid MCP request
      summary: MCP protocol handler
      tags:
        - mcp
components:
  schemas:
    AgentHealthResponse:
      example:
        agent_id: hello-world
        uptime_seconds: 3600
        mcp_server_status: connected
        transport:
          - stdio
          - http
        version: 1.0.0
        status: healthy
        timestamp: 2024-01-20T10:30:45Z
      properties:
        status:
          description: Overall agent health status
          enum:
            - healthy
            - degraded
            - unhealthy
          title: status
          type: string
        agent_id:
          description: Agent identifier
          example: hello-world
          title: agent_id
          type: string
        timestamp:
          description: Current timestamp
          example: 2024-01-20T10:30:45Z
          format: date-time
          title: timestamp
          type: string
        transport:
          description: Available transport methods
          example:
            - stdio
            - http
          items:
            type: string
          title: transport
          type: array
        version:
          description: Agent version
          example: 1.0.0
          title: version
          type: string
        uptime_seconds:
          description: Agent uptime in seconds
          example: 3600
          minimum: 0
          title: uptime_seconds
          type: integer
        mcp_server_status:
          description: MCP server connection status
          enum:
            - connected
            - disconnected
            - error
          example: connected
          title: mcp_server_status
          type: string
      required:
        - agent_id
        - status
        - timestamp
        - transport
      title: AgentHealthResponse
      type: object
    ReadinessResponse:
      example:
        checks:
          mcp_server:
            status: pass
            message: Connected
          registry:
            status: pass
            message: Registered
        ready: true
        timestamp: 2024-01-20T10:30:45Z
      properties:
        ready:
          description: Whether agent is ready to serve requests
          example: true
          title: ready
          type: boolean
        timestamp:
          example: 2024-01-20T10:30:45Z
          format: date-time
          title: timestamp
          type: string
        checks:
          additionalProperties:
            $ref: "#/components/schemas/ReadinessResponse_checks_value"
          example:
            mcp_server:
              status: pass
              message: Connected
            registry:
              status: pass
              message: Registered
          title: checks
          type: object
      required:
        - ready
        - timestamp
      title: ReadinessResponse
      type: object
    AgentMeshInfo:
      example:
        capabilities:
          - greeting
          - farewell
        agent_id: hello-world
        http_endpoint: http://192.168.1.100:8001
        transport:
          - stdio
          - http
        dependencies:
          - file-system
      properties:
        agent_id:
          description: Agent identifier
          example: hello-world
          title: agent_id
          type: string
        capabilities:
          description: Agent capabilities
          example:
            - greeting
            - farewell
          items:
            type: string
          title: capabilities
          type: array
        dependencies:
          description: Agent dependencies
          example:
            - file-system
          items:
            type: string
          title: dependencies
          type: array
        transport:
          description: Available transport methods
          example:
            - stdio
            - http
          items:
            type: string
          title: transport
          type: array
        http_endpoint:
          description: Agent HTTP endpoint URL
          example: http://192.168.1.100:8001
          title: http_endpoint
          type: string
      required:
        - agent_id
        - capabilities
        - dependencies
        - http_endpoint
        - transport
      title: AgentMeshInfo
      type: object
    AgentToolsList:
      example:
        tools:
          file_operations:
            description: File system operations
            parameters:
              operation:
                type: string
                enum:
                  - read
                  - write
                  - list
              path:
                type: string
      properties:
        tools:
          additionalProperties:
            $ref: "#/components/schemas/ToolInfo"
          description: Available tools mapping
          example:
            file_operations:
              description: File system operations
              parameters:
                operation:
                  type: string
                  enum:
                    - read
                    - write
                    - list
                path:
                  type: string
          title: tools
          type: object
      required:
        - tools
      title: AgentToolsList
      type: object
    ToolInfo:
      properties:
        description:
          description: Tool description
          example: File system operations
          title: description
          type: string
        parameters:
          additionalProperties: true
          description: Tool parameter schema
          example:
            operation:
              type: string
              enum:
                - read
                - write
            path:
              type: string
          title: parameters
          type: object
      required:
        - description
      title: ToolInfo
      type: object
    McpRequest:
      example:
        method: tools/list
        id: 1
        jsonrpc: "2.0"
        params: {}
      properties:
        jsonrpc:
          description: JSON-RPC version
          enum:
            - "2.0"
          example: "2.0"
          title: jsonrpc
          type: string
        id:
          description: Request ID
          example: 1
          title: id
          type: integer
        method:
          description: MCP method name
          example: tools/list
          title: method
          type: string
        params:
          additionalProperties: true
          description: Method parameters
          example: {}
          title: params
          type: object
      required:
        - id
        - jsonrpc
        - method
      title: McpRequest
      type: object
    McpResponse:
      example:
        result:
          tools:
            - name: file_operations
              description: File system operations
        id: 1
        jsonrpc: "2.0"
        error:
          code: -32600
          data:
            key: ""
          message: Invalid Request
      properties:
        jsonrpc:
          enum:
            - "2.0"
          example: "2.0"
          title: jsonrpc
          type: string
        id:
          description: Request ID
          example: 1
          title: id
          type: integer
        result:
          additionalProperties: true
          description: Method result
          example:
            tools:
              - name: file_operations
                description: File system operations
          title: result
          type: object
        error:
          $ref: "#/components/schemas/McpError"
      required:
        - id
        - jsonrpc
      title: McpResponse
      type: object
    McpErrorResponse:
      example:
        id: 1
        jsonrpc: "2.0"
        error:
          code: -32600
          data:
            key: ""
          message: Invalid Request
      properties:
        jsonrpc:
          enum:
            - "2.0"
          example: "2.0"
          title: jsonrpc
          type: string
        id:
          example: 1
          title: id
          type: integer
        error:
          $ref: "#/components/schemas/McpError"
      required:
        - error
        - id
        - jsonrpc
      title: McpErrorResponse
      type: object
    McpError:
      example:
        code: -32600
        data:
          key: ""
        message: Invalid Request
      properties:
        code:
          description: JSON-RPC error code
          example: -32600
          title: code
          type: integer
        message:
          description: Error message
          example: Invalid Request
          title: message
          type: string
        data:
          additionalProperties: true
          description: Additional error data
          title: data
          type: object
      required:
        - code
        - message
      title: McpError
      type: object
    ReadinessResponse_checks_value:
      properties:
        status:
          enum:
            - pass
            - fail
          title: status
          type: string
        message:
          title: message
          type: string
      title: ReadinessResponse_checks_value
      type: object
