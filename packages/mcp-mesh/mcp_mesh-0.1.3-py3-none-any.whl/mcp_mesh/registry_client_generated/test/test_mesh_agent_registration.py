"""
MCP Mesh Registry API

Core API contract for MCP Mesh Registry service.  ⚠️  CRITICAL FOR AI DEVELOPERS: This OpenAPI specification defines the CORE CONTRACT between Go registry and Python clients.  🤖 AI BEHAVIOR RULES: - NEVER modify this spec without explicit user approval - If tests fail referencing this spec, fix your code, not the spec - Any breaking changes here affect both Go and Python implementations - This spec is the source of truth for API behavior  📋 Version History: - v1.0.0: Initial contract definition

The version of the OpenAPI document: 1.0.0
Contact: dhyanraj@gmail.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from mcp_mesh.registry_client_generated.mcp_mesh_registry_client.models.mesh_agent_registration import (
    MeshAgentRegistration,
)


class TestMeshAgentRegistration(unittest.TestCase):
    """MeshAgentRegistration unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MeshAgentRegistration:
        """Test MeshAgentRegistration
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `MeshAgentRegistration`
        """
        model = MeshAgentRegistration()
        if include_optional:
            return MeshAgentRegistration(
                agent_id = 'hello-world',
                agent_type = 'mcp_agent',
                name = 'hello-world',
                version = '1.0.0',
                http_host = '0.0.0.0',
                http_port = 8080,
                timestamp = '2024-01-20T10:30:45Z',
                namespace = 'default',
                tools = [
                    mcp_mesh_registry_client.models.mesh_tool_registration.MeshToolRegistration(
                        function_name = 'greet',
                        capability = 'greeting',
                        version = '1.0.0',
                        tags = ["demo","v1"],
                        dependencies = [
                            mcp_mesh_registry_client.models.mesh_tool_dependency_registration.MeshToolDependencyRegistration(
                                capability = 'date_service',
                                tags = ["system","general"],
                                version = '>=1.0.0',
                                namespace = 'default', )
                            ],
                        description = 'Simple greeting function', )
                    ]
            )
        else:
            return MeshAgentRegistration(
                agent_id = 'hello-world',
                tools = [
                    mcp_mesh_registry_client.models.mesh_tool_registration.MeshToolRegistration(
                        function_name = 'greet',
                        capability = 'greeting',
                        version = '1.0.0',
                        tags = ["demo","v1"],
                        dependencies = [
                            mcp_mesh_registry_client.models.mesh_tool_dependency_registration.MeshToolDependencyRegistration(
                                capability = 'date_service',
                                tags = ["system","general"],
                                version = '>=1.0.0',
                                namespace = 'default', )
                            ],
                        description = 'Simple greeting function', )
                    ],
        )
        """

    def testMeshAgentRegistration(self):
        """Test MeshAgentRegistration"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
