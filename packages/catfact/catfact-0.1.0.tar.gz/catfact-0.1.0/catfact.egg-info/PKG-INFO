Metadata-Version: 2.4
Name: catfact
Version: 0.1.0
Summary: Add your description here
License: MIT License
        
        Copyright (c) 2020 Michael Chow
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Keywords: factors,categoricals
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: databackend>=0.0.3
Requires-Dist: ddispatch>=0.0.1
Requires-Dist: polars
Dynamic: license-file

# catfact


Categorical wrangling for Python. Supports both Polars and Pandas.
Enables categorical and ordinal scales in plotting tools like Plotnine.

catfact addresses some common challenges when working categorical data.
Categorical data is useful when you want to display your data in a
specific way, like alphabetical, most frequent first, or along a scale.
It is a port of the popular R package forcats.

## Installation

``` bash
pip install catfact
```

## Basic example

``` python
import polars as pl
import catfact as fct
from catfact.polars.data import starwars

(
    starwars
    .group_by("eye_color")
    .agg(pl.len())
    .sort("len", descending=True)
)
```

<div>
<small>shape: (15, 2)</small>

| eye_color       | len |
|-----------------|-----|
| str             | u32 |
| "brown"         | 21  |
| "blue"          | 19  |
| "yellow"        | 11  |
| "black"         | 10  |
| "orange"        | 8   |
| …               | …   |
| "white"         | 1   |
| "pink"          | 1   |
| "blue-gray"     | 1   |
| "green, yellow" | 1   |
| "dark"          | 1   |

</div>

``` python
from plotnine import ggplot, aes, geom_bar, coord_flip

(
    ggplot(starwars, aes("eye_color"))
    + geom_bar()
    + coord_flip()
)
```

<img src="README_files/figure-commonmark/cell-4-output-1.png"
width="640" height="480" />

``` python
(
    starwars
    .with_columns(
        fct.infreq(pl.col("eye_color"))
    )
    >> ggplot(aes("eye_color"))
    + geom_bar()
    + coord_flip()
)
```

<img src="README_files/figure-commonmark/cell-5-output-1.png"
width="640" height="480" />
