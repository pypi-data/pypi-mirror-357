[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "deep-brief"
version = "0.1.0"
description = "A video analysis application for presentation feedback"
authors = [{name = "Michael Borck", email = "michael@example.com"}]
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    # Core dependencies
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "rich>=13.7.0",
    "typer>=0.9.0",
    
    # Video processing
    "opencv-python>=4.8.0",
    "ffmpeg-python>=0.2.0",
    
    # AI/ML models (CPU-only for development)
    "openai-whisper>=20231117",
    "torch>=2.2.0",
    "torchvision>=0.17.0", 
    "transformers>=4.36.0",
    "Pillow>=10.1.0",
    
    # NLP
    "spacy>=3.7.0",
    "pytesseract>=0.3.10",
    
    # Web interface
    "gradio>=4.8.0",
    
    # Data handling
    "pandas>=2.1.0",
    "numpy>=1.24.0",
    
    # Configuration
    "pyyaml>=6.0.1",
    "python-dotenv>=1.0.0",
    
    # HTML/PDF generation
    "jinja2>=3.1.0",
    "weasyprint>=60.0",
    
    # Progress bars
    "tqdm>=4.66.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.6",
    "basedpyright>=1.8.0",
    "pre-commit>=3.5.0",
]
build = [
    "build>=1.0.0",
    "twine>=4.0.0",
]
gpu = [
    # GPU-accelerated versions for production deployment
    # Install with: uv pip install -e ".[gpu]" --extra-index-url https://download.pytorch.org/whl/cu121
    "torch>=2.2.0",
    "torchvision>=0.17.0",
    # Note: Use the CUDA index URL to get GPU versions
]

[project.scripts]
deep-brief = "deep_brief.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src/deep_brief"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/config",
    "/docs",
]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.basedpyright]
include = ["src"]
exclude = ["tests"]
venvPath = "."
venv = ".venv"
pythonVersion = "3.11"
typeCheckingMode = "strict"
reportMissingImports = true
reportMissingTypeStubs = false
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src/deep_brief",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=0",  # Will increase as we add actual code
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "video: marks tests that require video processing",
    "audio: marks tests that require audio processing", 
    "ai: marks tests that require AI/ML models",
    "ui: marks tests for user interface components",
]
filterwarnings = [
    "ignore::DeprecationWarning:torch.*",
    "ignore::UserWarning:torchvision.*",
    "ignore::FutureWarning:transformers.*",
]