# coding: utf-8

"""
    Jellyfin API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 10.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.user_policy import UserPolicy

class TestUserPolicy(unittest.TestCase):
    """UserPolicy unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UserPolicy:
        """Test UserPolicy
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UserPolicy`
        """
        model = UserPolicy()
        if include_optional:
            return UserPolicy(
                is_administrator = True,
                is_hidden = True,
                enable_collection_management = True,
                enable_subtitle_management = True,
                enable_lyric_management = True,
                is_disabled = True,
                max_parental_rating = 56,
                max_parental_sub_rating = 56,
                blocked_tags = [
                    ''
                    ],
                allowed_tags = [
                    ''
                    ],
                enable_user_preference_access = True,
                access_schedules = [
                    openapi_client.models.access_schedule.AccessSchedule(
                        id = 56, 
                        user_id = '', 
                        day_of_week = 'Sunday', 
                        start_hour = 1.337, 
                        end_hour = 1.337, )
                    ],
                block_unrated_items = [
                    'Movie'
                    ],
                enable_remote_control_of_other_users = True,
                enable_shared_device_control = True,
                enable_remote_access = True,
                enable_live_tv_management = True,
                enable_live_tv_access = True,
                enable_media_playback = True,
                enable_audio_playback_transcoding = True,
                enable_video_playback_transcoding = True,
                enable_playback_remuxing = True,
                force_remote_source_transcoding = True,
                enable_content_deletion = True,
                enable_content_deletion_from_folders = [
                    ''
                    ],
                enable_content_downloading = True,
                enable_sync_transcoding = True,
                enable_media_conversion = True,
                enabled_devices = [
                    ''
                    ],
                enable_all_devices = True,
                enabled_channels = [
                    ''
                    ],
                enable_all_channels = True,
                enabled_folders = [
                    ''
                    ],
                enable_all_folders = True,
                invalid_login_attempt_count = 56,
                login_attempts_before_lockout = 56,
                max_active_sessions = 56,
                enable_public_sharing = True,
                blocked_media_folders = [
                    ''
                    ],
                blocked_channels = [
                    ''
                    ],
                remote_client_bitrate_limit = 56,
                authentication_provider_id = '',
                password_reset_provider_id = '',
                sync_play_access = 'CreateAndJoinGroups'
            )
        else:
            return UserPolicy(
                authentication_provider_id = '',
                password_reset_provider_id = '',
        )
        """

    def testUserPolicy(self):
        """Test UserPolicy"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
