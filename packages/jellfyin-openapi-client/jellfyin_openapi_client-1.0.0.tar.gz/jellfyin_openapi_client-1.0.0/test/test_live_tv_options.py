# coding: utf-8

"""
    Jellyfin API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 10.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.live_tv_options import LiveTvOptions

class TestLiveTvOptions(unittest.TestCase):
    """LiveTvOptions unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LiveTvOptions:
        """Test LiveTvOptions
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LiveTvOptions`
        """
        model = LiveTvOptions()
        if include_optional:
            return LiveTvOptions(
                guide_days = 56,
                recording_path = '',
                movie_recording_path = '',
                series_recording_path = '',
                enable_recording_subfolders = True,
                enable_original_audio_with_encoded_recordings = True,
                tuner_hosts = [
                    openapi_client.models.tuner_host_info.TunerHostInfo(
                        id = '', 
                        url = '', 
                        type = '', 
                        device_id = '', 
                        friendly_name = '', 
                        import_favorites_only = True, 
                        allow_hw_transcoding = True, 
                        allow_fmp4_transcoding_container = True, 
                        allow_stream_sharing = True, 
                        fallback_max_streaming_bitrate = 56, 
                        enable_stream_looping = True, 
                        source = '', 
                        tuner_count = 56, 
                        user_agent = '', 
                        ignore_dts = True, 
                        read_at_native_framerate = True, )
                    ],
                listing_providers = [
                    openapi_client.models.listings_provider_info.ListingsProviderInfo(
                        id = '', 
                        type = '', 
                        username = '', 
                        password = '', 
                        listings_id = '', 
                        zip_code = '', 
                        country = '', 
                        path = '', 
                        enabled_tuners = [
                            ''
                            ], 
                        enable_all_tuners = True, 
                        news_categories = [
                            ''
                            ], 
                        sports_categories = [
                            ''
                            ], 
                        kids_categories = [
                            ''
                            ], 
                        movie_categories = [
                            ''
                            ], 
                        channel_mappings = [
                            openapi_client.models.name_value_pair.NameValuePair(
                                name = '', 
                                value = '', )
                            ], 
                        movie_prefix = '', 
                        preferred_language = '', 
                        user_agent = '', )
                    ],
                pre_padding_seconds = 56,
                post_padding_seconds = 56,
                media_locations_created = [
                    ''
                    ],
                recording_post_processor = '',
                recording_post_processor_arguments = '',
                save_recording_nfo = True,
                save_recording_images = True
            )
        else:
            return LiveTvOptions(
        )
        """

    def testLiveTvOptions(self):
        """Test LiveTvOptions"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
