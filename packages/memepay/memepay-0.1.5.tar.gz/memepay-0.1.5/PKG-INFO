Metadata-Version: 2.4
Name: memepay
Version: 0.1.5
Summary: MemePay Python SDK
Home-page: https://memepay.lol
Author: MemePay
Author-email: support@memepay.lol
Project-URL: Documentation, https://memepay.lol/docs
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: requests
Requires-Dist: pydantic
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: project-url
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# MemePay SDK –¥–ª—è Python

–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Python SDK –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π MemePay.

[![PyPI version](https://img.shields.io/pypi/v/memepay.svg)](https://pypi.org/project/memepay/)
[![Python versions](https://img.shields.io/pypi/pyversions/memepay.svg)](https://pypi.org/project/memepay/)
[![License](https://img.shields.io/pypi/l/memepay.svg)](https://pypi.org/project/memepay/)

## –£—Å—Ç–∞–Ω–æ–≤–∫–∞

```bash
pip install memepay
```

## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

- –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏
- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –º–∞–≥–∞–∑–∏–Ω–µ
- –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ API
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ (—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π FastAPI)
- –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ mypy)

## –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã

### –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç

```python
from memepay import MemePay

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
client = MemePay(
    api_key="–≤–∞—à_api_–∫–ª—é—á",
    shop_id="–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä_–º–∞–≥–∞–∑–∏–Ω–∞"
)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
payment = client.create_payment(
    amount=100,  # —Å—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö
    method="lolz"  # –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
)

print(f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {payment.payment_url}")
print(f"ID –ø–ª–∞—Ç–µ–∂–∞: {payment.payment_id}")

# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç
conversion = client.convert(
    amount=100,
    from_currency="USD",
    to_currency="RUB"
)
print(f"100 USD = {conversion.amount} RUB")
```

### –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç

```python
import asyncio
from memepay import AsyncMemePay

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    client = AsyncMemePay(
        api_key="–≤–∞—à_–∞–ø–∏_–∫–ª—é—á",
        shop_id="–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä_–º–∞–≥–∞–∑–∏–Ω–∞"
    )
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        payment = await client.create_payment(
            amount=100,
            method="lolz"
        )
        
        print(f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {payment.payment_url}")
        print(f"ID –ø–ª–∞—Ç–µ–∂–∞: {payment.payment_id}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç
        conversion = await client.convert(
            amount=100,
            from_currency="USD",
            to_currency="RUB"
        )
        print(f"100 USD = {conversion.amount} RUB")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
        store_methods = await client.get_store_payment_methods()
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞:", store_methods)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã
        payment_methods = await client.get_payment_methods()
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤: {len(payment_methods.default)}")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤: {len(payment_methods.partner)}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –º–µ—Ç–æ–¥–µ
        sbp = payment_methods.get("sbp")
        if sbp:
            print(f"–°–ë–ü: –º–∏–Ω. {sbp.min}‚ÇΩ, –º–∞–∫—Å. {sbp.max}‚ÇΩ, –∫–æ–º–∏—Å—Å–∏—è {sbp.commission}%")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
        rates = await client.get_rates()
        print(f"–ö—É—Ä—Å USD –∫ RUB: {rates.rates.get('RUB')}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await client.get_user_info()
        print(f"–ë–∞–ª–∞–Ω—Å: {user.balance} —Ä—É–±.")
    
    finally:
        # –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç
        await client.close()

if __name__ == "__main__":
    asyncio.run(main())
```

## –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ —Å FastAPI

SDK –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FastAPI:

```python
import os
from memepay import MemePay
from memepay.webhook import MemePayWebhook, WebhookPayload

# –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞, ID –º–∞–≥–∞–∑–∏–Ω–∞ –∏ –≤–µ–±—Ö—É–∫-—Å–µ–∫—Ä–µ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_KEY = "1"
SHOP_ID = "1"
WEBHOOK_SECRET = "mpub_54e25f2ad1a8a966010b"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not API_KEY or not SHOP_ID or not WEBHOOK_SECRET:
    raise ValueError(
        "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: "
        "MEMEPAY_API_KEY, MEMEPAY_SHOP_ID, MEMEPAY_WEBHOOK_SECRET"
    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ MemePay
memepay_client = MemePay(
    api_key=API_KEY,
    shop_id=SHOP_ID
)

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
app, memepay_webhook = MemePayWebhook.create_app(
    webhook_secret=WEBHOOK_SECRET,
    title="MemePay Webhook",
    description="–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MemePay –≤–µ–±—Ö—É–∫–æ–≤ —Å FastAPI",
    version="1.0.0"
)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤–µ–±—Ö—É–∫–æ–≤

async def handle_payment_created(payload: WebhookPayload):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    
    Args:
        payload: –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
    """
    print(f"üÜï –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: ID={payload.payment_id}, –°—É–º–º–∞={payload.amount}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞...
    # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î, –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Ç.–¥.

async def handle_payment_completed(payload: WebhookPayload):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    
    Args:
        payload: –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
    """
    print(f"‚úÖ –ü–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω: ID={payload.payment_id}, –°—É–º–º–∞={payload.amount}")
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ —á–µ—Ä–µ–∑ API
        payment_info = memepay_client.get_payment_info(payload.payment_id)
        print(f"–î–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞: –ú–µ—Ç–æ–¥={payment_info.method}, –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è={payment_info.created_at}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–ª—è:
        # - –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
        # - –î–æ—Å—Ç–∞–≤–∫–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        # - –û—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # –∏ —Ç.–¥.
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")

async def handle_payment_failed(payload: WebhookPayload):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    
    Args:
        payload: –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
    """
    print(f"‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ —É–¥–∞–ª—Å—è: ID={payload.payment_id}, –°—Ç–∞—Ç—É—Å={payload.status}")
    
    # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

async def handle_webhook_error(error: Exception):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤ –≤–µ–±—Ö—É–∫–∞—Ö
    
    Args:
        error: –û–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    """
    print(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: {error}")
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏, –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ —Ç.–¥.

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–≥–æ API
memepay_webhook.register(handle_payment_created, event_type="payment_created")
memepay_webhook.register(handle_payment_completed event_type="payment_completed")
memepay_webhook.register(handle_payment_failed, event_type="payment_failed")
memepay_webhook.register(handle_webhook_error, event_type="error")

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    memepay_webhook.start_server_in_thread(app=app, host="127.0.0.1", port=8000)
    
    # –î–µ—Ä–∂–∏–º —Å–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
    try:
        import time
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\n–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
```

## –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

### –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

```python
user_info = client.get_user_info()
print(f"–ë–∞–ª–∞–Ω—Å: {user_info.balance}")
print(f"Email: {user_info.email}")
```

### –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ

```python
payment_info = client.get_payment_info("id_–ø–ª–∞—Ç–µ–∂–∞")
print(f"–°—Ç–∞—Ç—É—Å: {payment_info.status}")
print(f"–°—É–º–º–∞: {payment_info.amount}")
```

### –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç

```python
rates = client.get_rates()
print(f"–ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞: {rates.currency}")
print(f"–ö—É—Ä—Å USD –∫ RUB: {rates.rates['RUB']}")
print(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {rates.last_updated}")
```

### –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

```python
transfer = client.transfer(amount=100, username="–ø–æ–ª—É—á–∞—Ç–µ–ª—å")
print(f"–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω: {transfer.recipient}")
print(f"–°—É–º–º–∞: {transfer.amount}")
print(f"–ö–æ–º–∏—Å—Å–∏—è: {transfer.commission}")
print(f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {transfer.new_balance}")
```

### –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã

```python
methods = client.get_payment_methods()
print("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã:")
for method_id, info in methods.default.items():
    print(f" - {method_id}: –º–∏–Ω. {info.min}‚ÇΩ, –º–∞–∫—Å. {info.max}‚ÇΩ, –∫–æ–º–∏—Å—Å–∏—è {info.commission}%")
    
print("–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã:")
for method_id, info in methods.partner.items():
    print(f" - {method_id}: –º–∏–Ω. {info.min}‚ÇΩ, –º–∞–∫—Å. {info.max}‚ÇΩ, –∫–æ–º–∏—Å—Å–∏—è {info.commission}%")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –º–µ—Ç–æ–¥–µ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ .get()
sbp_method = methods.get("sbp")
if sbp_method:
    print(f"–°–ë–ü: –º–∏–Ω. {sbp_method.min}‚ÇΩ, –º–∞–∫—Å. {sbp_method.max}‚ÇΩ, –∫–æ–º–∏—Å—Å–∏—è {sbp_method.commission}%")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–∞
if methods.get("lolz"):
    print("–ú–µ—Ç–æ–¥ Lolz –¥–æ—Å—Ç—É–ø–µ–Ω")
```

## –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è

- Python 3.7+
- requests>=2.25.0 (–¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ API)
- httpx>=0.23.0 (–¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ API)

## –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

–ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: [https://memepay.lol/docs](https://memepay.lol/docs)

## –õ–∏—Ü–µ–Ω–∑–∏—è

MIT
