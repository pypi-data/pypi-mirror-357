# coding: utf-8

"""
    AristaFlowREST/WorklistManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from af_worklist_manager.models.af_ebp_reference_selection import AfEbpReferenceSelection  # noqa: F401,E501

class AfActivityReferenceSelection(AfEbpReferenceSelection):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'executable_component_name': 'StringFilter',
        'gui_context_id': 'StringFilter',
        'supports_view_only': 'BooleanFilter'
    }
    if hasattr(AfEbpReferenceSelection, "swagger_types"):
        swagger_types.update(AfEbpReferenceSelection.swagger_types)

    attribute_map = {
        'executable_component_name': 'executableComponentName',
        'gui_context_id': 'guiContextId',
        'supports_view_only': 'supportsViewOnly'
    }
    if hasattr(AfEbpReferenceSelection, "attribute_map"):
        attribute_map.update(AfEbpReferenceSelection.attribute_map)

    def __init__(self, executable_component_name=None, gui_context_id=None, supports_view_only=None, *args, **kwargs):  # noqa: E501
        """AfActivityReferenceSelection - a model defined in Swagger"""  # noqa: E501
        self._executable_component_name = None
        self._gui_context_id = None
        self._supports_view_only = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        if executable_component_name is not None:
            self.executable_component_name = executable_component_name
        if gui_context_id is not None:
            self.gui_context_id = gui_context_id
        if supports_view_only is not None:
            self.supports_view_only = supports_view_only
        AfEbpReferenceSelection.__init__(self, *args, **kwargs)

    @property
    def executable_component_name(self):
        """Gets the executable_component_name of this AfActivityReferenceSelection.  # noqa: E501


        :return: The executable_component_name of this AfActivityReferenceSelection.  # noqa: E501
        :rtype: StringFilter
        """
        return self._executable_component_name

    @executable_component_name.setter
    def executable_component_name(self, executable_component_name):
        """Sets the executable_component_name of this AfActivityReferenceSelection.


        :param executable_component_name: The executable_component_name of this AfActivityReferenceSelection.  # noqa: E501
        :type: StringFilter
        """

        self._executable_component_name = executable_component_name

    @property
    def gui_context_id(self):
        """Gets the gui_context_id of this AfActivityReferenceSelection.  # noqa: E501


        :return: The gui_context_id of this AfActivityReferenceSelection.  # noqa: E501
        :rtype: StringFilter
        """
        return self._gui_context_id

    @gui_context_id.setter
    def gui_context_id(self, gui_context_id):
        """Sets the gui_context_id of this AfActivityReferenceSelection.


        :param gui_context_id: The gui_context_id of this AfActivityReferenceSelection.  # noqa: E501
        :type: StringFilter
        """

        self._gui_context_id = gui_context_id

    @property
    def supports_view_only(self):
        """Gets the supports_view_only of this AfActivityReferenceSelection.  # noqa: E501


        :return: The supports_view_only of this AfActivityReferenceSelection.  # noqa: E501
        :rtype: BooleanFilter
        """
        return self._supports_view_only

    @supports_view_only.setter
    def supports_view_only(self, supports_view_only):
        """Sets the supports_view_only of this AfActivityReferenceSelection.


        :param supports_view_only: The supports_view_only of this AfActivityReferenceSelection.  # noqa: E501
        :type: BooleanFilter
        """

        self._supports_view_only = supports_view_only

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AfActivityReferenceSelection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AfActivityReferenceSelection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
