# coding: utf-8

"""
    AristaFlowREST/WorklistManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from af_worklist_manager.models.dummy_parent import DummyParent  # noqa: F401,E501

class WorklistsContaining(DummyParent):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sub_class': 'str',
        'agent_id': 'int',
        'org_pos_id': 'int',
        'agent_name': 'str',
        'org_pos_name': 'str',
        'user_session_id': 'str',
        'worklist_id': 'str'
    }
    if hasattr(DummyParent, "swagger_types"):
        swagger_types.update(DummyParent.swagger_types)

    attribute_map = {
        'sub_class': 'subClass',
        'agent_id': 'agentId',
        'org_pos_id': 'orgPosId',
        'agent_name': 'agentName',
        'org_pos_name': 'orgPosName',
        'user_session_id': 'userSessionId',
        'worklist_id': 'worklistId'
    }
    if hasattr(DummyParent, "attribute_map"):
        attribute_map.update(DummyParent.attribute_map)

    discriminator_value_class_map = {
              }

    def __init__(self, sub_class=None, agent_id=None, org_pos_id=None, agent_name=None, org_pos_name=None, user_session_id=None, worklist_id=None, *args, **kwargs):  # noqa: E501
        """WorklistsContaining - a model defined in Swagger"""  # noqa: E501
        self._sub_class = None
        self._agent_id = None
        self._org_pos_id = None
        self._agent_name = None
        self._org_pos_name = None
        self._user_session_id = None
        self._worklist_id = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = 'sub_class'
        if sub_class is not None:
            self.sub_class = sub_class
        self.agent_id = agent_id
        self.org_pos_id = org_pos_id
        self.agent_name = agent_name
        self.org_pos_name = org_pos_name
        if user_session_id is not None:
            self.user_session_id = user_session_id
        self.worklist_id = worklist_id
        DummyParent.__init__(self, *args, **kwargs)

    @property
    def sub_class(self):
        """Gets the sub_class of this WorklistsContaining.  # noqa: E501


        :return: The sub_class of this WorklistsContaining.  # noqa: E501
        :rtype: str
        """
        return self._sub_class

    @sub_class.setter
    def sub_class(self, sub_class):
        """Sets the sub_class of this WorklistsContaining.


        :param sub_class: The sub_class of this WorklistsContaining.  # noqa: E501
        :type: str
        """

        self._sub_class = sub_class

    @property
    def agent_id(self):
        """Gets the agent_id of this WorklistsContaining.  # noqa: E501


        :return: The agent_id of this WorklistsContaining.  # noqa: E501
        :rtype: int
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """Sets the agent_id of this WorklistsContaining.


        :param agent_id: The agent_id of this WorklistsContaining.  # noqa: E501
        :type: int
        """
        if agent_id is None:
            raise ValueError("Invalid value for `agent_id`, must not be `None`")  # noqa: E501

        self._agent_id = agent_id

    @property
    def org_pos_id(self):
        """Gets the org_pos_id of this WorklistsContaining.  # noqa: E501


        :return: The org_pos_id of this WorklistsContaining.  # noqa: E501
        :rtype: int
        """
        return self._org_pos_id

    @org_pos_id.setter
    def org_pos_id(self, org_pos_id):
        """Sets the org_pos_id of this WorklistsContaining.


        :param org_pos_id: The org_pos_id of this WorklistsContaining.  # noqa: E501
        :type: int
        """
        if org_pos_id is None:
            raise ValueError("Invalid value for `org_pos_id`, must not be `None`")  # noqa: E501

        self._org_pos_id = org_pos_id

    @property
    def agent_name(self):
        """Gets the agent_name of this WorklistsContaining.  # noqa: E501


        :return: The agent_name of this WorklistsContaining.  # noqa: E501
        :rtype: str
        """
        return self._agent_name

    @agent_name.setter
    def agent_name(self, agent_name):
        """Sets the agent_name of this WorklistsContaining.


        :param agent_name: The agent_name of this WorklistsContaining.  # noqa: E501
        :type: str
        """
        if agent_name is None:
            raise ValueError("Invalid value for `agent_name`, must not be `None`")  # noqa: E501

        self._agent_name = agent_name

    @property
    def org_pos_name(self):
        """Gets the org_pos_name of this WorklistsContaining.  # noqa: E501


        :return: The org_pos_name of this WorklistsContaining.  # noqa: E501
        :rtype: str
        """
        return self._org_pos_name

    @org_pos_name.setter
    def org_pos_name(self, org_pos_name):
        """Sets the org_pos_name of this WorklistsContaining.


        :param org_pos_name: The org_pos_name of this WorklistsContaining.  # noqa: E501
        :type: str
        """
        if org_pos_name is None:
            raise ValueError("Invalid value for `org_pos_name`, must not be `None`")  # noqa: E501

        self._org_pos_name = org_pos_name

    @property
    def user_session_id(self):
        """Gets the user_session_id of this WorklistsContaining.  # noqa: E501


        :return: The user_session_id of this WorklistsContaining.  # noqa: E501
        :rtype: str
        """
        return self._user_session_id

    @user_session_id.setter
    def user_session_id(self, user_session_id):
        """Sets the user_session_id of this WorklistsContaining.


        :param user_session_id: The user_session_id of this WorklistsContaining.  # noqa: E501
        :type: str
        """

        self._user_session_id = user_session_id

    @property
    def worklist_id(self):
        """Gets the worklist_id of this WorklistsContaining.  # noqa: E501


        :return: The worklist_id of this WorklistsContaining.  # noqa: E501
        :rtype: str
        """
        return self._worklist_id

    @worklist_id.setter
    def worklist_id(self, worklist_id):
        """Sets the worklist_id of this WorklistsContaining.


        :param worklist_id: The worklist_id of this WorklistsContaining.  # noqa: E501
        :type: str
        """
        if worklist_id is None:
            raise ValueError("Invalid value for `worklist_id`, must not be `None`")  # noqa: E501

        self._worklist_id = worklist_id

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.attribute_map[self.discriminator]]
        return discriminator_value if not(self.__class__.__name__ == discriminator_value) else None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorklistsContaining, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorklistsContaining):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
