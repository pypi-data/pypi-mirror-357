# coding: utf-8

"""
    AristaFlowREST/WorklistManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActivityReferenceSelection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ref_type': 'ActivityReferenceTypeFilter',
        'user_attributes': 'UserAttributesFilter'
    }

    attribute_map = {
        'ref_type': 'refType',
        'user_attributes': 'userAttributes'
    }

    def __init__(self, ref_type=None, user_attributes=None):  # noqa: E501
        """ActivityReferenceSelection - a model defined in Swagger"""  # noqa: E501
        self._ref_type = None
        self._user_attributes = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        if ref_type is not None:
            self.ref_type = ref_type
        if user_attributes is not None:
            self.user_attributes = user_attributes

    @property
    def ref_type(self):
        """Gets the ref_type of this ActivityReferenceSelection.  # noqa: E501


        :return: The ref_type of this ActivityReferenceSelection.  # noqa: E501
        :rtype: ActivityReferenceTypeFilter
        """
        return self._ref_type

    @ref_type.setter
    def ref_type(self, ref_type):
        """Sets the ref_type of this ActivityReferenceSelection.


        :param ref_type: The ref_type of this ActivityReferenceSelection.  # noqa: E501
        :type: ActivityReferenceTypeFilter
        """

        self._ref_type = ref_type

    @property
    def user_attributes(self):
        """Gets the user_attributes of this ActivityReferenceSelection.  # noqa: E501


        :return: The user_attributes of this ActivityReferenceSelection.  # noqa: E501
        :rtype: UserAttributesFilter
        """
        return self._user_attributes

    @user_attributes.setter
    def user_attributes(self, user_attributes):
        """Sets the user_attributes of this ActivityReferenceSelection.


        :param user_attributes: The user_attributes of this ActivityReferenceSelection.  # noqa: E501
        :type: UserAttributesFilter
        """

        self._user_attributes = user_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityReferenceSelection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityReferenceSelection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
