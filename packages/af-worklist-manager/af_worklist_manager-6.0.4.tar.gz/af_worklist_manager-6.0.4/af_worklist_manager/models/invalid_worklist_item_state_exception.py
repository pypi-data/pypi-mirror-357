# coding: utf-8

"""
    AristaFlowREST/WorklistManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from af_worklist_manager.models.dummy_parent import DummyParent  # noqa: F401,E501

class InvalidWorklistItemStateException(DummyParent):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sub_class': 'str',
        'message': 'str',
        'cause_class': 'str',
        'server_log_id': 'str',
        'suppress_stack': 'bool',
        'state': 'str',
        'log_id': 'str',
        'ilm_stack_trace': 'list[IlmStackTraceElement]',
        'suppressed': 'list[IlmExceptionSuppressed]'
    }
    if hasattr(DummyParent, "swagger_types"):
        swagger_types.update(DummyParent.swagger_types)

    attribute_map = {
        'sub_class': 'subClass',
        'message': 'message',
        'cause_class': 'causeClass',
        'server_log_id': 'serverLogId',
        'suppress_stack': 'suppressStack',
        'state': 'state',
        'log_id': 'logId',
        'ilm_stack_trace': 'ilmStackTrace',
        'suppressed': 'suppressed'
    }
    if hasattr(DummyParent, "attribute_map"):
        attribute_map.update(DummyParent.attribute_map)

    discriminator_value_class_map = {
              }

    def __init__(self, sub_class=None, message=None, cause_class=None, server_log_id=None, suppress_stack=None, state=None, log_id=None, ilm_stack_trace=None, suppressed=None, *args, **kwargs):  # noqa: E501
        """InvalidWorklistItemStateException - a model defined in Swagger"""  # noqa: E501
        self._sub_class = None
        self._message = None
        self._cause_class = None
        self._server_log_id = None
        self._suppress_stack = None
        self._state = None
        self._log_id = None
        self._ilm_stack_trace = None
        self._suppressed = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = 'sub_class'
        self.sub_class = sub_class
        self.message = message
        if cause_class is not None:
            self.cause_class = cause_class
        if server_log_id is not None:
            self.server_log_id = server_log_id
        self.suppress_stack = suppress_stack
        if state is not None:
            self.state = state
        if log_id is not None:
            self.log_id = log_id
        self.ilm_stack_trace = ilm_stack_trace
        if suppressed is not None:
            self.suppressed = suppressed
        DummyParent.__init__(self, *args, **kwargs)

    @property
    def sub_class(self):
        """Gets the sub_class of this InvalidWorklistItemStateException.  # noqa: E501


        :return: The sub_class of this InvalidWorklistItemStateException.  # noqa: E501
        :rtype: str
        """
        return self._sub_class

    @sub_class.setter
    def sub_class(self, sub_class):
        """Sets the sub_class of this InvalidWorklistItemStateException.


        :param sub_class: The sub_class of this InvalidWorklistItemStateException.  # noqa: E501
        :type: str
        """
        if sub_class is None:
            raise ValueError("Invalid value for `sub_class`, must not be `None`")  # noqa: E501

        self._sub_class = sub_class

    @property
    def message(self):
        """Gets the message of this InvalidWorklistItemStateException.  # noqa: E501


        :return: The message of this InvalidWorklistItemStateException.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this InvalidWorklistItemStateException.


        :param message: The message of this InvalidWorklistItemStateException.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def cause_class(self):
        """Gets the cause_class of this InvalidWorklistItemStateException.  # noqa: E501


        :return: The cause_class of this InvalidWorklistItemStateException.  # noqa: E501
        :rtype: str
        """
        return self._cause_class

    @cause_class.setter
    def cause_class(self, cause_class):
        """Sets the cause_class of this InvalidWorklistItemStateException.


        :param cause_class: The cause_class of this InvalidWorklistItemStateException.  # noqa: E501
        :type: str
        """

        self._cause_class = cause_class

    @property
    def server_log_id(self):
        """Gets the server_log_id of this InvalidWorklistItemStateException.  # noqa: E501


        :return: The server_log_id of this InvalidWorklistItemStateException.  # noqa: E501
        :rtype: str
        """
        return self._server_log_id

    @server_log_id.setter
    def server_log_id(self, server_log_id):
        """Sets the server_log_id of this InvalidWorklistItemStateException.


        :param server_log_id: The server_log_id of this InvalidWorklistItemStateException.  # noqa: E501
        :type: str
        """

        self._server_log_id = server_log_id

    @property
    def suppress_stack(self):
        """Gets the suppress_stack of this InvalidWorklistItemStateException.  # noqa: E501


        :return: The suppress_stack of this InvalidWorklistItemStateException.  # noqa: E501
        :rtype: bool
        """
        return self._suppress_stack

    @suppress_stack.setter
    def suppress_stack(self, suppress_stack):
        """Sets the suppress_stack of this InvalidWorklistItemStateException.


        :param suppress_stack: The suppress_stack of this InvalidWorklistItemStateException.  # noqa: E501
        :type: bool
        """
        if suppress_stack is None:
            raise ValueError("Invalid value for `suppress_stack`, must not be `None`")  # noqa: E501

        self._suppress_stack = suppress_stack

    @property
    def state(self):
        """Gets the state of this InvalidWorklistItemStateException.  # noqa: E501


        :return: The state of this InvalidWorklistItemStateException.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InvalidWorklistItemStateException.


        :param state: The state of this InvalidWorklistItemStateException.  # noqa: E501
        :type: str
        """
        allowed_values = ["AVAILABLE", "ASSIGNED", "STARTED", "SUSPENDED", "ENQUIRED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def log_id(self):
        """Gets the log_id of this InvalidWorklistItemStateException.  # noqa: E501


        :return: The log_id of this InvalidWorklistItemStateException.  # noqa: E501
        :rtype: str
        """
        return self._log_id

    @log_id.setter
    def log_id(self, log_id):
        """Sets the log_id of this InvalidWorklistItemStateException.


        :param log_id: The log_id of this InvalidWorklistItemStateException.  # noqa: E501
        :type: str
        """

        self._log_id = log_id

    @property
    def ilm_stack_trace(self):
        """Gets the ilm_stack_trace of this InvalidWorklistItemStateException.  # noqa: E501


        :return: The ilm_stack_trace of this InvalidWorklistItemStateException.  # noqa: E501
        :rtype: list[IlmStackTraceElement]
        """
        return self._ilm_stack_trace

    @ilm_stack_trace.setter
    def ilm_stack_trace(self, ilm_stack_trace):
        """Sets the ilm_stack_trace of this InvalidWorklistItemStateException.


        :param ilm_stack_trace: The ilm_stack_trace of this InvalidWorklistItemStateException.  # noqa: E501
        :type: list[IlmStackTraceElement]
        """
        if ilm_stack_trace is None:
            raise ValueError("Invalid value for `ilm_stack_trace`, must not be `None`")  # noqa: E501

        self._ilm_stack_trace = ilm_stack_trace

    @property
    def suppressed(self):
        """Gets the suppressed of this InvalidWorklistItemStateException.  # noqa: E501


        :return: The suppressed of this InvalidWorklistItemStateException.  # noqa: E501
        :rtype: list[IlmExceptionSuppressed]
        """
        return self._suppressed

    @suppressed.setter
    def suppressed(self, suppressed):
        """Sets the suppressed of this InvalidWorklistItemStateException.


        :param suppressed: The suppressed of this InvalidWorklistItemStateException.  # noqa: E501
        :type: list[IlmExceptionSuppressed]
        """

        self._suppressed = suppressed

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.attribute_map[self.discriminator]]
        return discriminator_value if not(self.__class__.__name__ == discriminator_value) else None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvalidWorklistItemStateException, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvalidWorklistItemStateException):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
