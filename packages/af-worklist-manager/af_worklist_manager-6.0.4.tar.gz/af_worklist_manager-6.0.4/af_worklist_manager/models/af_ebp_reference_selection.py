# coding: utf-8

"""
    AristaFlowREST/WorklistManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from af_worklist_manager.models.af_instance_reference_selection import AfInstanceReferenceSelection  # noqa: F401,E501

class AfEbpReferenceSelection(AfInstanceReferenceSelection):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'EbpTypeFilter',
        'node_id': 'IntegerFilter',
        'node_iteration': 'IntegerFilter',
        'runtime_manager_uris': 'CollectionUriFilter',
        'exec_control_props': 'ExecutionControlPropertiesFilter'
    }
    if hasattr(AfInstanceReferenceSelection, "swagger_types"):
        swagger_types.update(AfInstanceReferenceSelection.swagger_types)

    attribute_map = {
        'type': 'type',
        'node_id': 'nodeId',
        'node_iteration': 'nodeIteration',
        'runtime_manager_uris': 'runtimeManagerUris',
        'exec_control_props': 'execControlProps'
    }
    if hasattr(AfInstanceReferenceSelection, "attribute_map"):
        attribute_map.update(AfInstanceReferenceSelection.attribute_map)

    def __init__(self, type=None, node_id=None, node_iteration=None, runtime_manager_uris=None, exec_control_props=None, *args, **kwargs):  # noqa: E501
        """AfEbpReferenceSelection - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._node_id = None
        self._node_iteration = None
        self._runtime_manager_uris = None
        self._exec_control_props = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        if type is not None:
            self.type = type
        if node_id is not None:
            self.node_id = node_id
        if node_iteration is not None:
            self.node_iteration = node_iteration
        if runtime_manager_uris is not None:
            self.runtime_manager_uris = runtime_manager_uris
        if exec_control_props is not None:
            self.exec_control_props = exec_control_props
        AfInstanceReferenceSelection.__init__(self, *args, **kwargs)

    @property
    def type(self):
        """Gets the type of this AfEbpReferenceSelection.  # noqa: E501


        :return: The type of this AfEbpReferenceSelection.  # noqa: E501
        :rtype: EbpTypeFilter
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AfEbpReferenceSelection.


        :param type: The type of this AfEbpReferenceSelection.  # noqa: E501
        :type: EbpTypeFilter
        """

        self._type = type

    @property
    def node_id(self):
        """Gets the node_id of this AfEbpReferenceSelection.  # noqa: E501


        :return: The node_id of this AfEbpReferenceSelection.  # noqa: E501
        :rtype: IntegerFilter
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this AfEbpReferenceSelection.


        :param node_id: The node_id of this AfEbpReferenceSelection.  # noqa: E501
        :type: IntegerFilter
        """

        self._node_id = node_id

    @property
    def node_iteration(self):
        """Gets the node_iteration of this AfEbpReferenceSelection.  # noqa: E501


        :return: The node_iteration of this AfEbpReferenceSelection.  # noqa: E501
        :rtype: IntegerFilter
        """
        return self._node_iteration

    @node_iteration.setter
    def node_iteration(self, node_iteration):
        """Sets the node_iteration of this AfEbpReferenceSelection.


        :param node_iteration: The node_iteration of this AfEbpReferenceSelection.  # noqa: E501
        :type: IntegerFilter
        """

        self._node_iteration = node_iteration

    @property
    def runtime_manager_uris(self):
        """Gets the runtime_manager_uris of this AfEbpReferenceSelection.  # noqa: E501


        :return: The runtime_manager_uris of this AfEbpReferenceSelection.  # noqa: E501
        :rtype: CollectionUriFilter
        """
        return self._runtime_manager_uris

    @runtime_manager_uris.setter
    def runtime_manager_uris(self, runtime_manager_uris):
        """Sets the runtime_manager_uris of this AfEbpReferenceSelection.


        :param runtime_manager_uris: The runtime_manager_uris of this AfEbpReferenceSelection.  # noqa: E501
        :type: CollectionUriFilter
        """

        self._runtime_manager_uris = runtime_manager_uris

    @property
    def exec_control_props(self):
        """Gets the exec_control_props of this AfEbpReferenceSelection.  # noqa: E501


        :return: The exec_control_props of this AfEbpReferenceSelection.  # noqa: E501
        :rtype: ExecutionControlPropertiesFilter
        """
        return self._exec_control_props

    @exec_control_props.setter
    def exec_control_props(self, exec_control_props):
        """Sets the exec_control_props of this AfEbpReferenceSelection.


        :param exec_control_props: The exec_control_props of this AfEbpReferenceSelection.  # noqa: E501
        :type: ExecutionControlPropertiesFilter
        """

        self._exec_control_props = exec_control_props

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AfEbpReferenceSelection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AfEbpReferenceSelection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
