# coding: utf-8

"""
    AristaFlowREST/WorklistManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClientWorklistItemSelection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'UuidFilter',
        'title': 'StringFilter',
        'desc': 'StringFilter',
        'process_type': 'StringFilter',
        'process_template_version': 'StringFilter',
        'process_template_name': 'StringFilter',
        'process_instance_name': 'StringFilter',
        'act_ref': 'ActivityReferenceFilter',
        'icon_id': 'UuidFilter',
        'group_id': 'UuidFilter',
        'state': 'WorklistItemStateFilter',
        'priority': 'IntegerFilter',
        'complexity': 'LongFilter',
        'activation_date': 'InstantFilter',
        'assignment_date': 'InstantFilter',
        'escalation_date': 'InstantFilter',
        'due_date': 'InstantFilter',
        'assigned_agent': 'QualifiedAgentFilter',
        'current_escalation_level': 'IntegerFilter',
        'current_delegation': 'DelegationFilter',
        'current_enquiry': 'EnquiryFilter',
        'replied_enquiry': 'EnquiryFilter',
        'current_delegation_level': 'IntegerFilter',
        'user_attributes': 'UserAttributesFilter',
        'substituted_from': 'CollectionQaFilter',
        'worklist_id': 'UuidFilter',
        'ind_title': 'StringFilter',
        'ind_description': 'StringFilter',
        'ind_priority': 'IntegerFilter',
        'ind_due_date': 'InstantFilter',
        'ind_escalation_proc_id': 'StringFilter',
        'resubmission_date': 'InstantFilter',
        'ind_escalation_date': 'InstantFilter',
        'ind_user_attributes': 'UserAttributesFilter'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'desc': 'desc',
        'process_type': 'processType',
        'process_template_version': 'processTemplateVersion',
        'process_template_name': 'processTemplateName',
        'process_instance_name': 'processInstanceName',
        'act_ref': 'actRef',
        'icon_id': 'iconId',
        'group_id': 'groupId',
        'state': 'state',
        'priority': 'priority',
        'complexity': 'complexity',
        'activation_date': 'activationDate',
        'assignment_date': 'assignmentDate',
        'escalation_date': 'escalationDate',
        'due_date': 'dueDate',
        'assigned_agent': 'assignedAgent',
        'current_escalation_level': 'currentEscalationLevel',
        'current_delegation': 'currentDelegation',
        'current_enquiry': 'currentEnquiry',
        'replied_enquiry': 'repliedEnquiry',
        'current_delegation_level': 'currentDelegationLevel',
        'user_attributes': 'userAttributes',
        'substituted_from': 'substitutedFrom',
        'worklist_id': 'worklistId',
        'ind_title': 'indTitle',
        'ind_description': 'indDescription',
        'ind_priority': 'indPriority',
        'ind_due_date': 'indDueDate',
        'ind_escalation_proc_id': 'indEscalationProcId',
        'resubmission_date': 'resubmissionDate',
        'ind_escalation_date': 'indEscalationDate',
        'ind_user_attributes': 'indUserAttributes'
    }

    def __init__(self, id=None, title=None, desc=None, process_type=None, process_template_version=None, process_template_name=None, process_instance_name=None, act_ref=None, icon_id=None, group_id=None, state=None, priority=None, complexity=None, activation_date=None, assignment_date=None, escalation_date=None, due_date=None, assigned_agent=None, current_escalation_level=None, current_delegation=None, current_enquiry=None, replied_enquiry=None, current_delegation_level=None, user_attributes=None, substituted_from=None, worklist_id=None, ind_title=None, ind_description=None, ind_priority=None, ind_due_date=None, ind_escalation_proc_id=None, resubmission_date=None, ind_escalation_date=None, ind_user_attributes=None):  # noqa: E501
        """ClientWorklistItemSelection - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._desc = None
        self._process_type = None
        self._process_template_version = None
        self._process_template_name = None
        self._process_instance_name = None
        self._act_ref = None
        self._icon_id = None
        self._group_id = None
        self._state = None
        self._priority = None
        self._complexity = None
        self._activation_date = None
        self._assignment_date = None
        self._escalation_date = None
        self._due_date = None
        self._assigned_agent = None
        self._current_escalation_level = None
        self._current_delegation = None
        self._current_enquiry = None
        self._replied_enquiry = None
        self._current_delegation_level = None
        self._user_attributes = None
        self._substituted_from = None
        self._worklist_id = None
        self._ind_title = None
        self._ind_description = None
        self._ind_priority = None
        self._ind_due_date = None
        self._ind_escalation_proc_id = None
        self._resubmission_date = None
        self._ind_escalation_date = None
        self._ind_user_attributes = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if desc is not None:
            self.desc = desc
        if process_type is not None:
            self.process_type = process_type
        if process_template_version is not None:
            self.process_template_version = process_template_version
        if process_template_name is not None:
            self.process_template_name = process_template_name
        if process_instance_name is not None:
            self.process_instance_name = process_instance_name
        if act_ref is not None:
            self.act_ref = act_ref
        if icon_id is not None:
            self.icon_id = icon_id
        if group_id is not None:
            self.group_id = group_id
        if state is not None:
            self.state = state
        if priority is not None:
            self.priority = priority
        if complexity is not None:
            self.complexity = complexity
        if activation_date is not None:
            self.activation_date = activation_date
        if assignment_date is not None:
            self.assignment_date = assignment_date
        if escalation_date is not None:
            self.escalation_date = escalation_date
        if due_date is not None:
            self.due_date = due_date
        if assigned_agent is not None:
            self.assigned_agent = assigned_agent
        if current_escalation_level is not None:
            self.current_escalation_level = current_escalation_level
        if current_delegation is not None:
            self.current_delegation = current_delegation
        if current_enquiry is not None:
            self.current_enquiry = current_enquiry
        if replied_enquiry is not None:
            self.replied_enquiry = replied_enquiry
        if current_delegation_level is not None:
            self.current_delegation_level = current_delegation_level
        if user_attributes is not None:
            self.user_attributes = user_attributes
        if substituted_from is not None:
            self.substituted_from = substituted_from
        if worklist_id is not None:
            self.worklist_id = worklist_id
        if ind_title is not None:
            self.ind_title = ind_title
        if ind_description is not None:
            self.ind_description = ind_description
        if ind_priority is not None:
            self.ind_priority = ind_priority
        if ind_due_date is not None:
            self.ind_due_date = ind_due_date
        if ind_escalation_proc_id is not None:
            self.ind_escalation_proc_id = ind_escalation_proc_id
        if resubmission_date is not None:
            self.resubmission_date = resubmission_date
        if ind_escalation_date is not None:
            self.ind_escalation_date = ind_escalation_date
        if ind_user_attributes is not None:
            self.ind_user_attributes = ind_user_attributes

    @property
    def id(self):
        """Gets the id of this ClientWorklistItemSelection.  # noqa: E501


        :return: The id of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: UuidFilter
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClientWorklistItemSelection.


        :param id: The id of this ClientWorklistItemSelection.  # noqa: E501
        :type: UuidFilter
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this ClientWorklistItemSelection.  # noqa: E501


        :return: The title of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: StringFilter
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ClientWorklistItemSelection.


        :param title: The title of this ClientWorklistItemSelection.  # noqa: E501
        :type: StringFilter
        """

        self._title = title

    @property
    def desc(self):
        """Gets the desc of this ClientWorklistItemSelection.  # noqa: E501


        :return: The desc of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: StringFilter
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this ClientWorklistItemSelection.


        :param desc: The desc of this ClientWorklistItemSelection.  # noqa: E501
        :type: StringFilter
        """

        self._desc = desc

    @property
    def process_type(self):
        """Gets the process_type of this ClientWorklistItemSelection.  # noqa: E501


        :return: The process_type of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: StringFilter
        """
        return self._process_type

    @process_type.setter
    def process_type(self, process_type):
        """Sets the process_type of this ClientWorklistItemSelection.


        :param process_type: The process_type of this ClientWorklistItemSelection.  # noqa: E501
        :type: StringFilter
        """

        self._process_type = process_type

    @property
    def process_template_version(self):
        """Gets the process_template_version of this ClientWorklistItemSelection.  # noqa: E501


        :return: The process_template_version of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: StringFilter
        """
        return self._process_template_version

    @process_template_version.setter
    def process_template_version(self, process_template_version):
        """Sets the process_template_version of this ClientWorklistItemSelection.


        :param process_template_version: The process_template_version of this ClientWorklistItemSelection.  # noqa: E501
        :type: StringFilter
        """

        self._process_template_version = process_template_version

    @property
    def process_template_name(self):
        """Gets the process_template_name of this ClientWorklistItemSelection.  # noqa: E501


        :return: The process_template_name of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: StringFilter
        """
        return self._process_template_name

    @process_template_name.setter
    def process_template_name(self, process_template_name):
        """Sets the process_template_name of this ClientWorklistItemSelection.


        :param process_template_name: The process_template_name of this ClientWorklistItemSelection.  # noqa: E501
        :type: StringFilter
        """

        self._process_template_name = process_template_name

    @property
    def process_instance_name(self):
        """Gets the process_instance_name of this ClientWorklistItemSelection.  # noqa: E501


        :return: The process_instance_name of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: StringFilter
        """
        return self._process_instance_name

    @process_instance_name.setter
    def process_instance_name(self, process_instance_name):
        """Sets the process_instance_name of this ClientWorklistItemSelection.


        :param process_instance_name: The process_instance_name of this ClientWorklistItemSelection.  # noqa: E501
        :type: StringFilter
        """

        self._process_instance_name = process_instance_name

    @property
    def act_ref(self):
        """Gets the act_ref of this ClientWorklistItemSelection.  # noqa: E501


        :return: The act_ref of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: ActivityReferenceFilter
        """
        return self._act_ref

    @act_ref.setter
    def act_ref(self, act_ref):
        """Sets the act_ref of this ClientWorklistItemSelection.


        :param act_ref: The act_ref of this ClientWorklistItemSelection.  # noqa: E501
        :type: ActivityReferenceFilter
        """

        self._act_ref = act_ref

    @property
    def icon_id(self):
        """Gets the icon_id of this ClientWorklistItemSelection.  # noqa: E501


        :return: The icon_id of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: UuidFilter
        """
        return self._icon_id

    @icon_id.setter
    def icon_id(self, icon_id):
        """Sets the icon_id of this ClientWorklistItemSelection.


        :param icon_id: The icon_id of this ClientWorklistItemSelection.  # noqa: E501
        :type: UuidFilter
        """

        self._icon_id = icon_id

    @property
    def group_id(self):
        """Gets the group_id of this ClientWorklistItemSelection.  # noqa: E501


        :return: The group_id of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: UuidFilter
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this ClientWorklistItemSelection.


        :param group_id: The group_id of this ClientWorklistItemSelection.  # noqa: E501
        :type: UuidFilter
        """

        self._group_id = group_id

    @property
    def state(self):
        """Gets the state of this ClientWorklistItemSelection.  # noqa: E501


        :return: The state of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: WorklistItemStateFilter
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ClientWorklistItemSelection.


        :param state: The state of this ClientWorklistItemSelection.  # noqa: E501
        :type: WorklistItemStateFilter
        """

        self._state = state

    @property
    def priority(self):
        """Gets the priority of this ClientWorklistItemSelection.  # noqa: E501


        :return: The priority of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: IntegerFilter
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ClientWorklistItemSelection.


        :param priority: The priority of this ClientWorklistItemSelection.  # noqa: E501
        :type: IntegerFilter
        """

        self._priority = priority

    @property
    def complexity(self):
        """Gets the complexity of this ClientWorklistItemSelection.  # noqa: E501


        :return: The complexity of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: LongFilter
        """
        return self._complexity

    @complexity.setter
    def complexity(self, complexity):
        """Sets the complexity of this ClientWorklistItemSelection.


        :param complexity: The complexity of this ClientWorklistItemSelection.  # noqa: E501
        :type: LongFilter
        """

        self._complexity = complexity

    @property
    def activation_date(self):
        """Gets the activation_date of this ClientWorklistItemSelection.  # noqa: E501


        :return: The activation_date of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: InstantFilter
        """
        return self._activation_date

    @activation_date.setter
    def activation_date(self, activation_date):
        """Sets the activation_date of this ClientWorklistItemSelection.


        :param activation_date: The activation_date of this ClientWorklistItemSelection.  # noqa: E501
        :type: InstantFilter
        """

        self._activation_date = activation_date

    @property
    def assignment_date(self):
        """Gets the assignment_date of this ClientWorklistItemSelection.  # noqa: E501


        :return: The assignment_date of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: InstantFilter
        """
        return self._assignment_date

    @assignment_date.setter
    def assignment_date(self, assignment_date):
        """Sets the assignment_date of this ClientWorklistItemSelection.


        :param assignment_date: The assignment_date of this ClientWorklistItemSelection.  # noqa: E501
        :type: InstantFilter
        """

        self._assignment_date = assignment_date

    @property
    def escalation_date(self):
        """Gets the escalation_date of this ClientWorklistItemSelection.  # noqa: E501


        :return: The escalation_date of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: InstantFilter
        """
        return self._escalation_date

    @escalation_date.setter
    def escalation_date(self, escalation_date):
        """Sets the escalation_date of this ClientWorklistItemSelection.


        :param escalation_date: The escalation_date of this ClientWorklistItemSelection.  # noqa: E501
        :type: InstantFilter
        """

        self._escalation_date = escalation_date

    @property
    def due_date(self):
        """Gets the due_date of this ClientWorklistItemSelection.  # noqa: E501


        :return: The due_date of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: InstantFilter
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this ClientWorklistItemSelection.


        :param due_date: The due_date of this ClientWorklistItemSelection.  # noqa: E501
        :type: InstantFilter
        """

        self._due_date = due_date

    @property
    def assigned_agent(self):
        """Gets the assigned_agent of this ClientWorklistItemSelection.  # noqa: E501


        :return: The assigned_agent of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: QualifiedAgentFilter
        """
        return self._assigned_agent

    @assigned_agent.setter
    def assigned_agent(self, assigned_agent):
        """Sets the assigned_agent of this ClientWorklistItemSelection.


        :param assigned_agent: The assigned_agent of this ClientWorklistItemSelection.  # noqa: E501
        :type: QualifiedAgentFilter
        """

        self._assigned_agent = assigned_agent

    @property
    def current_escalation_level(self):
        """Gets the current_escalation_level of this ClientWorklistItemSelection.  # noqa: E501


        :return: The current_escalation_level of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: IntegerFilter
        """
        return self._current_escalation_level

    @current_escalation_level.setter
    def current_escalation_level(self, current_escalation_level):
        """Sets the current_escalation_level of this ClientWorklistItemSelection.


        :param current_escalation_level: The current_escalation_level of this ClientWorklistItemSelection.  # noqa: E501
        :type: IntegerFilter
        """

        self._current_escalation_level = current_escalation_level

    @property
    def current_delegation(self):
        """Gets the current_delegation of this ClientWorklistItemSelection.  # noqa: E501


        :return: The current_delegation of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: DelegationFilter
        """
        return self._current_delegation

    @current_delegation.setter
    def current_delegation(self, current_delegation):
        """Sets the current_delegation of this ClientWorklistItemSelection.


        :param current_delegation: The current_delegation of this ClientWorklistItemSelection.  # noqa: E501
        :type: DelegationFilter
        """

        self._current_delegation = current_delegation

    @property
    def current_enquiry(self):
        """Gets the current_enquiry of this ClientWorklistItemSelection.  # noqa: E501


        :return: The current_enquiry of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: EnquiryFilter
        """
        return self._current_enquiry

    @current_enquiry.setter
    def current_enquiry(self, current_enquiry):
        """Sets the current_enquiry of this ClientWorklistItemSelection.


        :param current_enquiry: The current_enquiry of this ClientWorklistItemSelection.  # noqa: E501
        :type: EnquiryFilter
        """

        self._current_enquiry = current_enquiry

    @property
    def replied_enquiry(self):
        """Gets the replied_enquiry of this ClientWorklistItemSelection.  # noqa: E501


        :return: The replied_enquiry of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: EnquiryFilter
        """
        return self._replied_enquiry

    @replied_enquiry.setter
    def replied_enquiry(self, replied_enquiry):
        """Sets the replied_enquiry of this ClientWorklistItemSelection.


        :param replied_enquiry: The replied_enquiry of this ClientWorklistItemSelection.  # noqa: E501
        :type: EnquiryFilter
        """

        self._replied_enquiry = replied_enquiry

    @property
    def current_delegation_level(self):
        """Gets the current_delegation_level of this ClientWorklistItemSelection.  # noqa: E501


        :return: The current_delegation_level of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: IntegerFilter
        """
        return self._current_delegation_level

    @current_delegation_level.setter
    def current_delegation_level(self, current_delegation_level):
        """Sets the current_delegation_level of this ClientWorklistItemSelection.


        :param current_delegation_level: The current_delegation_level of this ClientWorklistItemSelection.  # noqa: E501
        :type: IntegerFilter
        """

        self._current_delegation_level = current_delegation_level

    @property
    def user_attributes(self):
        """Gets the user_attributes of this ClientWorklistItemSelection.  # noqa: E501


        :return: The user_attributes of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: UserAttributesFilter
        """
        return self._user_attributes

    @user_attributes.setter
    def user_attributes(self, user_attributes):
        """Sets the user_attributes of this ClientWorklistItemSelection.


        :param user_attributes: The user_attributes of this ClientWorklistItemSelection.  # noqa: E501
        :type: UserAttributesFilter
        """

        self._user_attributes = user_attributes

    @property
    def substituted_from(self):
        """Gets the substituted_from of this ClientWorklistItemSelection.  # noqa: E501


        :return: The substituted_from of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: CollectionQaFilter
        """
        return self._substituted_from

    @substituted_from.setter
    def substituted_from(self, substituted_from):
        """Sets the substituted_from of this ClientWorklistItemSelection.


        :param substituted_from: The substituted_from of this ClientWorklistItemSelection.  # noqa: E501
        :type: CollectionQaFilter
        """

        self._substituted_from = substituted_from

    @property
    def worklist_id(self):
        """Gets the worklist_id of this ClientWorklistItemSelection.  # noqa: E501


        :return: The worklist_id of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: UuidFilter
        """
        return self._worklist_id

    @worklist_id.setter
    def worklist_id(self, worklist_id):
        """Sets the worklist_id of this ClientWorklistItemSelection.


        :param worklist_id: The worklist_id of this ClientWorklistItemSelection.  # noqa: E501
        :type: UuidFilter
        """

        self._worklist_id = worklist_id

    @property
    def ind_title(self):
        """Gets the ind_title of this ClientWorklistItemSelection.  # noqa: E501


        :return: The ind_title of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: StringFilter
        """
        return self._ind_title

    @ind_title.setter
    def ind_title(self, ind_title):
        """Sets the ind_title of this ClientWorklistItemSelection.


        :param ind_title: The ind_title of this ClientWorklistItemSelection.  # noqa: E501
        :type: StringFilter
        """

        self._ind_title = ind_title

    @property
    def ind_description(self):
        """Gets the ind_description of this ClientWorklistItemSelection.  # noqa: E501


        :return: The ind_description of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: StringFilter
        """
        return self._ind_description

    @ind_description.setter
    def ind_description(self, ind_description):
        """Sets the ind_description of this ClientWorklistItemSelection.


        :param ind_description: The ind_description of this ClientWorklistItemSelection.  # noqa: E501
        :type: StringFilter
        """

        self._ind_description = ind_description

    @property
    def ind_priority(self):
        """Gets the ind_priority of this ClientWorklistItemSelection.  # noqa: E501


        :return: The ind_priority of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: IntegerFilter
        """
        return self._ind_priority

    @ind_priority.setter
    def ind_priority(self, ind_priority):
        """Sets the ind_priority of this ClientWorklistItemSelection.


        :param ind_priority: The ind_priority of this ClientWorklistItemSelection.  # noqa: E501
        :type: IntegerFilter
        """

        self._ind_priority = ind_priority

    @property
    def ind_due_date(self):
        """Gets the ind_due_date of this ClientWorklistItemSelection.  # noqa: E501


        :return: The ind_due_date of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: InstantFilter
        """
        return self._ind_due_date

    @ind_due_date.setter
    def ind_due_date(self, ind_due_date):
        """Sets the ind_due_date of this ClientWorklistItemSelection.


        :param ind_due_date: The ind_due_date of this ClientWorklistItemSelection.  # noqa: E501
        :type: InstantFilter
        """

        self._ind_due_date = ind_due_date

    @property
    def ind_escalation_proc_id(self):
        """Gets the ind_escalation_proc_id of this ClientWorklistItemSelection.  # noqa: E501


        :return: The ind_escalation_proc_id of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: StringFilter
        """
        return self._ind_escalation_proc_id

    @ind_escalation_proc_id.setter
    def ind_escalation_proc_id(self, ind_escalation_proc_id):
        """Sets the ind_escalation_proc_id of this ClientWorklistItemSelection.


        :param ind_escalation_proc_id: The ind_escalation_proc_id of this ClientWorklistItemSelection.  # noqa: E501
        :type: StringFilter
        """

        self._ind_escalation_proc_id = ind_escalation_proc_id

    @property
    def resubmission_date(self):
        """Gets the resubmission_date of this ClientWorklistItemSelection.  # noqa: E501


        :return: The resubmission_date of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: InstantFilter
        """
        return self._resubmission_date

    @resubmission_date.setter
    def resubmission_date(self, resubmission_date):
        """Sets the resubmission_date of this ClientWorklistItemSelection.


        :param resubmission_date: The resubmission_date of this ClientWorklistItemSelection.  # noqa: E501
        :type: InstantFilter
        """

        self._resubmission_date = resubmission_date

    @property
    def ind_escalation_date(self):
        """Gets the ind_escalation_date of this ClientWorklistItemSelection.  # noqa: E501


        :return: The ind_escalation_date of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: InstantFilter
        """
        return self._ind_escalation_date

    @ind_escalation_date.setter
    def ind_escalation_date(self, ind_escalation_date):
        """Sets the ind_escalation_date of this ClientWorklistItemSelection.


        :param ind_escalation_date: The ind_escalation_date of this ClientWorklistItemSelection.  # noqa: E501
        :type: InstantFilter
        """

        self._ind_escalation_date = ind_escalation_date

    @property
    def ind_user_attributes(self):
        """Gets the ind_user_attributes of this ClientWorklistItemSelection.  # noqa: E501


        :return: The ind_user_attributes of this ClientWorklistItemSelection.  # noqa: E501
        :rtype: UserAttributesFilter
        """
        return self._ind_user_attributes

    @ind_user_attributes.setter
    def ind_user_attributes(self, ind_user_attributes):
        """Sets the ind_user_attributes of this ClientWorklistItemSelection.


        :param ind_user_attributes: The ind_user_attributes of this ClientWorklistItemSelection.  # noqa: E501
        :type: UserAttributesFilter
        """

        self._ind_user_attributes = ind_user_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientWorklistItemSelection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientWorklistItemSelection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
