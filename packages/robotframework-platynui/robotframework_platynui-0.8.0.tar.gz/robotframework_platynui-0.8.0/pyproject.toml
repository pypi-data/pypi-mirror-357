# SPDX-FileCopyrightText: 2024 Daniel Biehl <daniel.biehl@imbus.de>
#
# SPDX-License-Identifier: Apache-2.0

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "robotframework-platynui"
dynamic = ["version"]
description = 'PlatynUI is a library for Robot Framework that enables easy and cross-platform desktop UI automation with a comprehensive set of keywords for interacting with desktop applications.'
readme = "README.md"
requires-python = ">=3.10"
license = { text = "Apache-2.0" }
keywords = []
authors = [{ name = "Daniel Biehl", email = "daniel.biehl@imbus.de" }]
classifiers = [
  "Intended Audience :: Developers",
  "Development Status :: 3 - Alpha",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Framework :: Robot Framework :: Library",
  "Programming Language :: C#",
]
dependencies = [
  "robotframework>=6.0.0",
  "typing-extensions",
  "robotframework-pythonlibcore>=4.4.0",
  "robotframework-assertion-engine>=3.0.0",
  "pythonnet>=3.0.0",
]

[project.urls]
Documentation = "https://github.com/imbus/robotframework-platynui#readme"
Issues = "https://github.com/imbus/robotframework-platynui/issues"
Source = "https://github.com/imbus/robotframework-platynui"

[project.scripts]
"PlatynUI.Spy" = "PlatynUI.spy.__main__:main"

[tool.hatch.version]
path = "src/PlatynUI/__about__.py"

[tool.hatch.build]
dev-mode-dirs = ["src"]

[tool.hatch.build.targets.wheel]
require-runtime-dependencies = true
only-include = ["src/PlatynUI"]
sources = ["src"]

[tool.hatch.build.targets.sdist]
exclude = ["src/PlatynUI/technology/uiautomation/runtime"]

# this needs to be enabled only for hatch build
[tool.hatch.build.targets.wheel.hooks.custom]
path = "scripts/dotnet_build_hook.py"

[tool.hatch.envs.default]
installer = "uv"
dependencies = [
  "pytest",
  "pytest-mock",
  "pytest-rerunfailures",
  "pytest-xdist",
  "pytest-html",
  "pytest-cov",
  "mypy",
  "ruff",
  "GitPython",
  "semantic-version",
  "robotframework",
  "robotframework-tidy",
  "robotframework-robocop",
  "reuse",
  "hatchling",
  "pre-commit",
]

[tool.hatch.envs.default.scripts]
# pre-commit checks
pre-commit-check = "pre-commit run --all-files"
pre-commit-check-log = "pre-commit run --all-files > pre-commit.log 2>&1"

# Auto-formatting scripts
format-ruff = "ruff format ."
format-robotidy = "robotidy ."
format = ["format-ruff", "format-robotidy"]

# Run tests
python-tests = "pytest tests/python/test_types.py"
robot-tests = "robot {args:--outputdir test/results} tests/robot/matrix.robot"

[tool.hatch.envs.types]
extra-dependencies = ["mypy>=1.0.0"]

[tool.hatch.envs.types.scripts]
check-mypy = "mypy --install-types --non-interactive {args:src/PlatynUI tests}"
check-robotidy = "robotidy --check ."
check-robocop = "robocop ."
check-ruff = "ruff check ."
check-pytest = "pytest"
check = [
  "check-mypy",
  "check-robotidy",
  "check-robocop",
  "check-ruff",
  "check-pytest",
]

[tool.hatch.envs.build]
skip-install = true
detached = true
python = "3.10"
dependencies = ["GitPython", "semantic-version", "commitizen", "git-cliff"]

[tool.hatch.envs.build.scripts]
update-changelog = ["python scripts/update_changelog.py"]
update-git-versions = ["python scripts/update_git_versions.py"]
bump = ["cz bump"]


[tool.hatch.envs.hatch-test]
matrix-name-format = "{variable}{value}"

#[tool.hatch.envs.hatch-test.scripts]
# run = "override"

[[tool.hatch.envs.hatch-test.matrix]]
python = ["3.10", "3.11", "3.12", "3.13"]
rf = ["6.0", "6.1", "7.0", "7.1", "7.2"]

[tool.hatch.envs.hatch-test.overrides]
matrix.rf.dependencies = [
  { value = "robotframework>6.0.0, <6.1", if = [
    "6.0",
  ] },
  { value = "robotframework>=6.1, <7.0", if = [
    "6.1",
  ] },
  { value = "robotframework>=7.0, <7.1", if = [
    "7.0",
  ] },
  { value = "robotframework>=7.1, <7.2", if = [
    "7.1",
  ] },
  { value = "robotframework>=7.2, <7.3", if = [
    "7.2",
  ] },
]

[tool.hatch.envs.robot]
matrix-name-format = "{variable}{value}"
python = "3.10"
extra-dependencies = ["robotcode[runner]"]

[[tool.hatch.envs.robot.matrix]]
python = ["3.10", "3.11", "3.12", "3.13"]
rf = ["6.0", "6.1", "7.0", "7.1", "7.2"]

[tool.hatch.envs.robot.overrides]
matrix.rf.dependencies = [
  { value = "robotframework>6.0.0, <6.1", if = [
    "6.0",
  ] },
  { value = "robotframework>=6.1, <7.0", if = [
    "6.1",
  ] },
  { value = "robotframework>=7.0, <7.1", if = [
    "7.0",
  ] },
  { value = "robotframework>=7.1, <7.2", if = [
    "7.1",
  ] },
  { value = "robotframework>=7.2, <7.3", if = [
    "7.2",
  ] },
]

[tool.hatch.envs.robot.scripts]
test = "robotcode robot {args:}"

[tool.hatch.envs.hatch-static-analysis]
installer = "uv"
dependencies = ["ruff"]

[tool.hatch.envs.hatch-static-analysis.scripts]
format-check = ["ruff format --check --diff {args:.}"]
format-fix = ["ruff format {args:.}"]
lint-check = ["ruff check {args:.}"]
lint-fix = "ruff check --fix {args:.}"

[tool.hatch.envs.devel]
python = "3.10"
matrix-name-format = "{variable}{value}"

[[tool.hatch.envs.devel.matrix]]
python = ["3.10", "3.11", "3.12", "3.13"]
rf = ["6.0", "6.1", "7.0", "7.1", "7.2"]

[tool.hatch.envs.devel.overrides]
matrix.rf.dependencies = [
  { value = "robotframework>6.0.0, <6.1", if = [
    "6.0",
  ] },
  { value = "robotframework>=6.1, <7.0", if = [
    "6.1",
  ] },
  { value = "robotframework>=7.0, <7.1", if = [
    "7.0",
  ] },
  { value = "robotframework>=7.1, <7.2", if = [
    "7.1",
  ] },
  { value = "robotframework>=7.2, <7.3", if = [
    "7.2",
  ] },
]

[tool.coverage.run]
source_pkgs = ["robotframework_platynui", "tests"]
branch = true
parallel = true
omit = ["src/PlatynUI/__about__.py"]

[tool.coverage.paths]
robotframework_platynui = [
  "src/robotframework_platynui",
  "*/robotframework-platynui/src/PlatynUI",
]
tests = ["tests", "*/robotframework-platynui/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]

[tool.ruff]
line-length = 120
target-version = "py310"
extend-exclude = ["typings"]

[tool.ruff.lint]
ignore = [
  "E741",
  "N805",
  "N999",
  "RUF012",
  "RUF006",
  "RUF100",
  "ISC001",
  "E501",
]
select = [
  "E",
  "F",
  "W",
  "I",
  "N",
  #"UP",
  "YTT",
  #"ANN",
  #"BLE",
  #"B",
  #"A"
  #"COM"
  # "C4", # TODO enable this
  "DTZ",
  "T10",
  # "EM",
  "ISC",
  "G",
  #"INP",
  "PIE",
  # "T20",
  "PT",
  "Q",
  "RET",
  # "SIM", # TODO enable this
  # "TID",
  # "TCH",
  # "ARG",
  # "PTH", # TODO enable this
  # "SLF", #  TODO enable this
  # "ERA", # TODO enable this
  "RSE",
  # "PL",
  #"TRY",
  "RUF",
  # "TID"
]


[tool.ruff.lint.per-file-ignores]

"__init__.py" = ["F401", "F403"]
"src/PlatynUI/technology/uiautomation/core/loader.py" = [
  "G004",
] # TODO: Fix logging statement uses f-string
"src/PlatynUI/ui/core/devices/displaydevice.py" = [
  "E501",
] # TODO: Fix line too long
"src/PlatynUI/ui/dialog.py" = [
  "F403",
  "F405",
] # TODO: Fix star imports and undefined names
"src/PlatynUI/ui/graphic.py" = [
  "F403",
  "F405",
] # TODO: Fix star imports and undefined names
"src/PlatynUI/ui/scrollbar.py" = [
  "F403",
  "F405",
] # TODO: Fix star imports and undefined names
"src/PlatynUI/ui/table.py" = [
  "F403",
  "F405",
] # TODO: Fix star imports and undefined names
"tests/robot/WpfTestApp/mapping.py" = [
  "N802",
] # TODO: Fix function name should be lowercase


[tool.ruff.lint.isort]
detect-same-package = true
# known-first-party = ["robotcode"]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false


[tool.pytest.ini_options]
minversion = "6.0"
#addopts = "-ra -vv -rf"
addopts = "-ra -rf --tb=short -vv"
filterwarnings = "ignore:.*Using or importing the ABCs from 'collections' instead of from 'collections.abc'.*:DeprecationWarning"
junit_suite_name = "robotcode"
#console_output_style = "classic"
log_cli = true
log_cli_level = 4
# log_cli_format = "%(levelname)s %(name)s: %(message)s"
faulthandler_timeout = 240
markers = ["wip: work in progress"]


# mypy
[tool.mypy]
python_version = "3.10"
strict = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unused_configs = true
warn_unreachable = true
implicit_reexport = false
implicit_optional = true
disallow_untyped_decorators = false
disallow_subclassing_any = false
explicit_package_bases = true
namespace_packages = true
ignore_missing_imports = true # TODO: enable this
mypy_path = ["src", "typings"]
disable_error_code = [
  "type-abstract",
  "attr-defined",    # TODO: Fix attribute errors
  "arg-type",        # TODO: Fix argument type errors
  "no-any-return",   # TODO: Fix functions returning Any
  "var-annotated",   # TODO: Fix variable annotations
  "no-untyped-def",  # TODO: Add type annotations to functions
  "no-untyped-call", # TODO: Add type annotations to function calls
  "valid-type",      # TODO: Fix invalid type errors
  "misc",            # TODO: Fix miscellaneous errors
  "assignment",      # TODO: Fix assignment errors
  "return-value",    # TODO: Fix return value errors
  "type-var",        # TODO: Fix type variable errors
  "unused-ignore",   # TODO: Remove unused ignore comments
  "override",        # TODO: Fix method override errors
  "no-redef",        # TODO: Fix redefinition errors
  "unreachable",     # TODO: Fix unreachable code
]

# allow_untyped_calls = true

[[tool.mypy.overrides]]
module = [
  "robot.*",
  "clr",
  "System.*",
  "RobotFramework.*",
  "robotlibcore.*",
  "pythonnet.*",
]
ignore_missing_imports = true
no_implicit_reexport = false

[[tool.mypy.overrides]]
module = [
  "Sytem.*",
  "Microsoft.*",
  "PlatynUI.Extension.Win32.UiAutomation.*",
  "PlatynUI.Platform.X11.Interop.XProto.*",
  "typings.*",
]
ignore_errors = true
follow_imports = "skip"
ignore_missing_imports = true

# robocop
[tool.robocop]
exclude = [
  "0201", # TODO: Fix missing documentation in keywords
  "0202", # TODO: Fix missing documentation in test cases
  "0203", # TODO: Fix missing documentation in suite
  "0302", # TODO: Fix keyword names to follow case convention
  "0308", # TODO: Fix test case titles to start with capital letter
  "0504", # TODO: Fix test cases that are too long
  "0505", # TODO: Fix test cases with too many keywords
  "0920", # TODO: Fix unused variables
]

# pyright
[tool.pyright]
exclude = ["**/.hatch", "**/node_modules", "**/__pycache__", "bundled/libs"]
typeCheckingMode = "off"
pythonVersion = "3.10"
stubPath = "typings"

[tool.commitizen]
name = "cz_conventional_commits"
bump_message = "chore(release): bump version $current_version → $new_version"
tag_format = "v$version"
version_scheme = "semver"
version_provider = "scm"
update_changelog_on_bump = false
# major_version_zero = true
changelog_incremental = true
changelog_merge_prerelease = true
gpg_sign = true
annotated_tag = true
pre_bump_hooks = [
  # "hatch env remove lint",
  "hatch run build:update-git-versions",
  "hatch run build:update-changelog",
  "git add .",
]

[tool.cibuildwheel]
build-verbosity = 1
skip = ["pp*"]
archs = "auto"

[tool.cibuildwheel.macos]
archs = ["auto"]

[tool.cibuildwheel.windows]
archs = ["auto"]

[tool.cibuildwheel.linux]
archs = ["auto"]

before-all = """\
if command -v yum 2>&1 > /dev/null
then
  yum -y install libicu curl
fi

if command -v apk 2>&1 > /dev/null
then
  apk add icu-libs curl
fi

#wget https://dot.net/v1/dotnet-install.sh -O dotnet-install.sh
curl -SL --output dotnet-install.sh https://dot.net/v1/dotnet-install.sh
chmod +x ./dotnet-install.sh
./dotnet-install.sh --version latest --channel STS --install-dir /usr/share/dotnet
./dotnet-install.sh --version latest --channel LTS --install-dir /usr/share/dotnet
ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet
dotnet --version
"""

[tool.cibuildwheel.environment]
HATCH_BUILD_HOOKS_ENABLE = "1"
HATCH_VERBOSE = "1"
MACOSX_DEPLOYMENT_TARGET="15.0"
