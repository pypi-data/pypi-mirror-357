# This file was generated by PythonNetStubGenerator
# mypy: ignore-errors
import typing, abc
from PlatynUI.Runtime.Core import IElement, IAdapter, INode, IAttribute, Keycode
from System.Collections.Generic import IDictionary_2, IList_1, IEnumerable_1
from System import Array_1, Attribute

class Desktop(IElement, IAdapter, INode):
    @property
    def Attributes(self) -> IDictionary_2[str, IAttribute]: ...
    @property
    def BoundingRectangle(self) -> Rect: ...
    @property
    def Children(self) -> IList_1[INode]: ...
    @property
    def ClassName(self) -> str: ...
    @property
    def DefaultClickPosition(self) -> typing.Optional[typing.Optional[Point]]: ...
    @property
    def FrameworkId(self) -> str: ...
    @property
    def Id(self) -> str: ...
    @property
    def IsEnabled(self) -> bool: ...
    @property
    def IsInView(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NamespaceURI(self) -> str: ...
    @property
    def Parent(self) -> typing.Optional[INode]: ...
    @property
    def Role(self) -> str: ...
    @property
    def RuntimeId(self) -> str: ...
    @property
    def SupportedRoles(self) -> Array_1[str]: ...
    @property
    def SupportedTypes(self) -> Array_1[str]: ...
    @property
    def TopLevelParentIsActive(self) -> bool: ...
    @property
    def Type(self) -> str: ...
    @property
    def VisibleRectangle(self) -> Rect: ...
    def Clone(self) -> INode: ...
    @staticmethod
    def GetInstance() -> Desktop: ...
    def Invalidate(self) -> None: ...
    def IsSamePosition(self, other: INode) -> bool: ...
    def IsValid(self) -> bool: ...
    def TryBringIntoView(self) -> bool: ...
    def TryEnsureApplicationIsReady(self) -> bool: ...
    def TryEnsureToplevelParentIsActive(self) -> bool: ...
    def TryEnsureVisible(self) -> bool: ...

class DisplayDevice:
    @staticmethod
    def GetBoundingRectangle() -> Rect: ...
    @staticmethod
    def HighlightRect(x: float, y: float, width: float, height: float, time: float = ...) -> None: ...

class Finder(abc.ABC):
    @staticmethod
    def EnumAllNodes(
        parent: typing.Optional[INode], xpath: str, findVirtual: bool = ...
    ) -> IEnumerable_1[typing.Any]: ...
    @staticmethod
    def Evaluate(parent: typing.Optional[INode], xpath: str, findVirtual: bool = ...) -> IEnumerable_1[typing.Any]: ...
    @staticmethod
    def FindNodes(parent: typing.Optional[INode], xpath: str, findVirtual: bool = ...) -> IList_1[typing.Any]: ...
    @staticmethod
    def FindSingleNode(
        parent: typing.Optional[INode], xpath: str, findVirtual: bool = ..., refresh: bool = ...
    ) -> typing.Optional[typing.Any]: ...

class KeyboardDevice:
    @staticmethod
    def KeyToKeyCode(key: typing.Optional[typing.Any]) -> Keycode: ...
    @staticmethod
    def SendKeyCode(keyCode: typing.Any, pressed: bool) -> bool: ...

class MouseDevice:
    @staticmethod
    def GetDoubleClickSize() -> Size: ...
    @staticmethod
    def GetDoubleClickTime() -> float: ...
    @staticmethod
    def GetPosition() -> Point: ...
    @staticmethod
    def Move(x: float, y: float) -> None: ...
    @staticmethod
    def Press(button: int) -> None: ...
    @staticmethod
    def Release(button: int) -> None: ...

class PlatformHelper(abc.ABC):
    @staticmethod
    def GetCurrentPlatform() -> RuntimePlatform: ...

class PlatynUiExtensionAttribute(Attribute):
    def __init__(self, supportedPlatforms: Array_1[RuntimePlatform]) -> None: ...
    @property
    def SupportedPlatforms(self) -> Array_1[RuntimePlatform]: ...
    @property
    def TypeId(self) -> typing.Any: ...

class Point:
    def __init__(self, x: float, y: float) -> None: ...
    Empty: Point
    @property
    def X(self) -> float: ...
    @X.setter
    def X(self, value: float) -> float: ...
    @property
    def Y(self) -> float: ...
    @Y.setter
    def Y(self, value: float) -> float: ...
    def Equals(self, obj: typing.Optional[typing.Any]) -> bool: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, obj1: Point, obj2: Point) -> bool: ...
    def __ne__(self, obj1: Point, obj2: Point) -> bool: ...
    def ToString(self) -> str: ...

class Rect:
    def __init__(self, x: float, y: float, width: float, height: float) -> None: ...
    Empty: Rect
    @property
    def Height(self) -> float: ...
    @Height.setter
    def Height(self, value: float) -> float: ...
    @property
    def Width(self) -> float: ...
    @Width.setter
    def Width(self, value: float) -> float: ...
    @property
    def X(self) -> float: ...
    @X.setter
    def X(self, value: float) -> float: ...
    @property
    def Y(self) -> float: ...
    @Y.setter
    def Y(self, value: float) -> float: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, rect1: Rect, rect2: Rect) -> bool: ...
    def __ne__(self, rect1: Rect, rect2: Rect) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals: Equals_MethodGroup

    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, value: Rect) -> bool: ...
        @typing.overload
        def __call__(self, o: typing.Optional[typing.Any]) -> bool: ...
        @typing.overload
        def __call__(self, rect1: Rect, rect2: Rect) -> bool: ...

class RuntimePlatform(typing.SupportsInt):
    @typing.overload
    def __init__(self, value: int) -> None: ...
    @typing.overload
    def __init__(self, value: int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    Any: RuntimePlatform  # 0
    Windows: RuntimePlatform  # 1
    Linux: RuntimePlatform  # 2
    FreeBSD: RuntimePlatform  # 3
    MacOS: RuntimePlatform  # 4
    Android: RuntimePlatform  # 5
    IOS: RuntimePlatform  # 6
    Unknown: RuntimePlatform  # 7

class Size:
    def __init__(self, width: float, height: float) -> None: ...
    @property
    def Height(self) -> float: ...
    @Height.setter
    def Height(self, value: float) -> float: ...
    @property
    def Width(self) -> float: ...
    @Width.setter
    def Width(self, value: float) -> float: ...
    def Equals(self, obj: typing.Optional[typing.Any]) -> bool: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, obj1: Size, obj2: Size) -> bool: ...
    def __ne__(self, obj1: Size, obj2: Size) -> bool: ...
    def ToString(self) -> str: ...
