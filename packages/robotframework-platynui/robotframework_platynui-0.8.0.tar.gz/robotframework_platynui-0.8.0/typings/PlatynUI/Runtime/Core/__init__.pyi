# This file was generated by PythonNetStubGenerator
# mypy: ignore-errors
import typing, abc
import System.Xml.Xsl
from System import Func_1, Array_1
from System.Collections.Generic import IEnumerable_1, IEnumerator_1, IDictionary_2, IList_1
from PlatynUI.Runtime import Rect, Point, Size
from System.Xml import XmlNameTable
from System.Xml.XPath import XPathNavigator, XPathResultType
from System.Xml.Xsl import IXsltContextFunction, IXsltContextVariable

class Attribute(IAttribute):
    @typing.overload
    def __init__(self, name: str, value: typing.Optional[typing.Any], namespaceURI: str = ...) -> None: ...
    @typing.overload
    def __init__(self, name: str, valueGetter: Func_1[typing.Any], namespaceURI: str = ...) -> None: ...
    @property
    def Name(self) -> str: ...
    @property
    def NamespaceURI(self) -> str: ...
    @property
    def Value(self) -> typing.Optional[typing.Any]: ...

class AttributesEnumerator_GenericClasses(abc.ABCMeta):
    Generic_AttributesEnumerator_GenericClasses_AttributesEnumerator_1_T = typing.TypeVar(
        "Generic_AttributesEnumerator_GenericClasses_AttributesEnumerator_1_T"
    )
    def __getitem__(
        self, types: typing.Type[Generic_AttributesEnumerator_GenericClasses_AttributesEnumerator_1_T]
    ) -> typing.Type[AttributesEnumerator_1[Generic_AttributesEnumerator_GenericClasses_AttributesEnumerator_1_T]]: ...

AttributesEnumerator: AttributesEnumerator_GenericClasses

AttributesEnumerator_1_T = typing.TypeVar("AttributesEnumerator_1_T")

class AttributesEnumerator_1(typing.Generic[AttributesEnumerator_1_T], IAttributesEnumerator):
    def __init__(self, attributes: IEnumerable_1[AttributesEnumerator_1_T]) -> None: ...
    @property
    def Current(self) -> IAttribute: ...
    def Dispose(self) -> None: ...
    def MoveNext(self) -> bool: ...
    def Reset(self) -> None: ...

class IAdapter(typing.Protocol):
    @property
    def ClassName(self) -> str: ...
    @property
    def FrameworkId(self) -> str: ...
    @property
    def Id(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Role(self) -> str: ...
    @property
    def RuntimeId(self) -> str: ...
    @property
    def SupportedRoles(self) -> Array_1[str]: ...
    @property
    def SupportedTypes(self) -> Array_1[str]: ...
    @property
    def Type(self) -> str: ...
    @abc.abstractmethod
    def Invalidate(self) -> None: ...
    @abc.abstractmethod
    def IsValid(self) -> bool: ...

class IAttribute(typing.Protocol):
    @property
    def Name(self) -> str: ...
    @property
    def NamespaceURI(self) -> str: ...
    @property
    def Value(self) -> typing.Optional[typing.Any]: ...

class IAttributesEnumerator(IEnumerator_1[IAttribute], typing.Protocol):
    pass

class IDisplayDevice(typing.Protocol):
    @abc.abstractmethod
    def GetBoundingRectangle(self) -> Rect: ...
    @abc.abstractmethod
    def HighlightRect(self, x: float, y: float, width: float, height: float, time: float) -> None: ...

class IElement(typing.Protocol):
    @property
    def BoundingRectangle(self) -> Rect: ...
    @property
    def DefaultClickPosition(self) -> typing.Optional[typing.Optional[Point]]: ...
    @property
    def IsEnabled(self) -> bool: ...
    @property
    def IsInView(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def TopLevelParentIsActive(self) -> bool: ...
    @property
    def VisibleRectangle(self) -> Rect: ...
    @abc.abstractmethod
    def TryBringIntoView(self) -> bool: ...
    @abc.abstractmethod
    def TryEnsureApplicationIsReady(self) -> bool: ...
    @abc.abstractmethod
    def TryEnsureToplevelParentIsActive(self) -> bool: ...
    @abc.abstractmethod
    def TryEnsureVisible(self) -> bool: ...

class IKeyboardDevice(typing.Protocol):
    @abc.abstractmethod
    def KeyToKeyCode(self, key: typing.Optional[typing.Any]) -> Keycode: ...
    @abc.abstractmethod
    def SendKeyCode(self, keyCode: typing.Any, pressed: bool) -> bool: ...

class IMouseDevice(typing.Protocol):
    @abc.abstractmethod
    def GetDoubleClickSize(self) -> Size: ...
    @abc.abstractmethod
    def GetDoubleClickTime(self) -> float: ...
    @abc.abstractmethod
    def GetPosition(self) -> Point: ...
    @abc.abstractmethod
    def Move(self, x: float, y: float) -> None: ...
    @abc.abstractmethod
    def Press(self, button: MouseButton) -> None: ...
    @abc.abstractmethod
    def Release(self, button: MouseButton) -> None: ...

class INode(typing.Protocol):
    @property
    def Attributes(self) -> IDictionary_2[str, IAttribute]: ...
    @property
    def Children(self) -> IList_1[INode]: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def NamespaceURI(self) -> str: ...
    @property
    def Parent(self) -> typing.Optional[INode]: ...
    @property
    def UnderlyingObject(self) -> typing.Optional[typing.Any]: ...
    @abc.abstractmethod
    def Clone(self) -> INode: ...
    def GetAncestors(self) -> IList_1[INode]: ...
    def GetAttributesEnumerator(self) -> IAttributesEnumerator: ...
    def GetFirstChild(self) -> typing.Optional[INode]: ...
    def GetLastChild(self) -> typing.Optional[INode]: ...
    def GetNextSibling(self) -> typing.Optional[INode]: ...
    def GetPreviousSibling(self) -> typing.Optional[INode]: ...
    @abc.abstractmethod
    def Invalidate(self) -> None: ...
    @abc.abstractmethod
    def IsSamePosition(self, other: INode) -> bool: ...

class INodeProvider(typing.Protocol):
    @abc.abstractmethod
    def GetNodes(self, parent: INode) -> IEnumerable_1[INode]: ...

class Keycode:
    def __init__(
        self,
        key: typing.Optional[typing.Any],
        code: typing.Optional[typing.Any],
        valid: bool,
        errorText: typing.Optional[str],
    ) -> None: ...
    @property
    def Code(self) -> typing.Optional[typing.Any]: ...
    @property
    def ErrorText(self) -> typing.Optional[str]: ...
    @property
    def Key(self) -> typing.Optional[typing.Any]: ...
    @property
    def Valid(self) -> bool: ...
    def ToString(self) -> str: ...

class MouseButton(typing.SupportsInt):
    @typing.overload
    def __init__(self, value: int) -> None: ...
    @typing.overload
    def __init__(self, value: int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...

    # Values:
    Left: MouseButton  # 0
    Right: MouseButton  # 1
    Middle: MouseButton  # 2
    X1: MouseButton  # 3
    X2: MouseButton  # 4

class Namespaces(abc.ABC):
    App: str
    Element: str
    Item: str
    Native: str
    Raw: str

class XsltContext(System.Xml.Xsl.XsltContext):
    def __init__(self) -> None: ...
    @property
    def DefaultNamespace(self) -> str: ...
    @property
    def NameTable(self) -> typing.Optional[XmlNameTable]: ...
    @property
    def Whitespace(self) -> bool: ...
    def CompareDocument(self, baseUri: str, nextbaseUri: str) -> int: ...
    def PreserveWhitespace(self, node: XPathNavigator) -> bool: ...
    def ResolveFunction(self, prefix: str, name: str, ArgTypes: Array_1[XPathResultType]) -> IXsltContextFunction: ...
    def ResolveVariable(self, prefix: str, name: str) -> IXsltContextVariable: ...
