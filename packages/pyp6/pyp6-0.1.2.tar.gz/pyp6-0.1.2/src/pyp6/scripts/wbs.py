# --- START OF FILE add_wbs_from_simple_csv.py ---

import sqlite3
import sys
import pandas as pd
from datetime import datetime

# Import shared settings and functions
from pyp6 import config as cfg
from pyp6.access_db import connect_to_db
from pyp6.access_p6 import generate_guid, get_next_id, get_project_defaults

def get_or_create_wbs_id(cursor, proj_id, root_wbs_id, row, index, default_obs_id, wbs_cache):
    """
    Finds a WBS element by name or creates it with programmatically-defined details.
    """
    wbs_short_name = row['WBS Short Name']
    wbs_name = row['WBS Name']
    parent_wbs_name = row['Parent WBS Name']

    # Check cache/db for existing WBS by its name to prevent duplicates
    cursor.execute("SELECT wbs_id FROM PROJWBS WHERE proj_id = ? AND wbs_name = ?", (proj_id, wbs_name))
    result = cursor.fetchone()
    if result:
        wbs_id = result[0]
        if wbs_short_name not in wbs_cache:
            wbs_cache[wbs_short_name] = wbs_id
        print(f"Found existing WBS: '{wbs_name}' (ID: {wbs_id}). Skipping creation.")
        return wbs_id
        
    print(f"WBS element '{wbs_name}' not found. Attempting to create.")
    
    # --- Parent Lookup Logic ---
    parent_wbs_id = root_wbs_id
    if pd.notna(parent_wbs_name) and parent_wbs_name:
        cursor.execute("SELECT wbs_id FROM PROJWBS WHERE proj_id = ? AND wbs_name = ?", (proj_id, parent_wbs_name))
        parent_result = cursor.fetchone()
        if not parent_result:
            raise ValueError(f"Could not find parent WBS with name '{parent_wbs_name}'. Please ensure parent rows appear before child rows in your CSV file.")
        parent_wbs_id = parent_result[0]

    # --- Define default and calculated values ---
    # These values are now generated by the script, not read from the CSV.
    seq_num = (index + 1) * 10  # e.g., 10, 20, 30...
    est_wt = 1.0
    status_code = 'WS_Open'
    ev_compute_type = 'EC_Cmp_pct'
    ev_etc_compute_type = 'EE_Rem_hr'
    
    new_wbs_id = get_next_id(cursor, 'PROJWBS', 'wbs_id')
    current_time = datetime.now()
    
    wbs_data = (
        new_wbs_id, proj_id, default_obs_id, seq_num, est_wt,
        'N', 'N', status_code, wbs_short_name, wbs_name, parent_wbs_id,
        ev_compute_type, ev_etc_compute_type,
        generate_guid(), generate_guid(), # guid, tmpl_guid
        current_time, cfg.USER_NAME, current_time, cfg.USER_NAME
    )
    
    # --- WBS Insertion Logic with all details ---
    try:
        sql_insert = """
            INSERT INTO PROJWBS (
                wbs_id, proj_id, obs_id, seq_num, est_wt, proj_node_flag,
                sum_data_flag, status_code, wbs_short_name, wbs_name, parent_wbs_id,
                ev_compute_type, ev_etc_compute_type,
                guid, tmpl_guid, create_date, create_user, update_date, update_user
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """
        cursor.execute(sql_insert, wbs_data)
        wbs_cache[wbs_short_name] = new_wbs_id # Cache the new ID
        print(f"  -> Successfully created WBS: '{wbs_name}' with ID: {new_wbs_id}")
        return new_wbs_id
    except sqlite3.Error as e:
        print(f"ERROR: Failed to insert WBS '{wbs_name}'. {e}")
        raise

def main():
    try:
        # NOTE: Make sure config.py's WBS_FILE_PATH points to your simple CSV
        df = pd.read_csv(cfg.WBS_FILE_PATH).fillna('')
        required_cols = ['WBS Short Name', 'WBS Name', 'Parent WBS Name']
        if not all(col in df.columns for col in required_cols):
             raise ValueError(f"CSV must contain the columns: {', '.join(required_cols)}.")
        print(f"Read {len(df)} WBS records from '{cfg.WBS_FILE_PATH}'.")
    except FileNotFoundError:
        print(f"ERROR: The file '{cfg.WBS_FILE_PATH}' was not found.")
        sys.exit(1)
    except ValueError as e:
        print(f"ERROR: CSV format is incorrect. {e}")
        sys.exit(1)

    conn = connect_to_db(cfg.P6_PRO_DB_PATH)
    cursor = conn.cursor()
    wbs_cache = {}

    try:
        # Unpack the new default_obs_id from the helper function
        proj_id, root_wbs_id, _, default_obs_id = get_project_defaults(cursor, cfg.TARGET_PROJECT_ID)
        wbs_cache[cfg.TARGET_PROJECT_ID] = root_wbs_id

        print("\n--- Processing WBS Hierarchy from Simple CSV ---")
        # Use iterrows() to get an index for the sequence number
        for index, row in df.iterrows():
            get_or_create_wbs_id(cursor, proj_id, root_wbs_id, row, index, default_obs_id, wbs_cache)

        conn.commit()
        print("\nSUCCESS: WBS hierarchy changes have been committed with detailed, default data.")
    except Exception as e:
        print(f"\nERROR: An error occurred: {e}. Rolling back all changes.")
        conn.rollback()
    finally:
        if conn:
            conn.close()
            print("Database connection closed.")

if __name__ == '__main__':
    main()

# --- END OF FILE add_wbs_from_simple_csv.py ---