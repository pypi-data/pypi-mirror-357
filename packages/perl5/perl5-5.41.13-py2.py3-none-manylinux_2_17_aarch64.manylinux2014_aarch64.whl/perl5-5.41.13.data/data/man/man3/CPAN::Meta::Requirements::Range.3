.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man v6.0.2 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Required to disable full justification in groff 1.23.0.
.if n .ds AD l
.\" ========================================================================
.\"
.IX Title "CPAN::Meta::Requirements::Range 3"
.TH CPAN::Meta::Requirements::Range 3 2025-05-28 "perl v5.41.13" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
CPAN::Meta::Requirements::Range \- a set of version requirements for a CPAN dist
.SH VERSION
.IX Header "VERSION"
version 2.143
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  use CPAN::Meta::Requirements::Range;
\&
\&  my $range = CPAN::Meta::Requirements::Range\->with_minimum(1);
\&
\&  $range = $range\->with_maximum(\*(Aqv2.2\*(Aq);
\&
\&  my $stringified = $range\->as_string;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
A CPAN::Meta::Requirements::Range object models a set of version constraints like
those specified in the \fIMETA.yml\fR or \fIMETA.json\fR files in CPAN distributions,
and as defined by CPAN::Meta::Spec;
It can be built up by adding more and more constraints, and it will reduce them
to the simplest representation.
.PP
Logically impossible constraints will be identified immediately by thrown
exceptions.
.SH METHODS
.IX Header "METHODS"
.SS with_string_requirement
.IX Subsection "with_string_requirement"
.Vb 2
\&  $req\->with_string_requirement(\*(Aq>= 1.208, <= 2.206\*(Aq);
\&  $req\->with_string_requirement(v1.208);
.Ve
.PP
This method parses the passed in string and adds the appropriate requirement.
A version can be a Perl "v\-string".  It understands version ranges as described
in the "Version Ranges" in CPAN::Meta::Spec. For example:
.IP 1.3 4
.IX Item "1.3"
.PD 0
.IP ">= 1.3" 4
.IX Item ">= 1.3"
.IP "<= 1.3" 4
.IX Item "<= 1.3"
.IP "== 1.3" 4
.IX Item "== 1.3"
.IP "!= 1.3" 4
.IX Item "!= 1.3"
.IP "> 1.3" 4
.IX Item "> 1.3"
.IP "< 1.3" 4
.IX Item "< 1.3"
.IP ">= 1.3, != 1.5, <= 2.0" 4
.IX Item ">= 1.3, != 1.5, <= 2.0"
.PD
A version number without an operator is equivalent to specifying a minimum
(\f(CW\*(C`>=\*(C'\fR).  Extra whitespace is allowed.
.SS with_range
.IX Subsection "with_range"
.Vb 1
\& $range\->with_range($other_range)
.Ve
.PP
This creates a new range object that is a merge two others.
.SS with_exact_version
.IX Subsection "with_exact_version"
.Vb 1
\&  $range\->with_exact_version( $version );
.Ve
.PP
This sets the version required to \fIexactly\fR the given
version.  No other version would be considered acceptable.
.PP
This method returns the version range object.
.SS with_minimum
.IX Subsection "with_minimum"
.Vb 1
\&  $range\->with_minimum( $version );
.Ve
.PP
This adds a new minimum version requirement.  If the new requirement is
redundant to the existing specification, this has no effect.
.PP
Minimum requirements are inclusive.  \f(CW$version\fR is required, along with any
greater version number.
.PP
This method returns the version range object.
.SS with_maximum
.IX Subsection "with_maximum"
.Vb 1
\&  $range\->with_maximum( $version );
.Ve
.PP
This adds a new maximum version requirement.  If the new requirement is
redundant to the existing specification, this has no effect.
.PP
Maximum requirements are inclusive.  No version strictly greater than the given
version is allowed.
.PP
This method returns the version range object.
.SS with_exclusion
.IX Subsection "with_exclusion"
.Vb 1
\&  $range\->with_exclusion( $version );
.Ve
.PP
This adds a new excluded version.  For example, you might use these three
method calls:
.PP
.Vb 2
\&  $range\->with_minimum( \*(Aq1.00\*(Aq );
\&  $range\->with_maximum( \*(Aq1.82\*(Aq );
\&
\&  $range\->with_exclusion( \*(Aq1.75\*(Aq );
.Ve
.PP
Any version between 1.00 and 1.82 inclusive would be acceptable, except for
1.75.
.PP
This method returns the requirements object.
.SS as_struct
.IX Subsection "as_struct"
.Vb 1
\&  $range\->as_struct( $module );
.Ve
.PP
This returns a data structure containing the version requirements. This should
not be used for version checks (see "accepts_module" instead).
.SS as_string
.IX Subsection "as_string"
.Vb 1
\&  $range\->as_string;
.Ve
.PP
This returns a string containing the version requirements in the format
described in CPAN::Meta::Spec. This should only be used for informational
purposes such as error messages and should not be interpreted or used for
comparison (see "accepts" instead).
.SS accepts
.IX Subsection "accepts"
.Vb 1
\&  my $bool = $range\->accepts($version);
.Ve
.PP
Given a version, this method returns true if the version specification
accepts the provided version.  In other words, given:
.PP
.Vb 1
\&  \*(Aq>= 1.00, < 2.00\*(Aq
.Ve
.PP
We will accept 1.00 and 1.75 but not 0.50 or 2.00.
.SS is_simple
.IX Subsection "is_simple"
This method returns true if and only if the range is an inclusive minimum
\&\-\- that is, if their string expression is just the version number.
.SH AUTHORS
.IX Header "AUTHORS"
.IP \(bu 4
David Golden <dagolden@cpan.org>
.IP \(bu 4
Ricardo Signes <rjbs@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2010 by David Golden and Ricardo Signes.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
