.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man v6.0.2 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Required to disable full justification in groff 1.23.0.
.if n .ds AD l
.\" ========================================================================
.\"
.IX Title "Getopt::Long::Parser 3"
.TH Getopt::Long::Parser 3 2025-05-28 "perl v5.41.13" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Getopt::Long::Parser \- Getopt::Long object\-oriented interface
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 5
\&    use Getopt::Long::Parser;
\&    my $p = Getopt::Long::Parser\->new;
\&    $p\->configure( %options );
\&    if ( $p\->getoptions( @options ) ) { ... }
\&    if ( $p\->getoptionsfromarray( \e@array, @options ) ) { ... }
.Ve
.PP
Configuration options can be passed to the constructor:
.PP
.Vb 1
\&    my $p = Getopt::Long::Parser\->new( config => [ %options ] );
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Getopt::Long::Parser\*(C'\fR is an object\-oriented interface to
Getopt::Long. See its documentation for configuration and use.
.PP
Note that \f(CW\*(C`Getopt::Long\*(C'\fR and \f(CW\*(C`Getopt::Long::Parser\*(C'\fR are not
object\-oriented.
\&\f(CW\*(C`Getopt::Long::Parser\*(C'\fR emulates an object\-oriented interface,
which should be okay for most purposes.
.SH CONSTRUCTOR
.IX Header "CONSTRUCTOR"
.Vb 1
\&    my $p = Getopt::Long::Parser\->new( %options );
.Ve
.PP
The constructor takes an optional hash with parameters.
.IP config 4
.IX Item "config"
An array reference with configuration settings.
See "Configuring Getopt::Long" in Getopt::Long for all possible settings.
.SH METHODS
.IX Header "METHODS"
In the examples, \f(CW$p\fR is assumed to be the result of a call to the constructor.
.SS configure
.IX Subsection "configure"
.Vb 1
\&    $p\->configure( %settings );
.Ve
.PP
Update the current config settings.
See "Configuring Getopt::Long" in Getopt::Long for all possible settings.
.SS getoptionsfromarray
.IX Subsection "getoptionsfromarray"
.Vb 1
\&    my $res = $p\->getoptionsfromarray( $aref, @opts );
.Ve
.SS getoptions
.IX Subsection "getoptions"
.Vb 1
\&    my $res = $p\->getoptions( @opts );
.Ve
.PP
The same as \f(CW\*(C`getoptionsfromarray( \e@ARGV, @opts )\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Getopt::Long
.SH AUTHOR
.IX Header "AUTHOR"
Johan Vromans <jvromans@squirrel.nl>
.SH "COPYRIGHT AND DISCLAIMER"
.IX Header "COPYRIGHT AND DISCLAIMER"
This program is Copyright 1990,2015,2023 by Johan Vromans.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl.
