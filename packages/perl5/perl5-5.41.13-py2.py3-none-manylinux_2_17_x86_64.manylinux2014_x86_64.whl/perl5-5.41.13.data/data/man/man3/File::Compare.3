.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man v6.0.2 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Required to disable full justification in groff 1.23.0.
.if n .ds AD l
.\" ========================================================================
.\"
.IX Title "File::Compare 3"
.TH File::Compare 3 2025-05-28 "perl v5.41.13" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
File::Compare \- Compare files or filehandles
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&        use File::Compare;
\&
\&        if (compare("file1", "file2") == 0) {
\&            print "They\*(Aqre equal\en";
\&        }
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
The \f(CW\*(C`File::Compare::compare\*(C'\fR function compares the contents of two
sources, each of which can be a file or a file handle.  It is exported
from \f(CW\*(C`File::Compare\*(C'\fR by default.
.PP
\&\f(CW\*(C`File::Compare::cmp\*(C'\fR is a synonym for \f(CW\*(C`File::Compare::compare\*(C'\fR.  It is
exported from \f(CW\*(C`File::Compare\*(C'\fR only by request.
.PP
\&\f(CW\*(C`File::Compare::compare_text\*(C'\fR does a line by line comparison of the two
files. It stops as soon as a difference is detected. \f(CWcompare_text()\fR
accepts an optional third argument: This must be a CODE reference to
a line comparison function, which returns \f(CW0\fR when both lines are considered
equal. For example:
.PP
.Vb 1
\&    compare_text($file1, $file2)
.Ve
.PP
is basically equivalent to
.PP
.Vb 1
\&    compare_text($file1, $file2, sub {$_[0] ne $_[1]} )
.Ve
.SH RETURN
.IX Header "RETURN"
\&\f(CW\*(C`File::Compare::compare\*(C'\fR and its sibling functions return \f(CW0\fR if the files
are equal, \f(CW1\fR if the files are unequal, or \f(CW\-1\fR if an error was encountered.
.SH AUTHOR
.IX Header "AUTHOR"
\&\f(CW\*(C`File::Compare\*(C'\fR was written by Nick Ing\-Simmons.
Its original documentation was written by Chip Salzenberg.
