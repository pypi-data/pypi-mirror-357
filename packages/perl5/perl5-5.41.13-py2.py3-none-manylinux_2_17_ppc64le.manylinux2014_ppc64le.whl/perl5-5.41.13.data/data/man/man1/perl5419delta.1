.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man v6.0.2 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Required to disable full justification in groff 1.23.0.
.if n .ds AD l
.\" ========================================================================
.\"
.IX Title "PERL5419DELTA 1"
.TH PERL5419DELTA 1 2025-05-28 "perl v5.41.13" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
perl5419delta \- what is new for perl v5.41.9
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This document describes differences between the 5.41.8 release and the 5.41.9
release.
.PP
If you are upgrading from an earlier release such as 5.41.7, first read
perl5418delta, which describes differences between 5.41.7 and 5.41.8.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.ie n .SS "Lexical method declaration using ""my method"""
.el .SS "Lexical method declaration using \f(CWmy method\fP"
.IX Subsection "Lexical method declaration using my method"
Like \f(CW\*(C`sub\*(C'\fR since Perl version 5.18, \f(CW\*(C`method\*(C'\fR can now be prefixed with the
\&\f(CW\*(C`my\*(C'\fR keyword.  This declares a subroutine that has lexical, rather than
package visibility.  See perlclass for more detail.
.ie n .SS "Lexical method invocation operator ""\->&"""
.el .SS "Lexical method invocation operator \f(CW\->&\fP"
.IX Subsection "Lexical method invocation operator ->&"
Along with the ability to declare methods lexically, this release also permits
invoking a lexical subroutine as if it were a method, bypassing the usual
name\-based method resolution by name.
.PP
Combined with lexical method declaration, these two new abilities create the
effect of having private methods.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
.SS "Switch and Smart Match operator reinstated"
.IX Subsection "Switch and Smart Match operator reinstated"
The "switch" feature and the smartmatch operator, \f(CW\*(C`~~\*(C'\fR, were introduced in
v5.10.  Their behavior was significantly changed in v5.10.1.  When the
"experiment" system was added in v5.18.0, switch and smartmatch were
retroactively declared experimental.  Over the years, proposals to fix or
supplement the features have come and gone.
.PP
They were deprecated in Perl v5.38.0 and scheduled for removal in Perl
5.42.0, and entirely removed in Perl 5.41.3.
.PP
After some discussion these have been re\-instated.
.PP
Using them no longer produces a deprecation warning.
.PP
Switch itself still requires the \f(CW\*(C`switch\*(C'\fR feature, which is enabled
by default for feature bundles from v5.9.5 through to v5.34.  Switch
remains disabled in feature bundles 5.35 and later, but can be
separately enabled:
.PP
.Vb 7
\&  # no switch here
\&  use v5.10;
\&  # switch here
\&  use v5.36;
\&  # no switch here
\&  use feature "switch";
\&  # switch here
.Ve
.PP
Smart match now requires the \f(CW\*(C`smartmatch\*(C'\fR feature, which is enabled
by default and included in all feature bundles up to 5.40.  It is
disabled for the 5.41 feature bundle and later, but can be separately
enabled:
.PP
.Vb 5
\&  # smartmatch here
\&  use v5.41;
\&  # no smartmatch here
\&  use feature "smartmatch";
\&  # smartmatch here
.Ve
.PP
[GH #22752 <https://github.com/Perl/perl5/issues/22752>]
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.IP \(bu 4
The stringification of integers by "print" in perlfunc and "say" in perlfunc,
when coming from an \f(CW\*(C`SVt_IV\*(C'\fR, is now more efficient.
[GH #22927 <https://github.com/Perl/perl5/issues/22927>]
.IP \(bu 4
Subroutines in packages no longer need to be stored in typeglobs:
declaring a subroutine will now put a simple sub reference directly in the
stash if possible, saving memory.  The typeglob still notionally exists,
so accessing it will cause the stash entry to be upgraded to a typeglob
(i.e. this is just an internal implementation detail).
This optimization does not currently apply to XSUBs or exported
subroutines, and method calls will undo it, since they cache things in
typeglobs. 
[GH #23001 <https://github.com/Perl/perl5/issues/23001>]
.Sp
(This optimization was originally announced in perl5220delta, but due to a
bug it only worked for subroutines in package \f(CW\*(C`main\*(C'\fR, not in modules.)
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Updated Modules and Pragmata"
.IX Subsection "Updated Modules and Pragmata"
.IP \(bu 4
B::Deparse has been upgraded from version 1.82 to 1.83.
.IP \(bu 4
Exporter has been upgraded from version 5.78 to 5.79.
.IP \(bu 4
feature has been upgraded from version 1.93 to 1.94.
.IP \(bu 4
Math::BigInt has been upgraded from version 2.003003 to 2.003004.
.IP \(bu 4
Module::CoreList has been upgraded from version 5.20250120 to 5.20250220.
.IP \(bu 4
ODBM_File has been upgraded from version 1.19 to 1.20.
.IP \(bu 4
Opcode has been upgraded from version 1.68 to 1.69.
.IP \(bu 4
overload has been upgraded from version 1.39 to 1.40.
.IP \(bu 4
Safe has been upgraded from version 2.47 to 2.46.
.IP \(bu 4
Test::Simple has been upgraded from version 1.302207 to 1.302209.
.IP \(bu 4
Unicode::UCD has been upgraded from version 0.78 to 0.79.
.IP \(bu 4
warnings has been upgraded from version 1.72 to 1.73.
.SH Diagnostics
.IX Header "Diagnostics"
The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages. For the complete list of
diagnostic messages, see perldiag.
.SS "New Diagnostics"
.IX Subsection "New Diagnostics"
\fINew Errors\fR
.IX Subsection "New Errors"
.IP \(bu 4
Undefined subroutine &%s called, close to label \*(Aq%s\*(Aq
.Sp
(F) The subroutine indicated hasn\*(Aqt been defined, or if it was, it has
since been undefined.
.Sp
This error could also indicate a mistyped package separator, when a
single colon was typed instead of two colons. For example, \f(CWFoo:bar()\fR
would be parsed as the label \f(CW\*(C`Foo\*(C'\fR followed by an unqualified function
name: \f(CW\*(C`foo: bar()\*(C'\fR. [GH #22860 <https://github.com/Perl/perl5/issues/22860>]
.SS "Changes to Existing Diagnostics"
.IX Subsection "Changes to Existing Diagnostics"
.IP \(bu 4
Possible precedence problem between ! and \f(CW%s\fR
.Sp
This warning no longer triggers for code like \f(CW\*(C`!!$x == $y\*(C'\fR, i.e. where double
negation (\f(CW\*(C`!!\*(C'\fR) is used as a convert\-to\-boolean operator.
[GH #22954 <https://github.com/Perl/perl5/issues/22954>]
.IP \(bu 4
Useless use of \f(CW%s\fR in void context
.Sp
This warning now triggers for use of a chained comparison like \f(CW\*(C`0 < $x < 1\*(C'\fR.
[GH #22969 <https://github.com/Perl/perl5/issues/22969>]
.SH "Internal Changes"
.IX Header "Internal Changes"
.IP \(bu 4
Two new API functions are introduced to convert strings encoded in
native bytes format to UTF\-8.  These return the string unchanged if its
UTF\-8 representation is the same as the original.  Otherwise, new memory
is allocated to contain the converted string.  This is in contrast to
the existing "\f(CW\*(C`bytes_to_utf8\*(C'\fR" in perlapi which always allocates new
memory.  The new functions are "\f(CW\*(C`bytes_to_utf8_free_me\*(C'\fR" in perlapi and
"\f(CW\*(C`bytes_to_utf8_temp_pv\*(C'\fR" in perlapi.
"\f(CW\*(C`bytes_to_utf8_temp_pv\*(C'\fR" in perlapi arranges for the new memory to
automatically be freed.  With \f(CW\*(C`bytes_to_utf8_free_me\*(C'\fR, you are
responsible for freeing any newly allocated memory.
.IP \(bu 4
The way that subroutine signatures are parsed by the parser grammar has been
changed.
.Sp
Previously, when parsing individual signature parameters, the parser would
accumulate an \f(CW\*(C`OP_ARGELEM\*(C'\fR optree fragment for each parameter on the parser
stack, collecting them in an \f(CW\*(C`OP_LIST\*(C'\fR sequence, before finally building the
complete argument handling optree itself, in a large action block defined
directly in \fIperly.y\fR.
.Sp
In the new approach, all the optree generation is handled by newly\-defined
functions in \fIop.c\fR which are called by the action blocks in the parser.
These do not keep state on the parser stack, but instead in a dedicated memory
structure referenced by the main \f(CW\*(C`PL_parser\*(C'\fR structure.  This is intended to
be largely opaque to other code, and accessed only via the new functions.
.Sp
This new arrangement is intended to allow more flexible code generation and
additional features to be developed in future.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP \(bu 4
The \f(CW$SIG{_\|_DIE_\|_}\fR and \f(CW$SIG{_\|_WARN_\|_}\fR handlers can no longer be invoked
recursively, either deliberately or by accident, as described in
"%SIG" in perlvar. That is, when an exception (or warning) triggers a call to a
\&\f(CW$SIG{_\|_DIE_\|_}\fR (or \f(CW$SIG{_\|_WARN_\|_}\fR) handler, further exceptions (or
warnings) are processed directly, ignoring \f(CW%SIG\fR until the original
\&\f(CW$SIG{_\|_DIE_\|_}\fR (or \f(CW$SIG{_\|_WARN_\|_}\fR) handler call returns.
[GH #14527 <https://github.com/Perl/perl5/issues/14527>], [GH #22984 <https://github.com/Perl/perl5/issues/22984>], [GH #22987 <https://github.com/Perl/perl5/issues/22987>]
.IP \(bu 4
The \f(CWObjectFIELDS()\fR for an object and \f(CW\*(C`xhv_class_fields\*(C'\fR for the
object\*(Aqs stash weren\*(Aqt always NULL or not\-NULL, confusing \f(CWsv_dump()\fR
(and hence Devel::Peek\*(Aqs \f(CWDump()\fR) into crashing on an object with no
defined fields in some cases.  [GH #22959 <https://github.com/Perl/perl5/issues/22959>]
.IP \(bu 4
When comparing strings when using a UTF\-8 locale, the behavior was
previously undefined if either or both contained an above\-Unicode code
point, such as 0x110000.  Now all such code points will collate the same
as the highest Unicode code point, U+10FFFF. [GH #22989 <https://github.com/Perl/perl5/issues/22989>]
.SH Acknowledgements
.IX Header "Acknowledgements"
Perl 5.41.9 represents approximately 5 weeks of development since Perl
5.41.8 and contains approximately 17,000 lines of changes across 380 files
from 23 authors.
.PP
Excluding auto\-generated files, documentation and release tools, there were
approximately 9,700 lines of changes to 300 .pm, .t, .c and .h files.
.PP
Perl continues to flourish into its fourth decade thanks to a vibrant
community of users and developers. The following people are known to have
contributed the improvements that became Perl 5.41.9:
.PP
Andrew Ruthven, Antanas Vaitkus, Aristotle Pagaltzis, Chris \*(AqBinGOs\*(Aq
Williams, Dan Book, Dan Jacobson, David Mitchell, Eric Herman, hbmaclean,
James E Keenan, Karl Williamson, Leon Timmermans, Lukas Mai, Paul Evans,
Peter John Acklam, Reini Urban, Richard Leach, Scott Baker, Steve Hay, TAKAI
Kousuke, Thibault Duponchelle, Tony Cook, Yves Orton.
.PP
The list above is almost certainly incomplete as it is automatically
generated from version control history. In particular, it does not include
the names of the (very much appreciated) contributors who reported issues to
the Perl bug tracker.
.PP
Many of the changes included in this version originated in the CPAN modules
included in Perl\*(Aqs core. We\*(Aqre grateful to the entire CPAN community for
helping Perl to flourish.
.PP
For a more complete list of all of Perl\*(Aqs historical contributors, please
see the \fIAUTHORS\fR file in the Perl source distribution.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the perl bug database
at <https://github.com/Perl/perl5/issues>. There may also be information at
<https://www.perl.org/>, the Perl Home Page.
.PP
If you believe you have an unreported bug, please open an issue at
<https://github.com/Perl/perl5/issues>. Be sure to trim your bug down to a
tiny but sufficient test case.
.PP
If the bug you are reporting has security implications which make it
inappropriate to send to a public issue tracker, then see
"SECURITY VULNERABILITY CONTACT INFORMATION" in perlsec
for details of how to report the issue.
.SH "Give Thanks"
.IX Header "Give Thanks"
If you wish to thank the Perl 5 Porters for the work we had done in Perl 5,
you can do so by running the \f(CW\*(C`perlthanks\*(C'\fR program:
.PP
.Vb 1
\&    perlthanks
.Ve
.PP
This will send an email to the Perl 5 Porters list with your show of thanks.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details on
what changed.
.PP
The \fIINSTALL\fR file for how to build Perl.
.PP
The \fIREADME\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
