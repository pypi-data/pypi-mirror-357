.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man v6.0.2 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Required to disable full justification in groff 1.23.0.
.if n .ds AD l
.\" ========================================================================
.\"
.IX Title "PERL54110DELTA 1"
.TH PERL54110DELTA 1 2025-05-28 "perl v5.41.13" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
perl54110delta \- what is new for perl v5.41.10
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This document describes differences between the 5.41.9 release and the 5.41.10
release.
.PP
If you are upgrading from an earlier release such as 5.41.8, first read
perl5419delta, which describes differences between 5.41.8 and 5.41.9.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.ie n .SS "Renamed ""any"" and ""all"" features to ""keyword_any"" and ""keyword_all"""
.el .SS "Renamed \f(CWany\fP and \f(CWall\fP features to \f(CWkeyword_any\fP and \f(CWkeyword_all\fP"
.IX Subsection "Renamed any and all features to keyword_any and keyword_all"
Perl release 5.41.7 introduced two new experimental features, called \f(CW\*(C`any\*(C'\fR
and \f(CW\*(C`all\*(C'\fR, which enable keywords of the same names.  Those keywords provide
list\-processing operators inspired by the ones from List::Util of the same
name.  It was subsequently considered that the names of these two features
are confusingly close to the ability of the \f(CW\*(C`feature\*(C'\fR module to refer to all
of its features by using the \f(CW\*(C`:all\*(C'\fR export tag.
[GH #23104 <https://github.com/Perl/perl5/issues/23104>]
.PP
As a consequence, these feature flags have now been renamed to \f(CW\*(C`keyword_any\*(C'\fR
and \f(CW\*(C`keyword_all\*(C'\fR to avoid this confusion.  Likewise, the related
experimental warning flags are also renamed to \f(CW\*(C`experimental::keyword_any\*(C'\fR
and \f(CW\*(C`experimental::keyword_all\*(C'\fR.  Apart from these new flag names, the
actual syntax and semantics of these two operators remain unchanged since
their appearance in Perl release 5.41.7.
.PP
.Vb 3
\&    use v5.40;
\&    use feature \*(Aqkeyword_all\*(Aq;
\&    no warnings \*(Aqexperimental::keyword_all\*(Aq;
\&
\&    my @numbers = ...
\&
\&    if(all { $_ % 2 == 0 } @numbers) {
\&        say "All the numbers are even";
\&    }
.Ve
.ie n .SS "New ""SvVSTRING"" API macro"
.el .SS "New \f(CWSvVSTRING\fP API macro"
.IX Subsection "New SvVSTRING API macro"
A new API macro has been added, which is used to obtain the second string
buffer out of a "vstring" SV, in a manner similar to the \f(CW\*(C`SvPV\*(C'\fR macro which
obtains the regular string buffer out of a regular SV.
.PP
.Vb 2
\&    STRLEN len;
\&    const char *vstr_pv = SvVSTRING(sv, vstr_len);
.Ve
.PP
See "\f(CW\*(C`SvVSTRING\*(C'\fR" in perlapi.
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.IP \(bu 4
String reversal from a single argument, when the string buffer is not
"swiped", is now done in a single pass and is noticeably faster.
The extent of the improvement is compiler & hardware dependent.
[GH #23012 <https://github.com/Perl/perl5/issues/23012>]
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Updated Modules and Pragmata"
.IX Subsection "Updated Modules and Pragmata"
.IP \(bu 4
Archive::Tar has been upgraded from version 3.02_001 to 3.04.
.IP \(bu 4
Benchmark has been upgraded from version 1.26 to 1.27.
.IP \(bu 4
builtin has been upgraded from version 0.017 to 0.018.
.Sp
On platforms that don\*(Aqt support Inf/NaN values in floating\-point numbers (such
as VAX), \f(CW\*(C`builtin::inf\*(C'\fR and \f(CW\*(C`builtin::nan\*(C'\fR now throw a runtime error (rather
than breaking the perl build). [GH #22882 <https://github.com/Perl/perl5/issues/22882>]
.IP \(bu 4
ExtUtils::MakeMaker has been upgraded from version 7.70 to 7.72.
.IP \(bu 4
ExtUtils::ParseXS has been extensively refactored internally and
extensive tests have been added. Most of these changes shouldn\*(Aqt be
visible externally with a few exceptions, the main ones being:
.Sp
The generated C code, especially for returning values, may have changed
slightly, and in some cases be slightly more efficient (in particular,
using \f(CW\*(C`TARG\*(C'\fR more often to return a value rather than creating a new
temporary).
.Sp
The parser is more likely to give warnings now on XS errors which
previously would have just silently generated invalid C code.
.Sp
One XS bug has been fixed in a way that may be highly visible. Previously
when parsing the parameters of an XS sub declaration, if a parameter
couldn\*(Aqt be parsed, it was quietly ignored. This meant that it would still
consume an argument, but wouldn\*(Aqt declare a C variable: a bit like the
Perl\-level \f(CW\*(C`my ($a, undef, $c) = @_\*(C'\fR. Now, it gives a compile error. This
will break XS code that does (for example):
.Sp
.Vb 2
\&    void
\&    foo(int a, /* skip arg */, int c)
.Ve
.Sp
because C\-comments aren\*(Aqt part of XS syntax, and so the parameter was a
syntax error and was quietly skipped. This is better written as
.Sp
.Vb 2
\&    void
\&    foo(int a, b, int c)
.Ve
.Sp
since parameters which are not assigned a type act as placeholders.
.IP \(bu 4
feature has been upgraded from version 1.94 to 1.95.
.IP \(bu 4
fields has been upgraded from version 2.26 to 2.27.
.IP \(bu 4
Math::BigInt has been upgraded from version 2.003004 to 2.004001.
.IP \(bu 4
Math::BigInt::FastCalc has been upgraded from version 0.5018 to 0.5019.
.IP \(bu 4
Module::CoreList has been upgraded from version 5.20250220 to 5.20250321.
.IP \(bu 4
Safe has been upgraded from version 2.46 to 2.47.
.IP \(bu 4
Search::Dict has been upgraded from version 1.07 to 1.08.
.Sp
A missing parameter has been added to the sample code in the SYNOPSIS.
.IP \(bu 4
Storable has been upgraded from version 3.35 to 3.36.
.IP \(bu 4
threads has been upgraded from version 2.42 to 2.43.
.IP \(bu 4
VMS::Filespec has been upgraded from version 1.14 to 1.15.
.IP \(bu 4
warnings has been upgraded from version 1.73 to 1.74.
.IP \(bu 4
XS::APItest has been upgraded from version 1.40 to 1.41.
.SH Documentation
.IX Header "Documentation"
.SS "Changes to Existing Documentation"
.IX Subsection "Changes to Existing Documentation"
We have attempted to update the documentation to reflect the changes
listed in this document. If you find any we have missed, open an issue
at <https://github.com/Perl/perl5/issues>.
.PP
Additionally, the following selected changes have been made:
.PP
\fIperldata\fR
.IX Subsection "perldata"
.IP \(bu 4
Binary and octal floating\-point constants (such as \f(CW\*(C`012.345p\-2\*(C'\fR and
\&\f(CW\*(C`0b101.11p\-1\*(C'\fR) are now documented. This feature was first introduced in perl
5.22.0 together with hexadecimal floating\-point constants and had a few bug
fixes in perl 5.28.0, but it was never formally documented.
[GH #18664 <https://github.com/Perl/perl5/issues/18664>]
.SH Diagnostics
.IX Header "Diagnostics"
The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages. For the complete list of
diagnostic messages, see perldiag.
.SS "Changes to Existing Diagnostics"
.IX Subsection "Changes to Existing Diagnostics"
.IP \(bu 4
Use of uninitialized value%s
.Sp
Prevent this warning when accessing a function parameter in \f(CW@_\fR that
is an lvalue reference to an untied hash element where the key was
undefined.  This warning is still produced at the point of call.
[GH #22423 <https://github.com/Perl/perl5/issues/22423>]
.SH Testing
.IX Header "Testing"
Tests were added and changed to reflect the other additions and changes
in this release.
.SH "Internal Changes"
.IX Header "Internal Changes"
.IP \(bu 4
Three new API functions have been added to interact with the regexp global
match position stored in an SV.  These are \f(CWsv_regex_global_pos_get()\fR,
\&\f(CWsv_regex_global_pos_set()\fR and \f(CWsv_regex_global_pos_clear()\fR.  Using these
API functions avoids XS modules needing to know about or interact directly
with the way this position is currently stored, which involves the
\&\f(CW\*(C`PERL_MAGIC_regex_global\*(C'\fR magic type.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP \(bu 4
In regexes, the contents of \f(CW\*(C`\eg{...}\*(C'\fR backreferences are now properly
validated. Previously, \f(CW\*(C`\eg{1 FOO}\*(C'\fR was silently parsed as \f(CW\*(C`\eg{1}\*(C'\fR, ignoring
everything after the first number.
[GH #23050 <https://github.com/Perl/perl5/issues/23050>]
.IP \(bu 4
A run\-time pattern which contained a code block which recursed back to the
same bit of code which ran that match, could cause a crash.
[GH #22869 <https://github.com/Perl/perl5/issues/22869>]
.Sp
For example:
.Sp
.Vb 3
\&    my $r = qr/... (?{ foo() if ... }) .../;
\&    sub foo { $string =~ $r }
\&    foo()
.Ve
.SH Obituary
.IX Header "Obituary"
Andrew Main (ZEFRAM) passed away on March 10, 2025.
.PP
Zefram was a brilliant person, seemingly knowledgeable in everything
and happy to impart his knowledge and share his striking insights with a
gentle, technical demeanor that often failed to convey the genuine care
with which he communicated.
.PP
It would be impossible to overstate the impact that Zefram has had on
both the language and culture of Perl over the years. From his countless
contributions to the code\-base, to his often quirky but always distinctive
appearances at conferences and gatherings, his influence and memory are
sure to endure long into the future.
.PP
Zefram wished to have no designated memorial location in
meatspace. His designated memorial location in cyberspace is
<http://www.fysh.org/~zefram/personal/>.
.SH Acknowledgements
.IX Header "Acknowledgements"
Perl 5.41.10 represents approximately 4 weeks of development since Perl
5.41.9 and contains approximately 19,000 lines of changes across 340 files
from 14 authors.
.PP
Excluding auto\-generated files, documentation and release tools, there were
approximately 16,000 lines of changes to 270 .pm, .t, .c and .h files.
.PP
Perl continues to flourish into its fourth decade thanks to a vibrant
community of users and developers. The following people are known to have
contributed the improvements that became Perl 5.41.10:
.PP
brian d foy, Chris \*(AqBinGOs\*(Aq Williams, Dagfinn Ilmari Mannsåker, Daniel
Dragan, David Mitchell, Graham Knop, Karl Williamson, Leon Timmermans, Lukas
Mai, Paul Evans, Philippe Bruhat (BooK), Richard Leach, Tony Cook, Yves
Orton.
.PP
The list above is almost certainly incomplete as it is automatically
generated from version control history. In particular, it does not include
the names of the (very much appreciated) contributors who reported issues to
the Perl bug tracker.
.PP
Many of the changes included in this version originated in the CPAN modules
included in Perl\*(Aqs core. We\*(Aqre grateful to the entire CPAN community for
helping Perl to flourish.
.PP
For a more complete list of all of Perl\*(Aqs historical contributors, please
see the \fIAUTHORS\fR file in the Perl source distribution.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the perl bug database
at <https://github.com/Perl/perl5/issues>. There may also be information at
<https://www.perl.org/>, the Perl Home Page.
.PP
If you believe you have an unreported bug, please open an issue at
<https://github.com/Perl/perl5/issues>. Be sure to trim your bug down to a
tiny but sufficient test case.
.PP
If the bug you are reporting has security implications which make it
inappropriate to send to a public issue tracker, then see
"SECURITY VULNERABILITY CONTACT INFORMATION" in perlsec
for details of how to report the issue.
.SH "Give Thanks"
.IX Header "Give Thanks"
If you wish to thank the Perl 5 Porters for the work we had done in Perl 5,
you can do so by running the \f(CW\*(C`perlthanks\*(C'\fR program:
.PP
.Vb 1
\&    perlthanks
.Ve
.PP
This will send an email to the Perl 5 Porters list with your show of thanks.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details on
what changed.
.PP
The \fIINSTALL\fR file for how to build Perl.
.PP
The \fIREADME\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
