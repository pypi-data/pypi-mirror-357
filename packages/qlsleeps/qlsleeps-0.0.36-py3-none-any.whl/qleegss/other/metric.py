"""
计算睡眠变量
"""
import numpy as np
import pandas as pd


def replace_five_with_previous(nums):
    previous_non_five = None
    for i in range(len(nums)):
        if nums[i] == 5:
            if previous_non_five is not None:
                nums[i] = previous_non_five
        else:
            previous_non_five = nums[i]
    return nums


# def sl_waso_ar(hypno):
#     sl = hypno.size
#     gu_ = hypno.size
#     hypno_mask = hypno != 4
#     # 找连续10个epoch睡着的 10*30 = 300s= 5min
#     for i in range(hypno_mask.size):
#         if np.sum(hypno_mask[i:i+10]) == 10:
#             sl = i
#             break
#     # 从后找睡着的
#     hypno_mask = hypno_mask[::-1]
#     for j in range(hypno_mask.size):
#         if np.sum(hypno_mask[j:j+1]) == 1:
#             gu_ = hypno.size - j
#             break
#     # 睡与醒之间的清醒
#     sleep_hypno = hypno[sl:gu_]
#     sleep_hypno_mask = sleep_hypno == 4
#     waso = np.sum(sleep_hypno_mask)
#     # 清醒次数
#     if sleep_hypno_mask.size == 0:
#         ar = 0
#     else:
#         arr = sleep_hypno_mask
#         merged_arr = [arr[0]]
#         for i in range(1, len(arr)):
#             if arr[i] != arr[i - 1]:
#                 merged_arr.append(arr[i])
#         ar = np.sum(merged_arr)
#
#     return sl, waso, ar


def sl_waso_ar(hypno):
    sl = hypno.size
    waso = 0
    ar = 0
    for index, num in enumerate(hypno):
        if num in {0, 1, 2, 3}:
            sl = index
            break
    new_hypno = hypno[sl:] == 4
    waso = np.sum(new_hypno)
    diff = np.diff(new_hypno)
    ar = np.sum(diff)

    return sl, waso, ar


def sleep_metrics(eeg_path, hypno):
    # 替换5为前一个数字，用来将异常替换为其它状态
    # hypno = replace_five_with_previous(hypno)

    # 总记录时间
    trt = hypno.shape[0]
    # 总睡眠时间
    tst = sum(1 for num in hypno if num in [0, 1, 2, 3]) if np.sum(hypno) > 0 else 0
    # 睡眠效率
    se = np.sum((hypno != 4) & (hypno != 5)) / hypno.size
    se = round(se, 3)
    # 入睡后清醒时间， 入睡后清醒次数
    if tst > 0:
        sol, waso, ar = sl_waso_ar(hypno)
    else:
        sol, waso, ar = hypno.size, 0, 0

    n1 = np.sum(hypno == 2)
    n2 = np.sum(hypno == 1)
    n3 = np.sum(hypno == 0)
    rem = np.sum(hypno == 3)
    # save
    df = {
        "TRH(M)": [trt*30/60],
        "TST(M)": [tst*30/60],
        "SE(%)": [se*100],
        "SOL(M)": [sol*30/60],
        "WASO(M)": [waso*30/60],
        "AR": [ar],
        "Hypno": [hypno]
    }
    df = pd.DataFrame(df)
    save_path = eeg_path.replace('eeg.eeg', "analysis_results.xlsx")
    with pd.ExcelWriter(save_path) as writer:
        df.to_excel(writer, sheet_name='sleep variables')
    return trt, tst, se, sol, waso, ar, n1, n2, n3, rem


if __name__ == '__main__':

    hypno_ = np.array([4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,4,4,4,3,3,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,1,3,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,3,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,3,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,1,3,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,3,3,3,3,3,3,3,3,1,1,1,3,1,1,1,1,1,1,3,3,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5])
    print(hypno_.size)
    trt_, tst_, se_, sol_, waso_, ar_, n1_, n2_, n3_, rem_ = sleep_metrics('eeg.eeg', hypno_)
    print(trt_, tst_, se_, sol_, waso_, ar_, n1_, n2_, n3_, rem_)
