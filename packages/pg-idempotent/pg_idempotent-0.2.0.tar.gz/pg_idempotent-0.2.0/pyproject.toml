[build-system]  # https://docs.astral.sh/uv/concepts/projects/config/#build-systems
requires = ["hatchling>=1.27.0"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/pg_idempotent"]

[project]  # https://packaging.python.org/en/latest/specifications/pyproject-toml/
name = "pg-idempotent"
version = "0.2.0"
description = "Transform PostgreSQL migrations into idempotent versions that can be run multiple times without errors. Includes native Supabase integration."
readme = "README.md"
authors = [
  { name = "Kevin Hill", email = "kah.kevin.hill@gmail.com" },
]
license = { text = "MIT" }
requires-python = ">=3.10,<4.0"
keywords = ["postgresql", "migrations", "idempotent", "supabase", "sql"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
  "typer (>=0.15.1)",
  "rich (>=13.0)",
  "pglast (>=6.0)",
  "requests (>=2.31.0)",
]

[project.optional-dependencies]
# Advanced features for test generation and validation
advanced = [
  "aiohttp (>=3.9.0)",
  "fireworks-ai (>=0.16.0)",
  "openai>=1.0.0",
  "rustworkx (>=0.14.0)",
  "migra (>=3.0.0)",
  "sqlalchemy (>=2.0.0)",
]
# All optional dependencies
all = [
  "aiohttp (>=3.9.0)", 
  "fireworks-ai (>=0.16.0)",
  "openai>=1.0.0",
  "rustworkx (>=0.14.0)",
  "migra (>=3.0.0)",
  "sqlalchemy (>=2.0.0)",
]

[project.scripts]  # https://docs.astral.sh/uv/concepts/projects/config/#command-line-interfaces
pg-idempotent = "pg_idempotent.cli:app"

[project.urls]  # https://packaging.python.org/en/latest/specifications/well-known-project-urls/#well-known-labels
homepage = "https://github.com/kivo360/pg-idempotent"
source = "https://github.com/kivo360/pg-idempotent"
changelog = "https://github.com/kivo360/pg-idempotent/blob/main/CHANGELOG.md"
releasenotes = "https://github.com/kivo360/pg-idempotent/releases"
documentation = "https://github.com/kivo360/pg-idempotent"
issues = "https://github.com/kivo360/pg-idempotent/issues"

[dependency-groups]  # https://docs.astral.sh/uv/concepts/projects/dependencies/#development-dependencies
dev = [
  "commitizen (>=4.3.0)",
  "coverage[toml] (>=7.6.10)",
  "ipykernel (>=6.29.4)",
  "ipython (>=8.18.0)",
  "ipywidgets (>=8.1.2)",
  "mypy (>=1.14.1)",
  "pdoc (>=15.0.1)",
  "poethepoet (>=0.32.1)",
  "pre-commit (>=4.0.1)",
  "pytest (>=8.3.4)",
  "pytest-cov (>=4.0)",
  "pytest-mock (>=3.14.0)",
  "pytest-xdist (>=3.6.1)",
  "ruff (>=0.9.2)",
]

[tool.commitizen]  # https://commitizen-tools.github.io/commitizen/config/
name = "cz_conventional_commits"
bump_message = "bump: v$current_version â†’ v$new_version"
tag_format = "v$version"
version = "0.2.0"
update_changelog_on_bump = true
version_provider = "uv"
version_files = [
    "pyproject.toml:version",
    "src/pg_idempotent/__init__.py:__version__",
]

[tool.coverage.report]  # https://coverage.readthedocs.io/en/latest/config.html#report
precision = 2
show_missing = true
skip_covered = false

[tool.coverage.run]  # https://coverage.readthedocs.io/en/latest/config.html#run
source = ["src/pg_idempotent"]
branch = true
command_line = "--module pytest"
data_file = "reports/.coverage"

[tool.coverage.xml]  # https://coverage.readthedocs.io/en/latest/config.html#xml
output = "reports/coverage.xml"

[tool.mypy]  # https://mypy.readthedocs.io/en/latest/config_file.html
python_version = "3.10"
junit_xml = "reports/mypy.xml"
check_untyped_defs = true
ignore_missing_imports = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
# disallow_untyped_defs = true  # Too strict for development
# no_implicit_optional = true  # Can be annoying
# strict_equality = true        # Very pedantic
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
warn_unreachable = true

[tool.pytest.ini_options]  # https://docs.pytest.org/en/latest/reference/reference.html#ini-options-ref
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = [
    "--color=yes",
    "--doctest-modules",
    # "--exitfirst",     # Removed - stops on first failure (bad for development)
    # "--failed-first",  # Removed - can be confusing during development
    "--verbosity=2",
    "--cov=pg_idempotent",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--junitxml=reports/pytest.xml",
]
xfail_strict = true

[tool.ruff]  # https://docs.astral.sh/ruff/settings/
fix = true
line-length = 100
src = ["src", "tests"]
target-version = "py310"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "A",   # flake8-builtins
    "ASYNC", # flake8-async
    "C90", # mccabe
    "DTZ", # flake8-datetimez
    "FLY", # flynt
    "FURB", # refurb
    "LOG", # flake8-logging
    "N",   # pep8-naming
    "PERF", # perflint
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL",  # pylint
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "RUF", # ruff-specific
    "RSE", # flake8-raise
    "TID", # flake8-tidy-imports
    "YTT", # flake8-2020
]
ignore = [
    "E501", # line too long (handled by formatter)
    "B008", # do not perform function calls in argument defaults
    "D203", # one-blank-line-before-class
    "D213", # multi-line-docstring-summary-second-line
    "PGH002", # noqa-without-code
    "PGH003", # blanket-type-ignore
    "RET504", # unnecessary-assign
    "PLR0913", # too-many-arguments
    "PLR0912", # too-many-branches
    "PLR0915", # too-many-statements
]
# unfixable = ["F401", "F841"]  # Let ruff auto-fix unused imports/variables

[tool.ruff.lint.flake8-tidy-imports]
# ban-relative-imports = "all"  # Too restrictive - allow relative imports

[tool.ruff.lint.pycodestyle]
max-doc-length = 100

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.poe.executor]  # https://github.com/nat-n/poethepoet
type = "simple"

[tool.poe.tasks]

  [tool.poe.tasks.docs]
  help = "Generate this package's docs"
  cmd = """
    pdoc
      --docformat $docformat
      --output-directory $outputdirectory
      pg_idempotent
    """

    [[tool.poe.tasks.docs.args]]
    help = "The docstring style (default: numpy)"
    name = "docformat"
    options = ["--docformat"]
    default = "numpy"

    [[tool.poe.tasks.docs.args]]
    help = "The output directory (default: docs)"
    name = "outputdirectory"
    options = ["--output-directory"]
    default = "docs"

  [tool.poe.tasks.lint]
  help = "Lint this package"
  cmd = """
    pre-commit run
      --all-files
      --color always
    """

  [tool.poe.tasks.test]
  help = "Test this package"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage run"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage report"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage xml"
