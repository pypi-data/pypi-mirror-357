import os
import shlex
import subprocess
import time
from typing import Union, List, Dict, Optional

from logger import log
from .helpers.constants import *
from .helpers.exceptions import *
from .helpers.utils import determine_shell_and_command, CMDResult
from .pltform import is_windows

def stream(
        command: Union[str, List[str]],
        ignore_errors: bool = False,
        encoding: str = DEFAULT_ENCODING,
        shell: Optional[bool] = None,
) -> subprocess.Popen | None:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ stream —Ä–µ–∂–∏–º–µ.
    :param command: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    :param ignore_errors: –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.
    :param encoding: –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è stdout –∏ stderr.
    :param shell: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å shell=True –∏–ª–∏ shell=False.
    :return:
    """

    final_command, use_shell = determine_shell_and_command(command, force_shell=shell)
    command_repr = final_command if isinstance(final_command, str) else ' '.join(
        shlex.quote(str(arg)) for arg in final_command)

    log.trace(f"–ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É {command_repr} –≤ stream —Ä–µ–∂–∏–º–µ")

    try:
        process = subprocess.Popen(
            final_command,
            shell=use_shell,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            encoding=encoding,
            errors='replace',
        )
        return process
    except Exception as e:
        if ignore_errors:
            return None
        raise CommandError(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –≤ stream —Ä–µ–∂–∏–º–µ: {shell=}, {command_repr!r}.\nError: {e}") from e


def run(
        command: Union[str, List[str]],
        *,  # –î–µ–ª–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–º–∏
        cwd: Optional[str] = None,
        env: Optional[Dict[str, str]] = None,
        ignore_errors: bool = False,
        timeout: float = DEFAULT_TIMEOUT,
        retries: int = DEFAULT_RETRIES,
        retry_delay: float = 0.5,  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        encoding: str = DEFAULT_ENCODING,
        shell: Optional[bool] = None,
        disable_log: bool = False,
        capture_output: bool = True,
        verbose: bool=False
) -> CMDResult | subprocess.CompletedProcess:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ–±–æ–ª–æ—á–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

    –ë–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–∞.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å `shell=True`.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ.

    Args:
        command: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤).
        cwd: –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–µ–∫—É—â–∞—è.
        env: –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.
        ignore_errors: –ï—Å–ª–∏ True, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç CMDResult –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
                       –ï—Å–ª–∏ False (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é), –≤—ã–∑—ã–≤–∞–µ—Ç CommandError –ø—Ä–∏ –æ—à–∏–±–∫–µ.
        timeout: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
        retries: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏ (–∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ != 0).
                 –ó–Ω–∞—á–µ–Ω–∏–µ 1 –æ–∑–Ω–∞—á–∞–µ—Ç –æ–¥–Ω—É –ø–æ–ø—ã—Ç–∫—É –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤.
        retry_delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
        encoding: –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è stdout –∏ stderr.
        shell: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å shell=True –∏–ª–∏ shell=False.
               None (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) –≤–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.
        disable_log: –ï—Å–ª–∏ True, –æ—Ç–∫–ª—é—á–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.
        capture_output: –°–¥–µ–ª–∞–π False –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ micro filepath.
        verbose: –ï—Å–ª–∏ True, –≤–∫–ª—é—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.

    Returns:
        –û–±—ä–µ–∫—Ç CMDResult, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.

    """
    if not isinstance(command, (str, list)):
        raise TypeError("–ê—Ä–≥—É–º–µ–Ω—Ç 'command' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Å–ø–∏—Å–∫–æ–º —Å—Ç—Ä–æ–∫.")

    if retries < 1:
        retries = 1

    final_command, use_shell = determine_shell_and_command(command, force_shell=shell)
    command_repr = final_command if isinstance(final_command, str) else ' '.join(
        shlex.quote(str(arg)) for arg in final_command)



    process_env = None
    if env:
        process_env = os.environ.copy()
        process_env.update(env)

    for attempt in range(retries):
        attempt_num = attempt + 1
        if attempt > 0:
            if not disable_log:
                log.trace(f"üîÅ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –∫–æ–º–º–∞–Ω–¥—ã [{attempt_num}/{retries}]: {command_repr} ...")
            time.sleep(retry_delay)

        if verbose:
            log.trace(f"–í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ subprocess.run...")
            log.trace(f"–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {final_command=}")
            log.trace(f"–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ª–æ–≥–æ–≤:   {command_repr=}")
            log.trace(f"shell={use_shell}")
            log.trace(f"{encoding=}")
            log.trace(f"{timeout=}")
            log.trace(f"{process_env=}")
            log.trace(f"{cwd=}")

        try:
            t0 = time.time()
            process = subprocess.run(
                final_command,
                shell=use_shell,
                capture_output=capture_output,
                check=False,
                encoding=encoding,
                errors='backslashreplace',
                timeout=timeout,
                env=process_env,
                cwd=cwd,
            )
            elapsed = time.time() - t0

            if verbose:
                log.trace(f"subprocess.run –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
                log.trace(f"  returncode: {process.returncode}")
                log.trace(f"  stdout: {process.stdout}")
                log.trace(f"  stderr: {process.stderr}")
                log.trace(f"  –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.3f} —Å–µ–∫.")

            cmdresult = CMDResult(
                command=final_command,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–∞–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å
                stdout=process.stdout if process.stdout else None,
                stderr=process.stderr if process.stderr else None,
                return_code=process.returncode,
                duration=elapsed,
                process=process
            )

            if verbose or not disable_log:
                if cmdresult.success:
                    log.trace(f"‚öôÔ∏è {command_repr}, elapsed={elapsed:.2f}, output={cmdresult.output}")
                else:
                    log.trace(
                        f"üî•Ô∏è {command_repr}, elapsed={elapsed:.2f}, output={cmdresult.output}, status_code={cmdresult.return_code}")
            return cmdresult

        except Exception as e:
            if ignore_errors:
                return CMDResult(command=command_repr, stdout=None, stderr=str(e), return_code=-1, duration=-1)
            raise CommandError(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {shell=}, {command_repr!r}.\nError: {e}") from e
    raise CommandError(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {command_repr}")


def run_background(
        command: Union[str, List[str]],
        *,
        cwd: Optional[str] = None,
        env: Optional[Dict[str, str]] = None,
        shell: Optional[bool] = None,
        disable_log: bool = False
) -> subprocess.Popen:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç `subprocess.Popen` –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞.
    –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –≤—ã–≤–æ–¥–∞ (stdout, stderr) –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ /dev/null (–∏–ª–∏ NUL),
    —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±—É—Ñ–µ—Ä–æ–≤.

    Args:
        command: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —Å–ø–∏—Å–æ–∫).
        cwd: –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è.
        env: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
        shell: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ shell=True/False –∏–ª–∏ None –¥–ª—è –∞–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.
        disable_log: –ï—Å–ª–∏ True, –æ—Ç–∫–ª—é—á–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.

    Returns:
        –û–±—ä–µ–∫—Ç `subprocess.Popen`, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å.
        –° —ç—Ç–∏–º –æ–±—ä–µ–∫—Ç–æ–º –º–æ–∂–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, `process.wait()`, `process.terminate()`).

    Raises:
        CommandError: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ Popen).
        CommandNotFoundError: –ï—Å–ª–∏ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω.
        PermissionDeniedError: –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.
        TypeError: –ï—Å–ª–∏ `command` –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Å–ø–∏—Å–∫–æ–º.
    """
    if not isinstance(command, (str, list)):
        raise TypeError("–ê—Ä–≥—É–º–µ–Ω—Ç 'command' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Å–ø–∏—Å–∫–æ–º —Å—Ç—Ä–æ–∫.")

    final_command, use_shell = determine_shell_and_command(command, force_shell=shell)
    command_repr = final_command if isinstance(final_command, str) else ' '.join(
        shlex.quote(str(arg)) for arg in final_command)

    if not disable_log:
        log.trace(f"‚öôÔ∏è –≤ —Ñ–æ–Ω–µ: {command_repr} (shell={use_shell})")

    process_env = None
    if env:
        process_env = os.environ.copy()
        process_env.update(env)

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –≤—ã–≤–æ–¥
        devnull = open(os.devnull, 'w')

        process = subprocess.Popen(
            final_command,
            shell=use_shell,
            stdout=devnull,
            stderr=devnull,
            encoding=DEFAULT_ENCODING,  # –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –≤–∞–∂–Ω–∞ –¥–ª—è Popen, –¥–∞–∂–µ –µ—Å–ª–∏ –≤—ã–≤–æ–¥ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω
            errors='backslashreplace',
            env=process_env,
            cwd=cwd,
            close_fds=True if not is_windows() else False  # –ó–∞–∫—Ä—ã–≤–∞—Ç—å —Ñ–∞–π–ª–æ–≤—ã–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã (–∫—Ä–æ–º–µ 0,1,2) –Ω–∞ Unix
        )
        return process

    except Exception as e:
        if not disable_log:
            log.error(f"üî• –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å: {command_repr}", exc_info=True)
        raise CommandError(f"üî• –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å: {final_command} -> {e}") from e


def kill_process(name_pattern: str) -> CMDResult:
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —à–∞–±–ª–æ–Ω—É –∏–º–µ–Ω–∏, –≤ Windows –∏–ª–∏ Linux.

    Args:
        name_pattern: –ò–º—è –∏–ª–∏ —à–∞–±–ª–æ–Ω –∏–º–µ–Ω–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
                      –í Linux –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ —à–∞–±–ª–æ–Ω —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è `pkill -f`.

    """
    result = run(f'pkill -f "{name_pattern}"', ignore_errors=True, retries=1, disable_log=True)
    log.trace(f"Killed procces '{name_pattern}'")
    return result


def exists_process(name_pattern: str, kill: bool = False, ) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —à–∞–±–ª–æ–Ω—É –∏–º–µ–Ω–∏, –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –µ–≥–æ

    Args:
        name_pattern: –ò–º—è –∏–ª–∏ —à–∞–±–ª–æ–Ω –∏–º–µ–Ω–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞.
                     –í Linux –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å `pgrep -f` (–ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–π –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ).
        kill: –ï—Å–ª–∏ True, –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã (`kill -9`/`taskkill /F`).
                     –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, root).

    Returns:
        True, –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω
        False, –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–±–∏—Ç
    """
    cmd_check_list = ["pgrep", "-f", name_pattern]
    result_check = run(cmd_check_list, ignore_errors=True, retries=1, disable_log=True)
    if result_check.success:
        if result_check.stdout:
            process_found = True
            pids_to_kill = result_check.stdout.splitlines()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ PID
            log.trace(f"Found proccess: {', '.join(pids_to_kill)}")
        else:
            return False
    else:
        return False

    if process_found:
        if kill and pids_to_kill:
            result_kill = kill_process(name_pattern)
            if not result_kill.success:
                log.warning(
                    f"üî• kill -9 –¥–ª—è PID(–æ–≤) {', '.join(pids_to_kill)} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å code={result_kill.return_code}. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω. Stderr: {result_kill.stderr or 'N/A'}")
                return True
            else:
                return False
        else:
            return True
