#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã EvolutionInference LLM
"""

import os

from evolution_langchain import EvolutionInference


def demo_basic_usage():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è EvolutionInference LLM")
    print("=" * 50)

    # –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    # –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –∏—Ö –Ω–∞–ø—Ä—è–º—É—é –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ LLM
        llm = EvolutionInference(
            model="your-model-name",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
            key_id=os.getenv("EVOLUTION_KEY_ID", "your-key-id"),
            secret=os.getenv("EVOLUTION_SECRET", "your-secret"),
            base_url=os.getenv(
                "EVOLUTION_BASE_URL", "https://your-api-endpoint.com/v1"
            ),
            max_tokens=500,
            temperature=0.7,
            top_p=0.9,
        )

        print("‚úÖ LLM —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"üìù –ú–æ–¥–µ–ª—å: {llm.model}")
        print(f"üåê Base URL: {llm.base_url}")
        print(f"üå°Ô∏è  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {llm.temperature}")
        print(f"üéØ Max tokens: {llm.max_tokens}")
        print()

        # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        print("üí¨ –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:")
        prompt = "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏"
        print(f"–ó–∞–ø—Ä–æ—Å: {prompt}")

        # –ó–¥–µ—Å—å –±—ã –ø—Ä–æ–∏–∑–æ—à–µ–ª —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
        print("‚ö†Ô∏è  –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω—É–∂–Ω—ã –≤–∞–ª–∏–¥–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

        # –ü—Ä–∏–º–µ—Ä –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        print("\nüì¶ –¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:")
        prompts = [
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
            "–ö–∞–∫–∏–µ –≤–∏–¥—ã –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ ML —Å—É—â–µ—Å—Ç–≤—É—é—Ç?",
            "–ì–¥–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?",
        ]

        for i, prompt in enumerate(prompts, 1):
            print(f"{i}. {prompt}")

        print("\nüîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        config_params = llm._default_params
        for key, value in config_params.items():
            print(f"  {key}: {value}")

        print("\nüîí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏:")
        print("  ‚úì –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ")
        print("  ‚úì –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –ø–∞–º—è—Ç–∏")
        print("  ‚úì –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞ 30 —Å–µ–∫ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è")
        print("  ‚úì Thread-safe –æ–ø–µ—Ä–∞—Ü–∏–∏")
        print("  ‚úì –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")

    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã key_id, secret –∏ base_url")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


def demo_langchain_integration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å LangChain"""
    print("\nüîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å LangChain")
    print("=" * 50)

    try:
        from langchain.prompts import PromptTemplate

        # –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞
        template = """
        –¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ {topic}.
        –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å: {question}

        –û—Ç–≤–µ—Ç:
        """

        prompt = PromptTemplate(
            template=template, input_variables=["topic", "question"]
        )

        print("‚úÖ –®–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ —Å–æ–∑–¥–∞–Ω")
        print(f"üìù –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {prompt.input_variables}")

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
        print("‚úÖ –ì–æ—Ç–æ–≤–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è LLMChain")
        print("üí° –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        print("   chain = LLMChain(llm=evolution_llm, prompt=prompt)")
        print(
            "   result = chain.run(topic='ML', "
            "question='–ß—Ç–æ —Ç–∞–∫–æ–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫?')"
        )

    except ImportError:
        print("‚ö†Ô∏è  LangChain –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install langchain")


def demo_error_handling():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("\nüõ°Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
    print("=" * 50)

    print("1. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    try:
        EvolutionInference(base_url="https://test.example.com/v1")
    except ValueError as e:
        print(f"   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ: {e}")

    print("\n2. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ base_url:")
    try:
        EvolutionInference(key_id="test_key", secret="test_secret")
    except ValueError as e:
        print(f"   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ: {e}")

    print("\n3. –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print("   ‚úÖ RuntimeError –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")

    print("\n4. –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏:")
    print("   ‚úÖ RuntimeError –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å–µ—Ç–∏")

    print("\n5. –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API:")
    print("   ‚úÖ ValueError –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")


if __name__ == "__main__":
    demo_basic_usage()
    demo_langchain_integration()
    demo_error_handling()

    print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üìö –°–º. README.md –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    print("üß™ –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'pytest' –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤")
