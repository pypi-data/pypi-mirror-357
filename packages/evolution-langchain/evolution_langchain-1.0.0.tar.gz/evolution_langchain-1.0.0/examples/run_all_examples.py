#!/usr/bin/env python3
"""
Evolution LangChain - –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
"""

import os
import sys
import time
import subprocess
from enum import Enum
from typing import Dict, List, Tuple
from pathlib import Path
from dataclasses import dataclass

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
try:
    from dotenv import load_dotenv  # type: ignore

    env_file = Path(__file__).parent.parent / ".env"
    if env_file.exists():
        load_dotenv(env_file)
        print(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {env_file}")
    else:
        print(
            "‚ÑπÔ∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
        )
except ImportError:
    print(
        "‚ö†Ô∏è python-dotenv –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
    )

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir.parent))


class ExampleStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤"""

    SUCCESS = "‚úÖ"
    FAILED = "‚ùå"
    SKIPPED = "‚è≠Ô∏è"
    TIMEOUT = "‚è±Ô∏è"
    ERROR = "üí•"


@dataclass
class ExampleResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞"""

    name: str
    description: str
    status: ExampleStatus
    duration: float
    output: str
    error: str = ""
    return_code: int = 0


class ExampleRunner:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞–º–∏"""

    def __init__(self):
        self.examples_dir = Path(__file__).parent
        self.results: List[ExampleResult] = []
        self.start_time = time.time()

    def check_environment(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        required_vars = [
            "EVOLUTION_KEY_ID",
            "EVOLUTION_SECRET",
            "EVOLUTION_BASE_URL",
        ]

        env_status: Dict[str, bool] = {}
        for var in required_vars:
            env_status[var] = bool(os.getenv(var))

        return env_status

    def print_header(self):
        """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        print("üöÄ Evolution LangChain - –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤")
        print("=" * 80)
        print(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤: {self.examples_dir}")
        print()

    def print_environment_info(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        env_status = self.check_environment()
        missing_vars = [
            var for var, present in env_status.items() if not present
        ]

        print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for var, present in env_status.items():
            status = "‚úÖ" if present else "‚ùå"
            print(f"   {status} {var}")

        if missing_vars:
            print(
                f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}"
            )
            print("üí° –ü—Ä–∏–º–µ—Ä—ã –±—É–¥—É—Ç –∑–∞–ø—É—â–µ–Ω—ã –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
            print("–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:")
            print("   export EVOLUTION_KEY_ID='your_key_id'")
            print("   export EVOLUTION_SECRET='your_secret'")
            print(
                "   export EVOLUTION_BASE_URL='https://your-endpoint.cloud.ru/v1'"
            )
        else:
            print("\n‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            print("–ü—Ä–∏–º–µ—Ä—ã –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º API")

        print()

    def get_examples(self) -> List[Tuple[str, str]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞"""
        return [
            ("demo.py", "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"),
            ("example_usage.py", "–ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API"),
            ("streaming_examples.py", "–ü—Ä–∏–º–µ—Ä—ã —Å—Ç—Ä–∏–º–∏–Ω–≥–∞"),
        ]

    def run_example(self, script_name: str, description: str) -> ExampleResult:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä"""
        print(f"\n{'=' * 80}")
        print(f"üîß {description}")
        print(f"üìÑ –§–∞–π–ª: {script_name}")
        print("=" * 80)

        script_path = self.examples_dir / script_name
        if not script_path.exists():
            return ExampleResult(
                name=script_name,
                description=description,
                status=ExampleStatus.ERROR,
                duration=0.0,
                output="",
                error=f"–§–∞–π–ª {script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                return_code=1,
            )

        start_time = time.time()
        output = ""
        error_output = ""
        return_code = 0

        try:
            # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞
            result = subprocess.run(
                [sys.executable, str(script_path)],
                capture_output=True,
                text=True,
                timeout=60,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 60 —Å–µ–∫—É–Ω–¥
                env=os.environ.copy(),
            )

            output = result.stdout
            error_output = result.stderr
            return_code = result.returncode

            if output:
                print(output)

            if error_output:
                print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è/–æ—à–∏–±–∫–∏:\n{error_output}")

            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            duration = time.time() - start_time

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ API –æ—à–∏–±–∫–∏
            has_api_errors = any(
                error_pattern in output
                for error_pattern in [
                    "Error code: 404",
                    "Error code: 401",
                    "Error code: 403",
                    "Error code: 500",
                    "ConnectionError",
                    "TimeoutError",
                ]
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (—ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ)
            has_env_issues = any(
                env_pattern in output
                for env_pattern in [
                    "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è",
                    "your_key_id",
                    "your_secret",
                    "key_id –∏ secret –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã",
                ]
            )

            if return_code == 0:
                if has_api_errors and not has_env_issues:
                    status = ExampleStatus.FAILED
                    error_msg = "API –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏"
                else:
                    status = ExampleStatus.SUCCESS
                    error_msg = ""
            else:
                status = ExampleStatus.FAILED
                error_msg = f"–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_code}"

        except subprocess.TimeoutExpired:
            duration = time.time() - start_time
            status = ExampleStatus.TIMEOUT
            error_msg = "–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ —Ç–∞–π–º–∞—É—Ç—É"
            print(f"‚è±Ô∏è {script_name} –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É")

        except Exception as e:
            duration = time.time() - start_time
            status = ExampleStatus.ERROR
            error_msg = str(e)
            print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ {script_name}: {e}")

        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å
        status_emoji = status.value
        print(f"\n{status_emoji} {script_name} - {status.name}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫")

        return ExampleResult(
            name=script_name,
            description=description,
            status=status,
            duration=duration,
            output=output,
            error=error_msg,
            return_code=return_code,
        )

    def run_all_examples(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã"""
        self.print_header()
        self.print_environment_info()

        examples = self.get_examples()
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞: {len(examples)}")
        print()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–∏–º–µ—Ä
        for script_name, description in examples:
            result = self.run_example(script_name, description)
            self.results.append(result)

        return self.print_summary()

    def print_summary(self) -> bool:
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É"""
        total_time = time.time() - self.start_time

        print(f"\n{'=' * 80}")
        print("üìä –ò–¢–û–ì–ò –í–´–ü–û–õ–ù–ï–ù–ò–Ø")
        print("=" * 80)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_counts: Dict[ExampleStatus, int] = {}
        for status in ExampleStatus:
            status_counts[status] = len(
                [r for r in self.results if r.status == status]
            )

        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {status_counts.get(ExampleStatus.SUCCESS, 0)}")
        print(f"‚ùå –° –æ—à–∏–±–∫–∞–º–∏: {status_counts.get(ExampleStatus.FAILED, 0)}")
        print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {status_counts.get(ExampleStatus.SKIPPED, 0)}")
        print(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç: {status_counts.get(ExampleStatus.TIMEOUT, 0)}")
        print(
            f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏: {status_counts.get(ExampleStatus.ERROR, 0)}"
        )
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫")

        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–∏–º–µ—Ä—É
        print("\nüìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        for result in self.results:
            status_emoji = result.status.value
            duration_str = f"{result.duration:.2f}—Å"
            print(
                f"   {status_emoji} {result.name} ({duration_str}) - {result.description}"
            )
            if result.error:
                print(f"      üí¨ {result.error}")

        # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        successful: int = status_counts.get(ExampleStatus.SUCCESS, 0)
        total = len(self.results)

        print(
            f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {successful}/{total} –ø—Ä–∏–º–µ—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
        )

        if successful == total:
            print("üéâ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            print("\nüí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
            print("   üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: docs/")
            print("   üß™ –¢–µ—Å—Ç—ã: make test")
            print("   üîß –õ–∏–Ω—Ç–∏–Ω–≥: make lint")
            return True
        else:
            print(f"‚ö†Ô∏è {total - successful} –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
            print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("   üîë –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            print("   üåê –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API")
            print("   üìö –°–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            return False


def main() -> int:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    runner = ExampleRunner()
    success = runner.run_all_examples()
    return 0 if success else 1


if __name__ == "__main__":
    sys.exit(main())
